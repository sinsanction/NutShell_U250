;buildInfoPackage: chisel3, version: 3.3.2, scalaVersion: 2.11.12, sbtVersion: 1.3.10
circuit Top : 
  module SRAMTemplate : 
    input clock : Clock
    input reset : Reset
    output io : {flip r : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<9>}}, flip resp : {data : {tag : UInt<28>, _type : UInt<2>, target : UInt<39>, brIdx : UInt<3>, valid : UInt<1>}[1]}}, flip w : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<9>, data : {tag : UInt<28>, _type : UInt<2>, target : UInt<39>, brIdx : UInt<3>, valid : UInt<1>}}}}}
    
    smem array : UInt<73>[1][512], undefined @[SRAMTemplate.scala 76:26]
    wire resetState : UInt<1>
    resetState <= UInt<1>("h00")
    wire resetSet : UInt
    resetSet <= UInt<1>("h00")
    reg _T : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[SRAMTemplate.scala 80:30]
    reg _T_1 : UInt<9>, clock with : (reset => (reset, UInt<9>("h00"))) @[Counter.scala 29:33]
    wire _T_2 : UInt<1>
    _T_2 <= UInt<1>("h00")
    when _T : @[Counter.scala 67:17]
      node _T_3 = eq(_T_1, UInt<9>("h01ff")) @[Counter.scala 38:24]
      node _T_4 = add(_T_1, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_5 = tail(_T_4, 1) @[Counter.scala 39:22]
      _T_1 <= _T_5 @[Counter.scala 39:13]
      _T_2 <= _T_3 @[Counter.scala 67:24]
      skip @[Counter.scala 67:17]
    when _T_2 : @[SRAMTemplate.scala 82:24]
      _T <= UInt<1>("h00") @[SRAMTemplate.scala 82:38]
      skip @[SRAMTemplate.scala 82:24]
    resetState <= _T @[SRAMTemplate.scala 84:16]
    resetSet <= _T_1 @[SRAMTemplate.scala 85:14]
    node wen = or(io.w.req.valid, resetState) @[SRAMTemplate.scala 88:52]
    node _T_6 = eq(wen, UInt<1>("h00")) @[SRAMTemplate.scala 89:41]
    node realRen = and(io.r.req.valid, _T_6) @[SRAMTemplate.scala 89:38]
    node setIdx = mux(resetState, resetSet, io.w.req.bits.setIdx) @[SRAMTemplate.scala 91:19]
    wire _T_7 : UInt<73> @[SRAMTemplate.scala 92:47]
    _T_7 <= UInt<1>("h00") @[SRAMTemplate.scala 92:47]
    node _T_8 = cat(io.w.req.bits.data.brIdx, io.w.req.bits.data.valid) @[SRAMTemplate.scala 92:78]
    node _T_9 = cat(io.w.req.bits.data.tag, io.w.req.bits.data._type) @[SRAMTemplate.scala 92:78]
    node _T_10 = cat(_T_9, io.w.req.bits.data.target) @[SRAMTemplate.scala 92:78]
    node _T_11 = cat(_T_10, _T_8) @[SRAMTemplate.scala 92:78]
    node wdataword = mux(resetState, _T_7, _T_11) @[SRAMTemplate.scala 92:22]
    node waymask = mux(resetState, UInt<1>("h01"), UInt<1>("h01")) @[SRAMTemplate.scala 93:20]
    wire wdata : UInt<73>[1] @[SRAMTemplate.scala 94:22]
    wdata[0] <= wdataword @[SRAMTemplate.scala 94:22]
    when wen : @[SRAMTemplate.scala 95:14]
      node _T_12 = bits(waymask, 0, 0) @[SRAMTemplate.scala 95:51]
      node _T_13 = or(setIdx, UInt<9>("h00"))
      node _T_14 = bits(_T_13, 8, 0)
      write mport _T_15 = array[_T_14], clock
      when _T_12 :
        _T_15[0] <= wdata[0]
        skip
      skip @[SRAMTemplate.scala 95:14]
    wire _T_16 : UInt @[Hold.scala 28:87]
    _T_16 is invalid @[Hold.scala 28:87]
    when realRen : @[Hold.scala 28:87]
      _T_16 <= io.r.req.bits.setIdx @[Hold.scala 28:87]
      node _T_17 = or(_T_16, UInt<9>("h00")) @[Hold.scala 28:87]
      node _T_18 = bits(_T_17, 8, 0) @[Hold.scala 28:87]
      read mport _T_19 = array[_T_18], clock @[Hold.scala 28:87]
      skip @[Hold.scala 28:87]
    reg _T_20 : UInt<1>, clock @[Hold.scala 28:106]
    _T_20 <= realRen @[Hold.scala 28:106]
    wire _T_21 : UInt<73>[1] @[Hold.scala 23:81]
    _T_21[0] <= UInt<73>("h00") @[Hold.scala 23:81]
    reg _T_22 : UInt<73>[1], clock with : (reset => (reset, _T_21)) @[Reg.scala 27:20]
    when _T_20 : @[Reg.scala 28:19]
      _T_22[0] <= _T_19[0] @[Reg.scala 28:23]
      skip @[Reg.scala 28:19]
    node _T_23 = mux(_T_20, _T_19, _T_22) @[Hold.scala 23:48]
    wire rdata_0 : {tag : UInt<28>, _type : UInt<2>, target : UInt<39>, brIdx : UInt<3>, valid : UInt<1>} @[SRAMTemplate.scala 98:78]
    wire _T_24 : UInt<73>
    _T_24 <= _T_23[0]
    node _T_25 = bits(_T_24, 0, 0) @[SRAMTemplate.scala 98:78]
    rdata_0.valid <= _T_25 @[SRAMTemplate.scala 98:78]
    node _T_26 = bits(_T_24, 3, 1) @[SRAMTemplate.scala 98:78]
    rdata_0.brIdx <= _T_26 @[SRAMTemplate.scala 98:78]
    node _T_27 = bits(_T_24, 42, 4) @[SRAMTemplate.scala 98:78]
    rdata_0.target <= _T_27 @[SRAMTemplate.scala 98:78]
    node _T_28 = bits(_T_24, 44, 43) @[SRAMTemplate.scala 98:78]
    rdata_0._type <= _T_28 @[SRAMTemplate.scala 98:78]
    node _T_29 = bits(_T_24, 72, 45) @[SRAMTemplate.scala 98:78]
    rdata_0.tag <= _T_29 @[SRAMTemplate.scala 98:78]
    wire _T_30 : {tag : UInt<28>, _type : UInt<2>, target : UInt<39>, brIdx : UInt<3>, valid : UInt<1>}[1] @[SRAMTemplate.scala 99:28]
    _T_30[0].valid <= rdata_0.valid @[SRAMTemplate.scala 99:28]
    _T_30[0].brIdx <= rdata_0.brIdx @[SRAMTemplate.scala 99:28]
    _T_30[0].target <= rdata_0.target @[SRAMTemplate.scala 99:28]
    _T_30[0]._type <= rdata_0._type @[SRAMTemplate.scala 99:28]
    _T_30[0].tag <= rdata_0.tag @[SRAMTemplate.scala 99:28]
    io.r.resp.data[0].valid <= _T_30[0].valid @[SRAMTemplate.scala 99:18]
    io.r.resp.data[0].brIdx <= _T_30[0].brIdx @[SRAMTemplate.scala 99:18]
    io.r.resp.data[0].target <= _T_30[0].target @[SRAMTemplate.scala 99:18]
    io.r.resp.data[0]._type <= _T_30[0]._type @[SRAMTemplate.scala 99:18]
    io.r.resp.data[0].tag <= _T_30[0].tag @[SRAMTemplate.scala 99:18]
    node _T_31 = eq(resetState, UInt<1>("h00")) @[SRAMTemplate.scala 101:21]
    node _T_32 = eq(wen, UInt<1>("h00")) @[SRAMTemplate.scala 101:53]
    node _T_33 = and(_T_31, _T_32) @[SRAMTemplate.scala 101:33]
    io.r.req.ready <= _T_33 @[SRAMTemplate.scala 101:18]
    io.w.req.ready <= UInt<1>("h01") @[SRAMTemplate.scala 102:18]
    
  module BPU_inorder : 
    input clock : Clock
    input reset : Reset
    output io : {in : {flip pc : {valid : UInt<1>, bits : UInt<39>}}, out : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, flip flush : UInt<1>, brIdx : UInt<3>, crosslineJump : UInt<1>}
    
    reg flush : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[StopWatch.scala 24:20]
    when io.in.pc.valid : @[StopWatch.scala 26:19]
      flush <= UInt<1>("h00") @[StopWatch.scala 26:23]
      skip @[StopWatch.scala 26:19]
    when io.flush : @[StopWatch.scala 27:20]
      flush <= UInt<1>("h01") @[StopWatch.scala 27:24]
      skip @[StopWatch.scala 27:20]
    inst btb of SRAMTemplate @[BPU.scala 302:19]
    btb.clock <= clock
    btb.reset <= reset
    wire flushBTB : UInt<1>
    flushBTB <= UInt<1>("h00")
    wire flushTLB : UInt<1>
    flushTLB <= UInt<1>("h00")
    node _T = asUInt(reset) @[BPU.scala 308:22]
    node _T_1 = or(flushBTB, flushTLB) @[BPU.scala 308:42]
    node _T_2 = or(_T, _T_1) @[BPU.scala 308:29]
    btb.reset <= _T_2 @[BPU.scala 308:13]
    node _T_3 = asUInt(reset) @[BPU.scala 309:15]
    node _T_4 = or(flushBTB, flushTLB) @[BPU.scala 309:35]
    node _T_5 = or(_T_3, _T_4) @[BPU.scala 309:22]
    reg _T_6 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_7 = add(_T_6, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_8 = tail(_T_7, 1) @[GTimer.scala 25:12]
    _T_6 <= _T_8 @[GTimer.scala 25:7]
    wire _T_9 : UInt<1>
    _T_9 <= UInt<1>("h00")
    node _T_10 = and(_T_5, _T_9) @[Debug.scala 55:16]
    when _T_10 : @[Debug.scala 55:31]
      node _T_11 = asUInt(reset) @[Debug.scala 56:24]
      node _T_12 = eq(_T_11, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_12 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] BPU_inorder: ", _T_6) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_13 = asUInt(reset) @[Debug.scala 57:13]
      node _T_14 = eq(_T_13, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_14 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[BPU-RESET] bpu-reset flushBTB:%d flushTLB:%d\n", flushBTB, flushTLB) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    btb.io.r.req.valid <= io.in.pc.valid @[BPU.scala 311:22]
    wire _T_15 : UInt<39> @[BPU.scala 35:37]
    _T_15 <= io.in.pc.bits @[BPU.scala 35:37]
    wire _T_16 : {tag : UInt<28>, idx : UInt<9>, pad : UInt<2>} @[BPU.scala 35:65]
    wire _T_17 : UInt<39>
    _T_17 <= _T_15
    node _T_18 = bits(_T_17, 1, 0) @[BPU.scala 35:65]
    _T_16.pad <= _T_18 @[BPU.scala 35:65]
    node _T_19 = bits(_T_17, 10, 2) @[BPU.scala 35:65]
    _T_16.idx <= _T_19 @[BPU.scala 35:65]
    node _T_20 = bits(_T_17, 38, 11) @[BPU.scala 35:65]
    _T_16.tag <= _T_20 @[BPU.scala 35:65]
    btb.io.r.req.bits.setIdx <= _T_16.idx @[BPU.scala 312:28]
    wire btbRead : {tag : UInt<28>, _type : UInt<2>, target : UInt<39>, brIdx : UInt<3>, valid : UInt<1>} @[BPU.scala 315:21]
    btbRead.valid <= btb.io.r.resp.data[0].valid @[BPU.scala 316:11]
    btbRead.brIdx <= btb.io.r.resp.data[0].brIdx @[BPU.scala 316:11]
    btbRead.target <= btb.io.r.resp.data[0].target @[BPU.scala 316:11]
    btbRead._type <= btb.io.r.resp.data[0]._type @[BPU.scala 316:11]
    btbRead.tag <= btb.io.r.resp.data[0].tag @[BPU.scala 316:11]
    reg pcLatch : UInt<39>, clock @[Reg.scala 15:16]
    when io.in.pc.valid : @[Reg.scala 16:19]
      pcLatch <= io.in.pc.bits @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    wire _T_21 : UInt<39> @[BPU.scala 35:37]
    _T_21 <= pcLatch @[BPU.scala 35:37]
    wire _T_22 : {tag : UInt<28>, idx : UInt<9>, pad : UInt<2>} @[BPU.scala 35:65]
    wire _T_23 : UInt<39>
    _T_23 <= _T_21
    node _T_24 = bits(_T_23, 1, 0) @[BPU.scala 35:65]
    _T_22.pad <= _T_24 @[BPU.scala 35:65]
    node _T_25 = bits(_T_23, 10, 2) @[BPU.scala 35:65]
    _T_22.idx <= _T_25 @[BPU.scala 35:65]
    node _T_26 = bits(_T_23, 38, 11) @[BPU.scala 35:65]
    _T_22.tag <= _T_26 @[BPU.scala 35:65]
    node _T_27 = eq(btbRead.tag, _T_22.tag) @[BPU.scala 320:45]
    node _T_28 = and(btbRead.valid, _T_27) @[BPU.scala 320:30]
    node _T_29 = eq(flush, UInt<1>("h00")) @[BPU.scala 320:76]
    node _T_30 = and(_T_28, _T_29) @[BPU.scala 320:73]
    node _T_31 = and(btb.io.r.req.ready, btb.io.r.req.valid) @[Decoupled.scala 40:37]
    reg _T_32 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[BPU.scala 320:93]
    _T_32 <= _T_31 @[BPU.scala 320:93]
    node _T_33 = and(_T_30, _T_32) @[BPU.scala 320:83]
    node _T_34 = bits(pcLatch, 1, 1) @[BPU.scala 320:143]
    node _T_35 = bits(btbRead.brIdx, 0, 0) @[BPU.scala 320:163]
    node _T_36 = and(_T_34, _T_35) @[BPU.scala 320:147]
    node _T_37 = eq(_T_36, UInt<1>("h00")) @[BPU.scala 320:134]
    node btbHit = and(_T_33, _T_37) @[BPU.scala 320:131]
    node _T_38 = bits(btbRead.brIdx, 2, 2) @[BPU.scala 327:36]
    node crosslineJump = and(_T_38, btbHit) @[BPU.scala 327:40]
    io.crosslineJump <= crosslineJump @[BPU.scala 328:20]
    reg _T_39 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_40 = add(_T_39, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_41 = tail(_T_40, 1) @[GTimer.scala 25:12]
    _T_39 <= _T_41 @[GTimer.scala 25:7]
    wire _T_42 : UInt<39> @[BPU.scala 35:37]
    _T_42 <= pcLatch @[BPU.scala 35:37]
    wire _T_43 : {tag : UInt<28>, idx : UInt<9>, pad : UInt<2>} @[BPU.scala 35:65]
    wire _T_44 : UInt<39>
    _T_44 <= _T_42
    node _T_45 = bits(_T_44, 1, 0) @[BPU.scala 35:65]
    _T_43.pad <= _T_45 @[BPU.scala 35:65]
    node _T_46 = bits(_T_44, 10, 2) @[BPU.scala 35:65]
    _T_43.idx <= _T_46 @[BPU.scala 35:65]
    node _T_47 = bits(_T_44, 38, 11) @[BPU.scala 35:65]
    _T_43.tag <= _T_47 @[BPU.scala 35:65]
    wire _T_48 : UInt<39> @[BPU.scala 35:37]
    _T_48 <= pcLatch @[BPU.scala 35:37]
    wire _T_49 : {tag : UInt<28>, idx : UInt<9>, pad : UInt<2>} @[BPU.scala 35:65]
    wire _T_50 : UInt<39>
    _T_50 <= _T_48
    node _T_51 = bits(_T_50, 1, 0) @[BPU.scala 35:65]
    _T_49.pad <= _T_51 @[BPU.scala 35:65]
    node _T_52 = bits(_T_50, 10, 2) @[BPU.scala 35:65]
    _T_49.idx <= _T_52 @[BPU.scala 35:65]
    node _T_53 = bits(_T_50, 38, 11) @[BPU.scala 35:65]
    _T_49.tag <= _T_53 @[BPU.scala 35:65]
    reg _T_54 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_55 = add(_T_54, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_56 = tail(_T_55, 1) @[GTimer.scala 25:12]
    _T_54 <= _T_56 @[GTimer.scala 25:7]
    wire _T_57 : UInt<1>
    _T_57 <= UInt<1>("h00")
    node _T_58 = and(btbHit, _T_57) @[Debug.scala 55:16]
    when _T_58 : @[Debug.scala 55:31]
      node _T_59 = asUInt(reset) @[Debug.scala 56:24]
      node _T_60 = eq(_T_59, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_60 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] BPU_inorder: ", _T_54) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_61 = asUInt(reset) @[Debug.scala 57:13]
      node _T_62 = eq(_T_61, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_62 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[BTBHT1] %d pc=%x tag=%x,%x index=%x bridx=%x tgt=%x,%x flush %x type:%x\n", _T_39, pcLatch, btbRead.tag, _T_43.tag, _T_49.idx, btbRead.brIdx, btbRead.target, io.out.target, flush, btbRead._type) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_63 = bits(io.out.valid, 0, 0) @[Bitwise.scala 72:15]
    node _T_64 = mux(_T_63, UInt<2>("h03"), UInt<2>("h00")) @[Bitwise.scala 72:12]
    node _T_65 = cat(crosslineJump, _T_64) @[Cat.scala 29:58]
    reg _T_66 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_67 = add(_T_66, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_68 = tail(_T_67, 1) @[GTimer.scala 25:12]
    _T_66 <= _T_68 @[GTimer.scala 25:7]
    wire _T_69 : UInt<1>
    _T_69 <= UInt<1>("h00")
    node _T_70 = and(btbHit, _T_69) @[Debug.scala 55:16]
    when _T_70 : @[Debug.scala 55:31]
      node _T_71 = asUInt(reset) @[Debug.scala 56:24]
      node _T_72 = eq(_T_71, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_72 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] BPU_inorder: ", _T_66) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_73 = asUInt(reset) @[Debug.scala 57:13]
      node _T_74 = eq(_T_73, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_74 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[BTBHT2] btbRead.brIdx %x mask %x\n", btbRead.brIdx, _T_65) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    cmem pht : UInt<2>[512] @[BPU.scala 336:16]
    wire _T_75 : UInt<39> @[BPU.scala 35:37]
    _T_75 <= io.in.pc.bits @[BPU.scala 35:37]
    wire _T_76 : {tag : UInt<28>, idx : UInt<9>, pad : UInt<2>} @[BPU.scala 35:65]
    wire _T_77 : UInt<39>
    _T_77 <= _T_75
    node _T_78 = bits(_T_77, 1, 0) @[BPU.scala 35:65]
    _T_76.pad <= _T_78 @[BPU.scala 35:65]
    node _T_79 = bits(_T_77, 10, 2) @[BPU.scala 35:65]
    _T_76.idx <= _T_79 @[BPU.scala 35:65]
    node _T_80 = bits(_T_77, 38, 11) @[BPU.scala 35:65]
    _T_76.tag <= _T_80 @[BPU.scala 35:65]
    read mport _T_81 = pht[_T_76.idx], clock @[BPU.scala 337:36]
    node _T_82 = bits(_T_81, 1, 1) @[BPU.scala 337:67]
    reg phtTaken : UInt<1>, clock @[Reg.scala 15:16]
    when io.in.pc.valid : @[Reg.scala 16:19]
      phtTaken <= _T_82 @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    cmem ras : UInt<39>[16] @[BPU.scala 342:16]
    reg value : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[Counter.scala 29:33]
    read mport _T_83 = ras[value], clock @[BPU.scala 345:37]
    reg rasTarget : UInt<39>, clock @[Reg.scala 15:16]
    when io.in.pc.valid : @[Reg.scala 16:19]
      rasTarget <= _T_83 @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    wire _T_84 : {valid : UInt<1>, pc : UInt<39>, isMissPredict : UInt<1>, actualTarget : UInt<39>, actualTaken : UInt<1>, fuOpType : UInt<7>, btbType : UInt<2>, isRVC : UInt<1>} @[BPU.scala 349:34]
    _T_84.isRVC <= UInt<1>("h00") @[BPU.scala 349:34]
    _T_84.btbType <= UInt<2>("h00") @[BPU.scala 349:34]
    _T_84.fuOpType <= UInt<7>("h00") @[BPU.scala 349:34]
    _T_84.actualTaken <= UInt<1>("h00") @[BPU.scala 349:34]
    _T_84.actualTarget <= UInt<39>("h00") @[BPU.scala 349:34]
    _T_84.isMissPredict <= UInt<1>("h00") @[BPU.scala 349:34]
    _T_84.pc <= UInt<39>("h00") @[BPU.scala 349:34]
    _T_84.valid <= UInt<1>("h00") @[BPU.scala 349:34]
    wire req : {valid : UInt<1>, pc : UInt<39>, isMissPredict : UInt<1>, actualTarget : UInt<39>, actualTaken : UInt<1>, fuOpType : UInt<7>, btbType : UInt<2>, isRVC : UInt<1>}
    req.isRVC <= _T_84.isRVC
    req.btbType <= _T_84.btbType
    req.fuOpType <= _T_84.fuOpType
    req.actualTaken <= _T_84.actualTaken
    req.actualTarget <= _T_84.actualTarget
    req.isMissPredict <= _T_84.isMissPredict
    req.pc <= _T_84.pc
    req.valid <= _T_84.valid
    wire _T_85 : {tag : UInt<28>, _type : UInt<2>, target : UInt<39>, brIdx : UInt<3>, valid : UInt<1>} @[BPU.scala 350:39]
    _T_85.valid <= UInt<1>("h00") @[BPU.scala 350:39]
    _T_85.brIdx <= UInt<3>("h00") @[BPU.scala 350:39]
    _T_85.target <= UInt<39>("h00") @[BPU.scala 350:39]
    _T_85._type <= UInt<2>("h00") @[BPU.scala 350:39]
    _T_85.tag <= UInt<28>("h00") @[BPU.scala 350:39]
    wire btbWrite : {tag : UInt<28>, _type : UInt<2>, target : UInt<39>, brIdx : UInt<3>, valid : UInt<1>}
    btbWrite.valid <= _T_85.valid
    btbWrite.brIdx <= _T_85.brIdx
    btbWrite.target <= _T_85.target
    btbWrite._type <= _T_85._type
    btbWrite.tag <= _T_85.tag
    wire _T_86 : UInt<39> @[BPU.scala 35:37]
    _T_86 <= req.pc @[BPU.scala 35:37]
    wire _T_87 : {tag : UInt<28>, idx : UInt<9>, pad : UInt<2>} @[BPU.scala 35:65]
    wire _T_88 : UInt<39>
    _T_88 <= _T_86
    node _T_89 = bits(_T_88, 1, 0) @[BPU.scala 35:65]
    _T_87.pad <= _T_89 @[BPU.scala 35:65]
    node _T_90 = bits(_T_88, 10, 2) @[BPU.scala 35:65]
    _T_87.idx <= _T_90 @[BPU.scala 35:65]
    node _T_91 = bits(_T_88, 38, 11) @[BPU.scala 35:65]
    _T_87.tag <= _T_91 @[BPU.scala 35:65]
    wire _T_92 : UInt<39> @[BPU.scala 35:37]
    _T_92 <= req.pc @[BPU.scala 35:37]
    wire _T_93 : {tag : UInt<28>, idx : UInt<9>, pad : UInt<2>} @[BPU.scala 35:65]
    wire _T_94 : UInt<39>
    _T_94 <= _T_92
    node _T_95 = bits(_T_94, 1, 0) @[BPU.scala 35:65]
    _T_93.pad <= _T_95 @[BPU.scala 35:65]
    node _T_96 = bits(_T_94, 10, 2) @[BPU.scala 35:65]
    _T_93.idx <= _T_96 @[BPU.scala 35:65]
    node _T_97 = bits(_T_94, 38, 11) @[BPU.scala 35:65]
    _T_93.tag <= _T_97 @[BPU.scala 35:65]
    node _T_98 = bits(req.pc, 1, 1) @[BPU.scala 353:145]
    node _T_99 = bits(req.pc, 1, 1) @[BPU.scala 353:157]
    node _T_100 = not(_T_99) @[BPU.scala 353:150]
    node _T_101 = cat(_T_98, _T_100) @[Cat.scala 29:58]
    reg _T_102 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_103 = add(_T_102, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_104 = tail(_T_103, 1) @[GTimer.scala 25:12]
    _T_102 <= _T_104 @[GTimer.scala 25:7]
    wire _T_105 : UInt<1>
    _T_105 <= UInt<1>("h00")
    node _T_106 = and(req.valid, _T_105) @[Debug.scala 55:16]
    when _T_106 : @[Debug.scala 55:31]
      node _T_107 = asUInt(reset) @[Debug.scala 56:24]
      node _T_108 = eq(_T_107, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_108 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] BPU_inorder: ", _T_102) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_109 = asUInt(reset) @[Debug.scala 57:13]
      node _T_110 = eq(_T_109, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_110 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[BTBUP] pc=%x tag=%x index=%x bridx=%x tgt=%x type=%x\n", req.pc, _T_87.tag, _T_93.idx, _T_101, req.actualTarget, req.btbType) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    wire _T_111 : UInt<39> @[BPU.scala 35:37]
    _T_111 <= req.pc @[BPU.scala 35:37]
    wire _T_112 : {tag : UInt<28>, idx : UInt<9>, pad : UInt<2>} @[BPU.scala 35:65]
    wire _T_113 : UInt<39>
    _T_113 <= _T_111
    node _T_114 = bits(_T_113, 1, 0) @[BPU.scala 35:65]
    _T_112.pad <= _T_114 @[BPU.scala 35:65]
    node _T_115 = bits(_T_113, 10, 2) @[BPU.scala 35:65]
    _T_112.idx <= _T_115 @[BPU.scala 35:65]
    node _T_116 = bits(_T_113, 38, 11) @[BPU.scala 35:65]
    _T_112.tag <= _T_116 @[BPU.scala 35:65]
    btbWrite.tag <= _T_112.tag @[BPU.scala 364:16]
    btbWrite.target <= req.actualTarget @[BPU.scala 365:19]
    btbWrite._type <= req.btbType @[BPU.scala 366:18]
    node _T_117 = bits(req.pc, 2, 0) @[BPU.scala 367:31]
    node _T_118 = eq(_T_117, UInt<3>("h06")) @[BPU.scala 367:36]
    node _T_119 = eq(req.isRVC, UInt<1>("h00")) @[BPU.scala 367:49]
    node _T_120 = and(_T_118, _T_119) @[BPU.scala 367:46]
    node _T_121 = bits(req.pc, 1, 1) @[BPU.scala 367:67]
    node _T_122 = bits(req.pc, 1, 1) @[BPU.scala 367:79]
    node _T_123 = not(_T_122) @[BPU.scala 367:72]
    node _T_124 = cat(_T_120, _T_121) @[Cat.scala 29:58]
    node _T_125 = cat(_T_124, _T_123) @[Cat.scala 29:58]
    btbWrite.brIdx <= _T_125 @[BPU.scala 367:18]
    btbWrite.valid <= UInt<1>("h01") @[BPU.scala 368:18]
    node _T_126 = and(req.isMissPredict, req.valid) @[BPU.scala 375:43]
    btb.io.w.req.valid <= _T_126 @[BPU.scala 375:22]
    wire _T_127 : UInt<39> @[BPU.scala 35:37]
    _T_127 <= req.pc @[BPU.scala 35:37]
    wire _T_128 : {tag : UInt<28>, idx : UInt<9>, pad : UInt<2>} @[BPU.scala 35:65]
    wire _T_129 : UInt<39>
    _T_129 <= _T_127
    node _T_130 = bits(_T_129, 1, 0) @[BPU.scala 35:65]
    _T_128.pad <= _T_130 @[BPU.scala 35:65]
    node _T_131 = bits(_T_129, 10, 2) @[BPU.scala 35:65]
    _T_128.idx <= _T_131 @[BPU.scala 35:65]
    node _T_132 = bits(_T_129, 38, 11) @[BPU.scala 35:65]
    _T_128.tag <= _T_132 @[BPU.scala 35:65]
    btb.io.w.req.bits.setIdx <= _T_128.idx @[BPU.scala 376:28]
    btb.io.w.req.bits.data.valid <= btbWrite.valid @[BPU.scala 377:26]
    btb.io.w.req.bits.data.brIdx <= btbWrite.brIdx @[BPU.scala 377:26]
    btb.io.w.req.bits.data.target <= btbWrite.target @[BPU.scala 377:26]
    btb.io.w.req.bits.data._type <= btbWrite._type @[BPU.scala 377:26]
    btb.io.w.req.bits.data.tag <= btbWrite.tag @[BPU.scala 377:26]
    wire _T_133 : UInt<39> @[BPU.scala 35:37]
    _T_133 <= req.pc @[BPU.scala 35:37]
    wire _T_134 : {tag : UInt<28>, idx : UInt<9>, pad : UInt<2>} @[BPU.scala 35:65]
    wire _T_135 : UInt<39>
    _T_135 <= _T_133
    node _T_136 = bits(_T_135, 1, 0) @[BPU.scala 35:65]
    _T_134.pad <= _T_136 @[BPU.scala 35:65]
    node _T_137 = bits(_T_135, 10, 2) @[BPU.scala 35:65]
    _T_134.idx <= _T_137 @[BPU.scala 35:65]
    node _T_138 = bits(_T_135, 38, 11) @[BPU.scala 35:65]
    _T_134.tag <= _T_138 @[BPU.scala 35:65]
    read mport _T_139 = pht[_T_134.idx], clock @[BPU.scala 389:29]
    reg cnt : UInt, clock @[BPU.scala 389:20]
    cnt <= _T_139 @[BPU.scala 389:20]
    reg reqLatch : {valid : UInt<1>, pc : UInt<39>, isMissPredict : UInt<1>, actualTarget : UInt<39>, actualTaken : UInt<1>, fuOpType : UInt<7>, btbType : UInt<2>, isRVC : UInt<1>}, clock @[BPU.scala 390:25]
    reqLatch.isRVC <= req.isRVC @[BPU.scala 390:25]
    reqLatch.btbType <= req.btbType @[BPU.scala 390:25]
    reqLatch.fuOpType <= req.fuOpType @[BPU.scala 390:25]
    reqLatch.actualTaken <= req.actualTaken @[BPU.scala 390:25]
    reqLatch.actualTarget <= req.actualTarget @[BPU.scala 390:25]
    reqLatch.isMissPredict <= req.isMissPredict @[BPU.scala 390:25]
    reqLatch.pc <= req.pc @[BPU.scala 390:25]
    reqLatch.valid <= req.valid @[BPU.scala 390:25]
    node _T_140 = bits(reqLatch.fuOpType, 3, 3) @[ALU.scala 62:35]
    node _T_141 = eq(_T_140, UInt<1>("h00")) @[ALU.scala 62:30]
    node _T_142 = and(reqLatch.valid, _T_141) @[BPU.scala 391:24]
    when _T_142 : @[BPU.scala 391:66]
      node _T_143 = add(cnt, UInt<1>("h01")) @[BPU.scala 393:33]
      node _T_144 = tail(_T_143, 1) @[BPU.scala 393:33]
      node _T_145 = sub(cnt, UInt<1>("h01")) @[BPU.scala 393:44]
      node _T_146 = tail(_T_145, 1) @[BPU.scala 393:44]
      node _T_147 = mux(reqLatch.actualTaken, _T_144, _T_146) @[BPU.scala 393:21]
      node _T_148 = neq(cnt, UInt<2>("h03")) @[BPU.scala 394:30]
      node _T_149 = and(reqLatch.actualTaken, _T_148) @[BPU.scala 394:22]
      node _T_150 = eq(reqLatch.actualTaken, UInt<1>("h00")) @[BPU.scala 394:48]
      node _T_151 = neq(cnt, UInt<1>("h00")) @[BPU.scala 394:63]
      node _T_152 = and(_T_150, _T_151) @[BPU.scala 394:55]
      node _T_153 = or(_T_149, _T_152) @[BPU.scala 394:44]
      when _T_153 : @[BPU.scala 395:16]
        wire _T_154 : UInt<39> @[BPU.scala 35:37]
        _T_154 <= reqLatch.pc @[BPU.scala 35:37]
        wire _T_155 : {tag : UInt<28>, idx : UInt<9>, pad : UInt<2>} @[BPU.scala 35:65]
        wire _T_156 : UInt<39>
        _T_156 <= _T_154
        node _T_157 = bits(_T_156, 1, 0) @[BPU.scala 35:65]
        _T_155.pad <= _T_157 @[BPU.scala 35:65]
        node _T_158 = bits(_T_156, 10, 2) @[BPU.scala 35:65]
        _T_155.idx <= _T_158 @[BPU.scala 35:65]
        node _T_159 = bits(_T_156, 38, 11) @[BPU.scala 35:65]
        _T_155.tag <= _T_159 @[BPU.scala 35:65]
        write mport _T_160 = pht[_T_155.idx], clock
        _T_160 <= _T_147
        skip @[BPU.scala 395:16]
      skip @[BPU.scala 391:66]
    when req.valid : @[BPU.scala 402:20]
      node _T_161 = eq(req.fuOpType, UInt<7>("h05c")) @[BPU.scala 403:24]
      when _T_161 : @[BPU.scala 403:45]
        node _T_162 = add(value, UInt<1>("h01")) @[BPU.scala 404:26]
        node _T_163 = tail(_T_162, 1) @[BPU.scala 404:26]
        node _T_164 = add(req.pc, UInt<2>("h02")) @[BPU.scala 404:55]
        node _T_165 = tail(_T_164, 1) @[BPU.scala 404:55]
        node _T_166 = add(req.pc, UInt<3>("h04")) @[BPU.scala 404:69]
        node _T_167 = tail(_T_166, 1) @[BPU.scala 404:69]
        node _T_168 = mux(req.isRVC, _T_165, _T_167) @[BPU.scala 404:36]
        write mport _T_169 = ras[_T_163], clock
        _T_169 <= _T_168
        node _T_170 = add(value, UInt<1>("h01")) @[BPU.scala 406:28]
        node _T_171 = tail(_T_170, 1) @[BPU.scala 406:28]
        value <= _T_171 @[BPU.scala 406:16]
        skip @[BPU.scala 403:45]
      else : @[BPU.scala 408:48]
        node _T_172 = eq(req.fuOpType, UInt<7>("h05e")) @[BPU.scala 408:29]
        when _T_172 : @[BPU.scala 408:48]
          node _T_173 = eq(value, UInt<1>("h00")) @[BPU.scala 409:21]
          when _T_173 : @[BPU.scala 409:30]
            skip @[BPU.scala 409:30]
          node _T_174 = eq(value, UInt<1>("h00")) @[BPU.scala 412:31]
          node _T_175 = sub(value, UInt<1>("h01")) @[BPU.scala 412:53]
          node _T_176 = tail(_T_175, 1) @[BPU.scala 412:53]
          node _T_177 = mux(_T_174, UInt<1>("h00"), _T_176) @[BPU.scala 412:22]
          value <= _T_177 @[BPU.scala 412:16]
          skip @[BPU.scala 408:48]
      skip @[BPU.scala 402:20]
    node _T_178 = eq(btbRead._type, UInt<2>("h03")) @[BPU.scala 416:38]
    node _T_179 = mux(_T_178, rasTarget, btbRead.target) @[BPU.scala 416:23]
    io.out.target <= _T_179 @[BPU.scala 416:17]
    node _T_180 = bits(io.out.valid, 0, 0) @[Bitwise.scala 72:15]
    node _T_181 = mux(_T_180, UInt<2>("h03"), UInt<2>("h00")) @[Bitwise.scala 72:12]
    node _T_182 = cat(UInt<1>("h01"), crosslineJump) @[Cat.scala 29:58]
    node _T_183 = cat(_T_182, _T_181) @[Cat.scala 29:58]
    node _T_184 = and(btbRead.brIdx, _T_183) @[BPU.scala 419:30]
    io.brIdx <= _T_184 @[BPU.scala 419:13]
    node _T_185 = eq(btbRead._type, UInt<1>("h00")) @[BPU.scala 420:47]
    node _T_186 = neq(rasTarget, UInt<1>("h00")) @[BPU.scala 420:91]
    node _T_187 = and(UInt<1>("h01"), _T_186) @[BPU.scala 420:79]
    node _T_188 = mux(_T_185, phtTaken, _T_187) @[BPU.scala 420:32]
    node _T_189 = and(btbHit, _T_188) @[BPU.scala 420:26]
    io.out.valid <= _T_189 @[BPU.scala 420:16]
    io.out.rtype <= UInt<1>("h00") @[BPU.scala 421:16]
    
  module IFU_inorder : 
    input clock : Clock
    input reset : Reset
    output io : {imem : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<39>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<82>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>, user : UInt<82>}}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>}}, flip redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, flushVec : UInt<4>, bpFlush : UInt<1>, flip ipf : UInt<1>}
    
    reg pc : UInt<39>, clock with : (reset => (reset, UInt<39>("h080000000"))) @[IFU.scala 321:19]
    node _T = and(io.imem.req.ready, io.imem.req.valid) @[Decoupled.scala 40:37]
    node pcUpdate = or(io.redirect.valid, _T) @[IFU.scala 322:36]
    node _T_1 = bits(pc, 1, 1) @[IFU.scala 323:20]
    node _T_2 = add(pc, UInt<2>("h02")) @[IFU.scala 323:28]
    node _T_3 = tail(_T_2, 1) @[IFU.scala 323:28]
    node _T_4 = add(pc, UInt<3>("h04")) @[IFU.scala 323:38]
    node _T_5 = tail(_T_4, 1) @[IFU.scala 323:38]
    node snpc = mux(_T_1, _T_3, _T_5) @[IFU.scala 323:17]
    inst bp1 of BPU_inorder @[IFU.scala 325:19]
    bp1.clock <= clock
    bp1.reset <= reset
    reg crosslineJumpLatch : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[IFU.scala 328:35]
    node _T_6 = or(pcUpdate, bp1.io.flush) @[IFU.scala 329:17]
    when _T_6 : @[IFU.scala 329:34]
      node _T_7 = eq(crosslineJumpLatch, UInt<1>("h00")) @[IFU.scala 330:71]
      node _T_8 = and(bp1.io.crosslineJump, _T_7) @[IFU.scala 330:68]
      node _T_9 = mux(bp1.io.flush, UInt<1>("h00"), _T_8) @[IFU.scala 330:30]
      crosslineJumpLatch <= _T_9 @[IFU.scala 330:24]
      skip @[IFU.scala 329:34]
    reg crosslineJumpTarget : UInt<39>, clock @[Reg.scala 15:16]
    when bp1.io.crosslineJump : @[Reg.scala 16:19]
      crosslineJumpTarget <= bp1.io.out.target @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node crosslineJumpForceSeq = and(bp1.io.crosslineJump, bp1.io.out.valid) @[IFU.scala 333:45]
    node _T_10 = eq(bp1.io.flush, UInt<1>("h00")) @[IFU.scala 334:53]
    node crosslineJumpForceTgt = and(crosslineJumpLatch, _T_10) @[IFU.scala 334:50]
    node pnpc = mux(bp1.io.crosslineJump, snpc, bp1.io.out.target) @[IFU.scala 337:17]
    node _T_11 = mux(bp1.io.out.valid, pnpc, snpc) @[IFU.scala 339:104]
    node _T_12 = mux(crosslineJumpLatch, crosslineJumpTarget, _T_11) @[IFU.scala 339:59]
    node npc = mux(io.redirect.valid, io.redirect.target, _T_12) @[IFU.scala 339:16]
    node _T_13 = mux(bp1.io.out.valid, UInt<1>("h00"), UInt<1>("h01")) @[IFU.scala 340:114]
    node _T_14 = mux(bp1.io.crosslineJump, UInt<1>("h01"), _T_13) @[IFU.scala 340:87]
    node _T_15 = mux(crosslineJumpLatch, UInt<1>("h00"), _T_14) @[IFU.scala 340:54]
    node npcIsSeq = mux(io.redirect.valid, UInt<1>("h00"), _T_15) @[IFU.scala 340:21]
    wire brIdx : UInt<4> @[IFU.scala 344:19]
    node _T_16 = mux(io.redirect.valid, UInt<1>("h00"), bp1.io.brIdx) @[IFU.scala 348:29]
    node _T_17 = cat(npcIsSeq, _T_16) @[Cat.scala 29:58]
    brIdx <= _T_17 @[IFU.scala 348:9]
    node _T_18 = and(io.imem.req.ready, io.imem.req.valid) @[Decoupled.scala 40:37]
    bp1.io.in.pc.valid <= _T_18 @[IFU.scala 351:22]
    bp1.io.in.pc.bits <= npc @[IFU.scala 352:21]
    bp1.io.flush <= io.redirect.valid @[IFU.scala 357:16]
    when pcUpdate : @[IFU.scala 359:19]
      pc <= npc @[IFU.scala 360:8]
      skip @[IFU.scala 359:19]
    reg _T_19 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_20 = add(_T_19, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_21 = tail(_T_20, 1) @[GTimer.scala 25:12]
    _T_19 <= _T_21 @[GTimer.scala 25:7]
    wire _T_22 : UInt<1>
    _T_22 <= UInt<1>("h00")
    node _T_23 = and(pcUpdate, _T_22) @[Debug.scala 55:16]
    when _T_23 : @[Debug.scala 55:31]
      node _T_24 = asUInt(reset) @[Debug.scala 56:24]
      node _T_25 = eq(_T_24, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_25 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] IFU_inorder: ", _T_19) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_26 = asUInt(reset) @[Debug.scala 57:13]
      node _T_27 = eq(_T_26, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_27 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[IFUPC] pc:%x pcUpdate:%d npc:%x RedValid:%d RedTarget:%x LJL:%d LJTarget:%x LJ:%d snpc:%x bpValid:%d pnpn:%x \n", pc, pcUpdate, npc, io.redirect.valid, io.redirect.target, crosslineJumpLatch, crosslineJumpTarget, bp1.io.crosslineJump, snpc, bp1.io.out.valid, pnpc) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_28 = mux(io.redirect.valid, UInt<4>("h0f"), UInt<1>("h00")) @[IFU.scala 366:21]
    io.flushVec <= _T_28 @[IFU.scala 366:15]
    io.bpFlush <= UInt<1>("h00") @[IFU.scala 367:14]
    node _T_29 = bits(pc, 38, 1) @[IFU.scala 369:39]
    node _T_30 = cat(_T_29, UInt<1>("h00")) @[Cat.scala 29:58]
    node _T_31 = bits(brIdx, 3, 0) @[IFU.scala 370:88]
    node _T_32 = bits(npc, 38, 0) @[IFU.scala 370:98]
    node _T_33 = bits(pc, 38, 0) @[IFU.scala 370:118]
    node _T_34 = cat(_T_31, _T_32) @[Cat.scala 29:58]
    node _T_35 = cat(_T_34, _T_33) @[Cat.scala 29:58]
    io.imem.req.bits.addr <= _T_30 @[SimpleBus.scala 64:15]
    io.imem.req.bits.cmd <= UInt<1>("h00") @[SimpleBus.scala 65:14]
    io.imem.req.bits.size <= UInt<2>("h03") @[SimpleBus.scala 66:15]
    io.imem.req.bits.wdata <= UInt<1>("h00") @[SimpleBus.scala 67:16]
    io.imem.req.bits.wmask <= UInt<1>("h00") @[SimpleBus.scala 68:16]
    io.imem.req.bits.user <= _T_35 @[SimpleBus.scala 69:21]
    io.imem.req.valid <= io.out.ready @[IFU.scala 371:21]
    node _T_36 = bits(io.flushVec, 0, 0) @[IFU.scala 373:52]
    node _T_37 = or(io.out.ready, _T_36) @[IFU.scala 373:38]
    io.imem.resp.ready <= _T_37 @[IFU.scala 373:22]
    io.out.bits.crossPageIPFFix is invalid @[IFU.scala 375:15]
    io.out.bits.isRVC is invalid @[IFU.scala 375:15]
    io.out.bits.brIdx is invalid @[IFU.scala 375:15]
    io.out.bits.intrVec[0] is invalid @[IFU.scala 375:15]
    io.out.bits.intrVec[1] is invalid @[IFU.scala 375:15]
    io.out.bits.intrVec[2] is invalid @[IFU.scala 375:15]
    io.out.bits.intrVec[3] is invalid @[IFU.scala 375:15]
    io.out.bits.intrVec[4] is invalid @[IFU.scala 375:15]
    io.out.bits.intrVec[5] is invalid @[IFU.scala 375:15]
    io.out.bits.intrVec[6] is invalid @[IFU.scala 375:15]
    io.out.bits.intrVec[7] is invalid @[IFU.scala 375:15]
    io.out.bits.intrVec[8] is invalid @[IFU.scala 375:15]
    io.out.bits.intrVec[9] is invalid @[IFU.scala 375:15]
    io.out.bits.intrVec[10] is invalid @[IFU.scala 375:15]
    io.out.bits.intrVec[11] is invalid @[IFU.scala 375:15]
    io.out.bits.exceptionVec[0] is invalid @[IFU.scala 375:15]
    io.out.bits.exceptionVec[1] is invalid @[IFU.scala 375:15]
    io.out.bits.exceptionVec[2] is invalid @[IFU.scala 375:15]
    io.out.bits.exceptionVec[3] is invalid @[IFU.scala 375:15]
    io.out.bits.exceptionVec[4] is invalid @[IFU.scala 375:15]
    io.out.bits.exceptionVec[5] is invalid @[IFU.scala 375:15]
    io.out.bits.exceptionVec[6] is invalid @[IFU.scala 375:15]
    io.out.bits.exceptionVec[7] is invalid @[IFU.scala 375:15]
    io.out.bits.exceptionVec[8] is invalid @[IFU.scala 375:15]
    io.out.bits.exceptionVec[9] is invalid @[IFU.scala 375:15]
    io.out.bits.exceptionVec[10] is invalid @[IFU.scala 375:15]
    io.out.bits.exceptionVec[11] is invalid @[IFU.scala 375:15]
    io.out.bits.exceptionVec[12] is invalid @[IFU.scala 375:15]
    io.out.bits.exceptionVec[13] is invalid @[IFU.scala 375:15]
    io.out.bits.exceptionVec[14] is invalid @[IFU.scala 375:15]
    io.out.bits.exceptionVec[15] is invalid @[IFU.scala 375:15]
    io.out.bits.redirect.valid is invalid @[IFU.scala 375:15]
    io.out.bits.redirect.rtype is invalid @[IFU.scala 375:15]
    io.out.bits.redirect.target is invalid @[IFU.scala 375:15]
    io.out.bits.pnpc is invalid @[IFU.scala 375:15]
    io.out.bits.pc is invalid @[IFU.scala 375:15]
    io.out.bits.instr is invalid @[IFU.scala 375:15]
    node _T_38 = and(io.imem.req.ready, io.imem.req.valid) @[Decoupled.scala 40:37]
    reg _T_39 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_40 = add(_T_39, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_41 = tail(_T_40, 1) @[GTimer.scala 25:12]
    _T_39 <= _T_41 @[GTimer.scala 25:7]
    wire _T_42 : UInt<1>
    _T_42 <= UInt<1>("h00")
    node _T_43 = and(_T_38, _T_42) @[Debug.scala 55:16]
    when _T_43 : @[Debug.scala 55:31]
      node _T_44 = asUInt(reset) @[Debug.scala 56:24]
      node _T_45 = eq(_T_44, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_45 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] IFU_inorder: ", _T_39) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_46 = asUInt(reset) @[Debug.scala 57:13]
      node _T_47 = eq(_T_46, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_47 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[IFI] pc=%x user=%x %x %x %x \n", io.imem.req.bits.addr, io.imem.req.bits.user, io.redirect.valid, bp1.io.brIdx, brIdx) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_48 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    reg _T_49 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_50 = add(_T_49, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_51 = tail(_T_50, 1) @[GTimer.scala 25:12]
    _T_49 <= _T_51 @[GTimer.scala 25:7]
    wire _T_52 : UInt<1>
    _T_52 <= UInt<1>("h00")
    node _T_53 = and(_T_48, _T_52) @[Debug.scala 55:16]
    when _T_53 : @[Debug.scala 55:31]
      node _T_54 = asUInt(reset) @[Debug.scala 56:24]
      node _T_55 = eq(_T_54, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_55 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] IFU_inorder: ", _T_49) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_56 = asUInt(reset) @[Debug.scala 57:13]
      node _T_57 = eq(_T_56, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_57 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[IFO] pc=%x inst=%x\n", io.out.bits.pc, io.out.bits.instr) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    io.out.bits.instr <= io.imem.resp.bits.rdata @[IFU.scala 383:21]
    node _T_58 = bits(io.imem.resp.bits.user, 38, 0) @[IFU.scala 385:24]
    io.out.bits.pc <= _T_58 @[IFU.scala 385:20]
    node _T_59 = bits(io.imem.resp.bits.user, 77, 39) @[IFU.scala 386:26]
    io.out.bits.pnpc <= _T_59 @[IFU.scala 386:22]
    node _T_60 = bits(io.imem.resp.bits.user, 81, 78) @[IFU.scala 387:27]
    io.out.bits.brIdx <= _T_60 @[IFU.scala 387:23]
    io.out.bits.exceptionVec[12] <= io.ipf @[IFU.scala 389:44]
    node _T_61 = bits(io.flushVec, 0, 0) @[IFU.scala 390:53]
    node _T_62 = eq(_T_61, UInt<1>("h00")) @[IFU.scala 390:41]
    node _T_63 = and(io.imem.resp.valid, _T_62) @[IFU.scala 390:38]
    io.out.valid <= _T_63 @[IFU.scala 390:16]
    node _T_64 = and(io.imem.resp.ready, io.imem.resp.valid) @[Decoupled.scala 40:37]
    reg _T_65 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[StopWatch.scala 24:20]
    when io.imem.req.valid : @[StopWatch.scala 30:20]
      _T_65 <= UInt<1>("h01") @[StopWatch.scala 30:24]
      skip @[StopWatch.scala 30:20]
    when _T_64 : @[StopWatch.scala 31:19]
      _T_65 <= UInt<1>("h00") @[StopWatch.scala 31:23]
      skip @[StopWatch.scala 31:19]
    node _T_66 = orr(io.flushVec) @[IFU.scala 393:37]
    
  module NaiveRVCAlignBuffer : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>}}, flip flush : UInt<1>}
    
    wire instr : UInt<32> @[NaiveIBF.scala 33:19]
    node _T = bits(instr, 1, 0) @[NaiveIBF.scala 34:20]
    node isRVC = neq(_T, UInt<2>("h03")) @[NaiveIBF.scala 34:26]
    reg state : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[NaiveIBF.scala 39:22]
    reg pcOffsetR : UInt<3>, clock with : (reset => (reset, UInt<1>("h00"))) @[NaiveIBF.scala 40:26]
    node _T_1 = eq(state, UInt<2>("h00")) @[NaiveIBF.scala 41:28]
    node _T_2 = bits(io.in.bits.pc, 2, 0) @[NaiveIBF.scala 41:53]
    node pcOffset = mux(_T_1, _T_2, pcOffsetR) @[NaiveIBF.scala 41:21]
    node instIn = cat(UInt<16>("h00"), io.in.bits.instr) @[Cat.scala 29:58]
    wire canGo : UInt<1>
    canGo <= UInt<1>("h00")
    wire canIn : UInt<1>
    canIn <= UInt<1>("h00")
    node _T_3 = eq(pcOffset, UInt<1>("h00")) @[NaiveIBF.scala 48:28]
    node _T_4 = eq(isRVC, UInt<1>("h00")) @[NaiveIBF.scala 48:40]
    node _T_5 = bits(io.in.bits.brIdx, 0, 0) @[NaiveIBF.scala 48:55]
    node _T_6 = or(_T_4, _T_5) @[NaiveIBF.scala 48:47]
    node _T_7 = and(_T_3, _T_6) @[NaiveIBF.scala 48:36]
    node _T_8 = eq(pcOffset, UInt<3>("h04")) @[NaiveIBF.scala 48:72]
    node _T_9 = eq(isRVC, UInt<1>("h00")) @[NaiveIBF.scala 48:84]
    node _T_10 = bits(io.in.bits.brIdx, 0, 0) @[NaiveIBF.scala 48:99]
    node _T_11 = or(_T_9, _T_10) @[NaiveIBF.scala 48:91]
    node _T_12 = and(_T_8, _T_11) @[NaiveIBF.scala 48:80]
    node _T_13 = or(_T_7, _T_12) @[NaiveIBF.scala 48:60]
    node _T_14 = eq(pcOffset, UInt<2>("h02")) @[NaiveIBF.scala 48:116]
    node _T_15 = bits(io.in.bits.brIdx, 1, 1) @[NaiveIBF.scala 48:142]
    node _T_16 = or(isRVC, _T_15) @[NaiveIBF.scala 48:134]
    node _T_17 = and(_T_14, _T_16) @[NaiveIBF.scala 48:124]
    node _T_18 = or(_T_13, _T_17) @[NaiveIBF.scala 48:104]
    node _T_19 = eq(pcOffset, UInt<3>("h06")) @[NaiveIBF.scala 48:159]
    node _T_20 = and(_T_19, isRVC) @[NaiveIBF.scala 48:167]
    node rvcFinish = or(_T_18, _T_20) @[NaiveIBF.scala 48:147]
    node _T_21 = eq(pcOffset, UInt<1>("h00")) @[NaiveIBF.scala 51:26]
    node _T_22 = bits(io.in.bits.brIdx, 0, 0) @[NaiveIBF.scala 51:53]
    node _T_23 = eq(_T_22, UInt<1>("h00")) @[NaiveIBF.scala 51:47]
    node _T_24 = and(isRVC, _T_23) @[NaiveIBF.scala 51:44]
    node _T_25 = and(_T_21, _T_24) @[NaiveIBF.scala 51:34]
    node _T_26 = eq(pcOffset, UInt<3>("h04")) @[NaiveIBF.scala 51:70]
    node _T_27 = bits(io.in.bits.brIdx, 0, 0) @[NaiveIBF.scala 51:97]
    node _T_28 = eq(_T_27, UInt<1>("h00")) @[NaiveIBF.scala 51:91]
    node _T_29 = and(isRVC, _T_28) @[NaiveIBF.scala 51:88]
    node _T_30 = and(_T_26, _T_29) @[NaiveIBF.scala 51:78]
    node _T_31 = or(_T_25, _T_30) @[NaiveIBF.scala 51:58]
    node _T_32 = eq(pcOffset, UInt<2>("h02")) @[NaiveIBF.scala 51:114]
    node _T_33 = eq(isRVC, UInt<1>("h00")) @[NaiveIBF.scala 51:125]
    node _T_34 = and(_T_32, _T_33) @[NaiveIBF.scala 51:122]
    node _T_35 = bits(io.in.bits.brIdx, 1, 1) @[NaiveIBF.scala 51:141]
    node _T_36 = eq(_T_35, UInt<1>("h00")) @[NaiveIBF.scala 51:135]
    node _T_37 = and(_T_34, _T_36) @[NaiveIBF.scala 51:132]
    node rvcNext = or(_T_31, _T_37) @[NaiveIBF.scala 51:102]
    node _T_38 = eq(pcOffset, UInt<3>("h06")) @[NaiveIBF.scala 52:29]
    node _T_39 = eq(isRVC, UInt<1>("h00")) @[NaiveIBF.scala 52:40]
    node _T_40 = and(_T_38, _T_39) @[NaiveIBF.scala 52:37]
    node _T_41 = bits(io.in.bits.brIdx, 2, 2) @[NaiveIBF.scala 52:56]
    node _T_42 = eq(_T_41, UInt<1>("h00")) @[NaiveIBF.scala 52:50]
    node rvcSpecial = and(_T_40, _T_42) @[NaiveIBF.scala 52:47]
    node _T_43 = eq(pcOffset, UInt<3>("h06")) @[NaiveIBF.scala 53:33]
    node _T_44 = eq(isRVC, UInt<1>("h00")) @[NaiveIBF.scala 53:44]
    node _T_45 = and(_T_43, _T_44) @[NaiveIBF.scala 53:41]
    node _T_46 = bits(io.in.bits.brIdx, 2, 2) @[NaiveIBF.scala 53:59]
    node rvcSpecialJump = and(_T_45, _T_46) @[NaiveIBF.scala 53:51]
    node pnpcIsSeq = bits(io.in.bits.brIdx, 3, 3) @[NaiveIBF.scala 54:24]
    node _T_47 = eq(state, UInt<2>("h00")) @[NaiveIBF.scala 57:25]
    node _T_48 = eq(state, UInt<2>("h01")) @[NaiveIBF.scala 57:45]
    node _T_49 = or(_T_47, _T_48) @[NaiveIBF.scala 57:36]
    node _T_50 = and(_T_49, rvcSpecial) @[NaiveIBF.scala 57:58]
    node _T_51 = and(_T_50, io.in.valid) @[NaiveIBF.scala 57:72]
    node _T_52 = eq(pnpcIsSeq, UInt<1>("h00")) @[NaiveIBF.scala 57:90]
    node flushIFU = and(_T_51, _T_52) @[NaiveIBF.scala 57:87]
    reg _T_53 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_54 = add(_T_53, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_55 = tail(_T_54, 1) @[GTimer.scala 25:12]
    _T_53 <= _T_55 @[GTimer.scala 25:7]
    wire _T_56 : UInt<1>
    _T_56 <= UInt<1>("h00")
    node _T_57 = and(flushIFU, _T_56) @[Debug.scala 55:16]
    when _T_57 : @[Debug.scala 55:31]
      node _T_58 = asUInt(reset) @[Debug.scala 56:24]
      node _T_59 = eq(_T_58, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_59 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] NaiveRVCAlignBuffer: ", _T_53) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_60 = asUInt(reset) @[Debug.scala 57:13]
      node _T_61 = eq(_T_60, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_61 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "flushIFU at pc %x offset %x\n", io.in.bits.pc, pcOffset) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_62 = eq(flushIFU, UInt<1>("h00")) @[NaiveIBF.scala 59:10]
    node _T_63 = asUInt(reset) @[NaiveIBF.scala 59:9]
    node _T_64 = or(_T_62, _T_63) @[NaiveIBF.scala 59:9]
    node _T_65 = eq(_T_64, UInt<1>("h00")) @[NaiveIBF.scala 59:9]
    when _T_65 : @[NaiveIBF.scala 59:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at NaiveIBF.scala:59 assert(!flushIFU)\n") @[NaiveIBF.scala 59:9]
      stop(clock, UInt<1>(1), 1) @[NaiveIBF.scala 59:9]
      skip @[NaiveIBF.scala 59:9]
    node _T_66 = eq(state, UInt<2>("h00")) @[NaiveIBF.scala 60:33]
    node _T_67 = eq(state, UInt<2>("h01")) @[NaiveIBF.scala 60:53]
    node _T_68 = or(_T_66, _T_67) @[NaiveIBF.scala 60:44]
    node _T_69 = or(rvcSpecial, rvcSpecialJump) @[NaiveIBF.scala 60:81]
    node _T_70 = and(_T_68, _T_69) @[NaiveIBF.scala 60:66]
    node _T_71 = and(_T_70, io.in.valid) @[NaiveIBF.scala 60:100]
    node loadNextInstline = and(_T_71, pnpcIsSeq) @[NaiveIBF.scala 60:115]
    wire pcOut : UInt<39>
    pcOut <= UInt<39>("h00")
    wire pnpcOut : UInt<39>
    pnpcOut <= UInt<39>("h00")
    reg specialPCR : UInt<39>, clock @[NaiveIBF.scala 64:23]
    reg specialNPCR : UInt<39>, clock @[NaiveIBF.scala 65:24]
    reg specialInstR : UInt<16>, clock @[NaiveIBF.scala 66:25]
    reg specialIPFR : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[NaiveIBF.scala 67:28]
    node _T_72 = bits(io.in.bits.pc, 38, 3) @[NaiveIBF.scala 68:37]
    node _T_73 = cat(_T_72, UInt<3>("h00")) @[Cat.scala 29:58]
    node _T_74 = add(_T_73, UInt<4>("h0a")) @[NaiveIBF.scala 68:63]
    node redirectPC = tail(_T_74, 1) @[NaiveIBF.scala 68:63]
    node _T_75 = eq(pcOffset, UInt<2>("h02")) @[NaiveIBF.scala 69:36]
    node _T_76 = eq(isRVC, UInt<1>("h00")) @[NaiveIBF.scala 69:47]
    node _T_77 = and(_T_75, _T_76) @[NaiveIBF.scala 69:44]
    node _T_78 = bits(io.in.bits.pnpc, 2, 0) @[NaiveIBF.scala 69:72]
    node _T_79 = eq(_T_78, UInt<3>("h04")) @[NaiveIBF.scala 69:78]
    node _T_80 = and(_T_77, _T_79) @[NaiveIBF.scala 69:54]
    node _T_81 = bits(io.in.bits.brIdx, 1, 1) @[NaiveIBF.scala 69:95]
    node _T_82 = eq(_T_81, UInt<1>("h00")) @[NaiveIBF.scala 69:89]
    node rvcForceLoadNext = and(_T_80, _T_82) @[NaiveIBF.scala 69:86]
    node _T_83 = eq(state, UInt<2>("h02")) @[NaiveIBF.scala 90:23]
    node _T_84 = eq(state, UInt<2>("h03")) @[NaiveIBF.scala 90:47]
    node _T_85 = or(_T_83, _T_84) @[NaiveIBF.scala 90:38]
    node _T_86 = bits(instIn, 15, 0) @[NaiveIBF.scala 90:80]
    node _T_87 = cat(_T_86, specialInstR) @[Cat.scala 29:58]
    node _T_88 = bits(instIn, 31, 0) @[NaiveIBF.scala 91:23]
    node _T_89 = bits(instIn, 47, 16) @[NaiveIBF.scala 92:23]
    node _T_90 = bits(instIn, 63, 32) @[NaiveIBF.scala 93:23]
    node _T_91 = bits(instIn, 79, 48) @[NaiveIBF.scala 94:23]
    node _T_92 = eq(UInt<1>("h00"), pcOffset) @[LookupTree.scala 24:34]
    node _T_93 = eq(UInt<2>("h02"), pcOffset) @[LookupTree.scala 24:34]
    node _T_94 = eq(UInt<3>("h04"), pcOffset) @[LookupTree.scala 24:34]
    node _T_95 = eq(UInt<3>("h06"), pcOffset) @[LookupTree.scala 24:34]
    node _T_96 = mux(_T_92, _T_88, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_97 = mux(_T_93, _T_89, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_98 = mux(_T_94, _T_90, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_99 = mux(_T_95, _T_91, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_100 = or(_T_96, _T_97) @[Mux.scala 27:72]
    node _T_101 = or(_T_100, _T_98) @[Mux.scala 27:72]
    node _T_102 = or(_T_101, _T_99) @[Mux.scala 27:72]
    wire _T_103 : UInt<32> @[Mux.scala 27:72]
    _T_103 <= _T_102 @[Mux.scala 27:72]
    node _T_104 = mux(_T_85, _T_87, _T_103) @[NaiveIBF.scala 90:15]
    instr <= _T_104 @[NaiveIBF.scala 90:9]
    node _T_105 = eq(io.flush, UInt<1>("h00")) @[NaiveIBF.scala 97:8]
    when _T_105 : @[NaiveIBF.scala 97:18]
      node _T_106 = eq(UInt<2>("h00"), state) @[Conditional.scala 37:30]
      when _T_106 : @[Conditional.scala 40:58]
        node _T_107 = or(rvcFinish, rvcNext) @[NaiveIBF.scala 100:28]
        canGo <= _T_107 @[NaiveIBF.scala 100:15]
        node _T_108 = or(rvcFinish, rvcForceLoadNext) @[NaiveIBF.scala 101:28]
        canIn <= _T_108 @[NaiveIBF.scala 101:15]
        pcOut <= io.in.bits.pc @[NaiveIBF.scala 102:15]
        node _T_109 = add(io.in.bits.pc, UInt<2>("h02")) @[NaiveIBF.scala 103:76]
        node _T_110 = tail(_T_109, 1) @[NaiveIBF.scala 103:76]
        node _T_111 = add(io.in.bits.pc, UInt<3>("h04")) @[NaiveIBF.scala 103:95]
        node _T_112 = tail(_T_111, 1) @[NaiveIBF.scala 103:95]
        node _T_113 = mux(isRVC, _T_110, _T_112) @[NaiveIBF.scala 103:55]
        node _T_114 = mux(rvcFinish, io.in.bits.pnpc, _T_113) @[NaiveIBF.scala 103:23]
        pnpcOut <= _T_114 @[NaiveIBF.scala 103:17]
        node _T_115 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
        node _T_116 = and(_T_115, rvcFinish) @[NaiveIBF.scala 104:28]
        when _T_116 : @[NaiveIBF.scala 104:41]
          state <= UInt<2>("h00") @[NaiveIBF.scala 104:48]
          skip @[NaiveIBF.scala 104:41]
        node _T_117 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
        node _T_118 = and(_T_117, rvcNext) @[NaiveIBF.scala 105:28]
        when _T_118 : @[NaiveIBF.scala 105:39]
          state <= UInt<2>("h01") @[NaiveIBF.scala 106:17]
          node _T_119 = mux(isRVC, UInt<2>("h02"), UInt<3>("h04")) @[NaiveIBF.scala 107:38]
          node _T_120 = add(pcOffset, _T_119) @[NaiveIBF.scala 107:33]
          node _T_121 = tail(_T_120, 1) @[NaiveIBF.scala 107:33]
          pcOffsetR <= _T_121 @[NaiveIBF.scala 107:21]
          skip @[NaiveIBF.scala 105:39]
        node _T_122 = and(rvcSpecial, io.in.valid) @[NaiveIBF.scala 109:25]
        when _T_122 : @[NaiveIBF.scala 109:40]
          state <= UInt<2>("h02") @[NaiveIBF.scala 110:17]
          specialPCR <= pcOut @[NaiveIBF.scala 111:22]
          node _T_123 = bits(io.in.bits.instr, 63, 48) @[NaiveIBF.scala 112:43]
          specialInstR <= _T_123 @[NaiveIBF.scala 112:24]
          specialIPFR <= io.in.bits.exceptionVec[12] @[NaiveIBF.scala 113:23]
          skip @[NaiveIBF.scala 109:40]
        node _T_124 = and(rvcSpecialJump, io.in.valid) @[NaiveIBF.scala 115:29]
        when _T_124 : @[NaiveIBF.scala 115:44]
          state <= UInt<2>("h03") @[NaiveIBF.scala 116:17]
          specialPCR <= pcOut @[NaiveIBF.scala 117:22]
          specialNPCR <= io.in.bits.pnpc @[NaiveIBF.scala 118:23]
          node _T_125 = bits(io.in.bits.instr, 63, 48) @[NaiveIBF.scala 119:43]
          specialInstR <= _T_125 @[NaiveIBF.scala 119:24]
          specialIPFR <= io.in.bits.exceptionVec[12] @[NaiveIBF.scala 120:23]
          skip @[NaiveIBF.scala 115:44]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_126 = eq(UInt<2>("h01"), state) @[Conditional.scala 37:30]
        when _T_126 : @[Conditional.scala 39:67]
          node _T_127 = or(rvcFinish, rvcNext) @[NaiveIBF.scala 124:28]
          canGo <= _T_127 @[NaiveIBF.scala 124:15]
          node _T_128 = or(rvcFinish, rvcForceLoadNext) @[NaiveIBF.scala 125:28]
          canIn <= _T_128 @[NaiveIBF.scala 125:15]
          node _T_129 = bits(io.in.bits.pc, 38, 3) @[NaiveIBF.scala 126:35]
          node _T_130 = bits(pcOffsetR, 2, 0) @[NaiveIBF.scala 126:61]
          node _T_131 = cat(_T_129, _T_130) @[Cat.scala 29:58]
          pcOut <= _T_131 @[NaiveIBF.scala 126:15]
          node _T_132 = add(pcOut, UInt<2>("h02")) @[NaiveIBF.scala 127:68]
          node _T_133 = tail(_T_132, 1) @[NaiveIBF.scala 127:68]
          node _T_134 = add(pcOut, UInt<3>("h04")) @[NaiveIBF.scala 127:79]
          node _T_135 = tail(_T_134, 1) @[NaiveIBF.scala 127:79]
          node _T_136 = mux(isRVC, _T_133, _T_135) @[NaiveIBF.scala 127:55]
          node _T_137 = mux(rvcFinish, io.in.bits.pnpc, _T_136) @[NaiveIBF.scala 127:23]
          pnpcOut <= _T_137 @[NaiveIBF.scala 127:17]
          node _T_138 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
          node _T_139 = and(_T_138, rvcFinish) @[NaiveIBF.scala 128:28]
          when _T_139 : @[NaiveIBF.scala 128:41]
            state <= UInt<2>("h00") @[NaiveIBF.scala 128:48]
            skip @[NaiveIBF.scala 128:41]
          node _T_140 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
          node _T_141 = and(_T_140, rvcNext) @[NaiveIBF.scala 129:28]
          when _T_141 : @[NaiveIBF.scala 129:39]
            state <= UInt<2>("h01") @[NaiveIBF.scala 130:17]
            node _T_142 = mux(isRVC, UInt<2>("h02"), UInt<3>("h04")) @[NaiveIBF.scala 131:38]
            node _T_143 = add(pcOffset, _T_142) @[NaiveIBF.scala 131:33]
            node _T_144 = tail(_T_143, 1) @[NaiveIBF.scala 131:33]
            pcOffsetR <= _T_144 @[NaiveIBF.scala 131:21]
            skip @[NaiveIBF.scala 129:39]
          node _T_145 = and(rvcSpecial, io.in.valid) @[NaiveIBF.scala 133:25]
          when _T_145 : @[NaiveIBF.scala 133:40]
            state <= UInt<2>("h02") @[NaiveIBF.scala 134:17]
            specialPCR <= pcOut @[NaiveIBF.scala 135:22]
            node _T_146 = bits(io.in.bits.instr, 63, 48) @[NaiveIBF.scala 136:43]
            specialInstR <= _T_146 @[NaiveIBF.scala 136:24]
            specialIPFR <= io.in.bits.exceptionVec[12] @[NaiveIBF.scala 137:23]
            skip @[NaiveIBF.scala 133:40]
          node _T_147 = and(rvcSpecialJump, io.in.valid) @[NaiveIBF.scala 139:29]
          when _T_147 : @[NaiveIBF.scala 139:44]
            state <= UInt<2>("h03") @[NaiveIBF.scala 140:17]
            specialPCR <= pcOut @[NaiveIBF.scala 141:22]
            specialNPCR <= io.in.bits.pnpc @[NaiveIBF.scala 142:23]
            node _T_148 = bits(io.in.bits.instr, 63, 48) @[NaiveIBF.scala 143:43]
            specialInstR <= _T_148 @[NaiveIBF.scala 143:24]
            specialIPFR <= io.in.bits.exceptionVec[12] @[NaiveIBF.scala 144:23]
            skip @[NaiveIBF.scala 139:44]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_149 = eq(UInt<2>("h02"), state) @[Conditional.scala 37:30]
          when _T_149 : @[Conditional.scala 39:67]
            pcOut <= specialPCR @[NaiveIBF.scala 149:15]
            node _T_150 = add(specialPCR, UInt<3>("h04")) @[NaiveIBF.scala 150:31]
            node _T_151 = tail(_T_150, 1) @[NaiveIBF.scala 150:31]
            pnpcOut <= _T_151 @[NaiveIBF.scala 150:17]
            canGo <= io.in.valid @[NaiveIBF.scala 152:15]
            canIn <= UInt<1>("h00") @[NaiveIBF.scala 153:15]
            node _T_152 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
            when _T_152 : @[NaiveIBF.scala 154:28]
              state <= UInt<2>("h01") @[NaiveIBF.scala 155:17]
              pcOffsetR <= UInt<2>("h02") @[NaiveIBF.scala 156:21]
              skip @[NaiveIBF.scala 154:28]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_153 = eq(UInt<2>("h03"), state) @[Conditional.scala 37:30]
            when _T_153 : @[Conditional.scala 39:67]
              pcOut <= specialPCR @[NaiveIBF.scala 161:15]
              pnpcOut <= specialNPCR @[NaiveIBF.scala 162:17]
              canGo <= io.in.valid @[NaiveIBF.scala 164:15]
              canIn <= UInt<1>("h01") @[NaiveIBF.scala 165:15]
              node _T_154 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
              when _T_154 : @[NaiveIBF.scala 166:28]
                state <= UInt<2>("h00") @[NaiveIBF.scala 167:17]
                skip @[NaiveIBF.scala 166:28]
              skip @[Conditional.scala 39:67]
      skip @[NaiveIBF.scala 97:18]
    else : @[NaiveIBF.scala 171:14]
      state <= UInt<2>("h00") @[NaiveIBF.scala 172:11]
      canGo is invalid @[NaiveIBF.scala 173:11]
      canIn is invalid @[NaiveIBF.scala 174:11]
      pcOut is invalid @[NaiveIBF.scala 175:11]
      pnpcOut is invalid @[NaiveIBF.scala 176:13]
      skip @[NaiveIBF.scala 171:14]
    io.out.bits.crossPageIPFFix is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.isRVC is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.brIdx is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.intrVec[0] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.intrVec[1] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.intrVec[2] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.intrVec[3] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.intrVec[4] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.intrVec[5] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.intrVec[6] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.intrVec[7] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.intrVec[8] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.intrVec[9] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.intrVec[10] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.intrVec[11] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.exceptionVec[0] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.exceptionVec[1] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.exceptionVec[2] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.exceptionVec[3] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.exceptionVec[4] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.exceptionVec[5] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.exceptionVec[6] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.exceptionVec[7] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.exceptionVec[8] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.exceptionVec[9] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.exceptionVec[10] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.exceptionVec[11] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.exceptionVec[12] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.exceptionVec[13] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.exceptionVec[14] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.exceptionVec[15] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.redirect.valid is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.redirect.rtype is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.redirect.target is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.pnpc is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.pc is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.instr is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.redirect.valid <= UInt<1>("h00") @[NaiveIBF.scala 181:30]
    io.out.bits.pc <= pcOut @[NaiveIBF.scala 182:18]
    io.out.bits.pnpc <= pnpcOut @[NaiveIBF.scala 183:20]
    io.out.bits.instr <= instr @[NaiveIBF.scala 184:21]
    node _T_155 = add(pcOut, UInt<3>("h04")) @[NaiveIBF.scala 185:46]
    node _T_156 = tail(_T_155, 1) @[NaiveIBF.scala 185:46]
    node _T_157 = eq(pnpcOut, _T_156) @[NaiveIBF.scala 185:37]
    node _T_158 = eq(isRVC, UInt<1>("h00")) @[NaiveIBF.scala 185:54]
    node _T_159 = and(_T_157, _T_158) @[NaiveIBF.scala 185:51]
    node _T_160 = add(pcOut, UInt<2>("h02")) @[NaiveIBF.scala 185:83]
    node _T_161 = tail(_T_160, 1) @[NaiveIBF.scala 185:83]
    node _T_162 = eq(pnpcOut, _T_161) @[NaiveIBF.scala 185:74]
    node _T_163 = and(_T_162, isRVC) @[NaiveIBF.scala 185:88]
    node _T_164 = or(_T_159, _T_163) @[NaiveIBF.scala 185:62]
    node _T_165 = mux(_T_164, UInt<1>("h00"), UInt<1>("h01")) @[NaiveIBF.scala 185:27]
    io.out.bits.brIdx <= _T_165 @[NaiveIBF.scala 185:21]
    node _T_166 = and(io.in.valid, canGo) @[NaiveIBF.scala 187:31]
    io.out.valid <= _T_166 @[NaiveIBF.scala 187:16]
    node _T_167 = eq(io.in.valid, UInt<1>("h00")) @[NaiveIBF.scala 188:19]
    node _T_168 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_169 = and(_T_168, canIn) @[NaiveIBF.scala 188:50]
    node _T_170 = or(_T_167, _T_169) @[NaiveIBF.scala 188:32]
    node _T_171 = or(_T_170, loadNextInstline) @[NaiveIBF.scala 188:60]
    io.in.ready <= _T_171 @[NaiveIBF.scala 188:15]
    io.out.bits.exceptionVec[0] <= io.in.bits.exceptionVec[0] @[NaiveIBF.scala 190:28]
    io.out.bits.exceptionVec[1] <= io.in.bits.exceptionVec[1] @[NaiveIBF.scala 190:28]
    io.out.bits.exceptionVec[2] <= io.in.bits.exceptionVec[2] @[NaiveIBF.scala 190:28]
    io.out.bits.exceptionVec[3] <= io.in.bits.exceptionVec[3] @[NaiveIBF.scala 190:28]
    io.out.bits.exceptionVec[4] <= io.in.bits.exceptionVec[4] @[NaiveIBF.scala 190:28]
    io.out.bits.exceptionVec[5] <= io.in.bits.exceptionVec[5] @[NaiveIBF.scala 190:28]
    io.out.bits.exceptionVec[6] <= io.in.bits.exceptionVec[6] @[NaiveIBF.scala 190:28]
    io.out.bits.exceptionVec[7] <= io.in.bits.exceptionVec[7] @[NaiveIBF.scala 190:28]
    io.out.bits.exceptionVec[8] <= io.in.bits.exceptionVec[8] @[NaiveIBF.scala 190:28]
    io.out.bits.exceptionVec[9] <= io.in.bits.exceptionVec[9] @[NaiveIBF.scala 190:28]
    io.out.bits.exceptionVec[10] <= io.in.bits.exceptionVec[10] @[NaiveIBF.scala 190:28]
    io.out.bits.exceptionVec[11] <= io.in.bits.exceptionVec[11] @[NaiveIBF.scala 190:28]
    io.out.bits.exceptionVec[12] <= io.in.bits.exceptionVec[12] @[NaiveIBF.scala 190:28]
    io.out.bits.exceptionVec[13] <= io.in.bits.exceptionVec[13] @[NaiveIBF.scala 190:28]
    io.out.bits.exceptionVec[14] <= io.in.bits.exceptionVec[14] @[NaiveIBF.scala 190:28]
    io.out.bits.exceptionVec[15] <= io.in.bits.exceptionVec[15] @[NaiveIBF.scala 190:28]
    node _T_172 = eq(state, UInt<2>("h03")) @[NaiveIBF.scala 191:112]
    node _T_173 = eq(state, UInt<2>("h02")) @[NaiveIBF.scala 191:142]
    node _T_174 = or(_T_172, _T_173) @[NaiveIBF.scala 191:133]
    node _T_175 = and(specialIPFR, _T_174) @[NaiveIBF.scala 191:102]
    node _T_176 = or(io.in.bits.exceptionVec[12], _T_175) @[NaiveIBF.scala 191:87]
    io.out.bits.exceptionVec[12] <= _T_176 @[NaiveIBF.scala 191:44]
    node _T_177 = eq(state, UInt<2>("h03")) @[NaiveIBF.scala 192:84]
    node _T_178 = eq(state, UInt<2>("h02")) @[NaiveIBF.scala 192:114]
    node _T_179 = or(_T_177, _T_178) @[NaiveIBF.scala 192:105]
    node _T_180 = and(io.in.bits.exceptionVec[12], _T_179) @[NaiveIBF.scala 192:74]
    node _T_181 = eq(specialIPFR, UInt<1>("h00")) @[NaiveIBF.scala 192:133]
    node _T_182 = and(_T_180, _T_181) @[NaiveIBF.scala 192:130]
    io.out.bits.crossPageIPFFix <= _T_182 @[NaiveIBF.scala 192:31]
    
  module Decoder : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {cf : {instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>}, ctrl : {src1Type : UInt<1>, src2Type : UInt<1>, fuType : UInt<3>, fuOpType : UInt<7>, rfSrc1 : UInt<5>, rfSrc2 : UInt<5>, rfWen : UInt<1>, rfDest : UInt<5>, isNutCoreTrap : UInt<1>, isSrc1Forward : UInt<1>, isSrc2Forward : UInt<1>, noSpecExec : UInt<1>, isBlocked : UInt<1>}, data : {src1 : UInt<64>, src2 : UInt<64>, imm : UInt<64>}}}, isWFI : UInt<1>}
    
    wire hasIntr : UInt<1> @[IDU.scala 32:21]
    node _T = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_1 = eq(UInt<5>("h013"), _T) @[Lookup.scala 31:38]
    node _T_2 = and(io.in.bits.instr, UInt<32>("h0fc00707f")) @[Lookup.scala 31:38]
    node _T_3 = eq(UInt<13>("h01013"), _T_2) @[Lookup.scala 31:38]
    node _T_4 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_5 = eq(UInt<14>("h02013"), _T_4) @[Lookup.scala 31:38]
    node _T_6 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_7 = eq(UInt<14>("h03013"), _T_6) @[Lookup.scala 31:38]
    node _T_8 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_9 = eq(UInt<15>("h04013"), _T_8) @[Lookup.scala 31:38]
    node _T_10 = and(io.in.bits.instr, UInt<32>("h0fc00707f")) @[Lookup.scala 31:38]
    node _T_11 = eq(UInt<15>("h05013"), _T_10) @[Lookup.scala 31:38]
    node _T_12 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_13 = eq(UInt<15>("h06013"), _T_12) @[Lookup.scala 31:38]
    node _T_14 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_15 = eq(UInt<15>("h07013"), _T_14) @[Lookup.scala 31:38]
    node _T_16 = and(io.in.bits.instr, UInt<32>("h0fc00707f")) @[Lookup.scala 31:38]
    node _T_17 = eq(UInt<31>("h040005013"), _T_16) @[Lookup.scala 31:38]
    node _T_18 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_19 = eq(UInt<6>("h033"), _T_18) @[Lookup.scala 31:38]
    node _T_20 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_21 = eq(UInt<13>("h01033"), _T_20) @[Lookup.scala 31:38]
    node _T_22 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_23 = eq(UInt<14>("h02033"), _T_22) @[Lookup.scala 31:38]
    node _T_24 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_25 = eq(UInt<14>("h03033"), _T_24) @[Lookup.scala 31:38]
    node _T_26 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_27 = eq(UInt<15>("h04033"), _T_26) @[Lookup.scala 31:38]
    node _T_28 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_29 = eq(UInt<15>("h05033"), _T_28) @[Lookup.scala 31:38]
    node _T_30 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_31 = eq(UInt<15>("h06033"), _T_30) @[Lookup.scala 31:38]
    node _T_32 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_33 = eq(UInt<15>("h07033"), _T_32) @[Lookup.scala 31:38]
    node _T_34 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_35 = eq(UInt<31>("h040000033"), _T_34) @[Lookup.scala 31:38]
    node _T_36 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_37 = eq(UInt<31>("h040005033"), _T_36) @[Lookup.scala 31:38]
    node _T_38 = and(io.in.bits.instr, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_39 = eq(UInt<5>("h017"), _T_38) @[Lookup.scala 31:38]
    node _T_40 = and(io.in.bits.instr, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_41 = eq(UInt<6>("h037"), _T_40) @[Lookup.scala 31:38]
    node _T_42 = and(io.in.bits.instr, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_43 = eq(UInt<7>("h06f"), _T_42) @[Lookup.scala 31:38]
    node _T_44 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_45 = eq(UInt<7>("h067"), _T_44) @[Lookup.scala 31:38]
    node _T_46 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_47 = eq(UInt<7>("h063"), _T_46) @[Lookup.scala 31:38]
    node _T_48 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_49 = eq(UInt<13>("h01063"), _T_48) @[Lookup.scala 31:38]
    node _T_50 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_51 = eq(UInt<15>("h04063"), _T_50) @[Lookup.scala 31:38]
    node _T_52 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_53 = eq(UInt<15>("h05063"), _T_52) @[Lookup.scala 31:38]
    node _T_54 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_55 = eq(UInt<15>("h06063"), _T_54) @[Lookup.scala 31:38]
    node _T_56 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_57 = eq(UInt<15>("h07063"), _T_56) @[Lookup.scala 31:38]
    node _T_58 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_59 = eq(UInt<2>("h03"), _T_58) @[Lookup.scala 31:38]
    node _T_60 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_61 = eq(UInt<13>("h01003"), _T_60) @[Lookup.scala 31:38]
    node _T_62 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_63 = eq(UInt<14>("h02003"), _T_62) @[Lookup.scala 31:38]
    node _T_64 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_65 = eq(UInt<15>("h04003"), _T_64) @[Lookup.scala 31:38]
    node _T_66 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_67 = eq(UInt<15>("h05003"), _T_66) @[Lookup.scala 31:38]
    node _T_68 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_69 = eq(UInt<6>("h023"), _T_68) @[Lookup.scala 31:38]
    node _T_70 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_71 = eq(UInt<13>("h01023"), _T_70) @[Lookup.scala 31:38]
    node _T_72 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_73 = eq(UInt<14>("h02023"), _T_72) @[Lookup.scala 31:38]
    node _T_74 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_75 = eq(UInt<5>("h01b"), _T_74) @[Lookup.scala 31:38]
    node _T_76 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_77 = eq(UInt<13>("h0101b"), _T_76) @[Lookup.scala 31:38]
    node _T_78 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_79 = eq(UInt<15>("h0501b"), _T_78) @[Lookup.scala 31:38]
    node _T_80 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_81 = eq(UInt<31>("h04000501b"), _T_80) @[Lookup.scala 31:38]
    node _T_82 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_83 = eq(UInt<13>("h0103b"), _T_82) @[Lookup.scala 31:38]
    node _T_84 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_85 = eq(UInt<15>("h0503b"), _T_84) @[Lookup.scala 31:38]
    node _T_86 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_87 = eq(UInt<31>("h04000503b"), _T_86) @[Lookup.scala 31:38]
    node _T_88 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_89 = eq(UInt<6>("h03b"), _T_88) @[Lookup.scala 31:38]
    node _T_90 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_91 = eq(UInt<31>("h04000003b"), _T_90) @[Lookup.scala 31:38]
    node _T_92 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_93 = eq(UInt<15>("h06003"), _T_92) @[Lookup.scala 31:38]
    node _T_94 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_95 = eq(UInt<14>("h03003"), _T_94) @[Lookup.scala 31:38]
    node _T_96 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_97 = eq(UInt<14>("h03023"), _T_96) @[Lookup.scala 31:38]
    node _T_98 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_99 = eq(UInt<7>("h06b"), _T_98) @[Lookup.scala 31:38]
    node _T_100 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_101 = eq(UInt<26>("h02000033"), _T_100) @[Lookup.scala 31:38]
    node _T_102 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_103 = eq(UInt<26>("h02001033"), _T_102) @[Lookup.scala 31:38]
    node _T_104 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_105 = eq(UInt<26>("h02002033"), _T_104) @[Lookup.scala 31:38]
    node _T_106 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_107 = eq(UInt<26>("h02003033"), _T_106) @[Lookup.scala 31:38]
    node _T_108 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_109 = eq(UInt<26>("h02004033"), _T_108) @[Lookup.scala 31:38]
    node _T_110 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_111 = eq(UInt<26>("h02005033"), _T_110) @[Lookup.scala 31:38]
    node _T_112 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_113 = eq(UInt<26>("h02006033"), _T_112) @[Lookup.scala 31:38]
    node _T_114 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_115 = eq(UInt<26>("h02007033"), _T_114) @[Lookup.scala 31:38]
    node _T_116 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_117 = eq(UInt<26>("h0200003b"), _T_116) @[Lookup.scala 31:38]
    node _T_118 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_119 = eq(UInt<26>("h0200403b"), _T_118) @[Lookup.scala 31:38]
    node _T_120 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_121 = eq(UInt<26>("h0200503b"), _T_120) @[Lookup.scala 31:38]
    node _T_122 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_123 = eq(UInt<26>("h0200603b"), _T_122) @[Lookup.scala 31:38]
    node _T_124 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_125 = eq(UInt<26>("h0200703b"), _T_124) @[Lookup.scala 31:38]
    node _T_126 = and(io.in.bits.instr, UInt<32>("h0ffffffff")) @[Lookup.scala 31:38]
    node _T_127 = eq(UInt<1>("h00"), _T_126) @[Lookup.scala 31:38]
    node _T_128 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_129 = eq(UInt<1>("h00"), _T_128) @[Lookup.scala 31:38]
    node _T_130 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_131 = eq(UInt<15>("h04000"), _T_130) @[Lookup.scala 31:38]
    node _T_132 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_133 = eq(UInt<15>("h06000"), _T_132) @[Lookup.scala 31:38]
    node _T_134 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_135 = eq(UInt<16>("h0c000"), _T_134) @[Lookup.scala 31:38]
    node _T_136 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_137 = eq(UInt<16>("h0e000"), _T_136) @[Lookup.scala 31:38]
    node _T_138 = and(io.in.bits.instr, UInt<16>("h0ef83")) @[Lookup.scala 31:38]
    node _T_139 = eq(UInt<1>("h01"), _T_138) @[Lookup.scala 31:38]
    node _T_140 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_141 = eq(UInt<1>("h01"), _T_140) @[Lookup.scala 31:38]
    node _T_142 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_143 = eq(UInt<14>("h02001"), _T_142) @[Lookup.scala 31:38]
    node _T_144 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_145 = eq(UInt<15>("h04001"), _T_144) @[Lookup.scala 31:38]
    node _T_146 = and(io.in.bits.instr, UInt<16>("h0ef83")) @[Lookup.scala 31:38]
    node _T_147 = eq(UInt<15>("h06101"), _T_146) @[Lookup.scala 31:38]
    node _T_148 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_149 = eq(UInt<15>("h06001"), _T_148) @[Lookup.scala 31:38]
    node _T_150 = and(io.in.bits.instr, UInt<16>("h0ec03")) @[Lookup.scala 31:38]
    node _T_151 = eq(UInt<16>("h08001"), _T_150) @[Lookup.scala 31:38]
    node _T_152 = and(io.in.bits.instr, UInt<16>("h0ec03")) @[Lookup.scala 31:38]
    node _T_153 = eq(UInt<16>("h08401"), _T_152) @[Lookup.scala 31:38]
    node _T_154 = and(io.in.bits.instr, UInt<16>("h0ec03")) @[Lookup.scala 31:38]
    node _T_155 = eq(UInt<16>("h08801"), _T_154) @[Lookup.scala 31:38]
    node _T_156 = and(io.in.bits.instr, UInt<16>("h0fc63")) @[Lookup.scala 31:38]
    node _T_157 = eq(UInt<16>("h08c01"), _T_156) @[Lookup.scala 31:38]
    node _T_158 = and(io.in.bits.instr, UInt<16>("h0fc63")) @[Lookup.scala 31:38]
    node _T_159 = eq(UInt<16>("h08c21"), _T_158) @[Lookup.scala 31:38]
    node _T_160 = and(io.in.bits.instr, UInt<16>("h0fc63")) @[Lookup.scala 31:38]
    node _T_161 = eq(UInt<16>("h08c41"), _T_160) @[Lookup.scala 31:38]
    node _T_162 = and(io.in.bits.instr, UInt<16>("h0fc63")) @[Lookup.scala 31:38]
    node _T_163 = eq(UInt<16>("h08c61"), _T_162) @[Lookup.scala 31:38]
    node _T_164 = and(io.in.bits.instr, UInt<16>("h0fc63")) @[Lookup.scala 31:38]
    node _T_165 = eq(UInt<16>("h09c01"), _T_164) @[Lookup.scala 31:38]
    node _T_166 = and(io.in.bits.instr, UInt<16>("h0fc63")) @[Lookup.scala 31:38]
    node _T_167 = eq(UInt<16>("h09c21"), _T_166) @[Lookup.scala 31:38]
    node _T_168 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_169 = eq(UInt<16>("h0a001"), _T_168) @[Lookup.scala 31:38]
    node _T_170 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_171 = eq(UInt<16>("h0c001"), _T_170) @[Lookup.scala 31:38]
    node _T_172 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_173 = eq(UInt<16>("h0e001"), _T_172) @[Lookup.scala 31:38]
    node _T_174 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_175 = eq(UInt<2>("h02"), _T_174) @[Lookup.scala 31:38]
    node _T_176 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_177 = eq(UInt<15>("h04002"), _T_176) @[Lookup.scala 31:38]
    node _T_178 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_179 = eq(UInt<15>("h06002"), _T_178) @[Lookup.scala 31:38]
    node _T_180 = and(io.in.bits.instr, UInt<16>("h0f07f")) @[Lookup.scala 31:38]
    node _T_181 = eq(UInt<16>("h08002"), _T_180) @[Lookup.scala 31:38]
    node _T_182 = and(io.in.bits.instr, UInt<16>("h0f003")) @[Lookup.scala 31:38]
    node _T_183 = eq(UInt<16>("h08002"), _T_182) @[Lookup.scala 31:38]
    node _T_184 = and(io.in.bits.instr, UInt<16>("h0ffff")) @[Lookup.scala 31:38]
    node _T_185 = eq(UInt<16>("h09002"), _T_184) @[Lookup.scala 31:38]
    node _T_186 = and(io.in.bits.instr, UInt<16>("h0f07f")) @[Lookup.scala 31:38]
    node _T_187 = eq(UInt<16>("h09002"), _T_186) @[Lookup.scala 31:38]
    node _T_188 = and(io.in.bits.instr, UInt<16>("h0f003")) @[Lookup.scala 31:38]
    node _T_189 = eq(UInt<16>("h09002"), _T_188) @[Lookup.scala 31:38]
    node _T_190 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_191 = eq(UInt<16>("h0c002"), _T_190) @[Lookup.scala 31:38]
    node _T_192 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_193 = eq(UInt<16>("h0e002"), _T_192) @[Lookup.scala 31:38]
    node _T_194 = and(io.in.bits.instr, UInt<32>("h0ffffffff")) @[Lookup.scala 31:38]
    node _T_195 = eq(UInt<7>("h073"), _T_194) @[Lookup.scala 31:38]
    node _T_196 = and(io.in.bits.instr, UInt<32>("h0ffffffff")) @[Lookup.scala 31:38]
    node _T_197 = eq(UInt<21>("h0100073"), _T_196) @[Lookup.scala 31:38]
    node _T_198 = and(io.in.bits.instr, UInt<32>("h0ffffffff")) @[Lookup.scala 31:38]
    node _T_199 = eq(UInt<30>("h030200073"), _T_198) @[Lookup.scala 31:38]
    node _T_200 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_201 = eq(UInt<4>("h0f"), _T_200) @[Lookup.scala 31:38]
    node _T_202 = and(io.in.bits.instr, UInt<32>("h0ffffffff")) @[Lookup.scala 31:38]
    node _T_203 = eq(UInt<29>("h010500073"), _T_202) @[Lookup.scala 31:38]
    node _T_204 = and(io.in.bits.instr, UInt<32>("h0ffffffff")) @[Lookup.scala 31:38]
    node _T_205 = eq(UInt<29>("h010200073"), _T_204) @[Lookup.scala 31:38]
    node _T_206 = and(io.in.bits.instr, UInt<32>("h0fe007fff")) @[Lookup.scala 31:38]
    node _T_207 = eq(UInt<29>("h012000073"), _T_206) @[Lookup.scala 31:38]
    node _T_208 = and(io.in.bits.instr, UInt<32>("h0f9f0707f")) @[Lookup.scala 31:38]
    node _T_209 = eq(UInt<29>("h01000302f"), _T_208) @[Lookup.scala 31:38]
    node _T_210 = and(io.in.bits.instr, UInt<32>("h0f9f0707f")) @[Lookup.scala 31:38]
    node _T_211 = eq(UInt<29>("h01000202f"), _T_210) @[Lookup.scala 31:38]
    node _T_212 = and(io.in.bits.instr, UInt<32>("h0f800707f")) @[Lookup.scala 31:38]
    node _T_213 = eq(UInt<29>("h01800302f"), _T_212) @[Lookup.scala 31:38]
    node _T_214 = and(io.in.bits.instr, UInt<32>("h0f800707f")) @[Lookup.scala 31:38]
    node _T_215 = eq(UInt<29>("h01800202f"), _T_214) @[Lookup.scala 31:38]
    node _T_216 = and(io.in.bits.instr, UInt<32>("h0f800607f")) @[Lookup.scala 31:38]
    node _T_217 = eq(UInt<28>("h0800202f"), _T_216) @[Lookup.scala 31:38]
    node _T_218 = and(io.in.bits.instr, UInt<32>("h0f800607f")) @[Lookup.scala 31:38]
    node _T_219 = eq(UInt<14>("h0202f"), _T_218) @[Lookup.scala 31:38]
    node _T_220 = and(io.in.bits.instr, UInt<32>("h0f800607f")) @[Lookup.scala 31:38]
    node _T_221 = eq(UInt<30>("h02000202f"), _T_220) @[Lookup.scala 31:38]
    node _T_222 = and(io.in.bits.instr, UInt<32>("h0f800607f")) @[Lookup.scala 31:38]
    node _T_223 = eq(UInt<31>("h06000202f"), _T_222) @[Lookup.scala 31:38]
    node _T_224 = and(io.in.bits.instr, UInt<32>("h0f800607f")) @[Lookup.scala 31:38]
    node _T_225 = eq(UInt<31>("h04000202f"), _T_224) @[Lookup.scala 31:38]
    node _T_226 = and(io.in.bits.instr, UInt<32>("h0f800607f")) @[Lookup.scala 31:38]
    node _T_227 = eq(UInt<32>("h08000202f"), _T_226) @[Lookup.scala 31:38]
    node _T_228 = and(io.in.bits.instr, UInt<32>("h0f800607f")) @[Lookup.scala 31:38]
    node _T_229 = eq(UInt<32>("h0a000202f"), _T_228) @[Lookup.scala 31:38]
    node _T_230 = and(io.in.bits.instr, UInt<32>("h0f800607f")) @[Lookup.scala 31:38]
    node _T_231 = eq(UInt<32>("h0c000202f"), _T_230) @[Lookup.scala 31:38]
    node _T_232 = and(io.in.bits.instr, UInt<32>("h0f800607f")) @[Lookup.scala 31:38]
    node _T_233 = eq(UInt<32>("h0e000202f"), _T_232) @[Lookup.scala 31:38]
    node _T_234 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_235 = eq(UInt<13>("h01073"), _T_234) @[Lookup.scala 31:38]
    node _T_236 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_237 = eq(UInt<14>("h02073"), _T_236) @[Lookup.scala 31:38]
    node _T_238 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_239 = eq(UInt<14>("h03073"), _T_238) @[Lookup.scala 31:38]
    node _T_240 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_241 = eq(UInt<15>("h05073"), _T_240) @[Lookup.scala 31:38]
    node _T_242 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_243 = eq(UInt<15>("h06073"), _T_242) @[Lookup.scala 31:38]
    node _T_244 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_245 = eq(UInt<15>("h07073"), _T_244) @[Lookup.scala 31:38]
    node _T_246 = and(io.in.bits.instr, UInt<32>("h0ffffffff")) @[Lookup.scala 31:38]
    node _T_247 = eq(UInt<13>("h0100f"), _T_246) @[Lookup.scala 31:38]
    node _T_248 = mux(_T_247, UInt<1>("h01"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_249 = mux(_T_245, UInt<3>("h04"), _T_248) @[Lookup.scala 33:37]
    node _T_250 = mux(_T_243, UInt<3>("h04"), _T_249) @[Lookup.scala 33:37]
    node _T_251 = mux(_T_241, UInt<3>("h04"), _T_250) @[Lookup.scala 33:37]
    node _T_252 = mux(_T_239, UInt<3>("h04"), _T_251) @[Lookup.scala 33:37]
    node _T_253 = mux(_T_237, UInt<3>("h04"), _T_252) @[Lookup.scala 33:37]
    node _T_254 = mux(_T_235, UInt<3>("h04"), _T_253) @[Lookup.scala 33:37]
    node _T_255 = mux(_T_233, UInt<3>("h05"), _T_254) @[Lookup.scala 33:37]
    node _T_256 = mux(_T_231, UInt<3>("h05"), _T_255) @[Lookup.scala 33:37]
    node _T_257 = mux(_T_229, UInt<3>("h05"), _T_256) @[Lookup.scala 33:37]
    node _T_258 = mux(_T_227, UInt<3>("h05"), _T_257) @[Lookup.scala 33:37]
    node _T_259 = mux(_T_225, UInt<3>("h05"), _T_258) @[Lookup.scala 33:37]
    node _T_260 = mux(_T_223, UInt<3>("h05"), _T_259) @[Lookup.scala 33:37]
    node _T_261 = mux(_T_221, UInt<3>("h05"), _T_260) @[Lookup.scala 33:37]
    node _T_262 = mux(_T_219, UInt<3>("h05"), _T_261) @[Lookup.scala 33:37]
    node _T_263 = mux(_T_217, UInt<3>("h05"), _T_262) @[Lookup.scala 33:37]
    node _T_264 = mux(_T_215, UInt<4>("h0f"), _T_263) @[Lookup.scala 33:37]
    node _T_265 = mux(_T_213, UInt<4>("h0f"), _T_264) @[Lookup.scala 33:37]
    node _T_266 = mux(_T_211, UInt<3>("h04"), _T_265) @[Lookup.scala 33:37]
    node _T_267 = mux(_T_209, UInt<3>("h04"), _T_266) @[Lookup.scala 33:37]
    node _T_268 = mux(_T_207, UInt<3>("h05"), _T_267) @[Lookup.scala 33:37]
    node _T_269 = mux(_T_205, UInt<3>("h04"), _T_268) @[Lookup.scala 33:37]
    node _T_270 = mux(_T_203, UInt<3>("h04"), _T_269) @[Lookup.scala 33:37]
    node _T_271 = mux(_T_201, UInt<2>("h02"), _T_270) @[Lookup.scala 33:37]
    node _T_272 = mux(_T_199, UInt<3>("h04"), _T_271) @[Lookup.scala 33:37]
    node _T_273 = mux(_T_197, UInt<3>("h04"), _T_272) @[Lookup.scala 33:37]
    node _T_274 = mux(_T_195, UInt<3>("h04"), _T_273) @[Lookup.scala 33:37]
    node _T_275 = mux(_T_193, UInt<2>("h02"), _T_274) @[Lookup.scala 33:37]
    node _T_276 = mux(_T_191, UInt<2>("h02"), _T_275) @[Lookup.scala 33:37]
    node _T_277 = mux(_T_189, UInt<3>("h05"), _T_276) @[Lookup.scala 33:37]
    node _T_278 = mux(_T_187, UInt<3>("h04"), _T_277) @[Lookup.scala 33:37]
    node _T_279 = mux(_T_185, UInt<3>("h04"), _T_278) @[Lookup.scala 33:37]
    node _T_280 = mux(_T_183, UInt<3>("h05"), _T_279) @[Lookup.scala 33:37]
    node _T_281 = mux(_T_181, UInt<3>("h04"), _T_280) @[Lookup.scala 33:37]
    node _T_282 = mux(_T_179, UInt<3>("h04"), _T_281) @[Lookup.scala 33:37]
    node _T_283 = mux(_T_177, UInt<3>("h04"), _T_282) @[Lookup.scala 33:37]
    node _T_284 = mux(_T_175, UInt<3>("h04"), _T_283) @[Lookup.scala 33:37]
    node _T_285 = mux(_T_173, UInt<1>("h01"), _T_284) @[Lookup.scala 33:37]
    node _T_286 = mux(_T_171, UInt<1>("h01"), _T_285) @[Lookup.scala 33:37]
    node _T_287 = mux(_T_169, UInt<3>("h07"), _T_286) @[Lookup.scala 33:37]
    node _T_288 = mux(_T_167, UInt<3>("h05"), _T_287) @[Lookup.scala 33:37]
    node _T_289 = mux(_T_165, UInt<3>("h05"), _T_288) @[Lookup.scala 33:37]
    node _T_290 = mux(_T_163, UInt<3>("h05"), _T_289) @[Lookup.scala 33:37]
    node _T_291 = mux(_T_161, UInt<3>("h05"), _T_290) @[Lookup.scala 33:37]
    node _T_292 = mux(_T_159, UInt<3>("h05"), _T_291) @[Lookup.scala 33:37]
    node _T_293 = mux(_T_157, UInt<3>("h05"), _T_292) @[Lookup.scala 33:37]
    node _T_294 = mux(_T_155, UInt<3>("h04"), _T_293) @[Lookup.scala 33:37]
    node _T_295 = mux(_T_153, UInt<3>("h04"), _T_294) @[Lookup.scala 33:37]
    node _T_296 = mux(_T_151, UInt<3>("h04"), _T_295) @[Lookup.scala 33:37]
    node _T_297 = mux(_T_149, UInt<3>("h04"), _T_296) @[Lookup.scala 33:37]
    node _T_298 = mux(_T_147, UInt<3>("h04"), _T_297) @[Lookup.scala 33:37]
    node _T_299 = mux(_T_145, UInt<3>("h04"), _T_298) @[Lookup.scala 33:37]
    node _T_300 = mux(_T_143, UInt<3>("h04"), _T_299) @[Lookup.scala 33:37]
    node _T_301 = mux(_T_141, UInt<3>("h04"), _T_300) @[Lookup.scala 33:37]
    node _T_302 = mux(_T_139, UInt<3>("h04"), _T_301) @[Lookup.scala 33:37]
    node _T_303 = mux(_T_137, UInt<2>("h02"), _T_302) @[Lookup.scala 33:37]
    node _T_304 = mux(_T_135, UInt<2>("h02"), _T_303) @[Lookup.scala 33:37]
    node _T_305 = mux(_T_133, UInt<3>("h04"), _T_304) @[Lookup.scala 33:37]
    node _T_306 = mux(_T_131, UInt<3>("h04"), _T_305) @[Lookup.scala 33:37]
    node _T_307 = mux(_T_129, UInt<3>("h04"), _T_306) @[Lookup.scala 33:37]
    node _T_308 = mux(_T_127, UInt<1>("h00"), _T_307) @[Lookup.scala 33:37]
    node _T_309 = mux(_T_125, UInt<3>("h05"), _T_308) @[Lookup.scala 33:37]
    node _T_310 = mux(_T_123, UInt<3>("h05"), _T_309) @[Lookup.scala 33:37]
    node _T_311 = mux(_T_121, UInt<3>("h05"), _T_310) @[Lookup.scala 33:37]
    node _T_312 = mux(_T_119, UInt<3>("h05"), _T_311) @[Lookup.scala 33:37]
    node _T_313 = mux(_T_117, UInt<3>("h05"), _T_312) @[Lookup.scala 33:37]
    node _T_314 = mux(_T_115, UInt<3>("h05"), _T_313) @[Lookup.scala 33:37]
    node _T_315 = mux(_T_113, UInt<3>("h05"), _T_314) @[Lookup.scala 33:37]
    node _T_316 = mux(_T_111, UInt<3>("h05"), _T_315) @[Lookup.scala 33:37]
    node _T_317 = mux(_T_109, UInt<3>("h05"), _T_316) @[Lookup.scala 33:37]
    node _T_318 = mux(_T_107, UInt<3>("h05"), _T_317) @[Lookup.scala 33:37]
    node _T_319 = mux(_T_105, UInt<3>("h05"), _T_318) @[Lookup.scala 33:37]
    node _T_320 = mux(_T_103, UInt<3>("h05"), _T_319) @[Lookup.scala 33:37]
    node _T_321 = mux(_T_101, UInt<3>("h05"), _T_320) @[Lookup.scala 33:37]
    node _T_322 = mux(_T_99, UInt<3>("h04"), _T_321) @[Lookup.scala 33:37]
    node _T_323 = mux(_T_97, UInt<2>("h02"), _T_322) @[Lookup.scala 33:37]
    node _T_324 = mux(_T_95, UInt<3>("h04"), _T_323) @[Lookup.scala 33:37]
    node _T_325 = mux(_T_93, UInt<3>("h04"), _T_324) @[Lookup.scala 33:37]
    node _T_326 = mux(_T_91, UInt<3>("h05"), _T_325) @[Lookup.scala 33:37]
    node _T_327 = mux(_T_89, UInt<3>("h05"), _T_326) @[Lookup.scala 33:37]
    node _T_328 = mux(_T_87, UInt<3>("h05"), _T_327) @[Lookup.scala 33:37]
    node _T_329 = mux(_T_85, UInt<3>("h05"), _T_328) @[Lookup.scala 33:37]
    node _T_330 = mux(_T_83, UInt<3>("h05"), _T_329) @[Lookup.scala 33:37]
    node _T_331 = mux(_T_81, UInt<3>("h04"), _T_330) @[Lookup.scala 33:37]
    node _T_332 = mux(_T_79, UInt<3>("h04"), _T_331) @[Lookup.scala 33:37]
    node _T_333 = mux(_T_77, UInt<3>("h04"), _T_332) @[Lookup.scala 33:37]
    node _T_334 = mux(_T_75, UInt<3>("h04"), _T_333) @[Lookup.scala 33:37]
    node _T_335 = mux(_T_73, UInt<2>("h02"), _T_334) @[Lookup.scala 33:37]
    node _T_336 = mux(_T_71, UInt<2>("h02"), _T_335) @[Lookup.scala 33:37]
    node _T_337 = mux(_T_69, UInt<2>("h02"), _T_336) @[Lookup.scala 33:37]
    node _T_338 = mux(_T_67, UInt<3>("h04"), _T_337) @[Lookup.scala 33:37]
    node _T_339 = mux(_T_65, UInt<3>("h04"), _T_338) @[Lookup.scala 33:37]
    node _T_340 = mux(_T_63, UInt<3>("h04"), _T_339) @[Lookup.scala 33:37]
    node _T_341 = mux(_T_61, UInt<3>("h04"), _T_340) @[Lookup.scala 33:37]
    node _T_342 = mux(_T_59, UInt<3>("h04"), _T_341) @[Lookup.scala 33:37]
    node _T_343 = mux(_T_57, UInt<1>("h01"), _T_342) @[Lookup.scala 33:37]
    node _T_344 = mux(_T_55, UInt<1>("h01"), _T_343) @[Lookup.scala 33:37]
    node _T_345 = mux(_T_53, UInt<1>("h01"), _T_344) @[Lookup.scala 33:37]
    node _T_346 = mux(_T_51, UInt<1>("h01"), _T_345) @[Lookup.scala 33:37]
    node _T_347 = mux(_T_49, UInt<1>("h01"), _T_346) @[Lookup.scala 33:37]
    node _T_348 = mux(_T_47, UInt<1>("h01"), _T_347) @[Lookup.scala 33:37]
    node _T_349 = mux(_T_45, UInt<3>("h04"), _T_348) @[Lookup.scala 33:37]
    node _T_350 = mux(_T_43, UInt<3>("h07"), _T_349) @[Lookup.scala 33:37]
    node _T_351 = mux(_T_41, UInt<3>("h06"), _T_350) @[Lookup.scala 33:37]
    node _T_352 = mux(_T_39, UInt<3>("h06"), _T_351) @[Lookup.scala 33:37]
    node _T_353 = mux(_T_37, UInt<3>("h05"), _T_352) @[Lookup.scala 33:37]
    node _T_354 = mux(_T_35, UInt<3>("h05"), _T_353) @[Lookup.scala 33:37]
    node _T_355 = mux(_T_33, UInt<3>("h05"), _T_354) @[Lookup.scala 33:37]
    node _T_356 = mux(_T_31, UInt<3>("h05"), _T_355) @[Lookup.scala 33:37]
    node _T_357 = mux(_T_29, UInt<3>("h05"), _T_356) @[Lookup.scala 33:37]
    node _T_358 = mux(_T_27, UInt<3>("h05"), _T_357) @[Lookup.scala 33:37]
    node _T_359 = mux(_T_25, UInt<3>("h05"), _T_358) @[Lookup.scala 33:37]
    node _T_360 = mux(_T_23, UInt<3>("h05"), _T_359) @[Lookup.scala 33:37]
    node _T_361 = mux(_T_21, UInt<3>("h05"), _T_360) @[Lookup.scala 33:37]
    node _T_362 = mux(_T_19, UInt<3>("h05"), _T_361) @[Lookup.scala 33:37]
    node _T_363 = mux(_T_17, UInt<3>("h04"), _T_362) @[Lookup.scala 33:37]
    node _T_364 = mux(_T_15, UInt<3>("h04"), _T_363) @[Lookup.scala 33:37]
    node _T_365 = mux(_T_13, UInt<3>("h04"), _T_364) @[Lookup.scala 33:37]
    node _T_366 = mux(_T_11, UInt<3>("h04"), _T_365) @[Lookup.scala 33:37]
    node _T_367 = mux(_T_9, UInt<3>("h04"), _T_366) @[Lookup.scala 33:37]
    node _T_368 = mux(_T_7, UInt<3>("h04"), _T_367) @[Lookup.scala 33:37]
    node _T_369 = mux(_T_5, UInt<3>("h04"), _T_368) @[Lookup.scala 33:37]
    node _T_370 = mux(_T_3, UInt<3>("h04"), _T_369) @[Lookup.scala 33:37]
    node decodeList_0 = mux(_T_1, UInt<3>("h04"), _T_370) @[Lookup.scala 33:37]
    node _T_371 = mux(_T_247, UInt<3>("h04"), UInt<2>("h03")) @[Lookup.scala 33:37]
    node _T_372 = mux(_T_245, UInt<2>("h03"), _T_371) @[Lookup.scala 33:37]
    node _T_373 = mux(_T_243, UInt<2>("h03"), _T_372) @[Lookup.scala 33:37]
    node _T_374 = mux(_T_241, UInt<2>("h03"), _T_373) @[Lookup.scala 33:37]
    node _T_375 = mux(_T_239, UInt<2>("h03"), _T_374) @[Lookup.scala 33:37]
    node _T_376 = mux(_T_237, UInt<2>("h03"), _T_375) @[Lookup.scala 33:37]
    node _T_377 = mux(_T_235, UInt<2>("h03"), _T_376) @[Lookup.scala 33:37]
    node _T_378 = mux(_T_233, UInt<1>("h01"), _T_377) @[Lookup.scala 33:37]
    node _T_379 = mux(_T_231, UInt<1>("h01"), _T_378) @[Lookup.scala 33:37]
    node _T_380 = mux(_T_229, UInt<1>("h01"), _T_379) @[Lookup.scala 33:37]
    node _T_381 = mux(_T_227, UInt<1>("h01"), _T_380) @[Lookup.scala 33:37]
    node _T_382 = mux(_T_225, UInt<1>("h01"), _T_381) @[Lookup.scala 33:37]
    node _T_383 = mux(_T_223, UInt<1>("h01"), _T_382) @[Lookup.scala 33:37]
    node _T_384 = mux(_T_221, UInt<1>("h01"), _T_383) @[Lookup.scala 33:37]
    node _T_385 = mux(_T_219, UInt<1>("h01"), _T_384) @[Lookup.scala 33:37]
    node _T_386 = mux(_T_217, UInt<1>("h01"), _T_385) @[Lookup.scala 33:37]
    node _T_387 = mux(_T_215, UInt<1>("h01"), _T_386) @[Lookup.scala 33:37]
    node _T_388 = mux(_T_213, UInt<1>("h01"), _T_387) @[Lookup.scala 33:37]
    node _T_389 = mux(_T_211, UInt<1>("h01"), _T_388) @[Lookup.scala 33:37]
    node _T_390 = mux(_T_209, UInt<1>("h01"), _T_389) @[Lookup.scala 33:37]
    node _T_391 = mux(_T_207, UInt<3>("h04"), _T_390) @[Lookup.scala 33:37]
    node _T_392 = mux(_T_205, UInt<2>("h03"), _T_391) @[Lookup.scala 33:37]
    node _T_393 = mux(_T_203, UInt<1>("h00"), _T_392) @[Lookup.scala 33:37]
    node _T_394 = mux(_T_201, UInt<3>("h04"), _T_393) @[Lookup.scala 33:37]
    node _T_395 = mux(_T_199, UInt<2>("h03"), _T_394) @[Lookup.scala 33:37]
    node _T_396 = mux(_T_197, UInt<2>("h03"), _T_395) @[Lookup.scala 33:37]
    node _T_397 = mux(_T_195, UInt<2>("h03"), _T_396) @[Lookup.scala 33:37]
    node _T_398 = mux(_T_193, UInt<1>("h01"), _T_397) @[Lookup.scala 33:37]
    node _T_399 = mux(_T_191, UInt<1>("h01"), _T_398) @[Lookup.scala 33:37]
    node _T_400 = mux(_T_189, UInt<1>("h00"), _T_399) @[Lookup.scala 33:37]
    node _T_401 = mux(_T_187, UInt<1>("h00"), _T_400) @[Lookup.scala 33:37]
    node _T_402 = mux(_T_185, UInt<2>("h03"), _T_401) @[Lookup.scala 33:37]
    node _T_403 = mux(_T_183, UInt<1>("h00"), _T_402) @[Lookup.scala 33:37]
    node _T_404 = mux(_T_181, UInt<1>("h00"), _T_403) @[Lookup.scala 33:37]
    node _T_405 = mux(_T_179, UInt<1>("h01"), _T_404) @[Lookup.scala 33:37]
    node _T_406 = mux(_T_177, UInt<1>("h01"), _T_405) @[Lookup.scala 33:37]
    node _T_407 = mux(_T_175, UInt<1>("h00"), _T_406) @[Lookup.scala 33:37]
    node _T_408 = mux(_T_173, UInt<1>("h00"), _T_407) @[Lookup.scala 33:37]
    node _T_409 = mux(_T_171, UInt<1>("h00"), _T_408) @[Lookup.scala 33:37]
    node _T_410 = mux(_T_169, UInt<1>("h00"), _T_409) @[Lookup.scala 33:37]
    node _T_411 = mux(_T_167, UInt<1>("h00"), _T_410) @[Lookup.scala 33:37]
    node _T_412 = mux(_T_165, UInt<1>("h00"), _T_411) @[Lookup.scala 33:37]
    node _T_413 = mux(_T_163, UInt<1>("h00"), _T_412) @[Lookup.scala 33:37]
    node _T_414 = mux(_T_161, UInt<1>("h00"), _T_413) @[Lookup.scala 33:37]
    node _T_415 = mux(_T_159, UInt<1>("h00"), _T_414) @[Lookup.scala 33:37]
    node _T_416 = mux(_T_157, UInt<1>("h00"), _T_415) @[Lookup.scala 33:37]
    node _T_417 = mux(_T_155, UInt<1>("h00"), _T_416) @[Lookup.scala 33:37]
    node _T_418 = mux(_T_153, UInt<1>("h00"), _T_417) @[Lookup.scala 33:37]
    node _T_419 = mux(_T_151, UInt<1>("h00"), _T_418) @[Lookup.scala 33:37]
    node _T_420 = mux(_T_149, UInt<1>("h00"), _T_419) @[Lookup.scala 33:37]
    node _T_421 = mux(_T_147, UInt<1>("h00"), _T_420) @[Lookup.scala 33:37]
    node _T_422 = mux(_T_145, UInt<1>("h00"), _T_421) @[Lookup.scala 33:37]
    node _T_423 = mux(_T_143, UInt<1>("h00"), _T_422) @[Lookup.scala 33:37]
    node _T_424 = mux(_T_141, UInt<1>("h00"), _T_423) @[Lookup.scala 33:37]
    node _T_425 = mux(_T_139, UInt<1>("h00"), _T_424) @[Lookup.scala 33:37]
    node _T_426 = mux(_T_137, UInt<1>("h01"), _T_425) @[Lookup.scala 33:37]
    node _T_427 = mux(_T_135, UInt<1>("h01"), _T_426) @[Lookup.scala 33:37]
    node _T_428 = mux(_T_133, UInt<1>("h01"), _T_427) @[Lookup.scala 33:37]
    node _T_429 = mux(_T_131, UInt<1>("h01"), _T_428) @[Lookup.scala 33:37]
    node _T_430 = mux(_T_129, UInt<1>("h00"), _T_429) @[Lookup.scala 33:37]
    node _T_431 = mux(_T_127, UInt<2>("h03"), _T_430) @[Lookup.scala 33:37]
    node _T_432 = mux(_T_125, UInt<2>("h02"), _T_431) @[Lookup.scala 33:37]
    node _T_433 = mux(_T_123, UInt<2>("h02"), _T_432) @[Lookup.scala 33:37]
    node _T_434 = mux(_T_121, UInt<2>("h02"), _T_433) @[Lookup.scala 33:37]
    node _T_435 = mux(_T_119, UInt<2>("h02"), _T_434) @[Lookup.scala 33:37]
    node _T_436 = mux(_T_117, UInt<2>("h02"), _T_435) @[Lookup.scala 33:37]
    node _T_437 = mux(_T_115, UInt<2>("h02"), _T_436) @[Lookup.scala 33:37]
    node _T_438 = mux(_T_113, UInt<2>("h02"), _T_437) @[Lookup.scala 33:37]
    node _T_439 = mux(_T_111, UInt<2>("h02"), _T_438) @[Lookup.scala 33:37]
    node _T_440 = mux(_T_109, UInt<2>("h02"), _T_439) @[Lookup.scala 33:37]
    node _T_441 = mux(_T_107, UInt<2>("h02"), _T_440) @[Lookup.scala 33:37]
    node _T_442 = mux(_T_105, UInt<2>("h02"), _T_441) @[Lookup.scala 33:37]
    node _T_443 = mux(_T_103, UInt<2>("h02"), _T_442) @[Lookup.scala 33:37]
    node _T_444 = mux(_T_101, UInt<2>("h02"), _T_443) @[Lookup.scala 33:37]
    node _T_445 = mux(_T_99, UInt<2>("h03"), _T_444) @[Lookup.scala 33:37]
    node _T_446 = mux(_T_97, UInt<1>("h01"), _T_445) @[Lookup.scala 33:37]
    node _T_447 = mux(_T_95, UInt<1>("h01"), _T_446) @[Lookup.scala 33:37]
    node _T_448 = mux(_T_93, UInt<1>("h01"), _T_447) @[Lookup.scala 33:37]
    node _T_449 = mux(_T_91, UInt<1>("h00"), _T_448) @[Lookup.scala 33:37]
    node _T_450 = mux(_T_89, UInt<1>("h00"), _T_449) @[Lookup.scala 33:37]
    node _T_451 = mux(_T_87, UInt<1>("h00"), _T_450) @[Lookup.scala 33:37]
    node _T_452 = mux(_T_85, UInt<1>("h00"), _T_451) @[Lookup.scala 33:37]
    node _T_453 = mux(_T_83, UInt<1>("h00"), _T_452) @[Lookup.scala 33:37]
    node _T_454 = mux(_T_81, UInt<1>("h00"), _T_453) @[Lookup.scala 33:37]
    node _T_455 = mux(_T_79, UInt<1>("h00"), _T_454) @[Lookup.scala 33:37]
    node _T_456 = mux(_T_77, UInt<1>("h00"), _T_455) @[Lookup.scala 33:37]
    node _T_457 = mux(_T_75, UInt<1>("h00"), _T_456) @[Lookup.scala 33:37]
    node _T_458 = mux(_T_73, UInt<1>("h01"), _T_457) @[Lookup.scala 33:37]
    node _T_459 = mux(_T_71, UInt<1>("h01"), _T_458) @[Lookup.scala 33:37]
    node _T_460 = mux(_T_69, UInt<1>("h01"), _T_459) @[Lookup.scala 33:37]
    node _T_461 = mux(_T_67, UInt<1>("h01"), _T_460) @[Lookup.scala 33:37]
    node _T_462 = mux(_T_65, UInt<1>("h01"), _T_461) @[Lookup.scala 33:37]
    node _T_463 = mux(_T_63, UInt<1>("h01"), _T_462) @[Lookup.scala 33:37]
    node _T_464 = mux(_T_61, UInt<1>("h01"), _T_463) @[Lookup.scala 33:37]
    node _T_465 = mux(_T_59, UInt<1>("h01"), _T_464) @[Lookup.scala 33:37]
    node _T_466 = mux(_T_57, UInt<1>("h00"), _T_465) @[Lookup.scala 33:37]
    node _T_467 = mux(_T_55, UInt<1>("h00"), _T_466) @[Lookup.scala 33:37]
    node _T_468 = mux(_T_53, UInt<1>("h00"), _T_467) @[Lookup.scala 33:37]
    node _T_469 = mux(_T_51, UInt<1>("h00"), _T_468) @[Lookup.scala 33:37]
    node _T_470 = mux(_T_49, UInt<1>("h00"), _T_469) @[Lookup.scala 33:37]
    node _T_471 = mux(_T_47, UInt<1>("h00"), _T_470) @[Lookup.scala 33:37]
    node _T_472 = mux(_T_45, UInt<1>("h00"), _T_471) @[Lookup.scala 33:37]
    node _T_473 = mux(_T_43, UInt<1>("h00"), _T_472) @[Lookup.scala 33:37]
    node _T_474 = mux(_T_41, UInt<1>("h00"), _T_473) @[Lookup.scala 33:37]
    node _T_475 = mux(_T_39, UInt<1>("h00"), _T_474) @[Lookup.scala 33:37]
    node _T_476 = mux(_T_37, UInt<1>("h00"), _T_475) @[Lookup.scala 33:37]
    node _T_477 = mux(_T_35, UInt<1>("h00"), _T_476) @[Lookup.scala 33:37]
    node _T_478 = mux(_T_33, UInt<1>("h00"), _T_477) @[Lookup.scala 33:37]
    node _T_479 = mux(_T_31, UInt<1>("h00"), _T_478) @[Lookup.scala 33:37]
    node _T_480 = mux(_T_29, UInt<1>("h00"), _T_479) @[Lookup.scala 33:37]
    node _T_481 = mux(_T_27, UInt<1>("h00"), _T_480) @[Lookup.scala 33:37]
    node _T_482 = mux(_T_25, UInt<1>("h00"), _T_481) @[Lookup.scala 33:37]
    node _T_483 = mux(_T_23, UInt<1>("h00"), _T_482) @[Lookup.scala 33:37]
    node _T_484 = mux(_T_21, UInt<1>("h00"), _T_483) @[Lookup.scala 33:37]
    node _T_485 = mux(_T_19, UInt<1>("h00"), _T_484) @[Lookup.scala 33:37]
    node _T_486 = mux(_T_17, UInt<1>("h00"), _T_485) @[Lookup.scala 33:37]
    node _T_487 = mux(_T_15, UInt<1>("h00"), _T_486) @[Lookup.scala 33:37]
    node _T_488 = mux(_T_13, UInt<1>("h00"), _T_487) @[Lookup.scala 33:37]
    node _T_489 = mux(_T_11, UInt<1>("h00"), _T_488) @[Lookup.scala 33:37]
    node _T_490 = mux(_T_9, UInt<1>("h00"), _T_489) @[Lookup.scala 33:37]
    node _T_491 = mux(_T_7, UInt<1>("h00"), _T_490) @[Lookup.scala 33:37]
    node _T_492 = mux(_T_5, UInt<1>("h00"), _T_491) @[Lookup.scala 33:37]
    node _T_493 = mux(_T_3, UInt<1>("h00"), _T_492) @[Lookup.scala 33:37]
    node decodeList_1 = mux(_T_1, UInt<1>("h00"), _T_493) @[Lookup.scala 33:37]
    node _T_494 = mux(_T_247, UInt<1>("h01"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_495 = mux(_T_245, UInt<3>("h07"), _T_494) @[Lookup.scala 33:37]
    node _T_496 = mux(_T_243, UInt<3>("h06"), _T_495) @[Lookup.scala 33:37]
    node _T_497 = mux(_T_241, UInt<3>("h05"), _T_496) @[Lookup.scala 33:37]
    node _T_498 = mux(_T_239, UInt<2>("h03"), _T_497) @[Lookup.scala 33:37]
    node _T_499 = mux(_T_237, UInt<2>("h02"), _T_498) @[Lookup.scala 33:37]
    node _T_500 = mux(_T_235, UInt<1>("h01"), _T_499) @[Lookup.scala 33:37]
    node _T_501 = mux(_T_233, UInt<6>("h032"), _T_500) @[Lookup.scala 33:37]
    node _T_502 = mux(_T_231, UInt<6>("h031"), _T_501) @[Lookup.scala 33:37]
    node _T_503 = mux(_T_229, UInt<6>("h030"), _T_502) @[Lookup.scala 33:37]
    node _T_504 = mux(_T_227, UInt<6>("h037"), _T_503) @[Lookup.scala 33:37]
    node _T_505 = mux(_T_225, UInt<6>("h026"), _T_504) @[Lookup.scala 33:37]
    node _T_506 = mux(_T_223, UInt<6>("h025"), _T_505) @[Lookup.scala 33:37]
    node _T_507 = mux(_T_221, UInt<6>("h024"), _T_506) @[Lookup.scala 33:37]
    node _T_508 = mux(_T_219, UInt<7>("h063"), _T_507) @[Lookup.scala 33:37]
    node _T_509 = mux(_T_217, UInt<6>("h022"), _T_508) @[Lookup.scala 33:37]
    node _T_510 = mux(_T_215, UInt<6>("h021"), _T_509) @[Lookup.scala 33:37]
    node _T_511 = mux(_T_213, UInt<6>("h021"), _T_510) @[Lookup.scala 33:37]
    node _T_512 = mux(_T_211, UInt<6>("h020"), _T_511) @[Lookup.scala 33:37]
    node _T_513 = mux(_T_209, UInt<6>("h020"), _T_512) @[Lookup.scala 33:37]
    node _T_514 = mux(_T_207, UInt<2>("h02"), _T_513) @[Lookup.scala 33:37]
    node _T_515 = mux(_T_205, UInt<1>("h00"), _T_514) @[Lookup.scala 33:37]
    node _T_516 = mux(_T_203, UInt<7>("h040"), _T_515) @[Lookup.scala 33:37]
    node _T_517 = mux(_T_201, UInt<1>("h00"), _T_516) @[Lookup.scala 33:37]
    node _T_518 = mux(_T_199, UInt<1>("h00"), _T_517) @[Lookup.scala 33:37]
    node _T_519 = mux(_T_197, UInt<1>("h00"), _T_518) @[Lookup.scala 33:37]
    node _T_520 = mux(_T_195, UInt<1>("h00"), _T_519) @[Lookup.scala 33:37]
    node _T_521 = mux(_T_193, UInt<4>("h0b"), _T_520) @[Lookup.scala 33:37]
    node _T_522 = mux(_T_191, UInt<4>("h0a"), _T_521) @[Lookup.scala 33:37]
    node _T_523 = mux(_T_189, UInt<7>("h040"), _T_522) @[Lookup.scala 33:37]
    node _T_524 = mux(_T_187, UInt<7>("h05a"), _T_523) @[Lookup.scala 33:37]
    node _T_525 = mux(_T_185, UInt<1>("h00"), _T_524) @[Lookup.scala 33:37]
    node _T_526 = mux(_T_183, UInt<7>("h040"), _T_525) @[Lookup.scala 33:37]
    node _T_527 = mux(_T_181, UInt<7>("h05a"), _T_526) @[Lookup.scala 33:37]
    node _T_528 = mux(_T_179, UInt<2>("h03"), _T_527) @[Lookup.scala 33:37]
    node _T_529 = mux(_T_177, UInt<2>("h02"), _T_528) @[Lookup.scala 33:37]
    node _T_530 = mux(_T_175, UInt<1>("h01"), _T_529) @[Lookup.scala 33:37]
    node _T_531 = mux(_T_173, UInt<5>("h011"), _T_530) @[Lookup.scala 33:37]
    node _T_532 = mux(_T_171, UInt<5>("h010"), _T_531) @[Lookup.scala 33:37]
    node _T_533 = mux(_T_169, UInt<7>("h058"), _T_532) @[Lookup.scala 33:37]
    node _T_534 = mux(_T_167, UInt<7>("h060"), _T_533) @[Lookup.scala 33:37]
    node _T_535 = mux(_T_165, UInt<6>("h028"), _T_534) @[Lookup.scala 33:37]
    node _T_536 = mux(_T_163, UInt<3>("h07"), _T_535) @[Lookup.scala 33:37]
    node _T_537 = mux(_T_161, UInt<3>("h06"), _T_536) @[Lookup.scala 33:37]
    node _T_538 = mux(_T_159, UInt<3>("h04"), _T_537) @[Lookup.scala 33:37]
    node _T_539 = mux(_T_157, UInt<4>("h08"), _T_538) @[Lookup.scala 33:37]
    node _T_540 = mux(_T_155, UInt<3>("h07"), _T_539) @[Lookup.scala 33:37]
    node _T_541 = mux(_T_153, UInt<4>("h0d"), _T_540) @[Lookup.scala 33:37]
    node _T_542 = mux(_T_151, UInt<3>("h05"), _T_541) @[Lookup.scala 33:37]
    node _T_543 = mux(_T_149, UInt<7>("h040"), _T_542) @[Lookup.scala 33:37]
    node _T_544 = mux(_T_147, UInt<7>("h040"), _T_543) @[Lookup.scala 33:37]
    node _T_545 = mux(_T_145, UInt<7>("h040"), _T_544) @[Lookup.scala 33:37]
    node _T_546 = mux(_T_143, UInt<7>("h060"), _T_545) @[Lookup.scala 33:37]
    node _T_547 = mux(_T_141, UInt<7>("h040"), _T_546) @[Lookup.scala 33:37]
    node _T_548 = mux(_T_139, UInt<7>("h040"), _T_547) @[Lookup.scala 33:37]
    node _T_549 = mux(_T_137, UInt<4>("h0b"), _T_548) @[Lookup.scala 33:37]
    node _T_550 = mux(_T_135, UInt<4>("h0a"), _T_549) @[Lookup.scala 33:37]
    node _T_551 = mux(_T_133, UInt<2>("h03"), _T_550) @[Lookup.scala 33:37]
    node _T_552 = mux(_T_131, UInt<2>("h02"), _T_551) @[Lookup.scala 33:37]
    node _T_553 = mux(_T_129, UInt<7>("h040"), _T_552) @[Lookup.scala 33:37]
    node _T_554 = mux(_T_127, UInt<1>("h00"), _T_553) @[Lookup.scala 33:37]
    node _T_555 = mux(_T_125, UInt<4>("h0f"), _T_554) @[Lookup.scala 33:37]
    node _T_556 = mux(_T_123, UInt<4>("h0e"), _T_555) @[Lookup.scala 33:37]
    node _T_557 = mux(_T_121, UInt<4>("h0d"), _T_556) @[Lookup.scala 33:37]
    node _T_558 = mux(_T_119, UInt<4>("h0c"), _T_557) @[Lookup.scala 33:37]
    node _T_559 = mux(_T_117, UInt<4>("h08"), _T_558) @[Lookup.scala 33:37]
    node _T_560 = mux(_T_115, UInt<3>("h07"), _T_559) @[Lookup.scala 33:37]
    node _T_561 = mux(_T_113, UInt<3>("h06"), _T_560) @[Lookup.scala 33:37]
    node _T_562 = mux(_T_111, UInt<3>("h05"), _T_561) @[Lookup.scala 33:37]
    node _T_563 = mux(_T_109, UInt<3>("h04"), _T_562) @[Lookup.scala 33:37]
    node _T_564 = mux(_T_107, UInt<2>("h03"), _T_563) @[Lookup.scala 33:37]
    node _T_565 = mux(_T_105, UInt<2>("h02"), _T_564) @[Lookup.scala 33:37]
    node _T_566 = mux(_T_103, UInt<1>("h01"), _T_565) @[Lookup.scala 33:37]
    node _T_567 = mux(_T_101, UInt<1>("h00"), _T_566) @[Lookup.scala 33:37]
    node _T_568 = mux(_T_99, UInt<2>("h02"), _T_567) @[Lookup.scala 33:37]
    node _T_569 = mux(_T_97, UInt<4>("h0b"), _T_568) @[Lookup.scala 33:37]
    node _T_570 = mux(_T_95, UInt<2>("h03"), _T_569) @[Lookup.scala 33:37]
    node _T_571 = mux(_T_93, UInt<3>("h06"), _T_570) @[Lookup.scala 33:37]
    node _T_572 = mux(_T_91, UInt<6>("h028"), _T_571) @[Lookup.scala 33:37]
    node _T_573 = mux(_T_89, UInt<7>("h060"), _T_572) @[Lookup.scala 33:37]
    node _T_574 = mux(_T_87, UInt<6>("h02d"), _T_573) @[Lookup.scala 33:37]
    node _T_575 = mux(_T_85, UInt<6>("h025"), _T_574) @[Lookup.scala 33:37]
    node _T_576 = mux(_T_83, UInt<6>("h021"), _T_575) @[Lookup.scala 33:37]
    node _T_577 = mux(_T_81, UInt<6>("h02d"), _T_576) @[Lookup.scala 33:37]
    node _T_578 = mux(_T_79, UInt<6>("h025"), _T_577) @[Lookup.scala 33:37]
    node _T_579 = mux(_T_77, UInt<6>("h021"), _T_578) @[Lookup.scala 33:37]
    node _T_580 = mux(_T_75, UInt<7>("h060"), _T_579) @[Lookup.scala 33:37]
    node _T_581 = mux(_T_73, UInt<4>("h0a"), _T_580) @[Lookup.scala 33:37]
    node _T_582 = mux(_T_71, UInt<4>("h09"), _T_581) @[Lookup.scala 33:37]
    node _T_583 = mux(_T_69, UInt<4>("h08"), _T_582) @[Lookup.scala 33:37]
    node _T_584 = mux(_T_67, UInt<3>("h05"), _T_583) @[Lookup.scala 33:37]
    node _T_585 = mux(_T_65, UInt<3>("h04"), _T_584) @[Lookup.scala 33:37]
    node _T_586 = mux(_T_63, UInt<2>("h02"), _T_585) @[Lookup.scala 33:37]
    node _T_587 = mux(_T_61, UInt<1>("h01"), _T_586) @[Lookup.scala 33:37]
    node _T_588 = mux(_T_59, UInt<1>("h00"), _T_587) @[Lookup.scala 33:37]
    node _T_589 = mux(_T_57, UInt<5>("h017"), _T_588) @[Lookup.scala 33:37]
    node _T_590 = mux(_T_55, UInt<5>("h016"), _T_589) @[Lookup.scala 33:37]
    node _T_591 = mux(_T_53, UInt<5>("h015"), _T_590) @[Lookup.scala 33:37]
    node _T_592 = mux(_T_51, UInt<5>("h014"), _T_591) @[Lookup.scala 33:37]
    node _T_593 = mux(_T_49, UInt<5>("h011"), _T_592) @[Lookup.scala 33:37]
    node _T_594 = mux(_T_47, UInt<5>("h010"), _T_593) @[Lookup.scala 33:37]
    node _T_595 = mux(_T_45, UInt<7>("h05a"), _T_594) @[Lookup.scala 33:37]
    node _T_596 = mux(_T_43, UInt<7>("h058"), _T_595) @[Lookup.scala 33:37]
    node _T_597 = mux(_T_41, UInt<7>("h040"), _T_596) @[Lookup.scala 33:37]
    node _T_598 = mux(_T_39, UInt<7>("h040"), _T_597) @[Lookup.scala 33:37]
    node _T_599 = mux(_T_37, UInt<4>("h0d"), _T_598) @[Lookup.scala 33:37]
    node _T_600 = mux(_T_35, UInt<4>("h08"), _T_599) @[Lookup.scala 33:37]
    node _T_601 = mux(_T_33, UInt<3>("h07"), _T_600) @[Lookup.scala 33:37]
    node _T_602 = mux(_T_31, UInt<3>("h06"), _T_601) @[Lookup.scala 33:37]
    node _T_603 = mux(_T_29, UInt<3>("h05"), _T_602) @[Lookup.scala 33:37]
    node _T_604 = mux(_T_27, UInt<3>("h04"), _T_603) @[Lookup.scala 33:37]
    node _T_605 = mux(_T_25, UInt<2>("h03"), _T_604) @[Lookup.scala 33:37]
    node _T_606 = mux(_T_23, UInt<2>("h02"), _T_605) @[Lookup.scala 33:37]
    node _T_607 = mux(_T_21, UInt<1>("h01"), _T_606) @[Lookup.scala 33:37]
    node _T_608 = mux(_T_19, UInt<7>("h040"), _T_607) @[Lookup.scala 33:37]
    node _T_609 = mux(_T_17, UInt<4>("h0d"), _T_608) @[Lookup.scala 33:37]
    node _T_610 = mux(_T_15, UInt<3>("h07"), _T_609) @[Lookup.scala 33:37]
    node _T_611 = mux(_T_13, UInt<3>("h06"), _T_610) @[Lookup.scala 33:37]
    node _T_612 = mux(_T_11, UInt<3>("h05"), _T_611) @[Lookup.scala 33:37]
    node _T_613 = mux(_T_9, UInt<3>("h04"), _T_612) @[Lookup.scala 33:37]
    node _T_614 = mux(_T_7, UInt<2>("h03"), _T_613) @[Lookup.scala 33:37]
    node _T_615 = mux(_T_5, UInt<2>("h02"), _T_614) @[Lookup.scala 33:37]
    node _T_616 = mux(_T_3, UInt<1>("h01"), _T_615) @[Lookup.scala 33:37]
    node decodeList_2 = mux(_T_1, UInt<7>("h040"), _T_616) @[Lookup.scala 33:37]
    node _T_617 = or(hasIntr, io.in.bits.exceptionVec[12]) @[IDU.scala 36:84]
    node _T_618 = or(_T_617, io.out.bits.cf.exceptionVec[1]) @[IDU.scala 36:127]
    node instrType = mux(_T_618, UInt<1>("h00"), decodeList_0) @[IDU.scala 36:75]
    node _T_619 = or(hasIntr, io.in.bits.exceptionVec[12]) @[IDU.scala 36:84]
    node _T_620 = or(_T_619, io.out.bits.cf.exceptionVec[1]) @[IDU.scala 36:127]
    node fuType = mux(_T_620, UInt<2>("h03"), decodeList_1) @[IDU.scala 36:75]
    node _T_621 = or(hasIntr, io.in.bits.exceptionVec[12]) @[IDU.scala 36:84]
    node _T_622 = or(_T_621, io.out.bits.cf.exceptionVec[1]) @[IDU.scala 36:127]
    node fuOpType = mux(_T_622, UInt<1>("h00"), decodeList_2) @[IDU.scala 36:75]
    node _T_623 = bits(io.in.bits.instr, 1, 0) @[IDU.scala 38:39]
    node isRVC = neq(_T_623, UInt<2>("h03")) @[IDU.scala 38:45]
    node _T_624 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_625 = eq(UInt<1>("h00"), _T_624) @[Lookup.scala 31:38]
    node _T_626 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_627 = eq(UInt<15>("h04000"), _T_626) @[Lookup.scala 31:38]
    node _T_628 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_629 = eq(UInt<15>("h06000"), _T_628) @[Lookup.scala 31:38]
    node _T_630 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_631 = eq(UInt<16>("h0c000"), _T_630) @[Lookup.scala 31:38]
    node _T_632 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_633 = eq(UInt<16>("h0e000"), _T_632) @[Lookup.scala 31:38]
    node _T_634 = and(io.in.bits.instr, UInt<16>("h0ef83")) @[Lookup.scala 31:38]
    node _T_635 = eq(UInt<1>("h01"), _T_634) @[Lookup.scala 31:38]
    node _T_636 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_637 = eq(UInt<1>("h01"), _T_636) @[Lookup.scala 31:38]
    node _T_638 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_639 = eq(UInt<14>("h02001"), _T_638) @[Lookup.scala 31:38]
    node _T_640 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_641 = eq(UInt<15>("h04001"), _T_640) @[Lookup.scala 31:38]
    node _T_642 = and(io.in.bits.instr, UInt<16>("h0ef83")) @[Lookup.scala 31:38]
    node _T_643 = eq(UInt<15>("h06101"), _T_642) @[Lookup.scala 31:38]
    node _T_644 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_645 = eq(UInt<15>("h06001"), _T_644) @[Lookup.scala 31:38]
    node _T_646 = and(io.in.bits.instr, UInt<16>("h0ec03")) @[Lookup.scala 31:38]
    node _T_647 = eq(UInt<16>("h08001"), _T_646) @[Lookup.scala 31:38]
    node _T_648 = and(io.in.bits.instr, UInt<16>("h0ec03")) @[Lookup.scala 31:38]
    node _T_649 = eq(UInt<16>("h08401"), _T_648) @[Lookup.scala 31:38]
    node _T_650 = and(io.in.bits.instr, UInt<16>("h0ec03")) @[Lookup.scala 31:38]
    node _T_651 = eq(UInt<16>("h08801"), _T_650) @[Lookup.scala 31:38]
    node _T_652 = and(io.in.bits.instr, UInt<16>("h0fc63")) @[Lookup.scala 31:38]
    node _T_653 = eq(UInt<16>("h08c01"), _T_652) @[Lookup.scala 31:38]
    node _T_654 = and(io.in.bits.instr, UInt<16>("h0fc63")) @[Lookup.scala 31:38]
    node _T_655 = eq(UInt<16>("h08c21"), _T_654) @[Lookup.scala 31:38]
    node _T_656 = and(io.in.bits.instr, UInt<16>("h0fc63")) @[Lookup.scala 31:38]
    node _T_657 = eq(UInt<16>("h08c41"), _T_656) @[Lookup.scala 31:38]
    node _T_658 = and(io.in.bits.instr, UInt<16>("h0fc63")) @[Lookup.scala 31:38]
    node _T_659 = eq(UInt<16>("h08c61"), _T_658) @[Lookup.scala 31:38]
    node _T_660 = and(io.in.bits.instr, UInt<16>("h0fc63")) @[Lookup.scala 31:38]
    node _T_661 = eq(UInt<16>("h09c01"), _T_660) @[Lookup.scala 31:38]
    node _T_662 = and(io.in.bits.instr, UInt<16>("h0fc63")) @[Lookup.scala 31:38]
    node _T_663 = eq(UInt<16>("h09c21"), _T_662) @[Lookup.scala 31:38]
    node _T_664 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_665 = eq(UInt<16>("h0a001"), _T_664) @[Lookup.scala 31:38]
    node _T_666 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_667 = eq(UInt<16>("h0c001"), _T_666) @[Lookup.scala 31:38]
    node _T_668 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_669 = eq(UInt<16>("h0e001"), _T_668) @[Lookup.scala 31:38]
    node _T_670 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_671 = eq(UInt<2>("h02"), _T_670) @[Lookup.scala 31:38]
    node _T_672 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_673 = eq(UInt<15>("h04002"), _T_672) @[Lookup.scala 31:38]
    node _T_674 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_675 = eq(UInt<15>("h06002"), _T_674) @[Lookup.scala 31:38]
    node _T_676 = and(io.in.bits.instr, UInt<16>("h0f07f")) @[Lookup.scala 31:38]
    node _T_677 = eq(UInt<16>("h08002"), _T_676) @[Lookup.scala 31:38]
    node _T_678 = and(io.in.bits.instr, UInt<16>("h0f003")) @[Lookup.scala 31:38]
    node _T_679 = eq(UInt<16>("h08002"), _T_678) @[Lookup.scala 31:38]
    node _T_680 = and(io.in.bits.instr, UInt<16>("h0ffff")) @[Lookup.scala 31:38]
    node _T_681 = eq(UInt<16>("h09002"), _T_680) @[Lookup.scala 31:38]
    node _T_682 = and(io.in.bits.instr, UInt<16>("h0f07f")) @[Lookup.scala 31:38]
    node _T_683 = eq(UInt<16>("h09002"), _T_682) @[Lookup.scala 31:38]
    node _T_684 = and(io.in.bits.instr, UInt<16>("h0f003")) @[Lookup.scala 31:38]
    node _T_685 = eq(UInt<16>("h09002"), _T_684) @[Lookup.scala 31:38]
    node _T_686 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_687 = eq(UInt<16>("h0c002"), _T_686) @[Lookup.scala 31:38]
    node _T_688 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_689 = eq(UInt<16>("h0e002"), _T_688) @[Lookup.scala 31:38]
    node _T_690 = mux(_T_689, UInt<2>("h03"), UInt<5>("h010")) @[Lookup.scala 33:37]
    node _T_691 = mux(_T_687, UInt<2>("h02"), _T_690) @[Lookup.scala 33:37]
    node _T_692 = mux(_T_685, UInt<5>("h010"), _T_691) @[Lookup.scala 33:37]
    node _T_693 = mux(_T_683, UInt<5>("h010"), _T_692) @[Lookup.scala 33:37]
    node _T_694 = mux(_T_681, UInt<4>("h0f"), _T_693) @[Lookup.scala 33:37]
    node _T_695 = mux(_T_679, UInt<5>("h010"), _T_694) @[Lookup.scala 33:37]
    node _T_696 = mux(_T_677, UInt<5>("h010"), _T_695) @[Lookup.scala 33:37]
    node _T_697 = mux(_T_675, UInt<1>("h01"), _T_696) @[Lookup.scala 33:37]
    node _T_698 = mux(_T_673, UInt<1>("h00"), _T_697) @[Lookup.scala 33:37]
    node _T_699 = mux(_T_671, UInt<4>("h0a"), _T_698) @[Lookup.scala 33:37]
    node _T_700 = mux(_T_669, UInt<4>("h09"), _T_699) @[Lookup.scala 33:37]
    node _T_701 = mux(_T_667, UInt<4>("h09"), _T_700) @[Lookup.scala 33:37]
    node _T_702 = mux(_T_665, UInt<4>("h08"), _T_701) @[Lookup.scala 33:37]
    node _T_703 = mux(_T_663, UInt<5>("h010"), _T_702) @[Lookup.scala 33:37]
    node _T_704 = mux(_T_661, UInt<5>("h010"), _T_703) @[Lookup.scala 33:37]
    node _T_705 = mux(_T_659, UInt<5>("h010"), _T_704) @[Lookup.scala 33:37]
    node _T_706 = mux(_T_657, UInt<5>("h010"), _T_705) @[Lookup.scala 33:37]
    node _T_707 = mux(_T_655, UInt<5>("h010"), _T_706) @[Lookup.scala 33:37]
    node _T_708 = mux(_T_653, UInt<5>("h010"), _T_707) @[Lookup.scala 33:37]
    node _T_709 = mux(_T_651, UInt<4>("h0a"), _T_708) @[Lookup.scala 33:37]
    node _T_710 = mux(_T_649, UInt<4>("h0a"), _T_709) @[Lookup.scala 33:37]
    node _T_711 = mux(_T_647, UInt<4>("h0a"), _T_710) @[Lookup.scala 33:37]
    node _T_712 = mux(_T_645, UInt<4>("h0b"), _T_711) @[Lookup.scala 33:37]
    node _T_713 = mux(_T_643, UInt<4>("h0d"), _T_712) @[Lookup.scala 33:37]
    node _T_714 = mux(_T_641, UInt<4>("h0a"), _T_713) @[Lookup.scala 33:37]
    node _T_715 = mux(_T_639, UInt<4>("h0c"), _T_714) @[Lookup.scala 33:37]
    node _T_716 = mux(_T_637, UInt<4>("h0c"), _T_715) @[Lookup.scala 33:37]
    node _T_717 = mux(_T_635, UInt<5>("h010"), _T_716) @[Lookup.scala 33:37]
    node _T_718 = mux(_T_633, UInt<3>("h05"), _T_717) @[Lookup.scala 33:37]
    node _T_719 = mux(_T_631, UInt<3>("h04"), _T_718) @[Lookup.scala 33:37]
    node _T_720 = mux(_T_629, UInt<3>("h07"), _T_719) @[Lookup.scala 33:37]
    node _T_721 = mux(_T_627, UInt<3>("h06"), _T_720) @[Lookup.scala 33:37]
    node rvcImmType = mux(_T_625, UInt<4>("h0e"), _T_721) @[Lookup.scala 33:37]
    node _T_722 = mux(_T_689, UInt<4>("h09"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_723 = mux(_T_687, UInt<4>("h09"), _T_722) @[Lookup.scala 33:37]
    node _T_724 = mux(_T_685, UInt<2>("h02"), _T_723) @[Lookup.scala 33:37]
    node _T_725 = mux(_T_683, UInt<3>("h04"), _T_724) @[Lookup.scala 33:37]
    node _T_726 = mux(_T_681, UInt<1>("h00"), _T_725) @[Lookup.scala 33:37]
    node _T_727 = mux(_T_679, UInt<3>("h05"), _T_726) @[Lookup.scala 33:37]
    node _T_728 = mux(_T_677, UInt<3>("h04"), _T_727) @[Lookup.scala 33:37]
    node _T_729 = mux(_T_675, UInt<4>("h09"), _T_728) @[Lookup.scala 33:37]
    node _T_730 = mux(_T_673, UInt<4>("h09"), _T_729) @[Lookup.scala 33:37]
    node _T_731 = mux(_T_671, UInt<2>("h02"), _T_730) @[Lookup.scala 33:37]
    node _T_732 = mux(_T_669, UInt<3>("h06"), _T_731) @[Lookup.scala 33:37]
    node _T_733 = mux(_T_667, UInt<3>("h06"), _T_732) @[Lookup.scala 33:37]
    node _T_734 = mux(_T_665, UInt<1>("h00"), _T_733) @[Lookup.scala 33:37]
    node _T_735 = mux(_T_663, UInt<3>("h06"), _T_734) @[Lookup.scala 33:37]
    node _T_736 = mux(_T_661, UInt<3>("h06"), _T_735) @[Lookup.scala 33:37]
    node _T_737 = mux(_T_659, UInt<3>("h06"), _T_736) @[Lookup.scala 33:37]
    node _T_738 = mux(_T_657, UInt<3>("h06"), _T_737) @[Lookup.scala 33:37]
    node _T_739 = mux(_T_655, UInt<3>("h06"), _T_738) @[Lookup.scala 33:37]
    node _T_740 = mux(_T_653, UInt<3>("h06"), _T_739) @[Lookup.scala 33:37]
    node _T_741 = mux(_T_651, UInt<3>("h06"), _T_740) @[Lookup.scala 33:37]
    node _T_742 = mux(_T_649, UInt<3>("h06"), _T_741) @[Lookup.scala 33:37]
    node _T_743 = mux(_T_647, UInt<3>("h06"), _T_742) @[Lookup.scala 33:37]
    node _T_744 = mux(_T_645, UInt<1>("h00"), _T_743) @[Lookup.scala 33:37]
    node _T_745 = mux(_T_643, UInt<4>("h09"), _T_744) @[Lookup.scala 33:37]
    node _T_746 = mux(_T_641, UInt<1>("h00"), _T_745) @[Lookup.scala 33:37]
    node _T_747 = mux(_T_639, UInt<2>("h02"), _T_746) @[Lookup.scala 33:37]
    node _T_748 = mux(_T_637, UInt<2>("h02"), _T_747) @[Lookup.scala 33:37]
    node _T_749 = mux(_T_635, UInt<1>("h00"), _T_748) @[Lookup.scala 33:37]
    node _T_750 = mux(_T_633, UInt<3>("h06"), _T_749) @[Lookup.scala 33:37]
    node _T_751 = mux(_T_631, UInt<3>("h06"), _T_750) @[Lookup.scala 33:37]
    node _T_752 = mux(_T_629, UInt<3>("h06"), _T_751) @[Lookup.scala 33:37]
    node _T_753 = mux(_T_627, UInt<3>("h06"), _T_752) @[Lookup.scala 33:37]
    node rvcSrc1Type = mux(_T_625, UInt<4>("h09"), _T_753) @[Lookup.scala 33:37]
    node _T_754 = mux(_T_689, UInt<3>("h05"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_755 = mux(_T_687, UInt<3>("h05"), _T_754) @[Lookup.scala 33:37]
    node _T_756 = mux(_T_685, UInt<3>("h05"), _T_755) @[Lookup.scala 33:37]
    node _T_757 = mux(_T_683, UInt<1>("h00"), _T_756) @[Lookup.scala 33:37]
    node _T_758 = mux(_T_681, UInt<1>("h00"), _T_757) @[Lookup.scala 33:37]
    node _T_759 = mux(_T_679, UInt<1>("h00"), _T_758) @[Lookup.scala 33:37]
    node _T_760 = mux(_T_677, UInt<1>("h00"), _T_759) @[Lookup.scala 33:37]
    node _T_761 = mux(_T_675, UInt<1>("h00"), _T_760) @[Lookup.scala 33:37]
    node _T_762 = mux(_T_673, UInt<1>("h00"), _T_761) @[Lookup.scala 33:37]
    node _T_763 = mux(_T_671, UInt<1>("h00"), _T_762) @[Lookup.scala 33:37]
    node _T_764 = mux(_T_669, UInt<1>("h00"), _T_763) @[Lookup.scala 33:37]
    node _T_765 = mux(_T_667, UInt<1>("h00"), _T_764) @[Lookup.scala 33:37]
    node _T_766 = mux(_T_665, UInt<1>("h00"), _T_765) @[Lookup.scala 33:37]
    node _T_767 = mux(_T_663, UInt<3>("h07"), _T_766) @[Lookup.scala 33:37]
    node _T_768 = mux(_T_661, UInt<3>("h07"), _T_767) @[Lookup.scala 33:37]
    node _T_769 = mux(_T_659, UInt<3>("h07"), _T_768) @[Lookup.scala 33:37]
    node _T_770 = mux(_T_657, UInt<3>("h07"), _T_769) @[Lookup.scala 33:37]
    node _T_771 = mux(_T_655, UInt<3>("h07"), _T_770) @[Lookup.scala 33:37]
    node _T_772 = mux(_T_653, UInt<3>("h07"), _T_771) @[Lookup.scala 33:37]
    node _T_773 = mux(_T_651, UInt<1>("h00"), _T_772) @[Lookup.scala 33:37]
    node _T_774 = mux(_T_649, UInt<1>("h00"), _T_773) @[Lookup.scala 33:37]
    node _T_775 = mux(_T_647, UInt<1>("h00"), _T_774) @[Lookup.scala 33:37]
    node _T_776 = mux(_T_645, UInt<1>("h00"), _T_775) @[Lookup.scala 33:37]
    node _T_777 = mux(_T_643, UInt<1>("h00"), _T_776) @[Lookup.scala 33:37]
    node _T_778 = mux(_T_641, UInt<1>("h00"), _T_777) @[Lookup.scala 33:37]
    node _T_779 = mux(_T_639, UInt<1>("h00"), _T_778) @[Lookup.scala 33:37]
    node _T_780 = mux(_T_637, UInt<1>("h00"), _T_779) @[Lookup.scala 33:37]
    node _T_781 = mux(_T_635, UInt<1>("h00"), _T_780) @[Lookup.scala 33:37]
    node _T_782 = mux(_T_633, UInt<3>("h07"), _T_781) @[Lookup.scala 33:37]
    node _T_783 = mux(_T_631, UInt<3>("h07"), _T_782) @[Lookup.scala 33:37]
    node _T_784 = mux(_T_629, UInt<1>("h00"), _T_783) @[Lookup.scala 33:37]
    node _T_785 = mux(_T_627, UInt<1>("h00"), _T_784) @[Lookup.scala 33:37]
    node rvcSrc2Type = mux(_T_625, UInt<1>("h00"), _T_785) @[Lookup.scala 33:37]
    node _T_786 = mux(_T_689, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_787 = mux(_T_687, UInt<1>("h00"), _T_786) @[Lookup.scala 33:37]
    node _T_788 = mux(_T_685, UInt<2>("h02"), _T_787) @[Lookup.scala 33:37]
    node _T_789 = mux(_T_683, UInt<4>("h08"), _T_788) @[Lookup.scala 33:37]
    node _T_790 = mux(_T_681, UInt<1>("h00"), _T_789) @[Lookup.scala 33:37]
    node _T_791 = mux(_T_679, UInt<2>("h02"), _T_790) @[Lookup.scala 33:37]
    node _T_792 = mux(_T_677, UInt<1>("h00"), _T_791) @[Lookup.scala 33:37]
    node _T_793 = mux(_T_675, UInt<2>("h02"), _T_792) @[Lookup.scala 33:37]
    node _T_794 = mux(_T_673, UInt<2>("h02"), _T_793) @[Lookup.scala 33:37]
    node _T_795 = mux(_T_671, UInt<2>("h02"), _T_794) @[Lookup.scala 33:37]
    node _T_796 = mux(_T_669, UInt<1>("h00"), _T_795) @[Lookup.scala 33:37]
    node _T_797 = mux(_T_667, UInt<1>("h00"), _T_796) @[Lookup.scala 33:37]
    node _T_798 = mux(_T_665, UInt<1>("h00"), _T_797) @[Lookup.scala 33:37]
    node _T_799 = mux(_T_663, UInt<3>("h06"), _T_798) @[Lookup.scala 33:37]
    node _T_800 = mux(_T_661, UInt<3>("h06"), _T_799) @[Lookup.scala 33:37]
    node _T_801 = mux(_T_659, UInt<3>("h06"), _T_800) @[Lookup.scala 33:37]
    node _T_802 = mux(_T_657, UInt<3>("h06"), _T_801) @[Lookup.scala 33:37]
    node _T_803 = mux(_T_655, UInt<3>("h06"), _T_802) @[Lookup.scala 33:37]
    node _T_804 = mux(_T_653, UInt<3>("h06"), _T_803) @[Lookup.scala 33:37]
    node _T_805 = mux(_T_651, UInt<3>("h06"), _T_804) @[Lookup.scala 33:37]
    node _T_806 = mux(_T_649, UInt<3>("h06"), _T_805) @[Lookup.scala 33:37]
    node _T_807 = mux(_T_647, UInt<3>("h06"), _T_806) @[Lookup.scala 33:37]
    node _T_808 = mux(_T_645, UInt<2>("h02"), _T_807) @[Lookup.scala 33:37]
    node _T_809 = mux(_T_643, UInt<4>("h09"), _T_808) @[Lookup.scala 33:37]
    node _T_810 = mux(_T_641, UInt<2>("h02"), _T_809) @[Lookup.scala 33:37]
    node _T_811 = mux(_T_639, UInt<2>("h02"), _T_810) @[Lookup.scala 33:37]
    node _T_812 = mux(_T_637, UInt<2>("h02"), _T_811) @[Lookup.scala 33:37]
    node _T_813 = mux(_T_635, UInt<1>("h00"), _T_812) @[Lookup.scala 33:37]
    node _T_814 = mux(_T_633, UInt<1>("h00"), _T_813) @[Lookup.scala 33:37]
    node _T_815 = mux(_T_631, UInt<1>("h00"), _T_814) @[Lookup.scala 33:37]
    node _T_816 = mux(_T_629, UInt<3>("h07"), _T_815) @[Lookup.scala 33:37]
    node _T_817 = mux(_T_627, UInt<3>("h07"), _T_816) @[Lookup.scala 33:37]
    node rvcDestType = mux(_T_625, UInt<3>("h07"), _T_817) @[Lookup.scala 33:37]
    io.out.bits.data.imm is invalid @[IDU.scala 42:15]
    io.out.bits.data.src2 is invalid @[IDU.scala 42:15]
    io.out.bits.data.src1 is invalid @[IDU.scala 42:15]
    io.out.bits.ctrl.isBlocked is invalid @[IDU.scala 42:15]
    io.out.bits.ctrl.noSpecExec is invalid @[IDU.scala 42:15]
    io.out.bits.ctrl.isSrc2Forward is invalid @[IDU.scala 42:15]
    io.out.bits.ctrl.isSrc1Forward is invalid @[IDU.scala 42:15]
    io.out.bits.ctrl.isNutCoreTrap is invalid @[IDU.scala 42:15]
    io.out.bits.ctrl.rfDest is invalid @[IDU.scala 42:15]
    io.out.bits.ctrl.rfWen is invalid @[IDU.scala 42:15]
    io.out.bits.ctrl.rfSrc2 is invalid @[IDU.scala 42:15]
    io.out.bits.ctrl.rfSrc1 is invalid @[IDU.scala 42:15]
    io.out.bits.ctrl.fuOpType is invalid @[IDU.scala 42:15]
    io.out.bits.ctrl.fuType is invalid @[IDU.scala 42:15]
    io.out.bits.ctrl.src2Type is invalid @[IDU.scala 42:15]
    io.out.bits.ctrl.src1Type is invalid @[IDU.scala 42:15]
    io.out.bits.cf.crossPageIPFFix is invalid @[IDU.scala 42:15]
    io.out.bits.cf.isRVC is invalid @[IDU.scala 42:15]
    io.out.bits.cf.brIdx is invalid @[IDU.scala 42:15]
    io.out.bits.cf.intrVec[0] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.intrVec[1] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.intrVec[2] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.intrVec[3] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.intrVec[4] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.intrVec[5] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.intrVec[6] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.intrVec[7] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.intrVec[8] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.intrVec[9] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.intrVec[10] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.intrVec[11] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.exceptionVec[0] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.exceptionVec[1] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.exceptionVec[2] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.exceptionVec[3] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.exceptionVec[4] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.exceptionVec[5] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.exceptionVec[6] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.exceptionVec[7] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.exceptionVec[8] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.exceptionVec[9] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.exceptionVec[10] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.exceptionVec[11] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.exceptionVec[12] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.exceptionVec[13] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.exceptionVec[14] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.exceptionVec[15] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.redirect.valid is invalid @[IDU.scala 42:15]
    io.out.bits.cf.redirect.rtype is invalid @[IDU.scala 42:15]
    io.out.bits.cf.redirect.target is invalid @[IDU.scala 42:15]
    io.out.bits.cf.pnpc is invalid @[IDU.scala 42:15]
    io.out.bits.cf.pc is invalid @[IDU.scala 42:15]
    io.out.bits.cf.instr is invalid @[IDU.scala 42:15]
    io.out.bits.ctrl.fuType <= fuType @[IDU.scala 44:27]
    io.out.bits.ctrl.fuOpType <= fuOpType @[IDU.scala 45:29]
    node _T_818 = eq(UInt<3>("h04"), instrType) @[LookupTree.scala 24:34]
    node _T_819 = eq(UInt<3>("h05"), instrType) @[LookupTree.scala 24:34]
    node _T_820 = eq(UInt<2>("h02"), instrType) @[LookupTree.scala 24:34]
    node _T_821 = eq(UInt<4>("h0f"), instrType) @[LookupTree.scala 24:34]
    node _T_822 = eq(UInt<1>("h01"), instrType) @[LookupTree.scala 24:34]
    node _T_823 = eq(UInt<3>("h06"), instrType) @[LookupTree.scala 24:34]
    node _T_824 = eq(UInt<3>("h07"), instrType) @[LookupTree.scala 24:34]
    node _T_825 = eq(UInt<1>("h00"), instrType) @[LookupTree.scala 24:34]
    node _T_826 = mux(_T_818, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_827 = mux(_T_819, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_828 = mux(_T_820, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_829 = mux(_T_821, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_830 = mux(_T_822, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_831 = mux(_T_823, UInt<1>("h01"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_832 = mux(_T_824, UInt<1>("h01"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_833 = mux(_T_825, UInt<1>("h01"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_834 = or(_T_826, _T_827) @[Mux.scala 27:72]
    node _T_835 = or(_T_834, _T_828) @[Mux.scala 27:72]
    node _T_836 = or(_T_835, _T_829) @[Mux.scala 27:72]
    node _T_837 = or(_T_836, _T_830) @[Mux.scala 27:72]
    node _T_838 = or(_T_837, _T_831) @[Mux.scala 27:72]
    node _T_839 = or(_T_838, _T_832) @[Mux.scala 27:72]
    node _T_840 = or(_T_839, _T_833) @[Mux.scala 27:72]
    wire src1Type : UInt<1> @[Mux.scala 27:72]
    src1Type <= _T_840 @[Mux.scala 27:72]
    node _T_841 = eq(UInt<3>("h04"), instrType) @[LookupTree.scala 24:34]
    node _T_842 = eq(UInt<3>("h05"), instrType) @[LookupTree.scala 24:34]
    node _T_843 = eq(UInt<2>("h02"), instrType) @[LookupTree.scala 24:34]
    node _T_844 = eq(UInt<4>("h0f"), instrType) @[LookupTree.scala 24:34]
    node _T_845 = eq(UInt<1>("h01"), instrType) @[LookupTree.scala 24:34]
    node _T_846 = eq(UInt<3>("h06"), instrType) @[LookupTree.scala 24:34]
    node _T_847 = eq(UInt<3>("h07"), instrType) @[LookupTree.scala 24:34]
    node _T_848 = eq(UInt<1>("h00"), instrType) @[LookupTree.scala 24:34]
    node _T_849 = mux(_T_841, UInt<1>("h01"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_850 = mux(_T_842, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_851 = mux(_T_843, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_852 = mux(_T_844, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_853 = mux(_T_845, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_854 = mux(_T_846, UInt<1>("h01"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_855 = mux(_T_847, UInt<1>("h01"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_856 = mux(_T_848, UInt<1>("h01"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_857 = or(_T_849, _T_850) @[Mux.scala 27:72]
    node _T_858 = or(_T_857, _T_851) @[Mux.scala 27:72]
    node _T_859 = or(_T_858, _T_852) @[Mux.scala 27:72]
    node _T_860 = or(_T_859, _T_853) @[Mux.scala 27:72]
    node _T_861 = or(_T_860, _T_854) @[Mux.scala 27:72]
    node _T_862 = or(_T_861, _T_855) @[Mux.scala 27:72]
    node _T_863 = or(_T_862, _T_856) @[Mux.scala 27:72]
    wire src2Type : UInt<1> @[Mux.scala 27:72]
    src2Type <= _T_863 @[Mux.scala 27:72]
    node rs = bits(io.in.bits.instr, 19, 15) @[IDU.scala 60:28]
    node rt = bits(io.in.bits.instr, 24, 20) @[IDU.scala 60:43]
    node rd = bits(io.in.bits.instr, 11, 7) @[IDU.scala 60:58]
    node rs1 = bits(io.in.bits.instr, 11, 7) @[IDU.scala 62:24]
    node rs2 = bits(io.in.bits.instr, 6, 2) @[IDU.scala 63:24]
    node _T_864 = bits(io.in.bits.instr, 9, 7) @[IDU.scala 64:35]
    node _T_865 = eq(UInt<1>("h00"), _T_864) @[LookupTree.scala 24:34]
    node _T_866 = eq(UInt<1>("h01"), _T_864) @[LookupTree.scala 24:34]
    node _T_867 = eq(UInt<2>("h02"), _T_864) @[LookupTree.scala 24:34]
    node _T_868 = eq(UInt<2>("h03"), _T_864) @[LookupTree.scala 24:34]
    node _T_869 = eq(UInt<3>("h04"), _T_864) @[LookupTree.scala 24:34]
    node _T_870 = eq(UInt<3>("h05"), _T_864) @[LookupTree.scala 24:34]
    node _T_871 = eq(UInt<3>("h06"), _T_864) @[LookupTree.scala 24:34]
    node _T_872 = eq(UInt<3>("h07"), _T_864) @[LookupTree.scala 24:34]
    node _T_873 = mux(_T_865, UInt<4>("h08"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_874 = mux(_T_866, UInt<4>("h09"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_875 = mux(_T_867, UInt<4>("h0a"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_876 = mux(_T_868, UInt<4>("h0b"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_877 = mux(_T_869, UInt<4>("h0c"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_878 = mux(_T_870, UInt<4>("h0d"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_879 = mux(_T_871, UInt<4>("h0e"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_880 = mux(_T_872, UInt<4>("h0f"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_881 = or(_T_873, _T_874) @[Mux.scala 27:72]
    node _T_882 = or(_T_881, _T_875) @[Mux.scala 27:72]
    node _T_883 = or(_T_882, _T_876) @[Mux.scala 27:72]
    node _T_884 = or(_T_883, _T_877) @[Mux.scala 27:72]
    node _T_885 = or(_T_884, _T_878) @[Mux.scala 27:72]
    node _T_886 = or(_T_885, _T_879) @[Mux.scala 27:72]
    node _T_887 = or(_T_886, _T_880) @[Mux.scala 27:72]
    wire rs1p : UInt<4> @[Mux.scala 27:72]
    rs1p <= _T_887 @[Mux.scala 27:72]
    node _T_888 = bits(io.in.bits.instr, 4, 2) @[IDU.scala 65:35]
    node _T_889 = eq(UInt<1>("h00"), _T_888) @[LookupTree.scala 24:34]
    node _T_890 = eq(UInt<1>("h01"), _T_888) @[LookupTree.scala 24:34]
    node _T_891 = eq(UInt<2>("h02"), _T_888) @[LookupTree.scala 24:34]
    node _T_892 = eq(UInt<2>("h03"), _T_888) @[LookupTree.scala 24:34]
    node _T_893 = eq(UInt<3>("h04"), _T_888) @[LookupTree.scala 24:34]
    node _T_894 = eq(UInt<3>("h05"), _T_888) @[LookupTree.scala 24:34]
    node _T_895 = eq(UInt<3>("h06"), _T_888) @[LookupTree.scala 24:34]
    node _T_896 = eq(UInt<3>("h07"), _T_888) @[LookupTree.scala 24:34]
    node _T_897 = mux(_T_889, UInt<4>("h08"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_898 = mux(_T_890, UInt<4>("h09"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_899 = mux(_T_891, UInt<4>("h0a"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_900 = mux(_T_892, UInt<4>("h0b"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_901 = mux(_T_893, UInt<4>("h0c"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_902 = mux(_T_894, UInt<4>("h0d"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_903 = mux(_T_895, UInt<4>("h0e"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_904 = mux(_T_896, UInt<4>("h0f"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_905 = or(_T_897, _T_898) @[Mux.scala 27:72]
    node _T_906 = or(_T_905, _T_899) @[Mux.scala 27:72]
    node _T_907 = or(_T_906, _T_900) @[Mux.scala 27:72]
    node _T_908 = or(_T_907, _T_901) @[Mux.scala 27:72]
    node _T_909 = or(_T_908, _T_902) @[Mux.scala 27:72]
    node _T_910 = or(_T_909, _T_903) @[Mux.scala 27:72]
    node _T_911 = or(_T_910, _T_904) @[Mux.scala 27:72]
    wire rs2p : UInt<4> @[Mux.scala 27:72]
    rs2p <= _T_911 @[Mux.scala 27:72]
    node _T_912 = bits(io.in.bits.instr, 12, 12) @[IDU.scala 66:28]
    node _T_913 = bits(io.in.bits.instr, 6, 2) @[IDU.scala 66:38]
    node rvc_shamt = cat(_T_912, _T_913) @[Cat.scala 29:58]
    node _T_914 = eq(UInt<1>("h00"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_915 = eq(UInt<2>("h03"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_916 = eq(UInt<1>("h01"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_917 = eq(UInt<2>("h02"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_918 = eq(UInt<3>("h04"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_919 = eq(UInt<3>("h05"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_920 = eq(UInt<3>("h06"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_921 = eq(UInt<3>("h07"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_922 = eq(UInt<4>("h08"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_923 = eq(UInt<4>("h09"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_924 = mux(_T_914, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_925 = mux(_T_915, rs, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_926 = mux(_T_916, rt, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_927 = mux(_T_917, rd, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_928 = mux(_T_918, rs1, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_929 = mux(_T_919, rs2, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_930 = mux(_T_920, rs1p, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_931 = mux(_T_921, rs2p, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_932 = mux(_T_922, UInt<1>("h01"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_933 = mux(_T_923, UInt<2>("h02"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_934 = or(_T_924, _T_925) @[Mux.scala 27:72]
    node _T_935 = or(_T_934, _T_926) @[Mux.scala 27:72]
    node _T_936 = or(_T_935, _T_927) @[Mux.scala 27:72]
    node _T_937 = or(_T_936, _T_928) @[Mux.scala 27:72]
    node _T_938 = or(_T_937, _T_929) @[Mux.scala 27:72]
    node _T_939 = or(_T_938, _T_930) @[Mux.scala 27:72]
    node _T_940 = or(_T_939, _T_931) @[Mux.scala 27:72]
    node _T_941 = or(_T_940, _T_932) @[Mux.scala 27:72]
    node _T_942 = or(_T_941, _T_933) @[Mux.scala 27:72]
    wire rvc_src1 : UInt<5> @[Mux.scala 27:72]
    rvc_src1 <= _T_942 @[Mux.scala 27:72]
    node _T_943 = eq(UInt<1>("h00"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_944 = eq(UInt<2>("h03"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_945 = eq(UInt<1>("h01"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_946 = eq(UInt<2>("h02"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_947 = eq(UInt<3>("h04"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_948 = eq(UInt<3>("h05"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_949 = eq(UInt<3>("h06"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_950 = eq(UInt<3>("h07"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_951 = eq(UInt<4>("h08"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_952 = eq(UInt<4>("h09"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_953 = mux(_T_943, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_954 = mux(_T_944, rs, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_955 = mux(_T_945, rt, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_956 = mux(_T_946, rd, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_957 = mux(_T_947, rs1, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_958 = mux(_T_948, rs2, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_959 = mux(_T_949, rs1p, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_960 = mux(_T_950, rs2p, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_961 = mux(_T_951, UInt<1>("h01"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_962 = mux(_T_952, UInt<2>("h02"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_963 = or(_T_953, _T_954) @[Mux.scala 27:72]
    node _T_964 = or(_T_963, _T_955) @[Mux.scala 27:72]
    node _T_965 = or(_T_964, _T_956) @[Mux.scala 27:72]
    node _T_966 = or(_T_965, _T_957) @[Mux.scala 27:72]
    node _T_967 = or(_T_966, _T_958) @[Mux.scala 27:72]
    node _T_968 = or(_T_967, _T_959) @[Mux.scala 27:72]
    node _T_969 = or(_T_968, _T_960) @[Mux.scala 27:72]
    node _T_970 = or(_T_969, _T_961) @[Mux.scala 27:72]
    node _T_971 = or(_T_970, _T_962) @[Mux.scala 27:72]
    wire rvc_src2 : UInt<5> @[Mux.scala 27:72]
    rvc_src2 <= _T_971 @[Mux.scala 27:72]
    node _T_972 = eq(UInt<1>("h00"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_973 = eq(UInt<2>("h03"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_974 = eq(UInt<1>("h01"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_975 = eq(UInt<2>("h02"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_976 = eq(UInt<3>("h04"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_977 = eq(UInt<3>("h05"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_978 = eq(UInt<3>("h06"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_979 = eq(UInt<3>("h07"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_980 = eq(UInt<4>("h08"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_981 = eq(UInt<4>("h09"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_982 = mux(_T_972, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_983 = mux(_T_973, rs, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_984 = mux(_T_974, rt, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_985 = mux(_T_975, rd, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_986 = mux(_T_976, rs1, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_987 = mux(_T_977, rs2, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_988 = mux(_T_978, rs1p, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_989 = mux(_T_979, rs2p, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_990 = mux(_T_980, UInt<1>("h01"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_991 = mux(_T_981, UInt<2>("h02"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_992 = or(_T_982, _T_983) @[Mux.scala 27:72]
    node _T_993 = or(_T_992, _T_984) @[Mux.scala 27:72]
    node _T_994 = or(_T_993, _T_985) @[Mux.scala 27:72]
    node _T_995 = or(_T_994, _T_986) @[Mux.scala 27:72]
    node _T_996 = or(_T_995, _T_987) @[Mux.scala 27:72]
    node _T_997 = or(_T_996, _T_988) @[Mux.scala 27:72]
    node _T_998 = or(_T_997, _T_989) @[Mux.scala 27:72]
    node _T_999 = or(_T_998, _T_990) @[Mux.scala 27:72]
    node _T_1000 = or(_T_999, _T_991) @[Mux.scala 27:72]
    wire rvc_dest : UInt<5> @[Mux.scala 27:72]
    rvc_dest <= _T_1000 @[Mux.scala 27:72]
    node rfSrc1 = mux(isRVC, rvc_src1, rs) @[IDU.scala 87:19]
    node rfSrc2 = mux(isRVC, rvc_src2, rt) @[IDU.scala 88:19]
    node rfDest = mux(isRVC, rvc_dest, rd) @[IDU.scala 89:19]
    node _T_1001 = eq(src1Type, UInt<1>("h01")) @[IDU.scala 92:43]
    node _T_1002 = mux(_T_1001, UInt<1>("h00"), rfSrc1) @[IDU.scala 92:33]
    io.out.bits.ctrl.rfSrc1 <= _T_1002 @[IDU.scala 92:27]
    node _T_1003 = eq(src2Type, UInt<1>("h00")) @[IDU.scala 93:43]
    node _T_1004 = mux(_T_1003, rfSrc2, UInt<1>("h00")) @[IDU.scala 93:33]
    io.out.bits.ctrl.rfSrc2 <= _T_1004 @[IDU.scala 93:27]
    node _T_1005 = bits(instrType, 2, 2) @[Decode.scala 33:50]
    io.out.bits.ctrl.rfWen <= _T_1005 @[IDU.scala 94:27]
    node _T_1006 = bits(instrType, 2, 2) @[Decode.scala 33:50]
    node _T_1007 = mux(_T_1006, rfDest, UInt<1>("h00")) @[IDU.scala 95:33]
    io.out.bits.ctrl.rfDest <= _T_1007 @[IDU.scala 95:27]
    io.out.bits.data.imm is invalid @[IDU.scala 97:20]
    io.out.bits.data.src2 is invalid @[IDU.scala 97:20]
    io.out.bits.data.src1 is invalid @[IDU.scala 97:20]
    node _T_1008 = bits(io.in.bits.instr, 31, 20) @[IDU.scala 99:29]
    node _T_1009 = bits(_T_1008, 11, 11) @[BitUtils.scala 39:20]
    node _T_1010 = bits(_T_1009, 0, 0) @[Bitwise.scala 72:15]
    node _T_1011 = mux(_T_1010, UInt<52>("h0fffffffffffff"), UInt<52>("h00")) @[Bitwise.scala 72:12]
    node _T_1012 = cat(_T_1011, _T_1008) @[Cat.scala 29:58]
    node _T_1013 = bits(io.in.bits.instr, 31, 25) @[IDU.scala 100:33]
    node _T_1014 = bits(io.in.bits.instr, 11, 7) @[IDU.scala 100:48]
    node _T_1015 = cat(_T_1013, _T_1014) @[Cat.scala 29:58]
    node _T_1016 = bits(_T_1015, 11, 11) @[BitUtils.scala 39:20]
    node _T_1017 = bits(_T_1016, 0, 0) @[Bitwise.scala 72:15]
    node _T_1018 = mux(_T_1017, UInt<52>("h0fffffffffffff"), UInt<52>("h00")) @[Bitwise.scala 72:12]
    node _T_1019 = cat(_T_1018, _T_1015) @[Cat.scala 29:58]
    node _T_1020 = bits(io.in.bits.instr, 31, 25) @[IDU.scala 101:33]
    node _T_1021 = bits(io.in.bits.instr, 11, 7) @[IDU.scala 101:48]
    node _T_1022 = cat(_T_1020, _T_1021) @[Cat.scala 29:58]
    node _T_1023 = bits(_T_1022, 11, 11) @[BitUtils.scala 39:20]
    node _T_1024 = bits(_T_1023, 0, 0) @[Bitwise.scala 72:15]
    node _T_1025 = mux(_T_1024, UInt<52>("h0fffffffffffff"), UInt<52>("h00")) @[Bitwise.scala 72:12]
    node _T_1026 = cat(_T_1025, _T_1022) @[Cat.scala 29:58]
    node _T_1027 = bits(io.in.bits.instr, 31, 31) @[IDU.scala 102:33]
    node _T_1028 = bits(io.in.bits.instr, 7, 7) @[IDU.scala 102:44]
    node _T_1029 = bits(io.in.bits.instr, 30, 25) @[IDU.scala 102:54]
    node _T_1030 = bits(io.in.bits.instr, 11, 8) @[IDU.scala 102:69]
    node _T_1031 = cat(_T_1030, UInt<1>("h00")) @[Cat.scala 29:58]
    node _T_1032 = cat(_T_1027, _T_1028) @[Cat.scala 29:58]
    node _T_1033 = cat(_T_1032, _T_1029) @[Cat.scala 29:58]
    node _T_1034 = cat(_T_1033, _T_1031) @[Cat.scala 29:58]
    node _T_1035 = bits(_T_1034, 12, 12) @[BitUtils.scala 39:20]
    node _T_1036 = bits(_T_1035, 0, 0) @[Bitwise.scala 72:15]
    node _T_1037 = mux(_T_1036, UInt<51>("h07ffffffffffff"), UInt<51>("h00")) @[Bitwise.scala 72:12]
    node _T_1038 = cat(_T_1037, _T_1034) @[Cat.scala 29:58]
    node _T_1039 = bits(io.in.bits.instr, 31, 12) @[IDU.scala 103:33]
    node _T_1040 = cat(_T_1039, UInt<12>("h00")) @[Cat.scala 29:58]
    node _T_1041 = bits(_T_1040, 31, 31) @[BitUtils.scala 39:20]
    node _T_1042 = bits(_T_1041, 0, 0) @[Bitwise.scala 72:15]
    node _T_1043 = mux(_T_1042, UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 72:12]
    node _T_1044 = cat(_T_1043, _T_1040) @[Cat.scala 29:58]
    node _T_1045 = bits(io.in.bits.instr, 31, 31) @[IDU.scala 104:33]
    node _T_1046 = bits(io.in.bits.instr, 19, 12) @[IDU.scala 104:44]
    node _T_1047 = bits(io.in.bits.instr, 20, 20) @[IDU.scala 104:59]
    node _T_1048 = bits(io.in.bits.instr, 30, 21) @[IDU.scala 104:70]
    node _T_1049 = cat(_T_1048, UInt<1>("h00")) @[Cat.scala 29:58]
    node _T_1050 = cat(_T_1045, _T_1046) @[Cat.scala 29:58]
    node _T_1051 = cat(_T_1050, _T_1047) @[Cat.scala 29:58]
    node _T_1052 = cat(_T_1051, _T_1049) @[Cat.scala 29:58]
    node _T_1053 = bits(_T_1052, 20, 20) @[BitUtils.scala 39:20]
    node _T_1054 = bits(_T_1053, 0, 0) @[Bitwise.scala 72:15]
    node _T_1055 = mux(_T_1054, UInt<43>("h07ffffffffff"), UInt<43>("h00")) @[Bitwise.scala 72:12]
    node _T_1056 = cat(_T_1055, _T_1052) @[Cat.scala 29:58]
    node _T_1057 = eq(UInt<3>("h04"), instrType) @[LookupTree.scala 24:34]
    node _T_1058 = eq(UInt<2>("h02"), instrType) @[LookupTree.scala 24:34]
    node _T_1059 = eq(UInt<4>("h0f"), instrType) @[LookupTree.scala 24:34]
    node _T_1060 = eq(UInt<1>("h01"), instrType) @[LookupTree.scala 24:34]
    node _T_1061 = eq(UInt<3>("h06"), instrType) @[LookupTree.scala 24:34]
    node _T_1062 = eq(UInt<3>("h07"), instrType) @[LookupTree.scala 24:34]
    node _T_1063 = mux(_T_1057, _T_1012, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1064 = mux(_T_1058, _T_1019, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1065 = mux(_T_1059, _T_1026, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1066 = mux(_T_1060, _T_1038, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1067 = mux(_T_1061, _T_1044, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1068 = mux(_T_1062, _T_1056, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1069 = or(_T_1063, _T_1064) @[Mux.scala 27:72]
    node _T_1070 = or(_T_1069, _T_1065) @[Mux.scala 27:72]
    node _T_1071 = or(_T_1070, _T_1066) @[Mux.scala 27:72]
    node _T_1072 = or(_T_1071, _T_1067) @[Mux.scala 27:72]
    node _T_1073 = or(_T_1072, _T_1068) @[Mux.scala 27:72]
    wire imm : UInt<64> @[Mux.scala 27:72]
    imm <= _T_1073 @[Mux.scala 27:72]
    node _T_1074 = bits(io.in.bits.instr, 3, 2) @[IDU.scala 109:43]
    node _T_1075 = bits(io.in.bits.instr, 12, 12) @[IDU.scala 109:55]
    node _T_1076 = bits(io.in.bits.instr, 6, 4) @[IDU.scala 109:66]
    node _T_1077 = cat(_T_1076, UInt<2>("h00")) @[Cat.scala 29:58]
    node _T_1078 = cat(_T_1074, _T_1075) @[Cat.scala 29:58]
    node _T_1079 = cat(_T_1078, _T_1077) @[Cat.scala 29:58]
    node _T_1080 = cat(UInt<56>("h00"), _T_1079) @[Cat.scala 29:58]
    node _T_1081 = bits(io.in.bits.instr, 4, 2) @[IDU.scala 110:43]
    node _T_1082 = bits(io.in.bits.instr, 12, 12) @[IDU.scala 110:55]
    node _T_1083 = bits(io.in.bits.instr, 6, 5) @[IDU.scala 110:66]
    node _T_1084 = cat(_T_1083, UInt<3>("h00")) @[Cat.scala 29:58]
    node _T_1085 = cat(_T_1081, _T_1082) @[Cat.scala 29:58]
    node _T_1086 = cat(_T_1085, _T_1084) @[Cat.scala 29:58]
    node _T_1087 = cat(UInt<55>("h00"), _T_1086) @[Cat.scala 29:58]
    node _T_1088 = bits(io.in.bits.instr, 8, 7) @[IDU.scala 111:43]
    node _T_1089 = bits(io.in.bits.instr, 12, 9) @[IDU.scala 111:55]
    node _T_1090 = cat(_T_1088, _T_1089) @[Cat.scala 29:58]
    node _T_1091 = cat(_T_1090, UInt<2>("h00")) @[Cat.scala 29:58]
    node _T_1092 = cat(UInt<56>("h00"), _T_1091) @[Cat.scala 29:58]
    node _T_1093 = bits(io.in.bits.instr, 9, 7) @[IDU.scala 112:43]
    node _T_1094 = bits(io.in.bits.instr, 12, 10) @[IDU.scala 112:55]
    node _T_1095 = cat(_T_1093, _T_1094) @[Cat.scala 29:58]
    node _T_1096 = cat(_T_1095, UInt<3>("h00")) @[Cat.scala 29:58]
    node _T_1097 = cat(UInt<55>("h00"), _T_1096) @[Cat.scala 29:58]
    node _T_1098 = bits(io.in.bits.instr, 5, 5) @[IDU.scala 113:43]
    node _T_1099 = bits(io.in.bits.instr, 12, 10) @[IDU.scala 113:53]
    node _T_1100 = bits(io.in.bits.instr, 6, 6) @[IDU.scala 113:67]
    node _T_1101 = cat(_T_1100, UInt<2>("h00")) @[Cat.scala 29:58]
    node _T_1102 = cat(_T_1098, _T_1099) @[Cat.scala 29:58]
    node _T_1103 = cat(_T_1102, _T_1101) @[Cat.scala 29:58]
    node _T_1104 = cat(UInt<57>("h00"), _T_1103) @[Cat.scala 29:58]
    node _T_1105 = bits(io.in.bits.instr, 6, 5) @[IDU.scala 114:43]
    node _T_1106 = bits(io.in.bits.instr, 12, 10) @[IDU.scala 114:55]
    node _T_1107 = cat(_T_1105, _T_1106) @[Cat.scala 29:58]
    node _T_1108 = cat(_T_1107, UInt<3>("h00")) @[Cat.scala 29:58]
    node _T_1109 = cat(UInt<56>("h00"), _T_1108) @[Cat.scala 29:58]
    node _T_1110 = bits(io.in.bits.instr, 5, 5) @[IDU.scala 115:43]
    node _T_1111 = bits(io.in.bits.instr, 12, 10) @[IDU.scala 115:53]
    node _T_1112 = bits(io.in.bits.instr, 6, 6) @[IDU.scala 115:67]
    node _T_1113 = cat(_T_1112, UInt<2>("h00")) @[Cat.scala 29:58]
    node _T_1114 = cat(_T_1110, _T_1111) @[Cat.scala 29:58]
    node _T_1115 = cat(_T_1114, _T_1113) @[Cat.scala 29:58]
    node _T_1116 = cat(UInt<57>("h00"), _T_1115) @[Cat.scala 29:58]
    node _T_1117 = bits(io.in.bits.instr, 6, 5) @[IDU.scala 116:43]
    node _T_1118 = bits(io.in.bits.instr, 12, 10) @[IDU.scala 116:55]
    node _T_1119 = cat(_T_1117, _T_1118) @[Cat.scala 29:58]
    node _T_1120 = cat(_T_1119, UInt<3>("h00")) @[Cat.scala 29:58]
    node _T_1121 = cat(UInt<56>("h00"), _T_1120) @[Cat.scala 29:58]
    node _T_1122 = bits(io.in.bits.instr, 12, 12) @[IDU.scala 117:43]
    node _T_1123 = bits(io.in.bits.instr, 8, 8) @[IDU.scala 117:54]
    node _T_1124 = bits(io.in.bits.instr, 10, 9) @[IDU.scala 117:64]
    node _T_1125 = bits(io.in.bits.instr, 6, 6) @[IDU.scala 117:77]
    node _T_1126 = bits(io.in.bits.instr, 7, 7) @[IDU.scala 117:87]
    node _T_1127 = bits(io.in.bits.instr, 2, 2) @[IDU.scala 117:97]
    node _T_1128 = bits(io.in.bits.instr, 11, 11) @[IDU.scala 117:107]
    node _T_1129 = bits(io.in.bits.instr, 5, 3) @[IDU.scala 117:118]
    node _T_1130 = cat(_T_1129, UInt<1>("h00")) @[Cat.scala 29:58]
    node _T_1131 = cat(_T_1127, _T_1128) @[Cat.scala 29:58]
    node _T_1132 = cat(_T_1131, _T_1130) @[Cat.scala 29:58]
    node _T_1133 = cat(_T_1125, _T_1126) @[Cat.scala 29:58]
    node _T_1134 = cat(_T_1122, _T_1123) @[Cat.scala 29:58]
    node _T_1135 = cat(_T_1134, _T_1124) @[Cat.scala 29:58]
    node _T_1136 = cat(_T_1135, _T_1133) @[Cat.scala 29:58]
    node _T_1137 = cat(_T_1136, _T_1132) @[Cat.scala 29:58]
    node _T_1138 = bits(_T_1137, 11, 11) @[BitUtils.scala 39:20]
    node _T_1139 = bits(_T_1138, 0, 0) @[Bitwise.scala 72:15]
    node _T_1140 = mux(_T_1139, UInt<52>("h0fffffffffffff"), UInt<52>("h00")) @[Bitwise.scala 72:12]
    node _T_1141 = cat(_T_1140, _T_1137) @[Cat.scala 29:58]
    node _T_1142 = bits(io.in.bits.instr, 12, 12) @[IDU.scala 118:43]
    node _T_1143 = bits(io.in.bits.instr, 6, 5) @[IDU.scala 118:54]
    node _T_1144 = bits(io.in.bits.instr, 2, 2) @[IDU.scala 118:66]
    node _T_1145 = bits(io.in.bits.instr, 11, 10) @[IDU.scala 118:76]
    node _T_1146 = bits(io.in.bits.instr, 4, 3) @[IDU.scala 118:90]
    node _T_1147 = cat(_T_1145, _T_1146) @[Cat.scala 29:58]
    node _T_1148 = cat(_T_1147, UInt<1>("h00")) @[Cat.scala 29:58]
    node _T_1149 = cat(_T_1142, _T_1143) @[Cat.scala 29:58]
    node _T_1150 = cat(_T_1149, _T_1144) @[Cat.scala 29:58]
    node _T_1151 = cat(_T_1150, _T_1148) @[Cat.scala 29:58]
    node _T_1152 = bits(_T_1151, 8, 8) @[BitUtils.scala 39:20]
    node _T_1153 = bits(_T_1152, 0, 0) @[Bitwise.scala 72:15]
    node _T_1154 = mux(_T_1153, UInt<55>("h07fffffffffffff"), UInt<55>("h00")) @[Bitwise.scala 72:12]
    node _T_1155 = cat(_T_1154, _T_1151) @[Cat.scala 29:58]
    node _T_1156 = bits(io.in.bits.instr, 12, 12) @[IDU.scala 119:43]
    node _T_1157 = bits(io.in.bits.instr, 6, 2) @[IDU.scala 119:54]
    node _T_1158 = cat(_T_1156, _T_1157) @[Cat.scala 29:58]
    node _T_1159 = bits(_T_1158, 5, 5) @[BitUtils.scala 39:20]
    node _T_1160 = bits(_T_1159, 0, 0) @[Bitwise.scala 72:15]
    node _T_1161 = mux(_T_1160, UInt<58>("h03ffffffffffffff"), UInt<58>("h00")) @[Bitwise.scala 72:12]
    node _T_1162 = cat(_T_1161, _T_1158) @[Cat.scala 29:58]
    node _T_1163 = bits(io.in.bits.instr, 12, 12) @[IDU.scala 120:43]
    node _T_1164 = bits(io.in.bits.instr, 6, 2) @[IDU.scala 120:54]
    node _T_1165 = cat(_T_1163, _T_1164) @[Cat.scala 29:58]
    node _T_1166 = cat(_T_1165, UInt<12>("h00")) @[Cat.scala 29:58]
    node _T_1167 = bits(_T_1166, 17, 17) @[BitUtils.scala 39:20]
    node _T_1168 = bits(_T_1167, 0, 0) @[Bitwise.scala 72:15]
    node _T_1169 = mux(_T_1168, UInt<46>("h03fffffffffff"), UInt<46>("h00")) @[Bitwise.scala 72:12]
    node _T_1170 = cat(_T_1169, _T_1166) @[Cat.scala 29:58]
    node _T_1171 = bits(io.in.bits.instr, 12, 12) @[IDU.scala 121:43]
    node _T_1172 = bits(io.in.bits.instr, 6, 2) @[IDU.scala 121:54]
    node _T_1173 = cat(_T_1171, _T_1172) @[Cat.scala 29:58]
    node _T_1174 = bits(_T_1173, 5, 5) @[BitUtils.scala 39:20]
    node _T_1175 = bits(_T_1174, 0, 0) @[Bitwise.scala 72:15]
    node _T_1176 = mux(_T_1175, UInt<58>("h03ffffffffffffff"), UInt<58>("h00")) @[Bitwise.scala 72:12]
    node _T_1177 = cat(_T_1176, _T_1173) @[Cat.scala 29:58]
    node _T_1178 = bits(io.in.bits.instr, 12, 12) @[IDU.scala 122:45]
    node _T_1179 = bits(io.in.bits.instr, 4, 3) @[IDU.scala 122:56]
    node _T_1180 = bits(io.in.bits.instr, 5, 5) @[IDU.scala 122:68]
    node _T_1181 = bits(io.in.bits.instr, 2, 2) @[IDU.scala 122:78]
    node _T_1182 = bits(io.in.bits.instr, 6, 6) @[IDU.scala 122:88]
    node _T_1183 = cat(_T_1181, _T_1182) @[Cat.scala 29:58]
    node _T_1184 = cat(_T_1183, UInt<4>("h00")) @[Cat.scala 29:58]
    node _T_1185 = cat(_T_1178, _T_1179) @[Cat.scala 29:58]
    node _T_1186 = cat(_T_1185, _T_1180) @[Cat.scala 29:58]
    node _T_1187 = cat(_T_1186, _T_1184) @[Cat.scala 29:58]
    node _T_1188 = bits(_T_1187, 9, 9) @[BitUtils.scala 39:20]
    node _T_1189 = bits(_T_1188, 0, 0) @[Bitwise.scala 72:15]
    node _T_1190 = mux(_T_1189, UInt<54>("h03fffffffffffff"), UInt<54>("h00")) @[Bitwise.scala 72:12]
    node _T_1191 = cat(_T_1190, _T_1187) @[Cat.scala 29:58]
    node _T_1192 = bits(io.in.bits.instr, 10, 7) @[IDU.scala 123:44]
    node _T_1193 = bits(io.in.bits.instr, 12, 11) @[IDU.scala 123:57]
    node _T_1194 = bits(io.in.bits.instr, 5, 5) @[IDU.scala 123:71]
    node _T_1195 = bits(io.in.bits.instr, 6, 6) @[IDU.scala 123:81]
    node _T_1196 = cat(_T_1195, UInt<2>("h00")) @[Cat.scala 29:58]
    node _T_1197 = cat(_T_1192, _T_1193) @[Cat.scala 29:58]
    node _T_1198 = cat(_T_1197, _T_1194) @[Cat.scala 29:58]
    node _T_1199 = cat(_T_1198, _T_1196) @[Cat.scala 29:58]
    node _T_1200 = cat(UInt<54>("h00"), _T_1199) @[Cat.scala 29:58]
    node _T_1201 = eq(UInt<5>("h010"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1202 = eq(UInt<1>("h00"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1203 = eq(UInt<1>("h01"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1204 = eq(UInt<2>("h02"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1205 = eq(UInt<2>("h03"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1206 = eq(UInt<3>("h04"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1207 = eq(UInt<3>("h05"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1208 = eq(UInt<3>("h06"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1209 = eq(UInt<3>("h07"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1210 = eq(UInt<4>("h08"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1211 = eq(UInt<4>("h09"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1212 = eq(UInt<4>("h0a"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1213 = eq(UInt<4>("h0b"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1214 = eq(UInt<4>("h0c"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1215 = eq(UInt<4>("h0d"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1216 = eq(UInt<4>("h0e"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1217 = eq(UInt<4>("h0f"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1218 = mux(_T_1201, UInt<64>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1219 = mux(_T_1202, _T_1080, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1220 = mux(_T_1203, _T_1087, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1221 = mux(_T_1204, _T_1092, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1222 = mux(_T_1205, _T_1097, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1223 = mux(_T_1206, _T_1104, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1224 = mux(_T_1207, _T_1109, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1225 = mux(_T_1208, _T_1116, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1226 = mux(_T_1209, _T_1121, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1227 = mux(_T_1210, _T_1141, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1228 = mux(_T_1211, _T_1155, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1229 = mux(_T_1212, _T_1162, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1230 = mux(_T_1213, _T_1170, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1231 = mux(_T_1214, _T_1177, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1232 = mux(_T_1215, _T_1191, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1233 = mux(_T_1216, _T_1200, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1234 = mux(_T_1217, UInt<64>("h01"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1235 = or(_T_1218, _T_1219) @[Mux.scala 27:72]
    node _T_1236 = or(_T_1235, _T_1220) @[Mux.scala 27:72]
    node _T_1237 = or(_T_1236, _T_1221) @[Mux.scala 27:72]
    node _T_1238 = or(_T_1237, _T_1222) @[Mux.scala 27:72]
    node _T_1239 = or(_T_1238, _T_1223) @[Mux.scala 27:72]
    node _T_1240 = or(_T_1239, _T_1224) @[Mux.scala 27:72]
    node _T_1241 = or(_T_1240, _T_1225) @[Mux.scala 27:72]
    node _T_1242 = or(_T_1241, _T_1226) @[Mux.scala 27:72]
    node _T_1243 = or(_T_1242, _T_1227) @[Mux.scala 27:72]
    node _T_1244 = or(_T_1243, _T_1228) @[Mux.scala 27:72]
    node _T_1245 = or(_T_1244, _T_1229) @[Mux.scala 27:72]
    node _T_1246 = or(_T_1245, _T_1230) @[Mux.scala 27:72]
    node _T_1247 = or(_T_1246, _T_1231) @[Mux.scala 27:72]
    node _T_1248 = or(_T_1247, _T_1232) @[Mux.scala 27:72]
    node _T_1249 = or(_T_1248, _T_1233) @[Mux.scala 27:72]
    node _T_1250 = or(_T_1249, _T_1234) @[Mux.scala 27:72]
    wire immrvc : UInt<64> @[Mux.scala 27:72]
    immrvc <= _T_1250 @[Mux.scala 27:72]
    node _T_1251 = mux(isRVC, immrvc, imm) @[IDU.scala 128:31]
    io.out.bits.data.imm <= _T_1251 @[IDU.scala 128:25]
    node _T_1252 = eq(fuType, UInt<1>("h00")) @[IDU.scala 130:16]
    when _T_1252 : @[IDU.scala 130:32]
      node _T_1253 = eq(rfDest, UInt<1>("h01")) @[IDU.scala 131:34]
      node _T_1254 = eq(rfDest, UInt<3>("h05")) @[IDU.scala 131:49]
      node _T_1255 = or(_T_1253, _T_1254) @[IDU.scala 131:42]
      node _T_1256 = eq(fuOpType, UInt<7>("h058")) @[IDU.scala 132:38]
      node _T_1257 = and(_T_1255, _T_1256) @[IDU.scala 132:26]
      when _T_1257 : @[IDU.scala 132:57]
        io.out.bits.ctrl.fuOpType <= UInt<7>("h05c") @[IDU.scala 132:85]
        skip @[IDU.scala 132:57]
      node _T_1258 = eq(fuOpType, UInt<7>("h05a")) @[IDU.scala 133:20]
      when _T_1258 : @[IDU.scala 133:40]
        node _T_1259 = eq(rfSrc1, UInt<1>("h01")) @[IDU.scala 131:34]
        node _T_1260 = eq(rfSrc1, UInt<3>("h05")) @[IDU.scala 131:49]
        node _T_1261 = or(_T_1259, _T_1260) @[IDU.scala 131:42]
        when _T_1261 : @[IDU.scala 134:29]
          io.out.bits.ctrl.fuOpType <= UInt<7>("h05e") @[IDU.scala 134:57]
          skip @[IDU.scala 134:29]
        node _T_1262 = eq(rfDest, UInt<1>("h01")) @[IDU.scala 131:34]
        node _T_1263 = eq(rfDest, UInt<3>("h05")) @[IDU.scala 131:49]
        node _T_1264 = or(_T_1262, _T_1263) @[IDU.scala 131:42]
        when _T_1264 : @[IDU.scala 135:29]
          io.out.bits.ctrl.fuOpType <= UInt<7>("h05c") @[IDU.scala 135:57]
          skip @[IDU.scala 135:29]
        skip @[IDU.scala 133:40]
      skip @[IDU.scala 130:32]
    node _T_1265 = bits(io.in.bits.instr, 6, 0) @[IDU.scala 139:41]
    node _T_1266 = eq(_T_1265, UInt<6>("h037")) @[IDU.scala 139:47]
    node _T_1267 = mux(_T_1266, UInt<1>("h00"), src1Type) @[IDU.scala 139:35]
    io.out.bits.ctrl.src1Type <= _T_1267 @[IDU.scala 139:29]
    io.out.bits.ctrl.src2Type <= src2Type @[IDU.scala 140:29]
    node _T_1268 = bits(io.in.bits.instr, 31, 0) @[IDU.scala 150:43]
    node _T_1269 = and(_T_1268, UInt<15>("h0707f")) @[IDU.scala 150:50]
    node _T_1270 = eq(UInt<7>("h06b"), _T_1269) @[IDU.scala 150:50]
    node _T_1271 = and(_T_1270, io.in.valid) @[IDU.scala 150:72]
    io.out.bits.ctrl.isNutCoreTrap <= _T_1271 @[IDU.scala 150:34]
    node _T_1272 = eq(io.out.bits.ctrl.fuType, UInt<2>("h03")) @[IDU.scala 151:78]
    io.out.bits.ctrl.noSpecExec <= _T_1272 @[IDU.scala 151:31]
    node _T_1273 = eq(io.out.bits.ctrl.fuType, UInt<1>("h01")) @[IDU.scala 154:29]
    node _T_1274 = bits(io.out.bits.ctrl.fuOpType, 5, 5) @[LSU.scala 54:38]
    node _T_1275 = and(_T_1273, _T_1274) @[IDU.scala 154:44]
    node _T_1276 = eq(io.out.bits.ctrl.fuType, UInt<3>("h04")) @[IDU.scala 155:48]
    node _T_1277 = or(_T_1275, _T_1276) @[IDU.scala 154:91]
    io.out.bits.ctrl.isBlocked <= _T_1277 @[IDU.scala 152:30]
    io.out.valid <= io.in.valid @[IDU.scala 159:16]
    node _T_1278 = eq(io.in.valid, UInt<1>("h00")) @[IDU.scala 160:18]
    node _T_1279 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_1280 = eq(hasIntr, UInt<1>("h00")) @[IDU.scala 160:51]
    node _T_1281 = and(_T_1279, _T_1280) @[IDU.scala 160:48]
    node _T_1282 = or(_T_1278, _T_1281) @[IDU.scala 160:31]
    io.in.ready <= _T_1282 @[IDU.scala 160:15]
    io.out.bits.cf.crossPageIPFFix <= io.in.bits.crossPageIPFFix @[IDU.scala 161:18]
    io.out.bits.cf.isRVC <= io.in.bits.isRVC @[IDU.scala 161:18]
    io.out.bits.cf.brIdx <= io.in.bits.brIdx @[IDU.scala 161:18]
    io.out.bits.cf.intrVec[0] <= io.in.bits.intrVec[0] @[IDU.scala 161:18]
    io.out.bits.cf.intrVec[1] <= io.in.bits.intrVec[1] @[IDU.scala 161:18]
    io.out.bits.cf.intrVec[2] <= io.in.bits.intrVec[2] @[IDU.scala 161:18]
    io.out.bits.cf.intrVec[3] <= io.in.bits.intrVec[3] @[IDU.scala 161:18]
    io.out.bits.cf.intrVec[4] <= io.in.bits.intrVec[4] @[IDU.scala 161:18]
    io.out.bits.cf.intrVec[5] <= io.in.bits.intrVec[5] @[IDU.scala 161:18]
    io.out.bits.cf.intrVec[6] <= io.in.bits.intrVec[6] @[IDU.scala 161:18]
    io.out.bits.cf.intrVec[7] <= io.in.bits.intrVec[7] @[IDU.scala 161:18]
    io.out.bits.cf.intrVec[8] <= io.in.bits.intrVec[8] @[IDU.scala 161:18]
    io.out.bits.cf.intrVec[9] <= io.in.bits.intrVec[9] @[IDU.scala 161:18]
    io.out.bits.cf.intrVec[10] <= io.in.bits.intrVec[10] @[IDU.scala 161:18]
    io.out.bits.cf.intrVec[11] <= io.in.bits.intrVec[11] @[IDU.scala 161:18]
    io.out.bits.cf.exceptionVec[0] <= io.in.bits.exceptionVec[0] @[IDU.scala 161:18]
    io.out.bits.cf.exceptionVec[1] <= io.in.bits.exceptionVec[1] @[IDU.scala 161:18]
    io.out.bits.cf.exceptionVec[2] <= io.in.bits.exceptionVec[2] @[IDU.scala 161:18]
    io.out.bits.cf.exceptionVec[3] <= io.in.bits.exceptionVec[3] @[IDU.scala 161:18]
    io.out.bits.cf.exceptionVec[4] <= io.in.bits.exceptionVec[4] @[IDU.scala 161:18]
    io.out.bits.cf.exceptionVec[5] <= io.in.bits.exceptionVec[5] @[IDU.scala 161:18]
    io.out.bits.cf.exceptionVec[6] <= io.in.bits.exceptionVec[6] @[IDU.scala 161:18]
    io.out.bits.cf.exceptionVec[7] <= io.in.bits.exceptionVec[7] @[IDU.scala 161:18]
    io.out.bits.cf.exceptionVec[8] <= io.in.bits.exceptionVec[8] @[IDU.scala 161:18]
    io.out.bits.cf.exceptionVec[9] <= io.in.bits.exceptionVec[9] @[IDU.scala 161:18]
    io.out.bits.cf.exceptionVec[10] <= io.in.bits.exceptionVec[10] @[IDU.scala 161:18]
    io.out.bits.cf.exceptionVec[11] <= io.in.bits.exceptionVec[11] @[IDU.scala 161:18]
    io.out.bits.cf.exceptionVec[12] <= io.in.bits.exceptionVec[12] @[IDU.scala 161:18]
    io.out.bits.cf.exceptionVec[13] <= io.in.bits.exceptionVec[13] @[IDU.scala 161:18]
    io.out.bits.cf.exceptionVec[14] <= io.in.bits.exceptionVec[14] @[IDU.scala 161:18]
    io.out.bits.cf.exceptionVec[15] <= io.in.bits.exceptionVec[15] @[IDU.scala 161:18]
    io.out.bits.cf.redirect.valid <= io.in.bits.redirect.valid @[IDU.scala 161:18]
    io.out.bits.cf.redirect.rtype <= io.in.bits.redirect.rtype @[IDU.scala 161:18]
    io.out.bits.cf.redirect.target <= io.in.bits.redirect.target @[IDU.scala 161:18]
    io.out.bits.cf.pnpc <= io.in.bits.pnpc @[IDU.scala 161:18]
    io.out.bits.cf.pc <= io.in.bits.pc @[IDU.scala 161:18]
    io.out.bits.cf.instr <= io.in.bits.instr @[IDU.scala 161:18]
    node _T_1283 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    reg _T_1284 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_1285 = add(_T_1284, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_1286 = tail(_T_1285, 1) @[GTimer.scala 25:12]
    _T_1284 <= _T_1286 @[GTimer.scala 25:7]
    wire _T_1287 : UInt<1>
    _T_1287 <= UInt<1>("h00")
    node _T_1288 = and(_T_1283, _T_1287) @[Debug.scala 55:16]
    when _T_1288 : @[Debug.scala 55:31]
      node _T_1289 = asUInt(reset) @[Debug.scala 56:24]
      node _T_1290 = eq(_T_1289, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_1290 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] Decoder: ", _T_1284) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_1291 = asUInt(reset) @[Debug.scala 57:13]
      node _T_1292 = eq(_T_1291, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_1292 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "issue: pc %x npc %x instr %x\n", io.out.bits.cf.pc, io.out.bits.cf.pnpc, io.out.bits.cf.instr) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    wire intrVec : UInt<12>
    intrVec <= UInt<12>("h00")
    node _T_1293 = bits(intrVec, 0, 0) @[IDU.scala 169:38]
    node _T_1294 = bits(intrVec, 1, 1) @[IDU.scala 169:38]
    node _T_1295 = bits(intrVec, 2, 2) @[IDU.scala 169:38]
    node _T_1296 = bits(intrVec, 3, 3) @[IDU.scala 169:38]
    node _T_1297 = bits(intrVec, 4, 4) @[IDU.scala 169:38]
    node _T_1298 = bits(intrVec, 5, 5) @[IDU.scala 169:38]
    node _T_1299 = bits(intrVec, 6, 6) @[IDU.scala 169:38]
    node _T_1300 = bits(intrVec, 7, 7) @[IDU.scala 169:38]
    node _T_1301 = bits(intrVec, 8, 8) @[IDU.scala 169:38]
    node _T_1302 = bits(intrVec, 9, 9) @[IDU.scala 169:38]
    node _T_1303 = bits(intrVec, 10, 10) @[IDU.scala 169:38]
    node _T_1304 = bits(intrVec, 11, 11) @[IDU.scala 169:38]
    io.out.bits.cf.intrVec[0] <= _T_1293 @[IDU.scala 169:68]
    io.out.bits.cf.intrVec[1] <= _T_1294 @[IDU.scala 169:68]
    io.out.bits.cf.intrVec[2] <= _T_1295 @[IDU.scala 169:68]
    io.out.bits.cf.intrVec[3] <= _T_1296 @[IDU.scala 169:68]
    io.out.bits.cf.intrVec[4] <= _T_1297 @[IDU.scala 169:68]
    io.out.bits.cf.intrVec[5] <= _T_1298 @[IDU.scala 169:68]
    io.out.bits.cf.intrVec[6] <= _T_1299 @[IDU.scala 169:68]
    io.out.bits.cf.intrVec[7] <= _T_1300 @[IDU.scala 169:68]
    io.out.bits.cf.intrVec[8] <= _T_1301 @[IDU.scala 169:68]
    io.out.bits.cf.intrVec[9] <= _T_1302 @[IDU.scala 169:68]
    io.out.bits.cf.intrVec[10] <= _T_1303 @[IDU.scala 169:68]
    io.out.bits.cf.intrVec[11] <= _T_1304 @[IDU.scala 169:68]
    node _T_1305 = orr(intrVec) @[IDU.scala 170:22]
    hasIntr <= _T_1305 @[IDU.scala 170:11]
    wire vmEnable : UInt<1>
    vmEnable <= UInt<1>("h00")
    io.out.bits.cf.exceptionVec[0] <= UInt<1>("h00") @[IDU.scala 175:37]
    io.out.bits.cf.exceptionVec[1] <= UInt<1>("h00") @[IDU.scala 175:37]
    io.out.bits.cf.exceptionVec[2] <= UInt<1>("h00") @[IDU.scala 175:37]
    io.out.bits.cf.exceptionVec[3] <= UInt<1>("h00") @[IDU.scala 175:37]
    io.out.bits.cf.exceptionVec[4] <= UInt<1>("h00") @[IDU.scala 175:37]
    io.out.bits.cf.exceptionVec[5] <= UInt<1>("h00") @[IDU.scala 175:37]
    io.out.bits.cf.exceptionVec[6] <= UInt<1>("h00") @[IDU.scala 175:37]
    io.out.bits.cf.exceptionVec[7] <= UInt<1>("h00") @[IDU.scala 175:37]
    io.out.bits.cf.exceptionVec[8] <= UInt<1>("h00") @[IDU.scala 175:37]
    io.out.bits.cf.exceptionVec[9] <= UInt<1>("h00") @[IDU.scala 175:37]
    io.out.bits.cf.exceptionVec[10] <= UInt<1>("h00") @[IDU.scala 175:37]
    io.out.bits.cf.exceptionVec[11] <= UInt<1>("h00") @[IDU.scala 175:37]
    io.out.bits.cf.exceptionVec[12] <= UInt<1>("h00") @[IDU.scala 175:37]
    io.out.bits.cf.exceptionVec[13] <= UInt<1>("h00") @[IDU.scala 175:37]
    io.out.bits.cf.exceptionVec[14] <= UInt<1>("h00") @[IDU.scala 175:37]
    io.out.bits.cf.exceptionVec[15] <= UInt<1>("h00") @[IDU.scala 175:37]
    node _T_1306 = eq(instrType, UInt<1>("h00")) @[IDU.scala 176:59]
    node _T_1307 = eq(hasIntr, UInt<1>("h00")) @[IDU.scala 176:73]
    node _T_1308 = and(_T_1306, _T_1307) @[IDU.scala 176:70]
    node _T_1309 = and(_T_1308, io.in.valid) @[IDU.scala 176:83]
    io.out.bits.cf.exceptionVec[2] <= _T_1309 @[IDU.scala 176:45]
    io.out.bits.cf.exceptionVec[12] <= io.in.bits.exceptionVec[12] @[IDU.scala 177:47]
    node _T_1310 = bits(io.in.bits.pc, 38, 32) @[IDU.scala 179:67]
    node _T_1311 = orr(_T_1310) @[IDU.scala 179:94]
    node _T_1312 = eq(vmEnable, UInt<1>("h00")) @[IDU.scala 179:101]
    node _T_1313 = and(_T_1311, _T_1312) @[IDU.scala 179:98]
    io.out.bits.cf.exceptionVec[1] <= _T_1313 @[IDU.scala 179:51]
    node _T_1314 = and(io.in.bits.instr, UInt<15>("h0707f")) @[IDU.scala 184:44]
    node _T_1315 = eq(UInt<7>("h06b"), _T_1314) @[IDU.scala 184:44]
    node _T_1316 = and(_T_1315, io.in.valid) @[IDU.scala 184:66]
    io.out.bits.ctrl.isNutCoreTrap <= _T_1316 @[IDU.scala 184:34]
    node _T_1317 = and(io.in.bits.instr, UInt<32>("h0ffffffff")) @[IDU.scala 185:22]
    node _T_1318 = eq(UInt<29>("h010500073"), _T_1317) @[IDU.scala 185:22]
    node _T_1319 = and(_T_1318, io.in.valid) @[IDU.scala 185:43]
    io.isWFI <= _T_1319 @[IDU.scala 185:12]
    
  module Decoder_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {cf : {instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>}, ctrl : {src1Type : UInt<1>, src2Type : UInt<1>, fuType : UInt<3>, fuOpType : UInt<7>, rfSrc1 : UInt<5>, rfSrc2 : UInt<5>, rfWen : UInt<1>, rfDest : UInt<5>, isNutCoreTrap : UInt<1>, isSrc1Forward : UInt<1>, isSrc2Forward : UInt<1>, noSpecExec : UInt<1>, isBlocked : UInt<1>}, data : {src1 : UInt<64>, src2 : UInt<64>, imm : UInt<64>}}}, isWFI : UInt<1>}
    
    wire hasIntr : UInt<1> @[IDU.scala 32:21]
    node _T = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_1 = eq(UInt<5>("h013"), _T) @[Lookup.scala 31:38]
    node _T_2 = and(io.in.bits.instr, UInt<32>("h0fc00707f")) @[Lookup.scala 31:38]
    node _T_3 = eq(UInt<13>("h01013"), _T_2) @[Lookup.scala 31:38]
    node _T_4 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_5 = eq(UInt<14>("h02013"), _T_4) @[Lookup.scala 31:38]
    node _T_6 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_7 = eq(UInt<14>("h03013"), _T_6) @[Lookup.scala 31:38]
    node _T_8 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_9 = eq(UInt<15>("h04013"), _T_8) @[Lookup.scala 31:38]
    node _T_10 = and(io.in.bits.instr, UInt<32>("h0fc00707f")) @[Lookup.scala 31:38]
    node _T_11 = eq(UInt<15>("h05013"), _T_10) @[Lookup.scala 31:38]
    node _T_12 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_13 = eq(UInt<15>("h06013"), _T_12) @[Lookup.scala 31:38]
    node _T_14 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_15 = eq(UInt<15>("h07013"), _T_14) @[Lookup.scala 31:38]
    node _T_16 = and(io.in.bits.instr, UInt<32>("h0fc00707f")) @[Lookup.scala 31:38]
    node _T_17 = eq(UInt<31>("h040005013"), _T_16) @[Lookup.scala 31:38]
    node _T_18 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_19 = eq(UInt<6>("h033"), _T_18) @[Lookup.scala 31:38]
    node _T_20 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_21 = eq(UInt<13>("h01033"), _T_20) @[Lookup.scala 31:38]
    node _T_22 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_23 = eq(UInt<14>("h02033"), _T_22) @[Lookup.scala 31:38]
    node _T_24 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_25 = eq(UInt<14>("h03033"), _T_24) @[Lookup.scala 31:38]
    node _T_26 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_27 = eq(UInt<15>("h04033"), _T_26) @[Lookup.scala 31:38]
    node _T_28 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_29 = eq(UInt<15>("h05033"), _T_28) @[Lookup.scala 31:38]
    node _T_30 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_31 = eq(UInt<15>("h06033"), _T_30) @[Lookup.scala 31:38]
    node _T_32 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_33 = eq(UInt<15>("h07033"), _T_32) @[Lookup.scala 31:38]
    node _T_34 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_35 = eq(UInt<31>("h040000033"), _T_34) @[Lookup.scala 31:38]
    node _T_36 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_37 = eq(UInt<31>("h040005033"), _T_36) @[Lookup.scala 31:38]
    node _T_38 = and(io.in.bits.instr, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_39 = eq(UInt<5>("h017"), _T_38) @[Lookup.scala 31:38]
    node _T_40 = and(io.in.bits.instr, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_41 = eq(UInt<6>("h037"), _T_40) @[Lookup.scala 31:38]
    node _T_42 = and(io.in.bits.instr, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_43 = eq(UInt<7>("h06f"), _T_42) @[Lookup.scala 31:38]
    node _T_44 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_45 = eq(UInt<7>("h067"), _T_44) @[Lookup.scala 31:38]
    node _T_46 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_47 = eq(UInt<7>("h063"), _T_46) @[Lookup.scala 31:38]
    node _T_48 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_49 = eq(UInt<13>("h01063"), _T_48) @[Lookup.scala 31:38]
    node _T_50 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_51 = eq(UInt<15>("h04063"), _T_50) @[Lookup.scala 31:38]
    node _T_52 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_53 = eq(UInt<15>("h05063"), _T_52) @[Lookup.scala 31:38]
    node _T_54 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_55 = eq(UInt<15>("h06063"), _T_54) @[Lookup.scala 31:38]
    node _T_56 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_57 = eq(UInt<15>("h07063"), _T_56) @[Lookup.scala 31:38]
    node _T_58 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_59 = eq(UInt<2>("h03"), _T_58) @[Lookup.scala 31:38]
    node _T_60 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_61 = eq(UInt<13>("h01003"), _T_60) @[Lookup.scala 31:38]
    node _T_62 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_63 = eq(UInt<14>("h02003"), _T_62) @[Lookup.scala 31:38]
    node _T_64 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_65 = eq(UInt<15>("h04003"), _T_64) @[Lookup.scala 31:38]
    node _T_66 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_67 = eq(UInt<15>("h05003"), _T_66) @[Lookup.scala 31:38]
    node _T_68 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_69 = eq(UInt<6>("h023"), _T_68) @[Lookup.scala 31:38]
    node _T_70 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_71 = eq(UInt<13>("h01023"), _T_70) @[Lookup.scala 31:38]
    node _T_72 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_73 = eq(UInt<14>("h02023"), _T_72) @[Lookup.scala 31:38]
    node _T_74 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_75 = eq(UInt<5>("h01b"), _T_74) @[Lookup.scala 31:38]
    node _T_76 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_77 = eq(UInt<13>("h0101b"), _T_76) @[Lookup.scala 31:38]
    node _T_78 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_79 = eq(UInt<15>("h0501b"), _T_78) @[Lookup.scala 31:38]
    node _T_80 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_81 = eq(UInt<31>("h04000501b"), _T_80) @[Lookup.scala 31:38]
    node _T_82 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_83 = eq(UInt<13>("h0103b"), _T_82) @[Lookup.scala 31:38]
    node _T_84 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_85 = eq(UInt<15>("h0503b"), _T_84) @[Lookup.scala 31:38]
    node _T_86 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_87 = eq(UInt<31>("h04000503b"), _T_86) @[Lookup.scala 31:38]
    node _T_88 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_89 = eq(UInt<6>("h03b"), _T_88) @[Lookup.scala 31:38]
    node _T_90 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_91 = eq(UInt<31>("h04000003b"), _T_90) @[Lookup.scala 31:38]
    node _T_92 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_93 = eq(UInt<15>("h06003"), _T_92) @[Lookup.scala 31:38]
    node _T_94 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_95 = eq(UInt<14>("h03003"), _T_94) @[Lookup.scala 31:38]
    node _T_96 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_97 = eq(UInt<14>("h03023"), _T_96) @[Lookup.scala 31:38]
    node _T_98 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_99 = eq(UInt<7>("h06b"), _T_98) @[Lookup.scala 31:38]
    node _T_100 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_101 = eq(UInt<26>("h02000033"), _T_100) @[Lookup.scala 31:38]
    node _T_102 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_103 = eq(UInt<26>("h02001033"), _T_102) @[Lookup.scala 31:38]
    node _T_104 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_105 = eq(UInt<26>("h02002033"), _T_104) @[Lookup.scala 31:38]
    node _T_106 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_107 = eq(UInt<26>("h02003033"), _T_106) @[Lookup.scala 31:38]
    node _T_108 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_109 = eq(UInt<26>("h02004033"), _T_108) @[Lookup.scala 31:38]
    node _T_110 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_111 = eq(UInt<26>("h02005033"), _T_110) @[Lookup.scala 31:38]
    node _T_112 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_113 = eq(UInt<26>("h02006033"), _T_112) @[Lookup.scala 31:38]
    node _T_114 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_115 = eq(UInt<26>("h02007033"), _T_114) @[Lookup.scala 31:38]
    node _T_116 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_117 = eq(UInt<26>("h0200003b"), _T_116) @[Lookup.scala 31:38]
    node _T_118 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_119 = eq(UInt<26>("h0200403b"), _T_118) @[Lookup.scala 31:38]
    node _T_120 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_121 = eq(UInt<26>("h0200503b"), _T_120) @[Lookup.scala 31:38]
    node _T_122 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_123 = eq(UInt<26>("h0200603b"), _T_122) @[Lookup.scala 31:38]
    node _T_124 = and(io.in.bits.instr, UInt<32>("h0fe00707f")) @[Lookup.scala 31:38]
    node _T_125 = eq(UInt<26>("h0200703b"), _T_124) @[Lookup.scala 31:38]
    node _T_126 = and(io.in.bits.instr, UInt<32>("h0ffffffff")) @[Lookup.scala 31:38]
    node _T_127 = eq(UInt<1>("h00"), _T_126) @[Lookup.scala 31:38]
    node _T_128 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_129 = eq(UInt<1>("h00"), _T_128) @[Lookup.scala 31:38]
    node _T_130 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_131 = eq(UInt<15>("h04000"), _T_130) @[Lookup.scala 31:38]
    node _T_132 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_133 = eq(UInt<15>("h06000"), _T_132) @[Lookup.scala 31:38]
    node _T_134 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_135 = eq(UInt<16>("h0c000"), _T_134) @[Lookup.scala 31:38]
    node _T_136 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_137 = eq(UInt<16>("h0e000"), _T_136) @[Lookup.scala 31:38]
    node _T_138 = and(io.in.bits.instr, UInt<16>("h0ef83")) @[Lookup.scala 31:38]
    node _T_139 = eq(UInt<1>("h01"), _T_138) @[Lookup.scala 31:38]
    node _T_140 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_141 = eq(UInt<1>("h01"), _T_140) @[Lookup.scala 31:38]
    node _T_142 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_143 = eq(UInt<14>("h02001"), _T_142) @[Lookup.scala 31:38]
    node _T_144 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_145 = eq(UInt<15>("h04001"), _T_144) @[Lookup.scala 31:38]
    node _T_146 = and(io.in.bits.instr, UInt<16>("h0ef83")) @[Lookup.scala 31:38]
    node _T_147 = eq(UInt<15>("h06101"), _T_146) @[Lookup.scala 31:38]
    node _T_148 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_149 = eq(UInt<15>("h06001"), _T_148) @[Lookup.scala 31:38]
    node _T_150 = and(io.in.bits.instr, UInt<16>("h0ec03")) @[Lookup.scala 31:38]
    node _T_151 = eq(UInt<16>("h08001"), _T_150) @[Lookup.scala 31:38]
    node _T_152 = and(io.in.bits.instr, UInt<16>("h0ec03")) @[Lookup.scala 31:38]
    node _T_153 = eq(UInt<16>("h08401"), _T_152) @[Lookup.scala 31:38]
    node _T_154 = and(io.in.bits.instr, UInt<16>("h0ec03")) @[Lookup.scala 31:38]
    node _T_155 = eq(UInt<16>("h08801"), _T_154) @[Lookup.scala 31:38]
    node _T_156 = and(io.in.bits.instr, UInt<16>("h0fc63")) @[Lookup.scala 31:38]
    node _T_157 = eq(UInt<16>("h08c01"), _T_156) @[Lookup.scala 31:38]
    node _T_158 = and(io.in.bits.instr, UInt<16>("h0fc63")) @[Lookup.scala 31:38]
    node _T_159 = eq(UInt<16>("h08c21"), _T_158) @[Lookup.scala 31:38]
    node _T_160 = and(io.in.bits.instr, UInt<16>("h0fc63")) @[Lookup.scala 31:38]
    node _T_161 = eq(UInt<16>("h08c41"), _T_160) @[Lookup.scala 31:38]
    node _T_162 = and(io.in.bits.instr, UInt<16>("h0fc63")) @[Lookup.scala 31:38]
    node _T_163 = eq(UInt<16>("h08c61"), _T_162) @[Lookup.scala 31:38]
    node _T_164 = and(io.in.bits.instr, UInt<16>("h0fc63")) @[Lookup.scala 31:38]
    node _T_165 = eq(UInt<16>("h09c01"), _T_164) @[Lookup.scala 31:38]
    node _T_166 = and(io.in.bits.instr, UInt<16>("h0fc63")) @[Lookup.scala 31:38]
    node _T_167 = eq(UInt<16>("h09c21"), _T_166) @[Lookup.scala 31:38]
    node _T_168 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_169 = eq(UInt<16>("h0a001"), _T_168) @[Lookup.scala 31:38]
    node _T_170 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_171 = eq(UInt<16>("h0c001"), _T_170) @[Lookup.scala 31:38]
    node _T_172 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_173 = eq(UInt<16>("h0e001"), _T_172) @[Lookup.scala 31:38]
    node _T_174 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_175 = eq(UInt<2>("h02"), _T_174) @[Lookup.scala 31:38]
    node _T_176 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_177 = eq(UInt<15>("h04002"), _T_176) @[Lookup.scala 31:38]
    node _T_178 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_179 = eq(UInt<15>("h06002"), _T_178) @[Lookup.scala 31:38]
    node _T_180 = and(io.in.bits.instr, UInt<16>("h0f07f")) @[Lookup.scala 31:38]
    node _T_181 = eq(UInt<16>("h08002"), _T_180) @[Lookup.scala 31:38]
    node _T_182 = and(io.in.bits.instr, UInt<16>("h0f003")) @[Lookup.scala 31:38]
    node _T_183 = eq(UInt<16>("h08002"), _T_182) @[Lookup.scala 31:38]
    node _T_184 = and(io.in.bits.instr, UInt<16>("h0ffff")) @[Lookup.scala 31:38]
    node _T_185 = eq(UInt<16>("h09002"), _T_184) @[Lookup.scala 31:38]
    node _T_186 = and(io.in.bits.instr, UInt<16>("h0f07f")) @[Lookup.scala 31:38]
    node _T_187 = eq(UInt<16>("h09002"), _T_186) @[Lookup.scala 31:38]
    node _T_188 = and(io.in.bits.instr, UInt<16>("h0f003")) @[Lookup.scala 31:38]
    node _T_189 = eq(UInt<16>("h09002"), _T_188) @[Lookup.scala 31:38]
    node _T_190 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_191 = eq(UInt<16>("h0c002"), _T_190) @[Lookup.scala 31:38]
    node _T_192 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_193 = eq(UInt<16>("h0e002"), _T_192) @[Lookup.scala 31:38]
    node _T_194 = and(io.in.bits.instr, UInt<32>("h0ffffffff")) @[Lookup.scala 31:38]
    node _T_195 = eq(UInt<7>("h073"), _T_194) @[Lookup.scala 31:38]
    node _T_196 = and(io.in.bits.instr, UInt<32>("h0ffffffff")) @[Lookup.scala 31:38]
    node _T_197 = eq(UInt<21>("h0100073"), _T_196) @[Lookup.scala 31:38]
    node _T_198 = and(io.in.bits.instr, UInt<32>("h0ffffffff")) @[Lookup.scala 31:38]
    node _T_199 = eq(UInt<30>("h030200073"), _T_198) @[Lookup.scala 31:38]
    node _T_200 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_201 = eq(UInt<4>("h0f"), _T_200) @[Lookup.scala 31:38]
    node _T_202 = and(io.in.bits.instr, UInt<32>("h0ffffffff")) @[Lookup.scala 31:38]
    node _T_203 = eq(UInt<29>("h010500073"), _T_202) @[Lookup.scala 31:38]
    node _T_204 = and(io.in.bits.instr, UInt<32>("h0ffffffff")) @[Lookup.scala 31:38]
    node _T_205 = eq(UInt<29>("h010200073"), _T_204) @[Lookup.scala 31:38]
    node _T_206 = and(io.in.bits.instr, UInt<32>("h0fe007fff")) @[Lookup.scala 31:38]
    node _T_207 = eq(UInt<29>("h012000073"), _T_206) @[Lookup.scala 31:38]
    node _T_208 = and(io.in.bits.instr, UInt<32>("h0f9f0707f")) @[Lookup.scala 31:38]
    node _T_209 = eq(UInt<29>("h01000302f"), _T_208) @[Lookup.scala 31:38]
    node _T_210 = and(io.in.bits.instr, UInt<32>("h0f9f0707f")) @[Lookup.scala 31:38]
    node _T_211 = eq(UInt<29>("h01000202f"), _T_210) @[Lookup.scala 31:38]
    node _T_212 = and(io.in.bits.instr, UInt<32>("h0f800707f")) @[Lookup.scala 31:38]
    node _T_213 = eq(UInt<29>("h01800302f"), _T_212) @[Lookup.scala 31:38]
    node _T_214 = and(io.in.bits.instr, UInt<32>("h0f800707f")) @[Lookup.scala 31:38]
    node _T_215 = eq(UInt<29>("h01800202f"), _T_214) @[Lookup.scala 31:38]
    node _T_216 = and(io.in.bits.instr, UInt<32>("h0f800607f")) @[Lookup.scala 31:38]
    node _T_217 = eq(UInt<28>("h0800202f"), _T_216) @[Lookup.scala 31:38]
    node _T_218 = and(io.in.bits.instr, UInt<32>("h0f800607f")) @[Lookup.scala 31:38]
    node _T_219 = eq(UInt<14>("h0202f"), _T_218) @[Lookup.scala 31:38]
    node _T_220 = and(io.in.bits.instr, UInt<32>("h0f800607f")) @[Lookup.scala 31:38]
    node _T_221 = eq(UInt<30>("h02000202f"), _T_220) @[Lookup.scala 31:38]
    node _T_222 = and(io.in.bits.instr, UInt<32>("h0f800607f")) @[Lookup.scala 31:38]
    node _T_223 = eq(UInt<31>("h06000202f"), _T_222) @[Lookup.scala 31:38]
    node _T_224 = and(io.in.bits.instr, UInt<32>("h0f800607f")) @[Lookup.scala 31:38]
    node _T_225 = eq(UInt<31>("h04000202f"), _T_224) @[Lookup.scala 31:38]
    node _T_226 = and(io.in.bits.instr, UInt<32>("h0f800607f")) @[Lookup.scala 31:38]
    node _T_227 = eq(UInt<32>("h08000202f"), _T_226) @[Lookup.scala 31:38]
    node _T_228 = and(io.in.bits.instr, UInt<32>("h0f800607f")) @[Lookup.scala 31:38]
    node _T_229 = eq(UInt<32>("h0a000202f"), _T_228) @[Lookup.scala 31:38]
    node _T_230 = and(io.in.bits.instr, UInt<32>("h0f800607f")) @[Lookup.scala 31:38]
    node _T_231 = eq(UInt<32>("h0c000202f"), _T_230) @[Lookup.scala 31:38]
    node _T_232 = and(io.in.bits.instr, UInt<32>("h0f800607f")) @[Lookup.scala 31:38]
    node _T_233 = eq(UInt<32>("h0e000202f"), _T_232) @[Lookup.scala 31:38]
    node _T_234 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_235 = eq(UInt<13>("h01073"), _T_234) @[Lookup.scala 31:38]
    node _T_236 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_237 = eq(UInt<14>("h02073"), _T_236) @[Lookup.scala 31:38]
    node _T_238 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_239 = eq(UInt<14>("h03073"), _T_238) @[Lookup.scala 31:38]
    node _T_240 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_241 = eq(UInt<15>("h05073"), _T_240) @[Lookup.scala 31:38]
    node _T_242 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_243 = eq(UInt<15>("h06073"), _T_242) @[Lookup.scala 31:38]
    node _T_244 = and(io.in.bits.instr, UInt<15>("h0707f")) @[Lookup.scala 31:38]
    node _T_245 = eq(UInt<15>("h07073"), _T_244) @[Lookup.scala 31:38]
    node _T_246 = and(io.in.bits.instr, UInt<32>("h0ffffffff")) @[Lookup.scala 31:38]
    node _T_247 = eq(UInt<13>("h0100f"), _T_246) @[Lookup.scala 31:38]
    node _T_248 = mux(_T_247, UInt<1>("h01"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_249 = mux(_T_245, UInt<3>("h04"), _T_248) @[Lookup.scala 33:37]
    node _T_250 = mux(_T_243, UInt<3>("h04"), _T_249) @[Lookup.scala 33:37]
    node _T_251 = mux(_T_241, UInt<3>("h04"), _T_250) @[Lookup.scala 33:37]
    node _T_252 = mux(_T_239, UInt<3>("h04"), _T_251) @[Lookup.scala 33:37]
    node _T_253 = mux(_T_237, UInt<3>("h04"), _T_252) @[Lookup.scala 33:37]
    node _T_254 = mux(_T_235, UInt<3>("h04"), _T_253) @[Lookup.scala 33:37]
    node _T_255 = mux(_T_233, UInt<3>("h05"), _T_254) @[Lookup.scala 33:37]
    node _T_256 = mux(_T_231, UInt<3>("h05"), _T_255) @[Lookup.scala 33:37]
    node _T_257 = mux(_T_229, UInt<3>("h05"), _T_256) @[Lookup.scala 33:37]
    node _T_258 = mux(_T_227, UInt<3>("h05"), _T_257) @[Lookup.scala 33:37]
    node _T_259 = mux(_T_225, UInt<3>("h05"), _T_258) @[Lookup.scala 33:37]
    node _T_260 = mux(_T_223, UInt<3>("h05"), _T_259) @[Lookup.scala 33:37]
    node _T_261 = mux(_T_221, UInt<3>("h05"), _T_260) @[Lookup.scala 33:37]
    node _T_262 = mux(_T_219, UInt<3>("h05"), _T_261) @[Lookup.scala 33:37]
    node _T_263 = mux(_T_217, UInt<3>("h05"), _T_262) @[Lookup.scala 33:37]
    node _T_264 = mux(_T_215, UInt<4>("h0f"), _T_263) @[Lookup.scala 33:37]
    node _T_265 = mux(_T_213, UInt<4>("h0f"), _T_264) @[Lookup.scala 33:37]
    node _T_266 = mux(_T_211, UInt<3>("h04"), _T_265) @[Lookup.scala 33:37]
    node _T_267 = mux(_T_209, UInt<3>("h04"), _T_266) @[Lookup.scala 33:37]
    node _T_268 = mux(_T_207, UInt<3>("h05"), _T_267) @[Lookup.scala 33:37]
    node _T_269 = mux(_T_205, UInt<3>("h04"), _T_268) @[Lookup.scala 33:37]
    node _T_270 = mux(_T_203, UInt<3>("h04"), _T_269) @[Lookup.scala 33:37]
    node _T_271 = mux(_T_201, UInt<2>("h02"), _T_270) @[Lookup.scala 33:37]
    node _T_272 = mux(_T_199, UInt<3>("h04"), _T_271) @[Lookup.scala 33:37]
    node _T_273 = mux(_T_197, UInt<3>("h04"), _T_272) @[Lookup.scala 33:37]
    node _T_274 = mux(_T_195, UInt<3>("h04"), _T_273) @[Lookup.scala 33:37]
    node _T_275 = mux(_T_193, UInt<2>("h02"), _T_274) @[Lookup.scala 33:37]
    node _T_276 = mux(_T_191, UInt<2>("h02"), _T_275) @[Lookup.scala 33:37]
    node _T_277 = mux(_T_189, UInt<3>("h05"), _T_276) @[Lookup.scala 33:37]
    node _T_278 = mux(_T_187, UInt<3>("h04"), _T_277) @[Lookup.scala 33:37]
    node _T_279 = mux(_T_185, UInt<3>("h04"), _T_278) @[Lookup.scala 33:37]
    node _T_280 = mux(_T_183, UInt<3>("h05"), _T_279) @[Lookup.scala 33:37]
    node _T_281 = mux(_T_181, UInt<3>("h04"), _T_280) @[Lookup.scala 33:37]
    node _T_282 = mux(_T_179, UInt<3>("h04"), _T_281) @[Lookup.scala 33:37]
    node _T_283 = mux(_T_177, UInt<3>("h04"), _T_282) @[Lookup.scala 33:37]
    node _T_284 = mux(_T_175, UInt<3>("h04"), _T_283) @[Lookup.scala 33:37]
    node _T_285 = mux(_T_173, UInt<1>("h01"), _T_284) @[Lookup.scala 33:37]
    node _T_286 = mux(_T_171, UInt<1>("h01"), _T_285) @[Lookup.scala 33:37]
    node _T_287 = mux(_T_169, UInt<3>("h07"), _T_286) @[Lookup.scala 33:37]
    node _T_288 = mux(_T_167, UInt<3>("h05"), _T_287) @[Lookup.scala 33:37]
    node _T_289 = mux(_T_165, UInt<3>("h05"), _T_288) @[Lookup.scala 33:37]
    node _T_290 = mux(_T_163, UInt<3>("h05"), _T_289) @[Lookup.scala 33:37]
    node _T_291 = mux(_T_161, UInt<3>("h05"), _T_290) @[Lookup.scala 33:37]
    node _T_292 = mux(_T_159, UInt<3>("h05"), _T_291) @[Lookup.scala 33:37]
    node _T_293 = mux(_T_157, UInt<3>("h05"), _T_292) @[Lookup.scala 33:37]
    node _T_294 = mux(_T_155, UInt<3>("h04"), _T_293) @[Lookup.scala 33:37]
    node _T_295 = mux(_T_153, UInt<3>("h04"), _T_294) @[Lookup.scala 33:37]
    node _T_296 = mux(_T_151, UInt<3>("h04"), _T_295) @[Lookup.scala 33:37]
    node _T_297 = mux(_T_149, UInt<3>("h04"), _T_296) @[Lookup.scala 33:37]
    node _T_298 = mux(_T_147, UInt<3>("h04"), _T_297) @[Lookup.scala 33:37]
    node _T_299 = mux(_T_145, UInt<3>("h04"), _T_298) @[Lookup.scala 33:37]
    node _T_300 = mux(_T_143, UInt<3>("h04"), _T_299) @[Lookup.scala 33:37]
    node _T_301 = mux(_T_141, UInt<3>("h04"), _T_300) @[Lookup.scala 33:37]
    node _T_302 = mux(_T_139, UInt<3>("h04"), _T_301) @[Lookup.scala 33:37]
    node _T_303 = mux(_T_137, UInt<2>("h02"), _T_302) @[Lookup.scala 33:37]
    node _T_304 = mux(_T_135, UInt<2>("h02"), _T_303) @[Lookup.scala 33:37]
    node _T_305 = mux(_T_133, UInt<3>("h04"), _T_304) @[Lookup.scala 33:37]
    node _T_306 = mux(_T_131, UInt<3>("h04"), _T_305) @[Lookup.scala 33:37]
    node _T_307 = mux(_T_129, UInt<3>("h04"), _T_306) @[Lookup.scala 33:37]
    node _T_308 = mux(_T_127, UInt<1>("h00"), _T_307) @[Lookup.scala 33:37]
    node _T_309 = mux(_T_125, UInt<3>("h05"), _T_308) @[Lookup.scala 33:37]
    node _T_310 = mux(_T_123, UInt<3>("h05"), _T_309) @[Lookup.scala 33:37]
    node _T_311 = mux(_T_121, UInt<3>("h05"), _T_310) @[Lookup.scala 33:37]
    node _T_312 = mux(_T_119, UInt<3>("h05"), _T_311) @[Lookup.scala 33:37]
    node _T_313 = mux(_T_117, UInt<3>("h05"), _T_312) @[Lookup.scala 33:37]
    node _T_314 = mux(_T_115, UInt<3>("h05"), _T_313) @[Lookup.scala 33:37]
    node _T_315 = mux(_T_113, UInt<3>("h05"), _T_314) @[Lookup.scala 33:37]
    node _T_316 = mux(_T_111, UInt<3>("h05"), _T_315) @[Lookup.scala 33:37]
    node _T_317 = mux(_T_109, UInt<3>("h05"), _T_316) @[Lookup.scala 33:37]
    node _T_318 = mux(_T_107, UInt<3>("h05"), _T_317) @[Lookup.scala 33:37]
    node _T_319 = mux(_T_105, UInt<3>("h05"), _T_318) @[Lookup.scala 33:37]
    node _T_320 = mux(_T_103, UInt<3>("h05"), _T_319) @[Lookup.scala 33:37]
    node _T_321 = mux(_T_101, UInt<3>("h05"), _T_320) @[Lookup.scala 33:37]
    node _T_322 = mux(_T_99, UInt<3>("h04"), _T_321) @[Lookup.scala 33:37]
    node _T_323 = mux(_T_97, UInt<2>("h02"), _T_322) @[Lookup.scala 33:37]
    node _T_324 = mux(_T_95, UInt<3>("h04"), _T_323) @[Lookup.scala 33:37]
    node _T_325 = mux(_T_93, UInt<3>("h04"), _T_324) @[Lookup.scala 33:37]
    node _T_326 = mux(_T_91, UInt<3>("h05"), _T_325) @[Lookup.scala 33:37]
    node _T_327 = mux(_T_89, UInt<3>("h05"), _T_326) @[Lookup.scala 33:37]
    node _T_328 = mux(_T_87, UInt<3>("h05"), _T_327) @[Lookup.scala 33:37]
    node _T_329 = mux(_T_85, UInt<3>("h05"), _T_328) @[Lookup.scala 33:37]
    node _T_330 = mux(_T_83, UInt<3>("h05"), _T_329) @[Lookup.scala 33:37]
    node _T_331 = mux(_T_81, UInt<3>("h04"), _T_330) @[Lookup.scala 33:37]
    node _T_332 = mux(_T_79, UInt<3>("h04"), _T_331) @[Lookup.scala 33:37]
    node _T_333 = mux(_T_77, UInt<3>("h04"), _T_332) @[Lookup.scala 33:37]
    node _T_334 = mux(_T_75, UInt<3>("h04"), _T_333) @[Lookup.scala 33:37]
    node _T_335 = mux(_T_73, UInt<2>("h02"), _T_334) @[Lookup.scala 33:37]
    node _T_336 = mux(_T_71, UInt<2>("h02"), _T_335) @[Lookup.scala 33:37]
    node _T_337 = mux(_T_69, UInt<2>("h02"), _T_336) @[Lookup.scala 33:37]
    node _T_338 = mux(_T_67, UInt<3>("h04"), _T_337) @[Lookup.scala 33:37]
    node _T_339 = mux(_T_65, UInt<3>("h04"), _T_338) @[Lookup.scala 33:37]
    node _T_340 = mux(_T_63, UInt<3>("h04"), _T_339) @[Lookup.scala 33:37]
    node _T_341 = mux(_T_61, UInt<3>("h04"), _T_340) @[Lookup.scala 33:37]
    node _T_342 = mux(_T_59, UInt<3>("h04"), _T_341) @[Lookup.scala 33:37]
    node _T_343 = mux(_T_57, UInt<1>("h01"), _T_342) @[Lookup.scala 33:37]
    node _T_344 = mux(_T_55, UInt<1>("h01"), _T_343) @[Lookup.scala 33:37]
    node _T_345 = mux(_T_53, UInt<1>("h01"), _T_344) @[Lookup.scala 33:37]
    node _T_346 = mux(_T_51, UInt<1>("h01"), _T_345) @[Lookup.scala 33:37]
    node _T_347 = mux(_T_49, UInt<1>("h01"), _T_346) @[Lookup.scala 33:37]
    node _T_348 = mux(_T_47, UInt<1>("h01"), _T_347) @[Lookup.scala 33:37]
    node _T_349 = mux(_T_45, UInt<3>("h04"), _T_348) @[Lookup.scala 33:37]
    node _T_350 = mux(_T_43, UInt<3>("h07"), _T_349) @[Lookup.scala 33:37]
    node _T_351 = mux(_T_41, UInt<3>("h06"), _T_350) @[Lookup.scala 33:37]
    node _T_352 = mux(_T_39, UInt<3>("h06"), _T_351) @[Lookup.scala 33:37]
    node _T_353 = mux(_T_37, UInt<3>("h05"), _T_352) @[Lookup.scala 33:37]
    node _T_354 = mux(_T_35, UInt<3>("h05"), _T_353) @[Lookup.scala 33:37]
    node _T_355 = mux(_T_33, UInt<3>("h05"), _T_354) @[Lookup.scala 33:37]
    node _T_356 = mux(_T_31, UInt<3>("h05"), _T_355) @[Lookup.scala 33:37]
    node _T_357 = mux(_T_29, UInt<3>("h05"), _T_356) @[Lookup.scala 33:37]
    node _T_358 = mux(_T_27, UInt<3>("h05"), _T_357) @[Lookup.scala 33:37]
    node _T_359 = mux(_T_25, UInt<3>("h05"), _T_358) @[Lookup.scala 33:37]
    node _T_360 = mux(_T_23, UInt<3>("h05"), _T_359) @[Lookup.scala 33:37]
    node _T_361 = mux(_T_21, UInt<3>("h05"), _T_360) @[Lookup.scala 33:37]
    node _T_362 = mux(_T_19, UInt<3>("h05"), _T_361) @[Lookup.scala 33:37]
    node _T_363 = mux(_T_17, UInt<3>("h04"), _T_362) @[Lookup.scala 33:37]
    node _T_364 = mux(_T_15, UInt<3>("h04"), _T_363) @[Lookup.scala 33:37]
    node _T_365 = mux(_T_13, UInt<3>("h04"), _T_364) @[Lookup.scala 33:37]
    node _T_366 = mux(_T_11, UInt<3>("h04"), _T_365) @[Lookup.scala 33:37]
    node _T_367 = mux(_T_9, UInt<3>("h04"), _T_366) @[Lookup.scala 33:37]
    node _T_368 = mux(_T_7, UInt<3>("h04"), _T_367) @[Lookup.scala 33:37]
    node _T_369 = mux(_T_5, UInt<3>("h04"), _T_368) @[Lookup.scala 33:37]
    node _T_370 = mux(_T_3, UInt<3>("h04"), _T_369) @[Lookup.scala 33:37]
    node decodeList_0 = mux(_T_1, UInt<3>("h04"), _T_370) @[Lookup.scala 33:37]
    node _T_371 = mux(_T_247, UInt<3>("h04"), UInt<2>("h03")) @[Lookup.scala 33:37]
    node _T_372 = mux(_T_245, UInt<2>("h03"), _T_371) @[Lookup.scala 33:37]
    node _T_373 = mux(_T_243, UInt<2>("h03"), _T_372) @[Lookup.scala 33:37]
    node _T_374 = mux(_T_241, UInt<2>("h03"), _T_373) @[Lookup.scala 33:37]
    node _T_375 = mux(_T_239, UInt<2>("h03"), _T_374) @[Lookup.scala 33:37]
    node _T_376 = mux(_T_237, UInt<2>("h03"), _T_375) @[Lookup.scala 33:37]
    node _T_377 = mux(_T_235, UInt<2>("h03"), _T_376) @[Lookup.scala 33:37]
    node _T_378 = mux(_T_233, UInt<1>("h01"), _T_377) @[Lookup.scala 33:37]
    node _T_379 = mux(_T_231, UInt<1>("h01"), _T_378) @[Lookup.scala 33:37]
    node _T_380 = mux(_T_229, UInt<1>("h01"), _T_379) @[Lookup.scala 33:37]
    node _T_381 = mux(_T_227, UInt<1>("h01"), _T_380) @[Lookup.scala 33:37]
    node _T_382 = mux(_T_225, UInt<1>("h01"), _T_381) @[Lookup.scala 33:37]
    node _T_383 = mux(_T_223, UInt<1>("h01"), _T_382) @[Lookup.scala 33:37]
    node _T_384 = mux(_T_221, UInt<1>("h01"), _T_383) @[Lookup.scala 33:37]
    node _T_385 = mux(_T_219, UInt<1>("h01"), _T_384) @[Lookup.scala 33:37]
    node _T_386 = mux(_T_217, UInt<1>("h01"), _T_385) @[Lookup.scala 33:37]
    node _T_387 = mux(_T_215, UInt<1>("h01"), _T_386) @[Lookup.scala 33:37]
    node _T_388 = mux(_T_213, UInt<1>("h01"), _T_387) @[Lookup.scala 33:37]
    node _T_389 = mux(_T_211, UInt<1>("h01"), _T_388) @[Lookup.scala 33:37]
    node _T_390 = mux(_T_209, UInt<1>("h01"), _T_389) @[Lookup.scala 33:37]
    node _T_391 = mux(_T_207, UInt<3>("h04"), _T_390) @[Lookup.scala 33:37]
    node _T_392 = mux(_T_205, UInt<2>("h03"), _T_391) @[Lookup.scala 33:37]
    node _T_393 = mux(_T_203, UInt<1>("h00"), _T_392) @[Lookup.scala 33:37]
    node _T_394 = mux(_T_201, UInt<3>("h04"), _T_393) @[Lookup.scala 33:37]
    node _T_395 = mux(_T_199, UInt<2>("h03"), _T_394) @[Lookup.scala 33:37]
    node _T_396 = mux(_T_197, UInt<2>("h03"), _T_395) @[Lookup.scala 33:37]
    node _T_397 = mux(_T_195, UInt<2>("h03"), _T_396) @[Lookup.scala 33:37]
    node _T_398 = mux(_T_193, UInt<1>("h01"), _T_397) @[Lookup.scala 33:37]
    node _T_399 = mux(_T_191, UInt<1>("h01"), _T_398) @[Lookup.scala 33:37]
    node _T_400 = mux(_T_189, UInt<1>("h00"), _T_399) @[Lookup.scala 33:37]
    node _T_401 = mux(_T_187, UInt<1>("h00"), _T_400) @[Lookup.scala 33:37]
    node _T_402 = mux(_T_185, UInt<2>("h03"), _T_401) @[Lookup.scala 33:37]
    node _T_403 = mux(_T_183, UInt<1>("h00"), _T_402) @[Lookup.scala 33:37]
    node _T_404 = mux(_T_181, UInt<1>("h00"), _T_403) @[Lookup.scala 33:37]
    node _T_405 = mux(_T_179, UInt<1>("h01"), _T_404) @[Lookup.scala 33:37]
    node _T_406 = mux(_T_177, UInt<1>("h01"), _T_405) @[Lookup.scala 33:37]
    node _T_407 = mux(_T_175, UInt<1>("h00"), _T_406) @[Lookup.scala 33:37]
    node _T_408 = mux(_T_173, UInt<1>("h00"), _T_407) @[Lookup.scala 33:37]
    node _T_409 = mux(_T_171, UInt<1>("h00"), _T_408) @[Lookup.scala 33:37]
    node _T_410 = mux(_T_169, UInt<1>("h00"), _T_409) @[Lookup.scala 33:37]
    node _T_411 = mux(_T_167, UInt<1>("h00"), _T_410) @[Lookup.scala 33:37]
    node _T_412 = mux(_T_165, UInt<1>("h00"), _T_411) @[Lookup.scala 33:37]
    node _T_413 = mux(_T_163, UInt<1>("h00"), _T_412) @[Lookup.scala 33:37]
    node _T_414 = mux(_T_161, UInt<1>("h00"), _T_413) @[Lookup.scala 33:37]
    node _T_415 = mux(_T_159, UInt<1>("h00"), _T_414) @[Lookup.scala 33:37]
    node _T_416 = mux(_T_157, UInt<1>("h00"), _T_415) @[Lookup.scala 33:37]
    node _T_417 = mux(_T_155, UInt<1>("h00"), _T_416) @[Lookup.scala 33:37]
    node _T_418 = mux(_T_153, UInt<1>("h00"), _T_417) @[Lookup.scala 33:37]
    node _T_419 = mux(_T_151, UInt<1>("h00"), _T_418) @[Lookup.scala 33:37]
    node _T_420 = mux(_T_149, UInt<1>("h00"), _T_419) @[Lookup.scala 33:37]
    node _T_421 = mux(_T_147, UInt<1>("h00"), _T_420) @[Lookup.scala 33:37]
    node _T_422 = mux(_T_145, UInt<1>("h00"), _T_421) @[Lookup.scala 33:37]
    node _T_423 = mux(_T_143, UInt<1>("h00"), _T_422) @[Lookup.scala 33:37]
    node _T_424 = mux(_T_141, UInt<1>("h00"), _T_423) @[Lookup.scala 33:37]
    node _T_425 = mux(_T_139, UInt<1>("h00"), _T_424) @[Lookup.scala 33:37]
    node _T_426 = mux(_T_137, UInt<1>("h01"), _T_425) @[Lookup.scala 33:37]
    node _T_427 = mux(_T_135, UInt<1>("h01"), _T_426) @[Lookup.scala 33:37]
    node _T_428 = mux(_T_133, UInt<1>("h01"), _T_427) @[Lookup.scala 33:37]
    node _T_429 = mux(_T_131, UInt<1>("h01"), _T_428) @[Lookup.scala 33:37]
    node _T_430 = mux(_T_129, UInt<1>("h00"), _T_429) @[Lookup.scala 33:37]
    node _T_431 = mux(_T_127, UInt<2>("h03"), _T_430) @[Lookup.scala 33:37]
    node _T_432 = mux(_T_125, UInt<2>("h02"), _T_431) @[Lookup.scala 33:37]
    node _T_433 = mux(_T_123, UInt<2>("h02"), _T_432) @[Lookup.scala 33:37]
    node _T_434 = mux(_T_121, UInt<2>("h02"), _T_433) @[Lookup.scala 33:37]
    node _T_435 = mux(_T_119, UInt<2>("h02"), _T_434) @[Lookup.scala 33:37]
    node _T_436 = mux(_T_117, UInt<2>("h02"), _T_435) @[Lookup.scala 33:37]
    node _T_437 = mux(_T_115, UInt<2>("h02"), _T_436) @[Lookup.scala 33:37]
    node _T_438 = mux(_T_113, UInt<2>("h02"), _T_437) @[Lookup.scala 33:37]
    node _T_439 = mux(_T_111, UInt<2>("h02"), _T_438) @[Lookup.scala 33:37]
    node _T_440 = mux(_T_109, UInt<2>("h02"), _T_439) @[Lookup.scala 33:37]
    node _T_441 = mux(_T_107, UInt<2>("h02"), _T_440) @[Lookup.scala 33:37]
    node _T_442 = mux(_T_105, UInt<2>("h02"), _T_441) @[Lookup.scala 33:37]
    node _T_443 = mux(_T_103, UInt<2>("h02"), _T_442) @[Lookup.scala 33:37]
    node _T_444 = mux(_T_101, UInt<2>("h02"), _T_443) @[Lookup.scala 33:37]
    node _T_445 = mux(_T_99, UInt<2>("h03"), _T_444) @[Lookup.scala 33:37]
    node _T_446 = mux(_T_97, UInt<1>("h01"), _T_445) @[Lookup.scala 33:37]
    node _T_447 = mux(_T_95, UInt<1>("h01"), _T_446) @[Lookup.scala 33:37]
    node _T_448 = mux(_T_93, UInt<1>("h01"), _T_447) @[Lookup.scala 33:37]
    node _T_449 = mux(_T_91, UInt<1>("h00"), _T_448) @[Lookup.scala 33:37]
    node _T_450 = mux(_T_89, UInt<1>("h00"), _T_449) @[Lookup.scala 33:37]
    node _T_451 = mux(_T_87, UInt<1>("h00"), _T_450) @[Lookup.scala 33:37]
    node _T_452 = mux(_T_85, UInt<1>("h00"), _T_451) @[Lookup.scala 33:37]
    node _T_453 = mux(_T_83, UInt<1>("h00"), _T_452) @[Lookup.scala 33:37]
    node _T_454 = mux(_T_81, UInt<1>("h00"), _T_453) @[Lookup.scala 33:37]
    node _T_455 = mux(_T_79, UInt<1>("h00"), _T_454) @[Lookup.scala 33:37]
    node _T_456 = mux(_T_77, UInt<1>("h00"), _T_455) @[Lookup.scala 33:37]
    node _T_457 = mux(_T_75, UInt<1>("h00"), _T_456) @[Lookup.scala 33:37]
    node _T_458 = mux(_T_73, UInt<1>("h01"), _T_457) @[Lookup.scala 33:37]
    node _T_459 = mux(_T_71, UInt<1>("h01"), _T_458) @[Lookup.scala 33:37]
    node _T_460 = mux(_T_69, UInt<1>("h01"), _T_459) @[Lookup.scala 33:37]
    node _T_461 = mux(_T_67, UInt<1>("h01"), _T_460) @[Lookup.scala 33:37]
    node _T_462 = mux(_T_65, UInt<1>("h01"), _T_461) @[Lookup.scala 33:37]
    node _T_463 = mux(_T_63, UInt<1>("h01"), _T_462) @[Lookup.scala 33:37]
    node _T_464 = mux(_T_61, UInt<1>("h01"), _T_463) @[Lookup.scala 33:37]
    node _T_465 = mux(_T_59, UInt<1>("h01"), _T_464) @[Lookup.scala 33:37]
    node _T_466 = mux(_T_57, UInt<1>("h00"), _T_465) @[Lookup.scala 33:37]
    node _T_467 = mux(_T_55, UInt<1>("h00"), _T_466) @[Lookup.scala 33:37]
    node _T_468 = mux(_T_53, UInt<1>("h00"), _T_467) @[Lookup.scala 33:37]
    node _T_469 = mux(_T_51, UInt<1>("h00"), _T_468) @[Lookup.scala 33:37]
    node _T_470 = mux(_T_49, UInt<1>("h00"), _T_469) @[Lookup.scala 33:37]
    node _T_471 = mux(_T_47, UInt<1>("h00"), _T_470) @[Lookup.scala 33:37]
    node _T_472 = mux(_T_45, UInt<1>("h00"), _T_471) @[Lookup.scala 33:37]
    node _T_473 = mux(_T_43, UInt<1>("h00"), _T_472) @[Lookup.scala 33:37]
    node _T_474 = mux(_T_41, UInt<1>("h00"), _T_473) @[Lookup.scala 33:37]
    node _T_475 = mux(_T_39, UInt<1>("h00"), _T_474) @[Lookup.scala 33:37]
    node _T_476 = mux(_T_37, UInt<1>("h00"), _T_475) @[Lookup.scala 33:37]
    node _T_477 = mux(_T_35, UInt<1>("h00"), _T_476) @[Lookup.scala 33:37]
    node _T_478 = mux(_T_33, UInt<1>("h00"), _T_477) @[Lookup.scala 33:37]
    node _T_479 = mux(_T_31, UInt<1>("h00"), _T_478) @[Lookup.scala 33:37]
    node _T_480 = mux(_T_29, UInt<1>("h00"), _T_479) @[Lookup.scala 33:37]
    node _T_481 = mux(_T_27, UInt<1>("h00"), _T_480) @[Lookup.scala 33:37]
    node _T_482 = mux(_T_25, UInt<1>("h00"), _T_481) @[Lookup.scala 33:37]
    node _T_483 = mux(_T_23, UInt<1>("h00"), _T_482) @[Lookup.scala 33:37]
    node _T_484 = mux(_T_21, UInt<1>("h00"), _T_483) @[Lookup.scala 33:37]
    node _T_485 = mux(_T_19, UInt<1>("h00"), _T_484) @[Lookup.scala 33:37]
    node _T_486 = mux(_T_17, UInt<1>("h00"), _T_485) @[Lookup.scala 33:37]
    node _T_487 = mux(_T_15, UInt<1>("h00"), _T_486) @[Lookup.scala 33:37]
    node _T_488 = mux(_T_13, UInt<1>("h00"), _T_487) @[Lookup.scala 33:37]
    node _T_489 = mux(_T_11, UInt<1>("h00"), _T_488) @[Lookup.scala 33:37]
    node _T_490 = mux(_T_9, UInt<1>("h00"), _T_489) @[Lookup.scala 33:37]
    node _T_491 = mux(_T_7, UInt<1>("h00"), _T_490) @[Lookup.scala 33:37]
    node _T_492 = mux(_T_5, UInt<1>("h00"), _T_491) @[Lookup.scala 33:37]
    node _T_493 = mux(_T_3, UInt<1>("h00"), _T_492) @[Lookup.scala 33:37]
    node decodeList_1 = mux(_T_1, UInt<1>("h00"), _T_493) @[Lookup.scala 33:37]
    node _T_494 = mux(_T_247, UInt<1>("h01"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_495 = mux(_T_245, UInt<3>("h07"), _T_494) @[Lookup.scala 33:37]
    node _T_496 = mux(_T_243, UInt<3>("h06"), _T_495) @[Lookup.scala 33:37]
    node _T_497 = mux(_T_241, UInt<3>("h05"), _T_496) @[Lookup.scala 33:37]
    node _T_498 = mux(_T_239, UInt<2>("h03"), _T_497) @[Lookup.scala 33:37]
    node _T_499 = mux(_T_237, UInt<2>("h02"), _T_498) @[Lookup.scala 33:37]
    node _T_500 = mux(_T_235, UInt<1>("h01"), _T_499) @[Lookup.scala 33:37]
    node _T_501 = mux(_T_233, UInt<6>("h032"), _T_500) @[Lookup.scala 33:37]
    node _T_502 = mux(_T_231, UInt<6>("h031"), _T_501) @[Lookup.scala 33:37]
    node _T_503 = mux(_T_229, UInt<6>("h030"), _T_502) @[Lookup.scala 33:37]
    node _T_504 = mux(_T_227, UInt<6>("h037"), _T_503) @[Lookup.scala 33:37]
    node _T_505 = mux(_T_225, UInt<6>("h026"), _T_504) @[Lookup.scala 33:37]
    node _T_506 = mux(_T_223, UInt<6>("h025"), _T_505) @[Lookup.scala 33:37]
    node _T_507 = mux(_T_221, UInt<6>("h024"), _T_506) @[Lookup.scala 33:37]
    node _T_508 = mux(_T_219, UInt<7>("h063"), _T_507) @[Lookup.scala 33:37]
    node _T_509 = mux(_T_217, UInt<6>("h022"), _T_508) @[Lookup.scala 33:37]
    node _T_510 = mux(_T_215, UInt<6>("h021"), _T_509) @[Lookup.scala 33:37]
    node _T_511 = mux(_T_213, UInt<6>("h021"), _T_510) @[Lookup.scala 33:37]
    node _T_512 = mux(_T_211, UInt<6>("h020"), _T_511) @[Lookup.scala 33:37]
    node _T_513 = mux(_T_209, UInt<6>("h020"), _T_512) @[Lookup.scala 33:37]
    node _T_514 = mux(_T_207, UInt<2>("h02"), _T_513) @[Lookup.scala 33:37]
    node _T_515 = mux(_T_205, UInt<1>("h00"), _T_514) @[Lookup.scala 33:37]
    node _T_516 = mux(_T_203, UInt<7>("h040"), _T_515) @[Lookup.scala 33:37]
    node _T_517 = mux(_T_201, UInt<1>("h00"), _T_516) @[Lookup.scala 33:37]
    node _T_518 = mux(_T_199, UInt<1>("h00"), _T_517) @[Lookup.scala 33:37]
    node _T_519 = mux(_T_197, UInt<1>("h00"), _T_518) @[Lookup.scala 33:37]
    node _T_520 = mux(_T_195, UInt<1>("h00"), _T_519) @[Lookup.scala 33:37]
    node _T_521 = mux(_T_193, UInt<4>("h0b"), _T_520) @[Lookup.scala 33:37]
    node _T_522 = mux(_T_191, UInt<4>("h0a"), _T_521) @[Lookup.scala 33:37]
    node _T_523 = mux(_T_189, UInt<7>("h040"), _T_522) @[Lookup.scala 33:37]
    node _T_524 = mux(_T_187, UInt<7>("h05a"), _T_523) @[Lookup.scala 33:37]
    node _T_525 = mux(_T_185, UInt<1>("h00"), _T_524) @[Lookup.scala 33:37]
    node _T_526 = mux(_T_183, UInt<7>("h040"), _T_525) @[Lookup.scala 33:37]
    node _T_527 = mux(_T_181, UInt<7>("h05a"), _T_526) @[Lookup.scala 33:37]
    node _T_528 = mux(_T_179, UInt<2>("h03"), _T_527) @[Lookup.scala 33:37]
    node _T_529 = mux(_T_177, UInt<2>("h02"), _T_528) @[Lookup.scala 33:37]
    node _T_530 = mux(_T_175, UInt<1>("h01"), _T_529) @[Lookup.scala 33:37]
    node _T_531 = mux(_T_173, UInt<5>("h011"), _T_530) @[Lookup.scala 33:37]
    node _T_532 = mux(_T_171, UInt<5>("h010"), _T_531) @[Lookup.scala 33:37]
    node _T_533 = mux(_T_169, UInt<7>("h058"), _T_532) @[Lookup.scala 33:37]
    node _T_534 = mux(_T_167, UInt<7>("h060"), _T_533) @[Lookup.scala 33:37]
    node _T_535 = mux(_T_165, UInt<6>("h028"), _T_534) @[Lookup.scala 33:37]
    node _T_536 = mux(_T_163, UInt<3>("h07"), _T_535) @[Lookup.scala 33:37]
    node _T_537 = mux(_T_161, UInt<3>("h06"), _T_536) @[Lookup.scala 33:37]
    node _T_538 = mux(_T_159, UInt<3>("h04"), _T_537) @[Lookup.scala 33:37]
    node _T_539 = mux(_T_157, UInt<4>("h08"), _T_538) @[Lookup.scala 33:37]
    node _T_540 = mux(_T_155, UInt<3>("h07"), _T_539) @[Lookup.scala 33:37]
    node _T_541 = mux(_T_153, UInt<4>("h0d"), _T_540) @[Lookup.scala 33:37]
    node _T_542 = mux(_T_151, UInt<3>("h05"), _T_541) @[Lookup.scala 33:37]
    node _T_543 = mux(_T_149, UInt<7>("h040"), _T_542) @[Lookup.scala 33:37]
    node _T_544 = mux(_T_147, UInt<7>("h040"), _T_543) @[Lookup.scala 33:37]
    node _T_545 = mux(_T_145, UInt<7>("h040"), _T_544) @[Lookup.scala 33:37]
    node _T_546 = mux(_T_143, UInt<7>("h060"), _T_545) @[Lookup.scala 33:37]
    node _T_547 = mux(_T_141, UInt<7>("h040"), _T_546) @[Lookup.scala 33:37]
    node _T_548 = mux(_T_139, UInt<7>("h040"), _T_547) @[Lookup.scala 33:37]
    node _T_549 = mux(_T_137, UInt<4>("h0b"), _T_548) @[Lookup.scala 33:37]
    node _T_550 = mux(_T_135, UInt<4>("h0a"), _T_549) @[Lookup.scala 33:37]
    node _T_551 = mux(_T_133, UInt<2>("h03"), _T_550) @[Lookup.scala 33:37]
    node _T_552 = mux(_T_131, UInt<2>("h02"), _T_551) @[Lookup.scala 33:37]
    node _T_553 = mux(_T_129, UInt<7>("h040"), _T_552) @[Lookup.scala 33:37]
    node _T_554 = mux(_T_127, UInt<1>("h00"), _T_553) @[Lookup.scala 33:37]
    node _T_555 = mux(_T_125, UInt<4>("h0f"), _T_554) @[Lookup.scala 33:37]
    node _T_556 = mux(_T_123, UInt<4>("h0e"), _T_555) @[Lookup.scala 33:37]
    node _T_557 = mux(_T_121, UInt<4>("h0d"), _T_556) @[Lookup.scala 33:37]
    node _T_558 = mux(_T_119, UInt<4>("h0c"), _T_557) @[Lookup.scala 33:37]
    node _T_559 = mux(_T_117, UInt<4>("h08"), _T_558) @[Lookup.scala 33:37]
    node _T_560 = mux(_T_115, UInt<3>("h07"), _T_559) @[Lookup.scala 33:37]
    node _T_561 = mux(_T_113, UInt<3>("h06"), _T_560) @[Lookup.scala 33:37]
    node _T_562 = mux(_T_111, UInt<3>("h05"), _T_561) @[Lookup.scala 33:37]
    node _T_563 = mux(_T_109, UInt<3>("h04"), _T_562) @[Lookup.scala 33:37]
    node _T_564 = mux(_T_107, UInt<2>("h03"), _T_563) @[Lookup.scala 33:37]
    node _T_565 = mux(_T_105, UInt<2>("h02"), _T_564) @[Lookup.scala 33:37]
    node _T_566 = mux(_T_103, UInt<1>("h01"), _T_565) @[Lookup.scala 33:37]
    node _T_567 = mux(_T_101, UInt<1>("h00"), _T_566) @[Lookup.scala 33:37]
    node _T_568 = mux(_T_99, UInt<2>("h02"), _T_567) @[Lookup.scala 33:37]
    node _T_569 = mux(_T_97, UInt<4>("h0b"), _T_568) @[Lookup.scala 33:37]
    node _T_570 = mux(_T_95, UInt<2>("h03"), _T_569) @[Lookup.scala 33:37]
    node _T_571 = mux(_T_93, UInt<3>("h06"), _T_570) @[Lookup.scala 33:37]
    node _T_572 = mux(_T_91, UInt<6>("h028"), _T_571) @[Lookup.scala 33:37]
    node _T_573 = mux(_T_89, UInt<7>("h060"), _T_572) @[Lookup.scala 33:37]
    node _T_574 = mux(_T_87, UInt<6>("h02d"), _T_573) @[Lookup.scala 33:37]
    node _T_575 = mux(_T_85, UInt<6>("h025"), _T_574) @[Lookup.scala 33:37]
    node _T_576 = mux(_T_83, UInt<6>("h021"), _T_575) @[Lookup.scala 33:37]
    node _T_577 = mux(_T_81, UInt<6>("h02d"), _T_576) @[Lookup.scala 33:37]
    node _T_578 = mux(_T_79, UInt<6>("h025"), _T_577) @[Lookup.scala 33:37]
    node _T_579 = mux(_T_77, UInt<6>("h021"), _T_578) @[Lookup.scala 33:37]
    node _T_580 = mux(_T_75, UInt<7>("h060"), _T_579) @[Lookup.scala 33:37]
    node _T_581 = mux(_T_73, UInt<4>("h0a"), _T_580) @[Lookup.scala 33:37]
    node _T_582 = mux(_T_71, UInt<4>("h09"), _T_581) @[Lookup.scala 33:37]
    node _T_583 = mux(_T_69, UInt<4>("h08"), _T_582) @[Lookup.scala 33:37]
    node _T_584 = mux(_T_67, UInt<3>("h05"), _T_583) @[Lookup.scala 33:37]
    node _T_585 = mux(_T_65, UInt<3>("h04"), _T_584) @[Lookup.scala 33:37]
    node _T_586 = mux(_T_63, UInt<2>("h02"), _T_585) @[Lookup.scala 33:37]
    node _T_587 = mux(_T_61, UInt<1>("h01"), _T_586) @[Lookup.scala 33:37]
    node _T_588 = mux(_T_59, UInt<1>("h00"), _T_587) @[Lookup.scala 33:37]
    node _T_589 = mux(_T_57, UInt<5>("h017"), _T_588) @[Lookup.scala 33:37]
    node _T_590 = mux(_T_55, UInt<5>("h016"), _T_589) @[Lookup.scala 33:37]
    node _T_591 = mux(_T_53, UInt<5>("h015"), _T_590) @[Lookup.scala 33:37]
    node _T_592 = mux(_T_51, UInt<5>("h014"), _T_591) @[Lookup.scala 33:37]
    node _T_593 = mux(_T_49, UInt<5>("h011"), _T_592) @[Lookup.scala 33:37]
    node _T_594 = mux(_T_47, UInt<5>("h010"), _T_593) @[Lookup.scala 33:37]
    node _T_595 = mux(_T_45, UInt<7>("h05a"), _T_594) @[Lookup.scala 33:37]
    node _T_596 = mux(_T_43, UInt<7>("h058"), _T_595) @[Lookup.scala 33:37]
    node _T_597 = mux(_T_41, UInt<7>("h040"), _T_596) @[Lookup.scala 33:37]
    node _T_598 = mux(_T_39, UInt<7>("h040"), _T_597) @[Lookup.scala 33:37]
    node _T_599 = mux(_T_37, UInt<4>("h0d"), _T_598) @[Lookup.scala 33:37]
    node _T_600 = mux(_T_35, UInt<4>("h08"), _T_599) @[Lookup.scala 33:37]
    node _T_601 = mux(_T_33, UInt<3>("h07"), _T_600) @[Lookup.scala 33:37]
    node _T_602 = mux(_T_31, UInt<3>("h06"), _T_601) @[Lookup.scala 33:37]
    node _T_603 = mux(_T_29, UInt<3>("h05"), _T_602) @[Lookup.scala 33:37]
    node _T_604 = mux(_T_27, UInt<3>("h04"), _T_603) @[Lookup.scala 33:37]
    node _T_605 = mux(_T_25, UInt<2>("h03"), _T_604) @[Lookup.scala 33:37]
    node _T_606 = mux(_T_23, UInt<2>("h02"), _T_605) @[Lookup.scala 33:37]
    node _T_607 = mux(_T_21, UInt<1>("h01"), _T_606) @[Lookup.scala 33:37]
    node _T_608 = mux(_T_19, UInt<7>("h040"), _T_607) @[Lookup.scala 33:37]
    node _T_609 = mux(_T_17, UInt<4>("h0d"), _T_608) @[Lookup.scala 33:37]
    node _T_610 = mux(_T_15, UInt<3>("h07"), _T_609) @[Lookup.scala 33:37]
    node _T_611 = mux(_T_13, UInt<3>("h06"), _T_610) @[Lookup.scala 33:37]
    node _T_612 = mux(_T_11, UInt<3>("h05"), _T_611) @[Lookup.scala 33:37]
    node _T_613 = mux(_T_9, UInt<3>("h04"), _T_612) @[Lookup.scala 33:37]
    node _T_614 = mux(_T_7, UInt<2>("h03"), _T_613) @[Lookup.scala 33:37]
    node _T_615 = mux(_T_5, UInt<2>("h02"), _T_614) @[Lookup.scala 33:37]
    node _T_616 = mux(_T_3, UInt<1>("h01"), _T_615) @[Lookup.scala 33:37]
    node decodeList_2 = mux(_T_1, UInt<7>("h040"), _T_616) @[Lookup.scala 33:37]
    node _T_617 = or(hasIntr, io.in.bits.exceptionVec[12]) @[IDU.scala 36:84]
    node _T_618 = or(_T_617, io.out.bits.cf.exceptionVec[1]) @[IDU.scala 36:127]
    node instrType = mux(_T_618, UInt<1>("h00"), decodeList_0) @[IDU.scala 36:75]
    node _T_619 = or(hasIntr, io.in.bits.exceptionVec[12]) @[IDU.scala 36:84]
    node _T_620 = or(_T_619, io.out.bits.cf.exceptionVec[1]) @[IDU.scala 36:127]
    node fuType = mux(_T_620, UInt<2>("h03"), decodeList_1) @[IDU.scala 36:75]
    node _T_621 = or(hasIntr, io.in.bits.exceptionVec[12]) @[IDU.scala 36:84]
    node _T_622 = or(_T_621, io.out.bits.cf.exceptionVec[1]) @[IDU.scala 36:127]
    node fuOpType = mux(_T_622, UInt<1>("h00"), decodeList_2) @[IDU.scala 36:75]
    node _T_623 = bits(io.in.bits.instr, 1, 0) @[IDU.scala 38:39]
    node isRVC = neq(_T_623, UInt<2>("h03")) @[IDU.scala 38:45]
    node _T_624 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_625 = eq(UInt<1>("h00"), _T_624) @[Lookup.scala 31:38]
    node _T_626 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_627 = eq(UInt<15>("h04000"), _T_626) @[Lookup.scala 31:38]
    node _T_628 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_629 = eq(UInt<15>("h06000"), _T_628) @[Lookup.scala 31:38]
    node _T_630 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_631 = eq(UInt<16>("h0c000"), _T_630) @[Lookup.scala 31:38]
    node _T_632 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_633 = eq(UInt<16>("h0e000"), _T_632) @[Lookup.scala 31:38]
    node _T_634 = and(io.in.bits.instr, UInt<16>("h0ef83")) @[Lookup.scala 31:38]
    node _T_635 = eq(UInt<1>("h01"), _T_634) @[Lookup.scala 31:38]
    node _T_636 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_637 = eq(UInt<1>("h01"), _T_636) @[Lookup.scala 31:38]
    node _T_638 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_639 = eq(UInt<14>("h02001"), _T_638) @[Lookup.scala 31:38]
    node _T_640 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_641 = eq(UInt<15>("h04001"), _T_640) @[Lookup.scala 31:38]
    node _T_642 = and(io.in.bits.instr, UInt<16>("h0ef83")) @[Lookup.scala 31:38]
    node _T_643 = eq(UInt<15>("h06101"), _T_642) @[Lookup.scala 31:38]
    node _T_644 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_645 = eq(UInt<15>("h06001"), _T_644) @[Lookup.scala 31:38]
    node _T_646 = and(io.in.bits.instr, UInt<16>("h0ec03")) @[Lookup.scala 31:38]
    node _T_647 = eq(UInt<16>("h08001"), _T_646) @[Lookup.scala 31:38]
    node _T_648 = and(io.in.bits.instr, UInt<16>("h0ec03")) @[Lookup.scala 31:38]
    node _T_649 = eq(UInt<16>("h08401"), _T_648) @[Lookup.scala 31:38]
    node _T_650 = and(io.in.bits.instr, UInt<16>("h0ec03")) @[Lookup.scala 31:38]
    node _T_651 = eq(UInt<16>("h08801"), _T_650) @[Lookup.scala 31:38]
    node _T_652 = and(io.in.bits.instr, UInt<16>("h0fc63")) @[Lookup.scala 31:38]
    node _T_653 = eq(UInt<16>("h08c01"), _T_652) @[Lookup.scala 31:38]
    node _T_654 = and(io.in.bits.instr, UInt<16>("h0fc63")) @[Lookup.scala 31:38]
    node _T_655 = eq(UInt<16>("h08c21"), _T_654) @[Lookup.scala 31:38]
    node _T_656 = and(io.in.bits.instr, UInt<16>("h0fc63")) @[Lookup.scala 31:38]
    node _T_657 = eq(UInt<16>("h08c41"), _T_656) @[Lookup.scala 31:38]
    node _T_658 = and(io.in.bits.instr, UInt<16>("h0fc63")) @[Lookup.scala 31:38]
    node _T_659 = eq(UInt<16>("h08c61"), _T_658) @[Lookup.scala 31:38]
    node _T_660 = and(io.in.bits.instr, UInt<16>("h0fc63")) @[Lookup.scala 31:38]
    node _T_661 = eq(UInt<16>("h09c01"), _T_660) @[Lookup.scala 31:38]
    node _T_662 = and(io.in.bits.instr, UInt<16>("h0fc63")) @[Lookup.scala 31:38]
    node _T_663 = eq(UInt<16>("h09c21"), _T_662) @[Lookup.scala 31:38]
    node _T_664 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_665 = eq(UInt<16>("h0a001"), _T_664) @[Lookup.scala 31:38]
    node _T_666 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_667 = eq(UInt<16>("h0c001"), _T_666) @[Lookup.scala 31:38]
    node _T_668 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_669 = eq(UInt<16>("h0e001"), _T_668) @[Lookup.scala 31:38]
    node _T_670 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_671 = eq(UInt<2>("h02"), _T_670) @[Lookup.scala 31:38]
    node _T_672 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_673 = eq(UInt<15>("h04002"), _T_672) @[Lookup.scala 31:38]
    node _T_674 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_675 = eq(UInt<15>("h06002"), _T_674) @[Lookup.scala 31:38]
    node _T_676 = and(io.in.bits.instr, UInt<16>("h0f07f")) @[Lookup.scala 31:38]
    node _T_677 = eq(UInt<16>("h08002"), _T_676) @[Lookup.scala 31:38]
    node _T_678 = and(io.in.bits.instr, UInt<16>("h0f003")) @[Lookup.scala 31:38]
    node _T_679 = eq(UInt<16>("h08002"), _T_678) @[Lookup.scala 31:38]
    node _T_680 = and(io.in.bits.instr, UInt<16>("h0ffff")) @[Lookup.scala 31:38]
    node _T_681 = eq(UInt<16>("h09002"), _T_680) @[Lookup.scala 31:38]
    node _T_682 = and(io.in.bits.instr, UInt<16>("h0f07f")) @[Lookup.scala 31:38]
    node _T_683 = eq(UInt<16>("h09002"), _T_682) @[Lookup.scala 31:38]
    node _T_684 = and(io.in.bits.instr, UInt<16>("h0f003")) @[Lookup.scala 31:38]
    node _T_685 = eq(UInt<16>("h09002"), _T_684) @[Lookup.scala 31:38]
    node _T_686 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_687 = eq(UInt<16>("h0c002"), _T_686) @[Lookup.scala 31:38]
    node _T_688 = and(io.in.bits.instr, UInt<16>("h0e003")) @[Lookup.scala 31:38]
    node _T_689 = eq(UInt<16>("h0e002"), _T_688) @[Lookup.scala 31:38]
    node _T_690 = mux(_T_689, UInt<2>("h03"), UInt<5>("h010")) @[Lookup.scala 33:37]
    node _T_691 = mux(_T_687, UInt<2>("h02"), _T_690) @[Lookup.scala 33:37]
    node _T_692 = mux(_T_685, UInt<5>("h010"), _T_691) @[Lookup.scala 33:37]
    node _T_693 = mux(_T_683, UInt<5>("h010"), _T_692) @[Lookup.scala 33:37]
    node _T_694 = mux(_T_681, UInt<4>("h0f"), _T_693) @[Lookup.scala 33:37]
    node _T_695 = mux(_T_679, UInt<5>("h010"), _T_694) @[Lookup.scala 33:37]
    node _T_696 = mux(_T_677, UInt<5>("h010"), _T_695) @[Lookup.scala 33:37]
    node _T_697 = mux(_T_675, UInt<1>("h01"), _T_696) @[Lookup.scala 33:37]
    node _T_698 = mux(_T_673, UInt<1>("h00"), _T_697) @[Lookup.scala 33:37]
    node _T_699 = mux(_T_671, UInt<4>("h0a"), _T_698) @[Lookup.scala 33:37]
    node _T_700 = mux(_T_669, UInt<4>("h09"), _T_699) @[Lookup.scala 33:37]
    node _T_701 = mux(_T_667, UInt<4>("h09"), _T_700) @[Lookup.scala 33:37]
    node _T_702 = mux(_T_665, UInt<4>("h08"), _T_701) @[Lookup.scala 33:37]
    node _T_703 = mux(_T_663, UInt<5>("h010"), _T_702) @[Lookup.scala 33:37]
    node _T_704 = mux(_T_661, UInt<5>("h010"), _T_703) @[Lookup.scala 33:37]
    node _T_705 = mux(_T_659, UInt<5>("h010"), _T_704) @[Lookup.scala 33:37]
    node _T_706 = mux(_T_657, UInt<5>("h010"), _T_705) @[Lookup.scala 33:37]
    node _T_707 = mux(_T_655, UInt<5>("h010"), _T_706) @[Lookup.scala 33:37]
    node _T_708 = mux(_T_653, UInt<5>("h010"), _T_707) @[Lookup.scala 33:37]
    node _T_709 = mux(_T_651, UInt<4>("h0a"), _T_708) @[Lookup.scala 33:37]
    node _T_710 = mux(_T_649, UInt<4>("h0a"), _T_709) @[Lookup.scala 33:37]
    node _T_711 = mux(_T_647, UInt<4>("h0a"), _T_710) @[Lookup.scala 33:37]
    node _T_712 = mux(_T_645, UInt<4>("h0b"), _T_711) @[Lookup.scala 33:37]
    node _T_713 = mux(_T_643, UInt<4>("h0d"), _T_712) @[Lookup.scala 33:37]
    node _T_714 = mux(_T_641, UInt<4>("h0a"), _T_713) @[Lookup.scala 33:37]
    node _T_715 = mux(_T_639, UInt<4>("h0c"), _T_714) @[Lookup.scala 33:37]
    node _T_716 = mux(_T_637, UInt<4>("h0c"), _T_715) @[Lookup.scala 33:37]
    node _T_717 = mux(_T_635, UInt<5>("h010"), _T_716) @[Lookup.scala 33:37]
    node _T_718 = mux(_T_633, UInt<3>("h05"), _T_717) @[Lookup.scala 33:37]
    node _T_719 = mux(_T_631, UInt<3>("h04"), _T_718) @[Lookup.scala 33:37]
    node _T_720 = mux(_T_629, UInt<3>("h07"), _T_719) @[Lookup.scala 33:37]
    node _T_721 = mux(_T_627, UInt<3>("h06"), _T_720) @[Lookup.scala 33:37]
    node rvcImmType = mux(_T_625, UInt<4>("h0e"), _T_721) @[Lookup.scala 33:37]
    node _T_722 = mux(_T_689, UInt<4>("h09"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_723 = mux(_T_687, UInt<4>("h09"), _T_722) @[Lookup.scala 33:37]
    node _T_724 = mux(_T_685, UInt<2>("h02"), _T_723) @[Lookup.scala 33:37]
    node _T_725 = mux(_T_683, UInt<3>("h04"), _T_724) @[Lookup.scala 33:37]
    node _T_726 = mux(_T_681, UInt<1>("h00"), _T_725) @[Lookup.scala 33:37]
    node _T_727 = mux(_T_679, UInt<3>("h05"), _T_726) @[Lookup.scala 33:37]
    node _T_728 = mux(_T_677, UInt<3>("h04"), _T_727) @[Lookup.scala 33:37]
    node _T_729 = mux(_T_675, UInt<4>("h09"), _T_728) @[Lookup.scala 33:37]
    node _T_730 = mux(_T_673, UInt<4>("h09"), _T_729) @[Lookup.scala 33:37]
    node _T_731 = mux(_T_671, UInt<2>("h02"), _T_730) @[Lookup.scala 33:37]
    node _T_732 = mux(_T_669, UInt<3>("h06"), _T_731) @[Lookup.scala 33:37]
    node _T_733 = mux(_T_667, UInt<3>("h06"), _T_732) @[Lookup.scala 33:37]
    node _T_734 = mux(_T_665, UInt<1>("h00"), _T_733) @[Lookup.scala 33:37]
    node _T_735 = mux(_T_663, UInt<3>("h06"), _T_734) @[Lookup.scala 33:37]
    node _T_736 = mux(_T_661, UInt<3>("h06"), _T_735) @[Lookup.scala 33:37]
    node _T_737 = mux(_T_659, UInt<3>("h06"), _T_736) @[Lookup.scala 33:37]
    node _T_738 = mux(_T_657, UInt<3>("h06"), _T_737) @[Lookup.scala 33:37]
    node _T_739 = mux(_T_655, UInt<3>("h06"), _T_738) @[Lookup.scala 33:37]
    node _T_740 = mux(_T_653, UInt<3>("h06"), _T_739) @[Lookup.scala 33:37]
    node _T_741 = mux(_T_651, UInt<3>("h06"), _T_740) @[Lookup.scala 33:37]
    node _T_742 = mux(_T_649, UInt<3>("h06"), _T_741) @[Lookup.scala 33:37]
    node _T_743 = mux(_T_647, UInt<3>("h06"), _T_742) @[Lookup.scala 33:37]
    node _T_744 = mux(_T_645, UInt<1>("h00"), _T_743) @[Lookup.scala 33:37]
    node _T_745 = mux(_T_643, UInt<4>("h09"), _T_744) @[Lookup.scala 33:37]
    node _T_746 = mux(_T_641, UInt<1>("h00"), _T_745) @[Lookup.scala 33:37]
    node _T_747 = mux(_T_639, UInt<2>("h02"), _T_746) @[Lookup.scala 33:37]
    node _T_748 = mux(_T_637, UInt<2>("h02"), _T_747) @[Lookup.scala 33:37]
    node _T_749 = mux(_T_635, UInt<1>("h00"), _T_748) @[Lookup.scala 33:37]
    node _T_750 = mux(_T_633, UInt<3>("h06"), _T_749) @[Lookup.scala 33:37]
    node _T_751 = mux(_T_631, UInt<3>("h06"), _T_750) @[Lookup.scala 33:37]
    node _T_752 = mux(_T_629, UInt<3>("h06"), _T_751) @[Lookup.scala 33:37]
    node _T_753 = mux(_T_627, UInt<3>("h06"), _T_752) @[Lookup.scala 33:37]
    node rvcSrc1Type = mux(_T_625, UInt<4>("h09"), _T_753) @[Lookup.scala 33:37]
    node _T_754 = mux(_T_689, UInt<3>("h05"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_755 = mux(_T_687, UInt<3>("h05"), _T_754) @[Lookup.scala 33:37]
    node _T_756 = mux(_T_685, UInt<3>("h05"), _T_755) @[Lookup.scala 33:37]
    node _T_757 = mux(_T_683, UInt<1>("h00"), _T_756) @[Lookup.scala 33:37]
    node _T_758 = mux(_T_681, UInt<1>("h00"), _T_757) @[Lookup.scala 33:37]
    node _T_759 = mux(_T_679, UInt<1>("h00"), _T_758) @[Lookup.scala 33:37]
    node _T_760 = mux(_T_677, UInt<1>("h00"), _T_759) @[Lookup.scala 33:37]
    node _T_761 = mux(_T_675, UInt<1>("h00"), _T_760) @[Lookup.scala 33:37]
    node _T_762 = mux(_T_673, UInt<1>("h00"), _T_761) @[Lookup.scala 33:37]
    node _T_763 = mux(_T_671, UInt<1>("h00"), _T_762) @[Lookup.scala 33:37]
    node _T_764 = mux(_T_669, UInt<1>("h00"), _T_763) @[Lookup.scala 33:37]
    node _T_765 = mux(_T_667, UInt<1>("h00"), _T_764) @[Lookup.scala 33:37]
    node _T_766 = mux(_T_665, UInt<1>("h00"), _T_765) @[Lookup.scala 33:37]
    node _T_767 = mux(_T_663, UInt<3>("h07"), _T_766) @[Lookup.scala 33:37]
    node _T_768 = mux(_T_661, UInt<3>("h07"), _T_767) @[Lookup.scala 33:37]
    node _T_769 = mux(_T_659, UInt<3>("h07"), _T_768) @[Lookup.scala 33:37]
    node _T_770 = mux(_T_657, UInt<3>("h07"), _T_769) @[Lookup.scala 33:37]
    node _T_771 = mux(_T_655, UInt<3>("h07"), _T_770) @[Lookup.scala 33:37]
    node _T_772 = mux(_T_653, UInt<3>("h07"), _T_771) @[Lookup.scala 33:37]
    node _T_773 = mux(_T_651, UInt<1>("h00"), _T_772) @[Lookup.scala 33:37]
    node _T_774 = mux(_T_649, UInt<1>("h00"), _T_773) @[Lookup.scala 33:37]
    node _T_775 = mux(_T_647, UInt<1>("h00"), _T_774) @[Lookup.scala 33:37]
    node _T_776 = mux(_T_645, UInt<1>("h00"), _T_775) @[Lookup.scala 33:37]
    node _T_777 = mux(_T_643, UInt<1>("h00"), _T_776) @[Lookup.scala 33:37]
    node _T_778 = mux(_T_641, UInt<1>("h00"), _T_777) @[Lookup.scala 33:37]
    node _T_779 = mux(_T_639, UInt<1>("h00"), _T_778) @[Lookup.scala 33:37]
    node _T_780 = mux(_T_637, UInt<1>("h00"), _T_779) @[Lookup.scala 33:37]
    node _T_781 = mux(_T_635, UInt<1>("h00"), _T_780) @[Lookup.scala 33:37]
    node _T_782 = mux(_T_633, UInt<3>("h07"), _T_781) @[Lookup.scala 33:37]
    node _T_783 = mux(_T_631, UInt<3>("h07"), _T_782) @[Lookup.scala 33:37]
    node _T_784 = mux(_T_629, UInt<1>("h00"), _T_783) @[Lookup.scala 33:37]
    node _T_785 = mux(_T_627, UInt<1>("h00"), _T_784) @[Lookup.scala 33:37]
    node rvcSrc2Type = mux(_T_625, UInt<1>("h00"), _T_785) @[Lookup.scala 33:37]
    node _T_786 = mux(_T_689, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_787 = mux(_T_687, UInt<1>("h00"), _T_786) @[Lookup.scala 33:37]
    node _T_788 = mux(_T_685, UInt<2>("h02"), _T_787) @[Lookup.scala 33:37]
    node _T_789 = mux(_T_683, UInt<4>("h08"), _T_788) @[Lookup.scala 33:37]
    node _T_790 = mux(_T_681, UInt<1>("h00"), _T_789) @[Lookup.scala 33:37]
    node _T_791 = mux(_T_679, UInt<2>("h02"), _T_790) @[Lookup.scala 33:37]
    node _T_792 = mux(_T_677, UInt<1>("h00"), _T_791) @[Lookup.scala 33:37]
    node _T_793 = mux(_T_675, UInt<2>("h02"), _T_792) @[Lookup.scala 33:37]
    node _T_794 = mux(_T_673, UInt<2>("h02"), _T_793) @[Lookup.scala 33:37]
    node _T_795 = mux(_T_671, UInt<2>("h02"), _T_794) @[Lookup.scala 33:37]
    node _T_796 = mux(_T_669, UInt<1>("h00"), _T_795) @[Lookup.scala 33:37]
    node _T_797 = mux(_T_667, UInt<1>("h00"), _T_796) @[Lookup.scala 33:37]
    node _T_798 = mux(_T_665, UInt<1>("h00"), _T_797) @[Lookup.scala 33:37]
    node _T_799 = mux(_T_663, UInt<3>("h06"), _T_798) @[Lookup.scala 33:37]
    node _T_800 = mux(_T_661, UInt<3>("h06"), _T_799) @[Lookup.scala 33:37]
    node _T_801 = mux(_T_659, UInt<3>("h06"), _T_800) @[Lookup.scala 33:37]
    node _T_802 = mux(_T_657, UInt<3>("h06"), _T_801) @[Lookup.scala 33:37]
    node _T_803 = mux(_T_655, UInt<3>("h06"), _T_802) @[Lookup.scala 33:37]
    node _T_804 = mux(_T_653, UInt<3>("h06"), _T_803) @[Lookup.scala 33:37]
    node _T_805 = mux(_T_651, UInt<3>("h06"), _T_804) @[Lookup.scala 33:37]
    node _T_806 = mux(_T_649, UInt<3>("h06"), _T_805) @[Lookup.scala 33:37]
    node _T_807 = mux(_T_647, UInt<3>("h06"), _T_806) @[Lookup.scala 33:37]
    node _T_808 = mux(_T_645, UInt<2>("h02"), _T_807) @[Lookup.scala 33:37]
    node _T_809 = mux(_T_643, UInt<4>("h09"), _T_808) @[Lookup.scala 33:37]
    node _T_810 = mux(_T_641, UInt<2>("h02"), _T_809) @[Lookup.scala 33:37]
    node _T_811 = mux(_T_639, UInt<2>("h02"), _T_810) @[Lookup.scala 33:37]
    node _T_812 = mux(_T_637, UInt<2>("h02"), _T_811) @[Lookup.scala 33:37]
    node _T_813 = mux(_T_635, UInt<1>("h00"), _T_812) @[Lookup.scala 33:37]
    node _T_814 = mux(_T_633, UInt<1>("h00"), _T_813) @[Lookup.scala 33:37]
    node _T_815 = mux(_T_631, UInt<1>("h00"), _T_814) @[Lookup.scala 33:37]
    node _T_816 = mux(_T_629, UInt<3>("h07"), _T_815) @[Lookup.scala 33:37]
    node _T_817 = mux(_T_627, UInt<3>("h07"), _T_816) @[Lookup.scala 33:37]
    node rvcDestType = mux(_T_625, UInt<3>("h07"), _T_817) @[Lookup.scala 33:37]
    io.out.bits.data.imm is invalid @[IDU.scala 42:15]
    io.out.bits.data.src2 is invalid @[IDU.scala 42:15]
    io.out.bits.data.src1 is invalid @[IDU.scala 42:15]
    io.out.bits.ctrl.isBlocked is invalid @[IDU.scala 42:15]
    io.out.bits.ctrl.noSpecExec is invalid @[IDU.scala 42:15]
    io.out.bits.ctrl.isSrc2Forward is invalid @[IDU.scala 42:15]
    io.out.bits.ctrl.isSrc1Forward is invalid @[IDU.scala 42:15]
    io.out.bits.ctrl.isNutCoreTrap is invalid @[IDU.scala 42:15]
    io.out.bits.ctrl.rfDest is invalid @[IDU.scala 42:15]
    io.out.bits.ctrl.rfWen is invalid @[IDU.scala 42:15]
    io.out.bits.ctrl.rfSrc2 is invalid @[IDU.scala 42:15]
    io.out.bits.ctrl.rfSrc1 is invalid @[IDU.scala 42:15]
    io.out.bits.ctrl.fuOpType is invalid @[IDU.scala 42:15]
    io.out.bits.ctrl.fuType is invalid @[IDU.scala 42:15]
    io.out.bits.ctrl.src2Type is invalid @[IDU.scala 42:15]
    io.out.bits.ctrl.src1Type is invalid @[IDU.scala 42:15]
    io.out.bits.cf.crossPageIPFFix is invalid @[IDU.scala 42:15]
    io.out.bits.cf.isRVC is invalid @[IDU.scala 42:15]
    io.out.bits.cf.brIdx is invalid @[IDU.scala 42:15]
    io.out.bits.cf.intrVec[0] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.intrVec[1] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.intrVec[2] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.intrVec[3] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.intrVec[4] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.intrVec[5] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.intrVec[6] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.intrVec[7] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.intrVec[8] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.intrVec[9] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.intrVec[10] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.intrVec[11] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.exceptionVec[0] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.exceptionVec[1] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.exceptionVec[2] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.exceptionVec[3] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.exceptionVec[4] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.exceptionVec[5] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.exceptionVec[6] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.exceptionVec[7] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.exceptionVec[8] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.exceptionVec[9] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.exceptionVec[10] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.exceptionVec[11] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.exceptionVec[12] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.exceptionVec[13] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.exceptionVec[14] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.exceptionVec[15] is invalid @[IDU.scala 42:15]
    io.out.bits.cf.redirect.valid is invalid @[IDU.scala 42:15]
    io.out.bits.cf.redirect.rtype is invalid @[IDU.scala 42:15]
    io.out.bits.cf.redirect.target is invalid @[IDU.scala 42:15]
    io.out.bits.cf.pnpc is invalid @[IDU.scala 42:15]
    io.out.bits.cf.pc is invalid @[IDU.scala 42:15]
    io.out.bits.cf.instr is invalid @[IDU.scala 42:15]
    io.out.bits.ctrl.fuType <= fuType @[IDU.scala 44:27]
    io.out.bits.ctrl.fuOpType <= fuOpType @[IDU.scala 45:29]
    node _T_818 = eq(UInt<3>("h04"), instrType) @[LookupTree.scala 24:34]
    node _T_819 = eq(UInt<3>("h05"), instrType) @[LookupTree.scala 24:34]
    node _T_820 = eq(UInt<2>("h02"), instrType) @[LookupTree.scala 24:34]
    node _T_821 = eq(UInt<4>("h0f"), instrType) @[LookupTree.scala 24:34]
    node _T_822 = eq(UInt<1>("h01"), instrType) @[LookupTree.scala 24:34]
    node _T_823 = eq(UInt<3>("h06"), instrType) @[LookupTree.scala 24:34]
    node _T_824 = eq(UInt<3>("h07"), instrType) @[LookupTree.scala 24:34]
    node _T_825 = eq(UInt<1>("h00"), instrType) @[LookupTree.scala 24:34]
    node _T_826 = mux(_T_818, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_827 = mux(_T_819, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_828 = mux(_T_820, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_829 = mux(_T_821, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_830 = mux(_T_822, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_831 = mux(_T_823, UInt<1>("h01"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_832 = mux(_T_824, UInt<1>("h01"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_833 = mux(_T_825, UInt<1>("h01"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_834 = or(_T_826, _T_827) @[Mux.scala 27:72]
    node _T_835 = or(_T_834, _T_828) @[Mux.scala 27:72]
    node _T_836 = or(_T_835, _T_829) @[Mux.scala 27:72]
    node _T_837 = or(_T_836, _T_830) @[Mux.scala 27:72]
    node _T_838 = or(_T_837, _T_831) @[Mux.scala 27:72]
    node _T_839 = or(_T_838, _T_832) @[Mux.scala 27:72]
    node _T_840 = or(_T_839, _T_833) @[Mux.scala 27:72]
    wire src1Type : UInt<1> @[Mux.scala 27:72]
    src1Type <= _T_840 @[Mux.scala 27:72]
    node _T_841 = eq(UInt<3>("h04"), instrType) @[LookupTree.scala 24:34]
    node _T_842 = eq(UInt<3>("h05"), instrType) @[LookupTree.scala 24:34]
    node _T_843 = eq(UInt<2>("h02"), instrType) @[LookupTree.scala 24:34]
    node _T_844 = eq(UInt<4>("h0f"), instrType) @[LookupTree.scala 24:34]
    node _T_845 = eq(UInt<1>("h01"), instrType) @[LookupTree.scala 24:34]
    node _T_846 = eq(UInt<3>("h06"), instrType) @[LookupTree.scala 24:34]
    node _T_847 = eq(UInt<3>("h07"), instrType) @[LookupTree.scala 24:34]
    node _T_848 = eq(UInt<1>("h00"), instrType) @[LookupTree.scala 24:34]
    node _T_849 = mux(_T_841, UInt<1>("h01"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_850 = mux(_T_842, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_851 = mux(_T_843, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_852 = mux(_T_844, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_853 = mux(_T_845, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_854 = mux(_T_846, UInt<1>("h01"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_855 = mux(_T_847, UInt<1>("h01"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_856 = mux(_T_848, UInt<1>("h01"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_857 = or(_T_849, _T_850) @[Mux.scala 27:72]
    node _T_858 = or(_T_857, _T_851) @[Mux.scala 27:72]
    node _T_859 = or(_T_858, _T_852) @[Mux.scala 27:72]
    node _T_860 = or(_T_859, _T_853) @[Mux.scala 27:72]
    node _T_861 = or(_T_860, _T_854) @[Mux.scala 27:72]
    node _T_862 = or(_T_861, _T_855) @[Mux.scala 27:72]
    node _T_863 = or(_T_862, _T_856) @[Mux.scala 27:72]
    wire src2Type : UInt<1> @[Mux.scala 27:72]
    src2Type <= _T_863 @[Mux.scala 27:72]
    node rs = bits(io.in.bits.instr, 19, 15) @[IDU.scala 60:28]
    node rt = bits(io.in.bits.instr, 24, 20) @[IDU.scala 60:43]
    node rd = bits(io.in.bits.instr, 11, 7) @[IDU.scala 60:58]
    node rs1 = bits(io.in.bits.instr, 11, 7) @[IDU.scala 62:24]
    node rs2 = bits(io.in.bits.instr, 6, 2) @[IDU.scala 63:24]
    node _T_864 = bits(io.in.bits.instr, 9, 7) @[IDU.scala 64:35]
    node _T_865 = eq(UInt<1>("h00"), _T_864) @[LookupTree.scala 24:34]
    node _T_866 = eq(UInt<1>("h01"), _T_864) @[LookupTree.scala 24:34]
    node _T_867 = eq(UInt<2>("h02"), _T_864) @[LookupTree.scala 24:34]
    node _T_868 = eq(UInt<2>("h03"), _T_864) @[LookupTree.scala 24:34]
    node _T_869 = eq(UInt<3>("h04"), _T_864) @[LookupTree.scala 24:34]
    node _T_870 = eq(UInt<3>("h05"), _T_864) @[LookupTree.scala 24:34]
    node _T_871 = eq(UInt<3>("h06"), _T_864) @[LookupTree.scala 24:34]
    node _T_872 = eq(UInt<3>("h07"), _T_864) @[LookupTree.scala 24:34]
    node _T_873 = mux(_T_865, UInt<4>("h08"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_874 = mux(_T_866, UInt<4>("h09"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_875 = mux(_T_867, UInt<4>("h0a"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_876 = mux(_T_868, UInt<4>("h0b"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_877 = mux(_T_869, UInt<4>("h0c"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_878 = mux(_T_870, UInt<4>("h0d"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_879 = mux(_T_871, UInt<4>("h0e"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_880 = mux(_T_872, UInt<4>("h0f"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_881 = or(_T_873, _T_874) @[Mux.scala 27:72]
    node _T_882 = or(_T_881, _T_875) @[Mux.scala 27:72]
    node _T_883 = or(_T_882, _T_876) @[Mux.scala 27:72]
    node _T_884 = or(_T_883, _T_877) @[Mux.scala 27:72]
    node _T_885 = or(_T_884, _T_878) @[Mux.scala 27:72]
    node _T_886 = or(_T_885, _T_879) @[Mux.scala 27:72]
    node _T_887 = or(_T_886, _T_880) @[Mux.scala 27:72]
    wire rs1p : UInt<4> @[Mux.scala 27:72]
    rs1p <= _T_887 @[Mux.scala 27:72]
    node _T_888 = bits(io.in.bits.instr, 4, 2) @[IDU.scala 65:35]
    node _T_889 = eq(UInt<1>("h00"), _T_888) @[LookupTree.scala 24:34]
    node _T_890 = eq(UInt<1>("h01"), _T_888) @[LookupTree.scala 24:34]
    node _T_891 = eq(UInt<2>("h02"), _T_888) @[LookupTree.scala 24:34]
    node _T_892 = eq(UInt<2>("h03"), _T_888) @[LookupTree.scala 24:34]
    node _T_893 = eq(UInt<3>("h04"), _T_888) @[LookupTree.scala 24:34]
    node _T_894 = eq(UInt<3>("h05"), _T_888) @[LookupTree.scala 24:34]
    node _T_895 = eq(UInt<3>("h06"), _T_888) @[LookupTree.scala 24:34]
    node _T_896 = eq(UInt<3>("h07"), _T_888) @[LookupTree.scala 24:34]
    node _T_897 = mux(_T_889, UInt<4>("h08"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_898 = mux(_T_890, UInt<4>("h09"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_899 = mux(_T_891, UInt<4>("h0a"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_900 = mux(_T_892, UInt<4>("h0b"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_901 = mux(_T_893, UInt<4>("h0c"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_902 = mux(_T_894, UInt<4>("h0d"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_903 = mux(_T_895, UInt<4>("h0e"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_904 = mux(_T_896, UInt<4>("h0f"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_905 = or(_T_897, _T_898) @[Mux.scala 27:72]
    node _T_906 = or(_T_905, _T_899) @[Mux.scala 27:72]
    node _T_907 = or(_T_906, _T_900) @[Mux.scala 27:72]
    node _T_908 = or(_T_907, _T_901) @[Mux.scala 27:72]
    node _T_909 = or(_T_908, _T_902) @[Mux.scala 27:72]
    node _T_910 = or(_T_909, _T_903) @[Mux.scala 27:72]
    node _T_911 = or(_T_910, _T_904) @[Mux.scala 27:72]
    wire rs2p : UInt<4> @[Mux.scala 27:72]
    rs2p <= _T_911 @[Mux.scala 27:72]
    node _T_912 = bits(io.in.bits.instr, 12, 12) @[IDU.scala 66:28]
    node _T_913 = bits(io.in.bits.instr, 6, 2) @[IDU.scala 66:38]
    node rvc_shamt = cat(_T_912, _T_913) @[Cat.scala 29:58]
    node _T_914 = eq(UInt<1>("h00"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_915 = eq(UInt<2>("h03"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_916 = eq(UInt<1>("h01"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_917 = eq(UInt<2>("h02"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_918 = eq(UInt<3>("h04"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_919 = eq(UInt<3>("h05"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_920 = eq(UInt<3>("h06"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_921 = eq(UInt<3>("h07"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_922 = eq(UInt<4>("h08"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_923 = eq(UInt<4>("h09"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_924 = mux(_T_914, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_925 = mux(_T_915, rs, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_926 = mux(_T_916, rt, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_927 = mux(_T_917, rd, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_928 = mux(_T_918, rs1, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_929 = mux(_T_919, rs2, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_930 = mux(_T_920, rs1p, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_931 = mux(_T_921, rs2p, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_932 = mux(_T_922, UInt<1>("h01"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_933 = mux(_T_923, UInt<2>("h02"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_934 = or(_T_924, _T_925) @[Mux.scala 27:72]
    node _T_935 = or(_T_934, _T_926) @[Mux.scala 27:72]
    node _T_936 = or(_T_935, _T_927) @[Mux.scala 27:72]
    node _T_937 = or(_T_936, _T_928) @[Mux.scala 27:72]
    node _T_938 = or(_T_937, _T_929) @[Mux.scala 27:72]
    node _T_939 = or(_T_938, _T_930) @[Mux.scala 27:72]
    node _T_940 = or(_T_939, _T_931) @[Mux.scala 27:72]
    node _T_941 = or(_T_940, _T_932) @[Mux.scala 27:72]
    node _T_942 = or(_T_941, _T_933) @[Mux.scala 27:72]
    wire rvc_src1 : UInt<5> @[Mux.scala 27:72]
    rvc_src1 <= _T_942 @[Mux.scala 27:72]
    node _T_943 = eq(UInt<1>("h00"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_944 = eq(UInt<2>("h03"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_945 = eq(UInt<1>("h01"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_946 = eq(UInt<2>("h02"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_947 = eq(UInt<3>("h04"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_948 = eq(UInt<3>("h05"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_949 = eq(UInt<3>("h06"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_950 = eq(UInt<3>("h07"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_951 = eq(UInt<4>("h08"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_952 = eq(UInt<4>("h09"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_953 = mux(_T_943, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_954 = mux(_T_944, rs, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_955 = mux(_T_945, rt, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_956 = mux(_T_946, rd, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_957 = mux(_T_947, rs1, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_958 = mux(_T_948, rs2, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_959 = mux(_T_949, rs1p, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_960 = mux(_T_950, rs2p, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_961 = mux(_T_951, UInt<1>("h01"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_962 = mux(_T_952, UInt<2>("h02"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_963 = or(_T_953, _T_954) @[Mux.scala 27:72]
    node _T_964 = or(_T_963, _T_955) @[Mux.scala 27:72]
    node _T_965 = or(_T_964, _T_956) @[Mux.scala 27:72]
    node _T_966 = or(_T_965, _T_957) @[Mux.scala 27:72]
    node _T_967 = or(_T_966, _T_958) @[Mux.scala 27:72]
    node _T_968 = or(_T_967, _T_959) @[Mux.scala 27:72]
    node _T_969 = or(_T_968, _T_960) @[Mux.scala 27:72]
    node _T_970 = or(_T_969, _T_961) @[Mux.scala 27:72]
    node _T_971 = or(_T_970, _T_962) @[Mux.scala 27:72]
    wire rvc_src2 : UInt<5> @[Mux.scala 27:72]
    rvc_src2 <= _T_971 @[Mux.scala 27:72]
    node _T_972 = eq(UInt<1>("h00"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_973 = eq(UInt<2>("h03"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_974 = eq(UInt<1>("h01"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_975 = eq(UInt<2>("h02"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_976 = eq(UInt<3>("h04"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_977 = eq(UInt<3>("h05"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_978 = eq(UInt<3>("h06"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_979 = eq(UInt<3>("h07"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_980 = eq(UInt<4>("h08"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_981 = eq(UInt<4>("h09"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_982 = mux(_T_972, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_983 = mux(_T_973, rs, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_984 = mux(_T_974, rt, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_985 = mux(_T_975, rd, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_986 = mux(_T_976, rs1, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_987 = mux(_T_977, rs2, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_988 = mux(_T_978, rs1p, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_989 = mux(_T_979, rs2p, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_990 = mux(_T_980, UInt<1>("h01"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_991 = mux(_T_981, UInt<2>("h02"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_992 = or(_T_982, _T_983) @[Mux.scala 27:72]
    node _T_993 = or(_T_992, _T_984) @[Mux.scala 27:72]
    node _T_994 = or(_T_993, _T_985) @[Mux.scala 27:72]
    node _T_995 = or(_T_994, _T_986) @[Mux.scala 27:72]
    node _T_996 = or(_T_995, _T_987) @[Mux.scala 27:72]
    node _T_997 = or(_T_996, _T_988) @[Mux.scala 27:72]
    node _T_998 = or(_T_997, _T_989) @[Mux.scala 27:72]
    node _T_999 = or(_T_998, _T_990) @[Mux.scala 27:72]
    node _T_1000 = or(_T_999, _T_991) @[Mux.scala 27:72]
    wire rvc_dest : UInt<5> @[Mux.scala 27:72]
    rvc_dest <= _T_1000 @[Mux.scala 27:72]
    node rfSrc1 = mux(isRVC, rvc_src1, rs) @[IDU.scala 87:19]
    node rfSrc2 = mux(isRVC, rvc_src2, rt) @[IDU.scala 88:19]
    node rfDest = mux(isRVC, rvc_dest, rd) @[IDU.scala 89:19]
    node _T_1001 = eq(src1Type, UInt<1>("h01")) @[IDU.scala 92:43]
    node _T_1002 = mux(_T_1001, UInt<1>("h00"), rfSrc1) @[IDU.scala 92:33]
    io.out.bits.ctrl.rfSrc1 <= _T_1002 @[IDU.scala 92:27]
    node _T_1003 = eq(src2Type, UInt<1>("h00")) @[IDU.scala 93:43]
    node _T_1004 = mux(_T_1003, rfSrc2, UInt<1>("h00")) @[IDU.scala 93:33]
    io.out.bits.ctrl.rfSrc2 <= _T_1004 @[IDU.scala 93:27]
    node _T_1005 = bits(instrType, 2, 2) @[Decode.scala 33:50]
    io.out.bits.ctrl.rfWen <= _T_1005 @[IDU.scala 94:27]
    node _T_1006 = bits(instrType, 2, 2) @[Decode.scala 33:50]
    node _T_1007 = mux(_T_1006, rfDest, UInt<1>("h00")) @[IDU.scala 95:33]
    io.out.bits.ctrl.rfDest <= _T_1007 @[IDU.scala 95:27]
    io.out.bits.data.imm is invalid @[IDU.scala 97:20]
    io.out.bits.data.src2 is invalid @[IDU.scala 97:20]
    io.out.bits.data.src1 is invalid @[IDU.scala 97:20]
    node _T_1008 = bits(io.in.bits.instr, 31, 20) @[IDU.scala 99:29]
    node _T_1009 = bits(_T_1008, 11, 11) @[BitUtils.scala 39:20]
    node _T_1010 = bits(_T_1009, 0, 0) @[Bitwise.scala 72:15]
    node _T_1011 = mux(_T_1010, UInt<52>("h0fffffffffffff"), UInt<52>("h00")) @[Bitwise.scala 72:12]
    node _T_1012 = cat(_T_1011, _T_1008) @[Cat.scala 29:58]
    node _T_1013 = bits(io.in.bits.instr, 31, 25) @[IDU.scala 100:33]
    node _T_1014 = bits(io.in.bits.instr, 11, 7) @[IDU.scala 100:48]
    node _T_1015 = cat(_T_1013, _T_1014) @[Cat.scala 29:58]
    node _T_1016 = bits(_T_1015, 11, 11) @[BitUtils.scala 39:20]
    node _T_1017 = bits(_T_1016, 0, 0) @[Bitwise.scala 72:15]
    node _T_1018 = mux(_T_1017, UInt<52>("h0fffffffffffff"), UInt<52>("h00")) @[Bitwise.scala 72:12]
    node _T_1019 = cat(_T_1018, _T_1015) @[Cat.scala 29:58]
    node _T_1020 = bits(io.in.bits.instr, 31, 25) @[IDU.scala 101:33]
    node _T_1021 = bits(io.in.bits.instr, 11, 7) @[IDU.scala 101:48]
    node _T_1022 = cat(_T_1020, _T_1021) @[Cat.scala 29:58]
    node _T_1023 = bits(_T_1022, 11, 11) @[BitUtils.scala 39:20]
    node _T_1024 = bits(_T_1023, 0, 0) @[Bitwise.scala 72:15]
    node _T_1025 = mux(_T_1024, UInt<52>("h0fffffffffffff"), UInt<52>("h00")) @[Bitwise.scala 72:12]
    node _T_1026 = cat(_T_1025, _T_1022) @[Cat.scala 29:58]
    node _T_1027 = bits(io.in.bits.instr, 31, 31) @[IDU.scala 102:33]
    node _T_1028 = bits(io.in.bits.instr, 7, 7) @[IDU.scala 102:44]
    node _T_1029 = bits(io.in.bits.instr, 30, 25) @[IDU.scala 102:54]
    node _T_1030 = bits(io.in.bits.instr, 11, 8) @[IDU.scala 102:69]
    node _T_1031 = cat(_T_1030, UInt<1>("h00")) @[Cat.scala 29:58]
    node _T_1032 = cat(_T_1027, _T_1028) @[Cat.scala 29:58]
    node _T_1033 = cat(_T_1032, _T_1029) @[Cat.scala 29:58]
    node _T_1034 = cat(_T_1033, _T_1031) @[Cat.scala 29:58]
    node _T_1035 = bits(_T_1034, 12, 12) @[BitUtils.scala 39:20]
    node _T_1036 = bits(_T_1035, 0, 0) @[Bitwise.scala 72:15]
    node _T_1037 = mux(_T_1036, UInt<51>("h07ffffffffffff"), UInt<51>("h00")) @[Bitwise.scala 72:12]
    node _T_1038 = cat(_T_1037, _T_1034) @[Cat.scala 29:58]
    node _T_1039 = bits(io.in.bits.instr, 31, 12) @[IDU.scala 103:33]
    node _T_1040 = cat(_T_1039, UInt<12>("h00")) @[Cat.scala 29:58]
    node _T_1041 = bits(_T_1040, 31, 31) @[BitUtils.scala 39:20]
    node _T_1042 = bits(_T_1041, 0, 0) @[Bitwise.scala 72:15]
    node _T_1043 = mux(_T_1042, UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 72:12]
    node _T_1044 = cat(_T_1043, _T_1040) @[Cat.scala 29:58]
    node _T_1045 = bits(io.in.bits.instr, 31, 31) @[IDU.scala 104:33]
    node _T_1046 = bits(io.in.bits.instr, 19, 12) @[IDU.scala 104:44]
    node _T_1047 = bits(io.in.bits.instr, 20, 20) @[IDU.scala 104:59]
    node _T_1048 = bits(io.in.bits.instr, 30, 21) @[IDU.scala 104:70]
    node _T_1049 = cat(_T_1048, UInt<1>("h00")) @[Cat.scala 29:58]
    node _T_1050 = cat(_T_1045, _T_1046) @[Cat.scala 29:58]
    node _T_1051 = cat(_T_1050, _T_1047) @[Cat.scala 29:58]
    node _T_1052 = cat(_T_1051, _T_1049) @[Cat.scala 29:58]
    node _T_1053 = bits(_T_1052, 20, 20) @[BitUtils.scala 39:20]
    node _T_1054 = bits(_T_1053, 0, 0) @[Bitwise.scala 72:15]
    node _T_1055 = mux(_T_1054, UInt<43>("h07ffffffffff"), UInt<43>("h00")) @[Bitwise.scala 72:12]
    node _T_1056 = cat(_T_1055, _T_1052) @[Cat.scala 29:58]
    node _T_1057 = eq(UInt<3>("h04"), instrType) @[LookupTree.scala 24:34]
    node _T_1058 = eq(UInt<2>("h02"), instrType) @[LookupTree.scala 24:34]
    node _T_1059 = eq(UInt<4>("h0f"), instrType) @[LookupTree.scala 24:34]
    node _T_1060 = eq(UInt<1>("h01"), instrType) @[LookupTree.scala 24:34]
    node _T_1061 = eq(UInt<3>("h06"), instrType) @[LookupTree.scala 24:34]
    node _T_1062 = eq(UInt<3>("h07"), instrType) @[LookupTree.scala 24:34]
    node _T_1063 = mux(_T_1057, _T_1012, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1064 = mux(_T_1058, _T_1019, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1065 = mux(_T_1059, _T_1026, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1066 = mux(_T_1060, _T_1038, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1067 = mux(_T_1061, _T_1044, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1068 = mux(_T_1062, _T_1056, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1069 = or(_T_1063, _T_1064) @[Mux.scala 27:72]
    node _T_1070 = or(_T_1069, _T_1065) @[Mux.scala 27:72]
    node _T_1071 = or(_T_1070, _T_1066) @[Mux.scala 27:72]
    node _T_1072 = or(_T_1071, _T_1067) @[Mux.scala 27:72]
    node _T_1073 = or(_T_1072, _T_1068) @[Mux.scala 27:72]
    wire imm : UInt<64> @[Mux.scala 27:72]
    imm <= _T_1073 @[Mux.scala 27:72]
    node _T_1074 = bits(io.in.bits.instr, 3, 2) @[IDU.scala 109:43]
    node _T_1075 = bits(io.in.bits.instr, 12, 12) @[IDU.scala 109:55]
    node _T_1076 = bits(io.in.bits.instr, 6, 4) @[IDU.scala 109:66]
    node _T_1077 = cat(_T_1076, UInt<2>("h00")) @[Cat.scala 29:58]
    node _T_1078 = cat(_T_1074, _T_1075) @[Cat.scala 29:58]
    node _T_1079 = cat(_T_1078, _T_1077) @[Cat.scala 29:58]
    node _T_1080 = cat(UInt<56>("h00"), _T_1079) @[Cat.scala 29:58]
    node _T_1081 = bits(io.in.bits.instr, 4, 2) @[IDU.scala 110:43]
    node _T_1082 = bits(io.in.bits.instr, 12, 12) @[IDU.scala 110:55]
    node _T_1083 = bits(io.in.bits.instr, 6, 5) @[IDU.scala 110:66]
    node _T_1084 = cat(_T_1083, UInt<3>("h00")) @[Cat.scala 29:58]
    node _T_1085 = cat(_T_1081, _T_1082) @[Cat.scala 29:58]
    node _T_1086 = cat(_T_1085, _T_1084) @[Cat.scala 29:58]
    node _T_1087 = cat(UInt<55>("h00"), _T_1086) @[Cat.scala 29:58]
    node _T_1088 = bits(io.in.bits.instr, 8, 7) @[IDU.scala 111:43]
    node _T_1089 = bits(io.in.bits.instr, 12, 9) @[IDU.scala 111:55]
    node _T_1090 = cat(_T_1088, _T_1089) @[Cat.scala 29:58]
    node _T_1091 = cat(_T_1090, UInt<2>("h00")) @[Cat.scala 29:58]
    node _T_1092 = cat(UInt<56>("h00"), _T_1091) @[Cat.scala 29:58]
    node _T_1093 = bits(io.in.bits.instr, 9, 7) @[IDU.scala 112:43]
    node _T_1094 = bits(io.in.bits.instr, 12, 10) @[IDU.scala 112:55]
    node _T_1095 = cat(_T_1093, _T_1094) @[Cat.scala 29:58]
    node _T_1096 = cat(_T_1095, UInt<3>("h00")) @[Cat.scala 29:58]
    node _T_1097 = cat(UInt<55>("h00"), _T_1096) @[Cat.scala 29:58]
    node _T_1098 = bits(io.in.bits.instr, 5, 5) @[IDU.scala 113:43]
    node _T_1099 = bits(io.in.bits.instr, 12, 10) @[IDU.scala 113:53]
    node _T_1100 = bits(io.in.bits.instr, 6, 6) @[IDU.scala 113:67]
    node _T_1101 = cat(_T_1100, UInt<2>("h00")) @[Cat.scala 29:58]
    node _T_1102 = cat(_T_1098, _T_1099) @[Cat.scala 29:58]
    node _T_1103 = cat(_T_1102, _T_1101) @[Cat.scala 29:58]
    node _T_1104 = cat(UInt<57>("h00"), _T_1103) @[Cat.scala 29:58]
    node _T_1105 = bits(io.in.bits.instr, 6, 5) @[IDU.scala 114:43]
    node _T_1106 = bits(io.in.bits.instr, 12, 10) @[IDU.scala 114:55]
    node _T_1107 = cat(_T_1105, _T_1106) @[Cat.scala 29:58]
    node _T_1108 = cat(_T_1107, UInt<3>("h00")) @[Cat.scala 29:58]
    node _T_1109 = cat(UInt<56>("h00"), _T_1108) @[Cat.scala 29:58]
    node _T_1110 = bits(io.in.bits.instr, 5, 5) @[IDU.scala 115:43]
    node _T_1111 = bits(io.in.bits.instr, 12, 10) @[IDU.scala 115:53]
    node _T_1112 = bits(io.in.bits.instr, 6, 6) @[IDU.scala 115:67]
    node _T_1113 = cat(_T_1112, UInt<2>("h00")) @[Cat.scala 29:58]
    node _T_1114 = cat(_T_1110, _T_1111) @[Cat.scala 29:58]
    node _T_1115 = cat(_T_1114, _T_1113) @[Cat.scala 29:58]
    node _T_1116 = cat(UInt<57>("h00"), _T_1115) @[Cat.scala 29:58]
    node _T_1117 = bits(io.in.bits.instr, 6, 5) @[IDU.scala 116:43]
    node _T_1118 = bits(io.in.bits.instr, 12, 10) @[IDU.scala 116:55]
    node _T_1119 = cat(_T_1117, _T_1118) @[Cat.scala 29:58]
    node _T_1120 = cat(_T_1119, UInt<3>("h00")) @[Cat.scala 29:58]
    node _T_1121 = cat(UInt<56>("h00"), _T_1120) @[Cat.scala 29:58]
    node _T_1122 = bits(io.in.bits.instr, 12, 12) @[IDU.scala 117:43]
    node _T_1123 = bits(io.in.bits.instr, 8, 8) @[IDU.scala 117:54]
    node _T_1124 = bits(io.in.bits.instr, 10, 9) @[IDU.scala 117:64]
    node _T_1125 = bits(io.in.bits.instr, 6, 6) @[IDU.scala 117:77]
    node _T_1126 = bits(io.in.bits.instr, 7, 7) @[IDU.scala 117:87]
    node _T_1127 = bits(io.in.bits.instr, 2, 2) @[IDU.scala 117:97]
    node _T_1128 = bits(io.in.bits.instr, 11, 11) @[IDU.scala 117:107]
    node _T_1129 = bits(io.in.bits.instr, 5, 3) @[IDU.scala 117:118]
    node _T_1130 = cat(_T_1129, UInt<1>("h00")) @[Cat.scala 29:58]
    node _T_1131 = cat(_T_1127, _T_1128) @[Cat.scala 29:58]
    node _T_1132 = cat(_T_1131, _T_1130) @[Cat.scala 29:58]
    node _T_1133 = cat(_T_1125, _T_1126) @[Cat.scala 29:58]
    node _T_1134 = cat(_T_1122, _T_1123) @[Cat.scala 29:58]
    node _T_1135 = cat(_T_1134, _T_1124) @[Cat.scala 29:58]
    node _T_1136 = cat(_T_1135, _T_1133) @[Cat.scala 29:58]
    node _T_1137 = cat(_T_1136, _T_1132) @[Cat.scala 29:58]
    node _T_1138 = bits(_T_1137, 11, 11) @[BitUtils.scala 39:20]
    node _T_1139 = bits(_T_1138, 0, 0) @[Bitwise.scala 72:15]
    node _T_1140 = mux(_T_1139, UInt<52>("h0fffffffffffff"), UInt<52>("h00")) @[Bitwise.scala 72:12]
    node _T_1141 = cat(_T_1140, _T_1137) @[Cat.scala 29:58]
    node _T_1142 = bits(io.in.bits.instr, 12, 12) @[IDU.scala 118:43]
    node _T_1143 = bits(io.in.bits.instr, 6, 5) @[IDU.scala 118:54]
    node _T_1144 = bits(io.in.bits.instr, 2, 2) @[IDU.scala 118:66]
    node _T_1145 = bits(io.in.bits.instr, 11, 10) @[IDU.scala 118:76]
    node _T_1146 = bits(io.in.bits.instr, 4, 3) @[IDU.scala 118:90]
    node _T_1147 = cat(_T_1145, _T_1146) @[Cat.scala 29:58]
    node _T_1148 = cat(_T_1147, UInt<1>("h00")) @[Cat.scala 29:58]
    node _T_1149 = cat(_T_1142, _T_1143) @[Cat.scala 29:58]
    node _T_1150 = cat(_T_1149, _T_1144) @[Cat.scala 29:58]
    node _T_1151 = cat(_T_1150, _T_1148) @[Cat.scala 29:58]
    node _T_1152 = bits(_T_1151, 8, 8) @[BitUtils.scala 39:20]
    node _T_1153 = bits(_T_1152, 0, 0) @[Bitwise.scala 72:15]
    node _T_1154 = mux(_T_1153, UInt<55>("h07fffffffffffff"), UInt<55>("h00")) @[Bitwise.scala 72:12]
    node _T_1155 = cat(_T_1154, _T_1151) @[Cat.scala 29:58]
    node _T_1156 = bits(io.in.bits.instr, 12, 12) @[IDU.scala 119:43]
    node _T_1157 = bits(io.in.bits.instr, 6, 2) @[IDU.scala 119:54]
    node _T_1158 = cat(_T_1156, _T_1157) @[Cat.scala 29:58]
    node _T_1159 = bits(_T_1158, 5, 5) @[BitUtils.scala 39:20]
    node _T_1160 = bits(_T_1159, 0, 0) @[Bitwise.scala 72:15]
    node _T_1161 = mux(_T_1160, UInt<58>("h03ffffffffffffff"), UInt<58>("h00")) @[Bitwise.scala 72:12]
    node _T_1162 = cat(_T_1161, _T_1158) @[Cat.scala 29:58]
    node _T_1163 = bits(io.in.bits.instr, 12, 12) @[IDU.scala 120:43]
    node _T_1164 = bits(io.in.bits.instr, 6, 2) @[IDU.scala 120:54]
    node _T_1165 = cat(_T_1163, _T_1164) @[Cat.scala 29:58]
    node _T_1166 = cat(_T_1165, UInt<12>("h00")) @[Cat.scala 29:58]
    node _T_1167 = bits(_T_1166, 17, 17) @[BitUtils.scala 39:20]
    node _T_1168 = bits(_T_1167, 0, 0) @[Bitwise.scala 72:15]
    node _T_1169 = mux(_T_1168, UInt<46>("h03fffffffffff"), UInt<46>("h00")) @[Bitwise.scala 72:12]
    node _T_1170 = cat(_T_1169, _T_1166) @[Cat.scala 29:58]
    node _T_1171 = bits(io.in.bits.instr, 12, 12) @[IDU.scala 121:43]
    node _T_1172 = bits(io.in.bits.instr, 6, 2) @[IDU.scala 121:54]
    node _T_1173 = cat(_T_1171, _T_1172) @[Cat.scala 29:58]
    node _T_1174 = bits(_T_1173, 5, 5) @[BitUtils.scala 39:20]
    node _T_1175 = bits(_T_1174, 0, 0) @[Bitwise.scala 72:15]
    node _T_1176 = mux(_T_1175, UInt<58>("h03ffffffffffffff"), UInt<58>("h00")) @[Bitwise.scala 72:12]
    node _T_1177 = cat(_T_1176, _T_1173) @[Cat.scala 29:58]
    node _T_1178 = bits(io.in.bits.instr, 12, 12) @[IDU.scala 122:45]
    node _T_1179 = bits(io.in.bits.instr, 4, 3) @[IDU.scala 122:56]
    node _T_1180 = bits(io.in.bits.instr, 5, 5) @[IDU.scala 122:68]
    node _T_1181 = bits(io.in.bits.instr, 2, 2) @[IDU.scala 122:78]
    node _T_1182 = bits(io.in.bits.instr, 6, 6) @[IDU.scala 122:88]
    node _T_1183 = cat(_T_1181, _T_1182) @[Cat.scala 29:58]
    node _T_1184 = cat(_T_1183, UInt<4>("h00")) @[Cat.scala 29:58]
    node _T_1185 = cat(_T_1178, _T_1179) @[Cat.scala 29:58]
    node _T_1186 = cat(_T_1185, _T_1180) @[Cat.scala 29:58]
    node _T_1187 = cat(_T_1186, _T_1184) @[Cat.scala 29:58]
    node _T_1188 = bits(_T_1187, 9, 9) @[BitUtils.scala 39:20]
    node _T_1189 = bits(_T_1188, 0, 0) @[Bitwise.scala 72:15]
    node _T_1190 = mux(_T_1189, UInt<54>("h03fffffffffffff"), UInt<54>("h00")) @[Bitwise.scala 72:12]
    node _T_1191 = cat(_T_1190, _T_1187) @[Cat.scala 29:58]
    node _T_1192 = bits(io.in.bits.instr, 10, 7) @[IDU.scala 123:44]
    node _T_1193 = bits(io.in.bits.instr, 12, 11) @[IDU.scala 123:57]
    node _T_1194 = bits(io.in.bits.instr, 5, 5) @[IDU.scala 123:71]
    node _T_1195 = bits(io.in.bits.instr, 6, 6) @[IDU.scala 123:81]
    node _T_1196 = cat(_T_1195, UInt<2>("h00")) @[Cat.scala 29:58]
    node _T_1197 = cat(_T_1192, _T_1193) @[Cat.scala 29:58]
    node _T_1198 = cat(_T_1197, _T_1194) @[Cat.scala 29:58]
    node _T_1199 = cat(_T_1198, _T_1196) @[Cat.scala 29:58]
    node _T_1200 = cat(UInt<54>("h00"), _T_1199) @[Cat.scala 29:58]
    node _T_1201 = eq(UInt<5>("h010"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1202 = eq(UInt<1>("h00"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1203 = eq(UInt<1>("h01"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1204 = eq(UInt<2>("h02"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1205 = eq(UInt<2>("h03"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1206 = eq(UInt<3>("h04"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1207 = eq(UInt<3>("h05"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1208 = eq(UInt<3>("h06"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1209 = eq(UInt<3>("h07"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1210 = eq(UInt<4>("h08"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1211 = eq(UInt<4>("h09"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1212 = eq(UInt<4>("h0a"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1213 = eq(UInt<4>("h0b"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1214 = eq(UInt<4>("h0c"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1215 = eq(UInt<4>("h0d"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1216 = eq(UInt<4>("h0e"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1217 = eq(UInt<4>("h0f"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1218 = mux(_T_1201, UInt<64>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1219 = mux(_T_1202, _T_1080, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1220 = mux(_T_1203, _T_1087, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1221 = mux(_T_1204, _T_1092, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1222 = mux(_T_1205, _T_1097, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1223 = mux(_T_1206, _T_1104, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1224 = mux(_T_1207, _T_1109, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1225 = mux(_T_1208, _T_1116, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1226 = mux(_T_1209, _T_1121, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1227 = mux(_T_1210, _T_1141, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1228 = mux(_T_1211, _T_1155, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1229 = mux(_T_1212, _T_1162, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1230 = mux(_T_1213, _T_1170, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1231 = mux(_T_1214, _T_1177, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1232 = mux(_T_1215, _T_1191, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1233 = mux(_T_1216, _T_1200, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1234 = mux(_T_1217, UInt<64>("h01"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_1235 = or(_T_1218, _T_1219) @[Mux.scala 27:72]
    node _T_1236 = or(_T_1235, _T_1220) @[Mux.scala 27:72]
    node _T_1237 = or(_T_1236, _T_1221) @[Mux.scala 27:72]
    node _T_1238 = or(_T_1237, _T_1222) @[Mux.scala 27:72]
    node _T_1239 = or(_T_1238, _T_1223) @[Mux.scala 27:72]
    node _T_1240 = or(_T_1239, _T_1224) @[Mux.scala 27:72]
    node _T_1241 = or(_T_1240, _T_1225) @[Mux.scala 27:72]
    node _T_1242 = or(_T_1241, _T_1226) @[Mux.scala 27:72]
    node _T_1243 = or(_T_1242, _T_1227) @[Mux.scala 27:72]
    node _T_1244 = or(_T_1243, _T_1228) @[Mux.scala 27:72]
    node _T_1245 = or(_T_1244, _T_1229) @[Mux.scala 27:72]
    node _T_1246 = or(_T_1245, _T_1230) @[Mux.scala 27:72]
    node _T_1247 = or(_T_1246, _T_1231) @[Mux.scala 27:72]
    node _T_1248 = or(_T_1247, _T_1232) @[Mux.scala 27:72]
    node _T_1249 = or(_T_1248, _T_1233) @[Mux.scala 27:72]
    node _T_1250 = or(_T_1249, _T_1234) @[Mux.scala 27:72]
    wire immrvc : UInt<64> @[Mux.scala 27:72]
    immrvc <= _T_1250 @[Mux.scala 27:72]
    node _T_1251 = mux(isRVC, immrvc, imm) @[IDU.scala 128:31]
    io.out.bits.data.imm <= _T_1251 @[IDU.scala 128:25]
    node _T_1252 = eq(fuType, UInt<1>("h00")) @[IDU.scala 130:16]
    when _T_1252 : @[IDU.scala 130:32]
      node _T_1253 = eq(rfDest, UInt<1>("h01")) @[IDU.scala 131:34]
      node _T_1254 = eq(rfDest, UInt<3>("h05")) @[IDU.scala 131:49]
      node _T_1255 = or(_T_1253, _T_1254) @[IDU.scala 131:42]
      node _T_1256 = eq(fuOpType, UInt<7>("h058")) @[IDU.scala 132:38]
      node _T_1257 = and(_T_1255, _T_1256) @[IDU.scala 132:26]
      when _T_1257 : @[IDU.scala 132:57]
        io.out.bits.ctrl.fuOpType <= UInt<7>("h05c") @[IDU.scala 132:85]
        skip @[IDU.scala 132:57]
      node _T_1258 = eq(fuOpType, UInt<7>("h05a")) @[IDU.scala 133:20]
      when _T_1258 : @[IDU.scala 133:40]
        node _T_1259 = eq(rfSrc1, UInt<1>("h01")) @[IDU.scala 131:34]
        node _T_1260 = eq(rfSrc1, UInt<3>("h05")) @[IDU.scala 131:49]
        node _T_1261 = or(_T_1259, _T_1260) @[IDU.scala 131:42]
        when _T_1261 : @[IDU.scala 134:29]
          io.out.bits.ctrl.fuOpType <= UInt<7>("h05e") @[IDU.scala 134:57]
          skip @[IDU.scala 134:29]
        node _T_1262 = eq(rfDest, UInt<1>("h01")) @[IDU.scala 131:34]
        node _T_1263 = eq(rfDest, UInt<3>("h05")) @[IDU.scala 131:49]
        node _T_1264 = or(_T_1262, _T_1263) @[IDU.scala 131:42]
        when _T_1264 : @[IDU.scala 135:29]
          io.out.bits.ctrl.fuOpType <= UInt<7>("h05c") @[IDU.scala 135:57]
          skip @[IDU.scala 135:29]
        skip @[IDU.scala 133:40]
      skip @[IDU.scala 130:32]
    node _T_1265 = bits(io.in.bits.instr, 6, 0) @[IDU.scala 139:41]
    node _T_1266 = eq(_T_1265, UInt<6>("h037")) @[IDU.scala 139:47]
    node _T_1267 = mux(_T_1266, UInt<1>("h00"), src1Type) @[IDU.scala 139:35]
    io.out.bits.ctrl.src1Type <= _T_1267 @[IDU.scala 139:29]
    io.out.bits.ctrl.src2Type <= src2Type @[IDU.scala 140:29]
    node _T_1268 = bits(io.in.bits.instr, 31, 0) @[IDU.scala 150:43]
    node _T_1269 = and(_T_1268, UInt<15>("h0707f")) @[IDU.scala 150:50]
    node _T_1270 = eq(UInt<7>("h06b"), _T_1269) @[IDU.scala 150:50]
    node _T_1271 = and(_T_1270, io.in.valid) @[IDU.scala 150:72]
    io.out.bits.ctrl.isNutCoreTrap <= _T_1271 @[IDU.scala 150:34]
    node _T_1272 = eq(io.out.bits.ctrl.fuType, UInt<2>("h03")) @[IDU.scala 151:78]
    io.out.bits.ctrl.noSpecExec <= _T_1272 @[IDU.scala 151:31]
    node _T_1273 = eq(io.out.bits.ctrl.fuType, UInt<1>("h01")) @[IDU.scala 154:29]
    node _T_1274 = bits(io.out.bits.ctrl.fuOpType, 5, 5) @[LSU.scala 54:38]
    node _T_1275 = and(_T_1273, _T_1274) @[IDU.scala 154:44]
    node _T_1276 = eq(io.out.bits.ctrl.fuType, UInt<3>("h04")) @[IDU.scala 155:48]
    node _T_1277 = or(_T_1275, _T_1276) @[IDU.scala 154:91]
    io.out.bits.ctrl.isBlocked <= _T_1277 @[IDU.scala 152:30]
    io.out.valid <= io.in.valid @[IDU.scala 159:16]
    node _T_1278 = eq(io.in.valid, UInt<1>("h00")) @[IDU.scala 160:18]
    node _T_1279 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_1280 = eq(hasIntr, UInt<1>("h00")) @[IDU.scala 160:51]
    node _T_1281 = and(_T_1279, _T_1280) @[IDU.scala 160:48]
    node _T_1282 = or(_T_1278, _T_1281) @[IDU.scala 160:31]
    io.in.ready <= _T_1282 @[IDU.scala 160:15]
    io.out.bits.cf.crossPageIPFFix <= io.in.bits.crossPageIPFFix @[IDU.scala 161:18]
    io.out.bits.cf.isRVC <= io.in.bits.isRVC @[IDU.scala 161:18]
    io.out.bits.cf.brIdx <= io.in.bits.brIdx @[IDU.scala 161:18]
    io.out.bits.cf.intrVec[0] <= io.in.bits.intrVec[0] @[IDU.scala 161:18]
    io.out.bits.cf.intrVec[1] <= io.in.bits.intrVec[1] @[IDU.scala 161:18]
    io.out.bits.cf.intrVec[2] <= io.in.bits.intrVec[2] @[IDU.scala 161:18]
    io.out.bits.cf.intrVec[3] <= io.in.bits.intrVec[3] @[IDU.scala 161:18]
    io.out.bits.cf.intrVec[4] <= io.in.bits.intrVec[4] @[IDU.scala 161:18]
    io.out.bits.cf.intrVec[5] <= io.in.bits.intrVec[5] @[IDU.scala 161:18]
    io.out.bits.cf.intrVec[6] <= io.in.bits.intrVec[6] @[IDU.scala 161:18]
    io.out.bits.cf.intrVec[7] <= io.in.bits.intrVec[7] @[IDU.scala 161:18]
    io.out.bits.cf.intrVec[8] <= io.in.bits.intrVec[8] @[IDU.scala 161:18]
    io.out.bits.cf.intrVec[9] <= io.in.bits.intrVec[9] @[IDU.scala 161:18]
    io.out.bits.cf.intrVec[10] <= io.in.bits.intrVec[10] @[IDU.scala 161:18]
    io.out.bits.cf.intrVec[11] <= io.in.bits.intrVec[11] @[IDU.scala 161:18]
    io.out.bits.cf.exceptionVec[0] <= io.in.bits.exceptionVec[0] @[IDU.scala 161:18]
    io.out.bits.cf.exceptionVec[1] <= io.in.bits.exceptionVec[1] @[IDU.scala 161:18]
    io.out.bits.cf.exceptionVec[2] <= io.in.bits.exceptionVec[2] @[IDU.scala 161:18]
    io.out.bits.cf.exceptionVec[3] <= io.in.bits.exceptionVec[3] @[IDU.scala 161:18]
    io.out.bits.cf.exceptionVec[4] <= io.in.bits.exceptionVec[4] @[IDU.scala 161:18]
    io.out.bits.cf.exceptionVec[5] <= io.in.bits.exceptionVec[5] @[IDU.scala 161:18]
    io.out.bits.cf.exceptionVec[6] <= io.in.bits.exceptionVec[6] @[IDU.scala 161:18]
    io.out.bits.cf.exceptionVec[7] <= io.in.bits.exceptionVec[7] @[IDU.scala 161:18]
    io.out.bits.cf.exceptionVec[8] <= io.in.bits.exceptionVec[8] @[IDU.scala 161:18]
    io.out.bits.cf.exceptionVec[9] <= io.in.bits.exceptionVec[9] @[IDU.scala 161:18]
    io.out.bits.cf.exceptionVec[10] <= io.in.bits.exceptionVec[10] @[IDU.scala 161:18]
    io.out.bits.cf.exceptionVec[11] <= io.in.bits.exceptionVec[11] @[IDU.scala 161:18]
    io.out.bits.cf.exceptionVec[12] <= io.in.bits.exceptionVec[12] @[IDU.scala 161:18]
    io.out.bits.cf.exceptionVec[13] <= io.in.bits.exceptionVec[13] @[IDU.scala 161:18]
    io.out.bits.cf.exceptionVec[14] <= io.in.bits.exceptionVec[14] @[IDU.scala 161:18]
    io.out.bits.cf.exceptionVec[15] <= io.in.bits.exceptionVec[15] @[IDU.scala 161:18]
    io.out.bits.cf.redirect.valid <= io.in.bits.redirect.valid @[IDU.scala 161:18]
    io.out.bits.cf.redirect.rtype <= io.in.bits.redirect.rtype @[IDU.scala 161:18]
    io.out.bits.cf.redirect.target <= io.in.bits.redirect.target @[IDU.scala 161:18]
    io.out.bits.cf.pnpc <= io.in.bits.pnpc @[IDU.scala 161:18]
    io.out.bits.cf.pc <= io.in.bits.pc @[IDU.scala 161:18]
    io.out.bits.cf.instr <= io.in.bits.instr @[IDU.scala 161:18]
    node _T_1283 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    reg _T_1284 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_1285 = add(_T_1284, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_1286 = tail(_T_1285, 1) @[GTimer.scala 25:12]
    _T_1284 <= _T_1286 @[GTimer.scala 25:7]
    wire _T_1287 : UInt<1>
    _T_1287 <= UInt<1>("h00")
    node _T_1288 = and(_T_1283, _T_1287) @[Debug.scala 55:16]
    when _T_1288 : @[Debug.scala 55:31]
      node _T_1289 = asUInt(reset) @[Debug.scala 56:24]
      node _T_1290 = eq(_T_1289, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_1290 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] Decoder_1: ", _T_1284) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_1291 = asUInt(reset) @[Debug.scala 57:13]
      node _T_1292 = eq(_T_1291, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_1292 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "issue: pc %x npc %x instr %x\n", io.out.bits.cf.pc, io.out.bits.cf.pnpc, io.out.bits.cf.instr) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    wire intrVec : UInt<12>
    intrVec <= UInt<12>("h00")
    node _T_1293 = bits(intrVec, 0, 0) @[IDU.scala 169:38]
    node _T_1294 = bits(intrVec, 1, 1) @[IDU.scala 169:38]
    node _T_1295 = bits(intrVec, 2, 2) @[IDU.scala 169:38]
    node _T_1296 = bits(intrVec, 3, 3) @[IDU.scala 169:38]
    node _T_1297 = bits(intrVec, 4, 4) @[IDU.scala 169:38]
    node _T_1298 = bits(intrVec, 5, 5) @[IDU.scala 169:38]
    node _T_1299 = bits(intrVec, 6, 6) @[IDU.scala 169:38]
    node _T_1300 = bits(intrVec, 7, 7) @[IDU.scala 169:38]
    node _T_1301 = bits(intrVec, 8, 8) @[IDU.scala 169:38]
    node _T_1302 = bits(intrVec, 9, 9) @[IDU.scala 169:38]
    node _T_1303 = bits(intrVec, 10, 10) @[IDU.scala 169:38]
    node _T_1304 = bits(intrVec, 11, 11) @[IDU.scala 169:38]
    io.out.bits.cf.intrVec[0] <= _T_1293 @[IDU.scala 169:68]
    io.out.bits.cf.intrVec[1] <= _T_1294 @[IDU.scala 169:68]
    io.out.bits.cf.intrVec[2] <= _T_1295 @[IDU.scala 169:68]
    io.out.bits.cf.intrVec[3] <= _T_1296 @[IDU.scala 169:68]
    io.out.bits.cf.intrVec[4] <= _T_1297 @[IDU.scala 169:68]
    io.out.bits.cf.intrVec[5] <= _T_1298 @[IDU.scala 169:68]
    io.out.bits.cf.intrVec[6] <= _T_1299 @[IDU.scala 169:68]
    io.out.bits.cf.intrVec[7] <= _T_1300 @[IDU.scala 169:68]
    io.out.bits.cf.intrVec[8] <= _T_1301 @[IDU.scala 169:68]
    io.out.bits.cf.intrVec[9] <= _T_1302 @[IDU.scala 169:68]
    io.out.bits.cf.intrVec[10] <= _T_1303 @[IDU.scala 169:68]
    io.out.bits.cf.intrVec[11] <= _T_1304 @[IDU.scala 169:68]
    node _T_1305 = orr(intrVec) @[IDU.scala 170:22]
    hasIntr <= _T_1305 @[IDU.scala 170:11]
    wire vmEnable : UInt<1>
    vmEnable <= UInt<1>("h00")
    io.out.bits.cf.exceptionVec[0] <= UInt<1>("h00") @[IDU.scala 175:37]
    io.out.bits.cf.exceptionVec[1] <= UInt<1>("h00") @[IDU.scala 175:37]
    io.out.bits.cf.exceptionVec[2] <= UInt<1>("h00") @[IDU.scala 175:37]
    io.out.bits.cf.exceptionVec[3] <= UInt<1>("h00") @[IDU.scala 175:37]
    io.out.bits.cf.exceptionVec[4] <= UInt<1>("h00") @[IDU.scala 175:37]
    io.out.bits.cf.exceptionVec[5] <= UInt<1>("h00") @[IDU.scala 175:37]
    io.out.bits.cf.exceptionVec[6] <= UInt<1>("h00") @[IDU.scala 175:37]
    io.out.bits.cf.exceptionVec[7] <= UInt<1>("h00") @[IDU.scala 175:37]
    io.out.bits.cf.exceptionVec[8] <= UInt<1>("h00") @[IDU.scala 175:37]
    io.out.bits.cf.exceptionVec[9] <= UInt<1>("h00") @[IDU.scala 175:37]
    io.out.bits.cf.exceptionVec[10] <= UInt<1>("h00") @[IDU.scala 175:37]
    io.out.bits.cf.exceptionVec[11] <= UInt<1>("h00") @[IDU.scala 175:37]
    io.out.bits.cf.exceptionVec[12] <= UInt<1>("h00") @[IDU.scala 175:37]
    io.out.bits.cf.exceptionVec[13] <= UInt<1>("h00") @[IDU.scala 175:37]
    io.out.bits.cf.exceptionVec[14] <= UInt<1>("h00") @[IDU.scala 175:37]
    io.out.bits.cf.exceptionVec[15] <= UInt<1>("h00") @[IDU.scala 175:37]
    node _T_1306 = eq(instrType, UInt<1>("h00")) @[IDU.scala 176:59]
    node _T_1307 = eq(hasIntr, UInt<1>("h00")) @[IDU.scala 176:73]
    node _T_1308 = and(_T_1306, _T_1307) @[IDU.scala 176:70]
    node _T_1309 = and(_T_1308, io.in.valid) @[IDU.scala 176:83]
    io.out.bits.cf.exceptionVec[2] <= _T_1309 @[IDU.scala 176:45]
    io.out.bits.cf.exceptionVec[12] <= io.in.bits.exceptionVec[12] @[IDU.scala 177:47]
    node _T_1310 = bits(io.in.bits.pc, 38, 32) @[IDU.scala 179:67]
    node _T_1311 = orr(_T_1310) @[IDU.scala 179:94]
    node _T_1312 = eq(vmEnable, UInt<1>("h00")) @[IDU.scala 179:101]
    node _T_1313 = and(_T_1311, _T_1312) @[IDU.scala 179:98]
    io.out.bits.cf.exceptionVec[1] <= _T_1313 @[IDU.scala 179:51]
    node _T_1314 = and(io.in.bits.instr, UInt<15>("h0707f")) @[IDU.scala 184:44]
    node _T_1315 = eq(UInt<7>("h06b"), _T_1314) @[IDU.scala 184:44]
    node _T_1316 = and(_T_1315, io.in.valid) @[IDU.scala 184:66]
    io.out.bits.ctrl.isNutCoreTrap <= _T_1316 @[IDU.scala 184:34]
    node _T_1317 = and(io.in.bits.instr, UInt<32>("h0ffffffff")) @[IDU.scala 185:22]
    node _T_1318 = eq(UInt<29>("h010500073"), _T_1317) @[IDU.scala 185:22]
    node _T_1319 = and(_T_1318, io.in.valid) @[IDU.scala 185:43]
    io.isWFI <= _T_1319 @[IDU.scala 185:12]
    
  module IDU : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>}}[2], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {cf : {instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>}, ctrl : {src1Type : UInt<1>, src2Type : UInt<1>, fuType : UInt<3>, fuOpType : UInt<7>, rfSrc1 : UInt<5>, rfSrc2 : UInt<5>, rfWen : UInt<1>, rfDest : UInt<5>, isNutCoreTrap : UInt<1>, isSrc1Forward : UInt<1>, isSrc2Forward : UInt<1>, noSpecExec : UInt<1>, isBlocked : UInt<1>}, data : {src1 : UInt<64>, src2 : UInt<64>, imm : UInt<64>}}}[2]}
    
    inst decoder1 of Decoder @[IDU.scala 194:25]
    decoder1.clock <= clock
    decoder1.reset <= reset
    inst decoder2 of Decoder_1 @[IDU.scala 195:25]
    decoder2.clock <= clock
    decoder2.reset <= reset
    decoder1.io.in.bits.crossPageIPFFix <= io.in[0].bits.crossPageIPFFix @[IDU.scala 196:12]
    decoder1.io.in.bits.isRVC <= io.in[0].bits.isRVC @[IDU.scala 196:12]
    decoder1.io.in.bits.brIdx <= io.in[0].bits.brIdx @[IDU.scala 196:12]
    decoder1.io.in.bits.intrVec[0] <= io.in[0].bits.intrVec[0] @[IDU.scala 196:12]
    decoder1.io.in.bits.intrVec[1] <= io.in[0].bits.intrVec[1] @[IDU.scala 196:12]
    decoder1.io.in.bits.intrVec[2] <= io.in[0].bits.intrVec[2] @[IDU.scala 196:12]
    decoder1.io.in.bits.intrVec[3] <= io.in[0].bits.intrVec[3] @[IDU.scala 196:12]
    decoder1.io.in.bits.intrVec[4] <= io.in[0].bits.intrVec[4] @[IDU.scala 196:12]
    decoder1.io.in.bits.intrVec[5] <= io.in[0].bits.intrVec[5] @[IDU.scala 196:12]
    decoder1.io.in.bits.intrVec[6] <= io.in[0].bits.intrVec[6] @[IDU.scala 196:12]
    decoder1.io.in.bits.intrVec[7] <= io.in[0].bits.intrVec[7] @[IDU.scala 196:12]
    decoder1.io.in.bits.intrVec[8] <= io.in[0].bits.intrVec[8] @[IDU.scala 196:12]
    decoder1.io.in.bits.intrVec[9] <= io.in[0].bits.intrVec[9] @[IDU.scala 196:12]
    decoder1.io.in.bits.intrVec[10] <= io.in[0].bits.intrVec[10] @[IDU.scala 196:12]
    decoder1.io.in.bits.intrVec[11] <= io.in[0].bits.intrVec[11] @[IDU.scala 196:12]
    decoder1.io.in.bits.exceptionVec[0] <= io.in[0].bits.exceptionVec[0] @[IDU.scala 196:12]
    decoder1.io.in.bits.exceptionVec[1] <= io.in[0].bits.exceptionVec[1] @[IDU.scala 196:12]
    decoder1.io.in.bits.exceptionVec[2] <= io.in[0].bits.exceptionVec[2] @[IDU.scala 196:12]
    decoder1.io.in.bits.exceptionVec[3] <= io.in[0].bits.exceptionVec[3] @[IDU.scala 196:12]
    decoder1.io.in.bits.exceptionVec[4] <= io.in[0].bits.exceptionVec[4] @[IDU.scala 196:12]
    decoder1.io.in.bits.exceptionVec[5] <= io.in[0].bits.exceptionVec[5] @[IDU.scala 196:12]
    decoder1.io.in.bits.exceptionVec[6] <= io.in[0].bits.exceptionVec[6] @[IDU.scala 196:12]
    decoder1.io.in.bits.exceptionVec[7] <= io.in[0].bits.exceptionVec[7] @[IDU.scala 196:12]
    decoder1.io.in.bits.exceptionVec[8] <= io.in[0].bits.exceptionVec[8] @[IDU.scala 196:12]
    decoder1.io.in.bits.exceptionVec[9] <= io.in[0].bits.exceptionVec[9] @[IDU.scala 196:12]
    decoder1.io.in.bits.exceptionVec[10] <= io.in[0].bits.exceptionVec[10] @[IDU.scala 196:12]
    decoder1.io.in.bits.exceptionVec[11] <= io.in[0].bits.exceptionVec[11] @[IDU.scala 196:12]
    decoder1.io.in.bits.exceptionVec[12] <= io.in[0].bits.exceptionVec[12] @[IDU.scala 196:12]
    decoder1.io.in.bits.exceptionVec[13] <= io.in[0].bits.exceptionVec[13] @[IDU.scala 196:12]
    decoder1.io.in.bits.exceptionVec[14] <= io.in[0].bits.exceptionVec[14] @[IDU.scala 196:12]
    decoder1.io.in.bits.exceptionVec[15] <= io.in[0].bits.exceptionVec[15] @[IDU.scala 196:12]
    decoder1.io.in.bits.redirect.valid <= io.in[0].bits.redirect.valid @[IDU.scala 196:12]
    decoder1.io.in.bits.redirect.rtype <= io.in[0].bits.redirect.rtype @[IDU.scala 196:12]
    decoder1.io.in.bits.redirect.target <= io.in[0].bits.redirect.target @[IDU.scala 196:12]
    decoder1.io.in.bits.pnpc <= io.in[0].bits.pnpc @[IDU.scala 196:12]
    decoder1.io.in.bits.pc <= io.in[0].bits.pc @[IDU.scala 196:12]
    decoder1.io.in.bits.instr <= io.in[0].bits.instr @[IDU.scala 196:12]
    decoder1.io.in.valid <= io.in[0].valid @[IDU.scala 196:12]
    io.in[0].ready <= decoder1.io.in.ready @[IDU.scala 196:12]
    decoder2.io.in.bits.crossPageIPFFix <= io.in[1].bits.crossPageIPFFix @[IDU.scala 197:12]
    decoder2.io.in.bits.isRVC <= io.in[1].bits.isRVC @[IDU.scala 197:12]
    decoder2.io.in.bits.brIdx <= io.in[1].bits.brIdx @[IDU.scala 197:12]
    decoder2.io.in.bits.intrVec[0] <= io.in[1].bits.intrVec[0] @[IDU.scala 197:12]
    decoder2.io.in.bits.intrVec[1] <= io.in[1].bits.intrVec[1] @[IDU.scala 197:12]
    decoder2.io.in.bits.intrVec[2] <= io.in[1].bits.intrVec[2] @[IDU.scala 197:12]
    decoder2.io.in.bits.intrVec[3] <= io.in[1].bits.intrVec[3] @[IDU.scala 197:12]
    decoder2.io.in.bits.intrVec[4] <= io.in[1].bits.intrVec[4] @[IDU.scala 197:12]
    decoder2.io.in.bits.intrVec[5] <= io.in[1].bits.intrVec[5] @[IDU.scala 197:12]
    decoder2.io.in.bits.intrVec[6] <= io.in[1].bits.intrVec[6] @[IDU.scala 197:12]
    decoder2.io.in.bits.intrVec[7] <= io.in[1].bits.intrVec[7] @[IDU.scala 197:12]
    decoder2.io.in.bits.intrVec[8] <= io.in[1].bits.intrVec[8] @[IDU.scala 197:12]
    decoder2.io.in.bits.intrVec[9] <= io.in[1].bits.intrVec[9] @[IDU.scala 197:12]
    decoder2.io.in.bits.intrVec[10] <= io.in[1].bits.intrVec[10] @[IDU.scala 197:12]
    decoder2.io.in.bits.intrVec[11] <= io.in[1].bits.intrVec[11] @[IDU.scala 197:12]
    decoder2.io.in.bits.exceptionVec[0] <= io.in[1].bits.exceptionVec[0] @[IDU.scala 197:12]
    decoder2.io.in.bits.exceptionVec[1] <= io.in[1].bits.exceptionVec[1] @[IDU.scala 197:12]
    decoder2.io.in.bits.exceptionVec[2] <= io.in[1].bits.exceptionVec[2] @[IDU.scala 197:12]
    decoder2.io.in.bits.exceptionVec[3] <= io.in[1].bits.exceptionVec[3] @[IDU.scala 197:12]
    decoder2.io.in.bits.exceptionVec[4] <= io.in[1].bits.exceptionVec[4] @[IDU.scala 197:12]
    decoder2.io.in.bits.exceptionVec[5] <= io.in[1].bits.exceptionVec[5] @[IDU.scala 197:12]
    decoder2.io.in.bits.exceptionVec[6] <= io.in[1].bits.exceptionVec[6] @[IDU.scala 197:12]
    decoder2.io.in.bits.exceptionVec[7] <= io.in[1].bits.exceptionVec[7] @[IDU.scala 197:12]
    decoder2.io.in.bits.exceptionVec[8] <= io.in[1].bits.exceptionVec[8] @[IDU.scala 197:12]
    decoder2.io.in.bits.exceptionVec[9] <= io.in[1].bits.exceptionVec[9] @[IDU.scala 197:12]
    decoder2.io.in.bits.exceptionVec[10] <= io.in[1].bits.exceptionVec[10] @[IDU.scala 197:12]
    decoder2.io.in.bits.exceptionVec[11] <= io.in[1].bits.exceptionVec[11] @[IDU.scala 197:12]
    decoder2.io.in.bits.exceptionVec[12] <= io.in[1].bits.exceptionVec[12] @[IDU.scala 197:12]
    decoder2.io.in.bits.exceptionVec[13] <= io.in[1].bits.exceptionVec[13] @[IDU.scala 197:12]
    decoder2.io.in.bits.exceptionVec[14] <= io.in[1].bits.exceptionVec[14] @[IDU.scala 197:12]
    decoder2.io.in.bits.exceptionVec[15] <= io.in[1].bits.exceptionVec[15] @[IDU.scala 197:12]
    decoder2.io.in.bits.redirect.valid <= io.in[1].bits.redirect.valid @[IDU.scala 197:12]
    decoder2.io.in.bits.redirect.rtype <= io.in[1].bits.redirect.rtype @[IDU.scala 197:12]
    decoder2.io.in.bits.redirect.target <= io.in[1].bits.redirect.target @[IDU.scala 197:12]
    decoder2.io.in.bits.pnpc <= io.in[1].bits.pnpc @[IDU.scala 197:12]
    decoder2.io.in.bits.pc <= io.in[1].bits.pc @[IDU.scala 197:12]
    decoder2.io.in.bits.instr <= io.in[1].bits.instr @[IDU.scala 197:12]
    decoder2.io.in.valid <= io.in[1].valid @[IDU.scala 197:12]
    io.in[1].ready <= decoder2.io.in.ready @[IDU.scala 197:12]
    io.out[0].bits.data.imm <= decoder1.io.out.bits.data.imm @[IDU.scala 198:13]
    io.out[0].bits.data.src2 <= decoder1.io.out.bits.data.src2 @[IDU.scala 198:13]
    io.out[0].bits.data.src1 <= decoder1.io.out.bits.data.src1 @[IDU.scala 198:13]
    io.out[0].bits.ctrl.isBlocked <= decoder1.io.out.bits.ctrl.isBlocked @[IDU.scala 198:13]
    io.out[0].bits.ctrl.noSpecExec <= decoder1.io.out.bits.ctrl.noSpecExec @[IDU.scala 198:13]
    io.out[0].bits.ctrl.isSrc2Forward <= decoder1.io.out.bits.ctrl.isSrc2Forward @[IDU.scala 198:13]
    io.out[0].bits.ctrl.isSrc1Forward <= decoder1.io.out.bits.ctrl.isSrc1Forward @[IDU.scala 198:13]
    io.out[0].bits.ctrl.isNutCoreTrap <= decoder1.io.out.bits.ctrl.isNutCoreTrap @[IDU.scala 198:13]
    io.out[0].bits.ctrl.rfDest <= decoder1.io.out.bits.ctrl.rfDest @[IDU.scala 198:13]
    io.out[0].bits.ctrl.rfWen <= decoder1.io.out.bits.ctrl.rfWen @[IDU.scala 198:13]
    io.out[0].bits.ctrl.rfSrc2 <= decoder1.io.out.bits.ctrl.rfSrc2 @[IDU.scala 198:13]
    io.out[0].bits.ctrl.rfSrc1 <= decoder1.io.out.bits.ctrl.rfSrc1 @[IDU.scala 198:13]
    io.out[0].bits.ctrl.fuOpType <= decoder1.io.out.bits.ctrl.fuOpType @[IDU.scala 198:13]
    io.out[0].bits.ctrl.fuType <= decoder1.io.out.bits.ctrl.fuType @[IDU.scala 198:13]
    io.out[0].bits.ctrl.src2Type <= decoder1.io.out.bits.ctrl.src2Type @[IDU.scala 198:13]
    io.out[0].bits.ctrl.src1Type <= decoder1.io.out.bits.ctrl.src1Type @[IDU.scala 198:13]
    io.out[0].bits.cf.crossPageIPFFix <= decoder1.io.out.bits.cf.crossPageIPFFix @[IDU.scala 198:13]
    io.out[0].bits.cf.isRVC <= decoder1.io.out.bits.cf.isRVC @[IDU.scala 198:13]
    io.out[0].bits.cf.brIdx <= decoder1.io.out.bits.cf.brIdx @[IDU.scala 198:13]
    io.out[0].bits.cf.intrVec[0] <= decoder1.io.out.bits.cf.intrVec[0] @[IDU.scala 198:13]
    io.out[0].bits.cf.intrVec[1] <= decoder1.io.out.bits.cf.intrVec[1] @[IDU.scala 198:13]
    io.out[0].bits.cf.intrVec[2] <= decoder1.io.out.bits.cf.intrVec[2] @[IDU.scala 198:13]
    io.out[0].bits.cf.intrVec[3] <= decoder1.io.out.bits.cf.intrVec[3] @[IDU.scala 198:13]
    io.out[0].bits.cf.intrVec[4] <= decoder1.io.out.bits.cf.intrVec[4] @[IDU.scala 198:13]
    io.out[0].bits.cf.intrVec[5] <= decoder1.io.out.bits.cf.intrVec[5] @[IDU.scala 198:13]
    io.out[0].bits.cf.intrVec[6] <= decoder1.io.out.bits.cf.intrVec[6] @[IDU.scala 198:13]
    io.out[0].bits.cf.intrVec[7] <= decoder1.io.out.bits.cf.intrVec[7] @[IDU.scala 198:13]
    io.out[0].bits.cf.intrVec[8] <= decoder1.io.out.bits.cf.intrVec[8] @[IDU.scala 198:13]
    io.out[0].bits.cf.intrVec[9] <= decoder1.io.out.bits.cf.intrVec[9] @[IDU.scala 198:13]
    io.out[0].bits.cf.intrVec[10] <= decoder1.io.out.bits.cf.intrVec[10] @[IDU.scala 198:13]
    io.out[0].bits.cf.intrVec[11] <= decoder1.io.out.bits.cf.intrVec[11] @[IDU.scala 198:13]
    io.out[0].bits.cf.exceptionVec[0] <= decoder1.io.out.bits.cf.exceptionVec[0] @[IDU.scala 198:13]
    io.out[0].bits.cf.exceptionVec[1] <= decoder1.io.out.bits.cf.exceptionVec[1] @[IDU.scala 198:13]
    io.out[0].bits.cf.exceptionVec[2] <= decoder1.io.out.bits.cf.exceptionVec[2] @[IDU.scala 198:13]
    io.out[0].bits.cf.exceptionVec[3] <= decoder1.io.out.bits.cf.exceptionVec[3] @[IDU.scala 198:13]
    io.out[0].bits.cf.exceptionVec[4] <= decoder1.io.out.bits.cf.exceptionVec[4] @[IDU.scala 198:13]
    io.out[0].bits.cf.exceptionVec[5] <= decoder1.io.out.bits.cf.exceptionVec[5] @[IDU.scala 198:13]
    io.out[0].bits.cf.exceptionVec[6] <= decoder1.io.out.bits.cf.exceptionVec[6] @[IDU.scala 198:13]
    io.out[0].bits.cf.exceptionVec[7] <= decoder1.io.out.bits.cf.exceptionVec[7] @[IDU.scala 198:13]
    io.out[0].bits.cf.exceptionVec[8] <= decoder1.io.out.bits.cf.exceptionVec[8] @[IDU.scala 198:13]
    io.out[0].bits.cf.exceptionVec[9] <= decoder1.io.out.bits.cf.exceptionVec[9] @[IDU.scala 198:13]
    io.out[0].bits.cf.exceptionVec[10] <= decoder1.io.out.bits.cf.exceptionVec[10] @[IDU.scala 198:13]
    io.out[0].bits.cf.exceptionVec[11] <= decoder1.io.out.bits.cf.exceptionVec[11] @[IDU.scala 198:13]
    io.out[0].bits.cf.exceptionVec[12] <= decoder1.io.out.bits.cf.exceptionVec[12] @[IDU.scala 198:13]
    io.out[0].bits.cf.exceptionVec[13] <= decoder1.io.out.bits.cf.exceptionVec[13] @[IDU.scala 198:13]
    io.out[0].bits.cf.exceptionVec[14] <= decoder1.io.out.bits.cf.exceptionVec[14] @[IDU.scala 198:13]
    io.out[0].bits.cf.exceptionVec[15] <= decoder1.io.out.bits.cf.exceptionVec[15] @[IDU.scala 198:13]
    io.out[0].bits.cf.redirect.valid <= decoder1.io.out.bits.cf.redirect.valid @[IDU.scala 198:13]
    io.out[0].bits.cf.redirect.rtype <= decoder1.io.out.bits.cf.redirect.rtype @[IDU.scala 198:13]
    io.out[0].bits.cf.redirect.target <= decoder1.io.out.bits.cf.redirect.target @[IDU.scala 198:13]
    io.out[0].bits.cf.pnpc <= decoder1.io.out.bits.cf.pnpc @[IDU.scala 198:13]
    io.out[0].bits.cf.pc <= decoder1.io.out.bits.cf.pc @[IDU.scala 198:13]
    io.out[0].bits.cf.instr <= decoder1.io.out.bits.cf.instr @[IDU.scala 198:13]
    io.out[0].valid <= decoder1.io.out.valid @[IDU.scala 198:13]
    decoder1.io.out.ready <= io.out[0].ready @[IDU.scala 198:13]
    io.out[1].bits.data.imm <= decoder2.io.out.bits.data.imm @[IDU.scala 199:13]
    io.out[1].bits.data.src2 <= decoder2.io.out.bits.data.src2 @[IDU.scala 199:13]
    io.out[1].bits.data.src1 <= decoder2.io.out.bits.data.src1 @[IDU.scala 199:13]
    io.out[1].bits.ctrl.isBlocked <= decoder2.io.out.bits.ctrl.isBlocked @[IDU.scala 199:13]
    io.out[1].bits.ctrl.noSpecExec <= decoder2.io.out.bits.ctrl.noSpecExec @[IDU.scala 199:13]
    io.out[1].bits.ctrl.isSrc2Forward <= decoder2.io.out.bits.ctrl.isSrc2Forward @[IDU.scala 199:13]
    io.out[1].bits.ctrl.isSrc1Forward <= decoder2.io.out.bits.ctrl.isSrc1Forward @[IDU.scala 199:13]
    io.out[1].bits.ctrl.isNutCoreTrap <= decoder2.io.out.bits.ctrl.isNutCoreTrap @[IDU.scala 199:13]
    io.out[1].bits.ctrl.rfDest <= decoder2.io.out.bits.ctrl.rfDest @[IDU.scala 199:13]
    io.out[1].bits.ctrl.rfWen <= decoder2.io.out.bits.ctrl.rfWen @[IDU.scala 199:13]
    io.out[1].bits.ctrl.rfSrc2 <= decoder2.io.out.bits.ctrl.rfSrc2 @[IDU.scala 199:13]
    io.out[1].bits.ctrl.rfSrc1 <= decoder2.io.out.bits.ctrl.rfSrc1 @[IDU.scala 199:13]
    io.out[1].bits.ctrl.fuOpType <= decoder2.io.out.bits.ctrl.fuOpType @[IDU.scala 199:13]
    io.out[1].bits.ctrl.fuType <= decoder2.io.out.bits.ctrl.fuType @[IDU.scala 199:13]
    io.out[1].bits.ctrl.src2Type <= decoder2.io.out.bits.ctrl.src2Type @[IDU.scala 199:13]
    io.out[1].bits.ctrl.src1Type <= decoder2.io.out.bits.ctrl.src1Type @[IDU.scala 199:13]
    io.out[1].bits.cf.crossPageIPFFix <= decoder2.io.out.bits.cf.crossPageIPFFix @[IDU.scala 199:13]
    io.out[1].bits.cf.isRVC <= decoder2.io.out.bits.cf.isRVC @[IDU.scala 199:13]
    io.out[1].bits.cf.brIdx <= decoder2.io.out.bits.cf.brIdx @[IDU.scala 199:13]
    io.out[1].bits.cf.intrVec[0] <= decoder2.io.out.bits.cf.intrVec[0] @[IDU.scala 199:13]
    io.out[1].bits.cf.intrVec[1] <= decoder2.io.out.bits.cf.intrVec[1] @[IDU.scala 199:13]
    io.out[1].bits.cf.intrVec[2] <= decoder2.io.out.bits.cf.intrVec[2] @[IDU.scala 199:13]
    io.out[1].bits.cf.intrVec[3] <= decoder2.io.out.bits.cf.intrVec[3] @[IDU.scala 199:13]
    io.out[1].bits.cf.intrVec[4] <= decoder2.io.out.bits.cf.intrVec[4] @[IDU.scala 199:13]
    io.out[1].bits.cf.intrVec[5] <= decoder2.io.out.bits.cf.intrVec[5] @[IDU.scala 199:13]
    io.out[1].bits.cf.intrVec[6] <= decoder2.io.out.bits.cf.intrVec[6] @[IDU.scala 199:13]
    io.out[1].bits.cf.intrVec[7] <= decoder2.io.out.bits.cf.intrVec[7] @[IDU.scala 199:13]
    io.out[1].bits.cf.intrVec[8] <= decoder2.io.out.bits.cf.intrVec[8] @[IDU.scala 199:13]
    io.out[1].bits.cf.intrVec[9] <= decoder2.io.out.bits.cf.intrVec[9] @[IDU.scala 199:13]
    io.out[1].bits.cf.intrVec[10] <= decoder2.io.out.bits.cf.intrVec[10] @[IDU.scala 199:13]
    io.out[1].bits.cf.intrVec[11] <= decoder2.io.out.bits.cf.intrVec[11] @[IDU.scala 199:13]
    io.out[1].bits.cf.exceptionVec[0] <= decoder2.io.out.bits.cf.exceptionVec[0] @[IDU.scala 199:13]
    io.out[1].bits.cf.exceptionVec[1] <= decoder2.io.out.bits.cf.exceptionVec[1] @[IDU.scala 199:13]
    io.out[1].bits.cf.exceptionVec[2] <= decoder2.io.out.bits.cf.exceptionVec[2] @[IDU.scala 199:13]
    io.out[1].bits.cf.exceptionVec[3] <= decoder2.io.out.bits.cf.exceptionVec[3] @[IDU.scala 199:13]
    io.out[1].bits.cf.exceptionVec[4] <= decoder2.io.out.bits.cf.exceptionVec[4] @[IDU.scala 199:13]
    io.out[1].bits.cf.exceptionVec[5] <= decoder2.io.out.bits.cf.exceptionVec[5] @[IDU.scala 199:13]
    io.out[1].bits.cf.exceptionVec[6] <= decoder2.io.out.bits.cf.exceptionVec[6] @[IDU.scala 199:13]
    io.out[1].bits.cf.exceptionVec[7] <= decoder2.io.out.bits.cf.exceptionVec[7] @[IDU.scala 199:13]
    io.out[1].bits.cf.exceptionVec[8] <= decoder2.io.out.bits.cf.exceptionVec[8] @[IDU.scala 199:13]
    io.out[1].bits.cf.exceptionVec[9] <= decoder2.io.out.bits.cf.exceptionVec[9] @[IDU.scala 199:13]
    io.out[1].bits.cf.exceptionVec[10] <= decoder2.io.out.bits.cf.exceptionVec[10] @[IDU.scala 199:13]
    io.out[1].bits.cf.exceptionVec[11] <= decoder2.io.out.bits.cf.exceptionVec[11] @[IDU.scala 199:13]
    io.out[1].bits.cf.exceptionVec[12] <= decoder2.io.out.bits.cf.exceptionVec[12] @[IDU.scala 199:13]
    io.out[1].bits.cf.exceptionVec[13] <= decoder2.io.out.bits.cf.exceptionVec[13] @[IDU.scala 199:13]
    io.out[1].bits.cf.exceptionVec[14] <= decoder2.io.out.bits.cf.exceptionVec[14] @[IDU.scala 199:13]
    io.out[1].bits.cf.exceptionVec[15] <= decoder2.io.out.bits.cf.exceptionVec[15] @[IDU.scala 199:13]
    io.out[1].bits.cf.redirect.valid <= decoder2.io.out.bits.cf.redirect.valid @[IDU.scala 199:13]
    io.out[1].bits.cf.redirect.rtype <= decoder2.io.out.bits.cf.redirect.rtype @[IDU.scala 199:13]
    io.out[1].bits.cf.redirect.target <= decoder2.io.out.bits.cf.redirect.target @[IDU.scala 199:13]
    io.out[1].bits.cf.pnpc <= decoder2.io.out.bits.cf.pnpc @[IDU.scala 199:13]
    io.out[1].bits.cf.pc <= decoder2.io.out.bits.cf.pc @[IDU.scala 199:13]
    io.out[1].bits.cf.instr <= decoder2.io.out.bits.cf.instr @[IDU.scala 199:13]
    io.out[1].valid <= decoder2.io.out.valid @[IDU.scala 199:13]
    decoder2.io.out.ready <= io.out[1].ready @[IDU.scala 199:13]
    io.in[1].ready <= UInt<1>("h00") @[IDU.scala 201:20]
    decoder2.io.in.valid <= UInt<1>("h00") @[IDU.scala 202:26]
    
  module FlushableQueue : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>}}, count : UInt<3>, flip flush : UInt<1>}
    
    cmem ram : {instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>}[4] @[FlushableQueue.scala 33:24]
    reg value : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Counter.scala 29:33]
    reg value_1 : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Counter.scala 29:33]
    reg maybe_full : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[FlushableQueue.scala 36:35]
    node _T = eq(value, value_1) @[FlushableQueue.scala 38:41]
    node _T_1 = eq(maybe_full, UInt<1>("h00")) @[FlushableQueue.scala 39:36]
    node empty = and(_T, _T_1) @[FlushableQueue.scala 39:33]
    node _T_2 = and(_T, maybe_full) @[FlushableQueue.scala 40:32]
    node _T_3 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _T_3
    node _T_4 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _T_4
    when do_enq : @[FlushableQueue.scala 44:17]
      infer mport _T_5 = ram[value], clock @[FlushableQueue.scala 45:8]
      _T_5.crossPageIPFFix <= io.enq.bits.crossPageIPFFix @[FlushableQueue.scala 45:24]
      _T_5.isRVC <= io.enq.bits.isRVC @[FlushableQueue.scala 45:24]
      _T_5.brIdx <= io.enq.bits.brIdx @[FlushableQueue.scala 45:24]
      _T_5.intrVec[0] <= io.enq.bits.intrVec[0] @[FlushableQueue.scala 45:24]
      _T_5.intrVec[1] <= io.enq.bits.intrVec[1] @[FlushableQueue.scala 45:24]
      _T_5.intrVec[2] <= io.enq.bits.intrVec[2] @[FlushableQueue.scala 45:24]
      _T_5.intrVec[3] <= io.enq.bits.intrVec[3] @[FlushableQueue.scala 45:24]
      _T_5.intrVec[4] <= io.enq.bits.intrVec[4] @[FlushableQueue.scala 45:24]
      _T_5.intrVec[5] <= io.enq.bits.intrVec[5] @[FlushableQueue.scala 45:24]
      _T_5.intrVec[6] <= io.enq.bits.intrVec[6] @[FlushableQueue.scala 45:24]
      _T_5.intrVec[7] <= io.enq.bits.intrVec[7] @[FlushableQueue.scala 45:24]
      _T_5.intrVec[8] <= io.enq.bits.intrVec[8] @[FlushableQueue.scala 45:24]
      _T_5.intrVec[9] <= io.enq.bits.intrVec[9] @[FlushableQueue.scala 45:24]
      _T_5.intrVec[10] <= io.enq.bits.intrVec[10] @[FlushableQueue.scala 45:24]
      _T_5.intrVec[11] <= io.enq.bits.intrVec[11] @[FlushableQueue.scala 45:24]
      _T_5.exceptionVec[0] <= io.enq.bits.exceptionVec[0] @[FlushableQueue.scala 45:24]
      _T_5.exceptionVec[1] <= io.enq.bits.exceptionVec[1] @[FlushableQueue.scala 45:24]
      _T_5.exceptionVec[2] <= io.enq.bits.exceptionVec[2] @[FlushableQueue.scala 45:24]
      _T_5.exceptionVec[3] <= io.enq.bits.exceptionVec[3] @[FlushableQueue.scala 45:24]
      _T_5.exceptionVec[4] <= io.enq.bits.exceptionVec[4] @[FlushableQueue.scala 45:24]
      _T_5.exceptionVec[5] <= io.enq.bits.exceptionVec[5] @[FlushableQueue.scala 45:24]
      _T_5.exceptionVec[6] <= io.enq.bits.exceptionVec[6] @[FlushableQueue.scala 45:24]
      _T_5.exceptionVec[7] <= io.enq.bits.exceptionVec[7] @[FlushableQueue.scala 45:24]
      _T_5.exceptionVec[8] <= io.enq.bits.exceptionVec[8] @[FlushableQueue.scala 45:24]
      _T_5.exceptionVec[9] <= io.enq.bits.exceptionVec[9] @[FlushableQueue.scala 45:24]
      _T_5.exceptionVec[10] <= io.enq.bits.exceptionVec[10] @[FlushableQueue.scala 45:24]
      _T_5.exceptionVec[11] <= io.enq.bits.exceptionVec[11] @[FlushableQueue.scala 45:24]
      _T_5.exceptionVec[12] <= io.enq.bits.exceptionVec[12] @[FlushableQueue.scala 45:24]
      _T_5.exceptionVec[13] <= io.enq.bits.exceptionVec[13] @[FlushableQueue.scala 45:24]
      _T_5.exceptionVec[14] <= io.enq.bits.exceptionVec[14] @[FlushableQueue.scala 45:24]
      _T_5.exceptionVec[15] <= io.enq.bits.exceptionVec[15] @[FlushableQueue.scala 45:24]
      _T_5.redirect.valid <= io.enq.bits.redirect.valid @[FlushableQueue.scala 45:24]
      _T_5.redirect.rtype <= io.enq.bits.redirect.rtype @[FlushableQueue.scala 45:24]
      _T_5.redirect.target <= io.enq.bits.redirect.target @[FlushableQueue.scala 45:24]
      _T_5.pnpc <= io.enq.bits.pnpc @[FlushableQueue.scala 45:24]
      _T_5.pc <= io.enq.bits.pc @[FlushableQueue.scala 45:24]
      _T_5.instr <= io.enq.bits.instr @[FlushableQueue.scala 45:24]
      node _T_6 = eq(value, UInt<2>("h03")) @[Counter.scala 38:24]
      node _T_7 = add(value, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_8 = tail(_T_7, 1) @[Counter.scala 39:22]
      value <= _T_8 @[Counter.scala 39:13]
      skip @[FlushableQueue.scala 44:17]
    when do_deq : @[FlushableQueue.scala 48:17]
      node _T_9 = eq(value_1, UInt<2>("h03")) @[Counter.scala 38:24]
      node _T_10 = add(value_1, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_11 = tail(_T_10, 1) @[Counter.scala 39:22]
      value_1 <= _T_11 @[Counter.scala 39:13]
      skip @[FlushableQueue.scala 48:17]
    node _T_12 = neq(do_enq, do_deq) @[FlushableQueue.scala 51:16]
    when _T_12 : @[FlushableQueue.scala 51:28]
      maybe_full <= do_enq @[FlushableQueue.scala 52:16]
      skip @[FlushableQueue.scala 51:28]
    node _T_13 = eq(empty, UInt<1>("h00")) @[FlushableQueue.scala 55:19]
    io.deq.valid <= _T_13 @[FlushableQueue.scala 55:16]
    node _T_14 = eq(_T_2, UInt<1>("h00")) @[FlushableQueue.scala 56:19]
    io.enq.ready <= _T_14 @[FlushableQueue.scala 56:16]
    infer mport _T_15 = ram[value_1], clock @[FlushableQueue.scala 57:21]
    io.deq.bits.crossPageIPFFix <= _T_15.crossPageIPFFix @[FlushableQueue.scala 57:15]
    io.deq.bits.isRVC <= _T_15.isRVC @[FlushableQueue.scala 57:15]
    io.deq.bits.brIdx <= _T_15.brIdx @[FlushableQueue.scala 57:15]
    io.deq.bits.intrVec[0] <= _T_15.intrVec[0] @[FlushableQueue.scala 57:15]
    io.deq.bits.intrVec[1] <= _T_15.intrVec[1] @[FlushableQueue.scala 57:15]
    io.deq.bits.intrVec[2] <= _T_15.intrVec[2] @[FlushableQueue.scala 57:15]
    io.deq.bits.intrVec[3] <= _T_15.intrVec[3] @[FlushableQueue.scala 57:15]
    io.deq.bits.intrVec[4] <= _T_15.intrVec[4] @[FlushableQueue.scala 57:15]
    io.deq.bits.intrVec[5] <= _T_15.intrVec[5] @[FlushableQueue.scala 57:15]
    io.deq.bits.intrVec[6] <= _T_15.intrVec[6] @[FlushableQueue.scala 57:15]
    io.deq.bits.intrVec[7] <= _T_15.intrVec[7] @[FlushableQueue.scala 57:15]
    io.deq.bits.intrVec[8] <= _T_15.intrVec[8] @[FlushableQueue.scala 57:15]
    io.deq.bits.intrVec[9] <= _T_15.intrVec[9] @[FlushableQueue.scala 57:15]
    io.deq.bits.intrVec[10] <= _T_15.intrVec[10] @[FlushableQueue.scala 57:15]
    io.deq.bits.intrVec[11] <= _T_15.intrVec[11] @[FlushableQueue.scala 57:15]
    io.deq.bits.exceptionVec[0] <= _T_15.exceptionVec[0] @[FlushableQueue.scala 57:15]
    io.deq.bits.exceptionVec[1] <= _T_15.exceptionVec[1] @[FlushableQueue.scala 57:15]
    io.deq.bits.exceptionVec[2] <= _T_15.exceptionVec[2] @[FlushableQueue.scala 57:15]
    io.deq.bits.exceptionVec[3] <= _T_15.exceptionVec[3] @[FlushableQueue.scala 57:15]
    io.deq.bits.exceptionVec[4] <= _T_15.exceptionVec[4] @[FlushableQueue.scala 57:15]
    io.deq.bits.exceptionVec[5] <= _T_15.exceptionVec[5] @[FlushableQueue.scala 57:15]
    io.deq.bits.exceptionVec[6] <= _T_15.exceptionVec[6] @[FlushableQueue.scala 57:15]
    io.deq.bits.exceptionVec[7] <= _T_15.exceptionVec[7] @[FlushableQueue.scala 57:15]
    io.deq.bits.exceptionVec[8] <= _T_15.exceptionVec[8] @[FlushableQueue.scala 57:15]
    io.deq.bits.exceptionVec[9] <= _T_15.exceptionVec[9] @[FlushableQueue.scala 57:15]
    io.deq.bits.exceptionVec[10] <= _T_15.exceptionVec[10] @[FlushableQueue.scala 57:15]
    io.deq.bits.exceptionVec[11] <= _T_15.exceptionVec[11] @[FlushableQueue.scala 57:15]
    io.deq.bits.exceptionVec[12] <= _T_15.exceptionVec[12] @[FlushableQueue.scala 57:15]
    io.deq.bits.exceptionVec[13] <= _T_15.exceptionVec[13] @[FlushableQueue.scala 57:15]
    io.deq.bits.exceptionVec[14] <= _T_15.exceptionVec[14] @[FlushableQueue.scala 57:15]
    io.deq.bits.exceptionVec[15] <= _T_15.exceptionVec[15] @[FlushableQueue.scala 57:15]
    io.deq.bits.redirect.valid <= _T_15.redirect.valid @[FlushableQueue.scala 57:15]
    io.deq.bits.redirect.rtype <= _T_15.redirect.rtype @[FlushableQueue.scala 57:15]
    io.deq.bits.redirect.target <= _T_15.redirect.target @[FlushableQueue.scala 57:15]
    io.deq.bits.pnpc <= _T_15.pnpc @[FlushableQueue.scala 57:15]
    io.deq.bits.pc <= _T_15.pc @[FlushableQueue.scala 57:15]
    io.deq.bits.instr <= _T_15.instr @[FlushableQueue.scala 57:15]
    when io.flush : @[FlushableQueue.scala 72:19]
      value <= UInt<1>("h00") @[FlushableQueue.scala 74:21]
      value_1 <= UInt<1>("h00") @[FlushableQueue.scala 75:21]
      maybe_full <= UInt<1>("h00") @[FlushableQueue.scala 77:16]
      skip @[FlushableQueue.scala 72:19]
    node _T_16 = sub(value, value_1) @[FlushableQueue.scala 80:40]
    node _T_17 = tail(_T_16, 1) @[FlushableQueue.scala 80:40]
    node _T_18 = and(maybe_full, _T) @[FlushableQueue.scala 82:32]
    node _T_19 = cat(_T_18, _T_17) @[Cat.scala 29:58]
    io.count <= _T_19 @[FlushableQueue.scala 82:14]
    
  module Frontend_inorder : 
    input clock : Clock
    input reset : Reset
    output io : {out : {flip ready : UInt<1>, valid : UInt<1>, bits : {cf : {instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>}, ctrl : {src1Type : UInt<1>, src2Type : UInt<1>, fuType : UInt<3>, fuOpType : UInt<7>, rfSrc1 : UInt<5>, rfSrc2 : UInt<5>, rfWen : UInt<1>, rfDest : UInt<5>, isNutCoreTrap : UInt<1>, isSrc1Forward : UInt<1>, isSrc2Forward : UInt<1>, noSpecExec : UInt<1>, isBlocked : UInt<1>}, data : {src1 : UInt<64>, src2 : UInt<64>, imm : UInt<64>}}}[2], imem : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<39>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<87>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>, user : UInt<87>}}}, flushVec : UInt<4>, bpFlush : UInt<1>, flip ipf : UInt<1>, flip redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}}
    
    inst ifu of IFU_inorder @[Frontend.scala 106:20]
    ifu.clock <= clock
    ifu.reset <= reset
    inst ibf of NaiveRVCAlignBuffer @[Frontend.scala 107:19]
    ibf.clock <= clock
    ibf.reset <= reset
    inst idu of IDU @[Frontend.scala 108:20]
    idu.clock <= clock
    idu.reset <= reset
    node _T = bits(ifu.io.flushVec, 0, 0) @[Frontend.scala 115:58]
    inst FlushableQueue of FlushableQueue @[FlushableQueue.scala 104:21]
    FlushableQueue.clock <= clock
    FlushableQueue.reset <= reset
    FlushableQueue.io.enq.valid <= ifu.io.out.valid @[FlushableQueue.scala 105:22]
    FlushableQueue.io.enq.bits.crossPageIPFFix <= ifu.io.out.bits.crossPageIPFFix @[FlushableQueue.scala 106:21]
    FlushableQueue.io.enq.bits.isRVC <= ifu.io.out.bits.isRVC @[FlushableQueue.scala 106:21]
    FlushableQueue.io.enq.bits.brIdx <= ifu.io.out.bits.brIdx @[FlushableQueue.scala 106:21]
    FlushableQueue.io.enq.bits.intrVec[0] <= ifu.io.out.bits.intrVec[0] @[FlushableQueue.scala 106:21]
    FlushableQueue.io.enq.bits.intrVec[1] <= ifu.io.out.bits.intrVec[1] @[FlushableQueue.scala 106:21]
    FlushableQueue.io.enq.bits.intrVec[2] <= ifu.io.out.bits.intrVec[2] @[FlushableQueue.scala 106:21]
    FlushableQueue.io.enq.bits.intrVec[3] <= ifu.io.out.bits.intrVec[3] @[FlushableQueue.scala 106:21]
    FlushableQueue.io.enq.bits.intrVec[4] <= ifu.io.out.bits.intrVec[4] @[FlushableQueue.scala 106:21]
    FlushableQueue.io.enq.bits.intrVec[5] <= ifu.io.out.bits.intrVec[5] @[FlushableQueue.scala 106:21]
    FlushableQueue.io.enq.bits.intrVec[6] <= ifu.io.out.bits.intrVec[6] @[FlushableQueue.scala 106:21]
    FlushableQueue.io.enq.bits.intrVec[7] <= ifu.io.out.bits.intrVec[7] @[FlushableQueue.scala 106:21]
    FlushableQueue.io.enq.bits.intrVec[8] <= ifu.io.out.bits.intrVec[8] @[FlushableQueue.scala 106:21]
    FlushableQueue.io.enq.bits.intrVec[9] <= ifu.io.out.bits.intrVec[9] @[FlushableQueue.scala 106:21]
    FlushableQueue.io.enq.bits.intrVec[10] <= ifu.io.out.bits.intrVec[10] @[FlushableQueue.scala 106:21]
    FlushableQueue.io.enq.bits.intrVec[11] <= ifu.io.out.bits.intrVec[11] @[FlushableQueue.scala 106:21]
    FlushableQueue.io.enq.bits.exceptionVec[0] <= ifu.io.out.bits.exceptionVec[0] @[FlushableQueue.scala 106:21]
    FlushableQueue.io.enq.bits.exceptionVec[1] <= ifu.io.out.bits.exceptionVec[1] @[FlushableQueue.scala 106:21]
    FlushableQueue.io.enq.bits.exceptionVec[2] <= ifu.io.out.bits.exceptionVec[2] @[FlushableQueue.scala 106:21]
    FlushableQueue.io.enq.bits.exceptionVec[3] <= ifu.io.out.bits.exceptionVec[3] @[FlushableQueue.scala 106:21]
    FlushableQueue.io.enq.bits.exceptionVec[4] <= ifu.io.out.bits.exceptionVec[4] @[FlushableQueue.scala 106:21]
    FlushableQueue.io.enq.bits.exceptionVec[5] <= ifu.io.out.bits.exceptionVec[5] @[FlushableQueue.scala 106:21]
    FlushableQueue.io.enq.bits.exceptionVec[6] <= ifu.io.out.bits.exceptionVec[6] @[FlushableQueue.scala 106:21]
    FlushableQueue.io.enq.bits.exceptionVec[7] <= ifu.io.out.bits.exceptionVec[7] @[FlushableQueue.scala 106:21]
    FlushableQueue.io.enq.bits.exceptionVec[8] <= ifu.io.out.bits.exceptionVec[8] @[FlushableQueue.scala 106:21]
    FlushableQueue.io.enq.bits.exceptionVec[9] <= ifu.io.out.bits.exceptionVec[9] @[FlushableQueue.scala 106:21]
    FlushableQueue.io.enq.bits.exceptionVec[10] <= ifu.io.out.bits.exceptionVec[10] @[FlushableQueue.scala 106:21]
    FlushableQueue.io.enq.bits.exceptionVec[11] <= ifu.io.out.bits.exceptionVec[11] @[FlushableQueue.scala 106:21]
    FlushableQueue.io.enq.bits.exceptionVec[12] <= ifu.io.out.bits.exceptionVec[12] @[FlushableQueue.scala 106:21]
    FlushableQueue.io.enq.bits.exceptionVec[13] <= ifu.io.out.bits.exceptionVec[13] @[FlushableQueue.scala 106:21]
    FlushableQueue.io.enq.bits.exceptionVec[14] <= ifu.io.out.bits.exceptionVec[14] @[FlushableQueue.scala 106:21]
    FlushableQueue.io.enq.bits.exceptionVec[15] <= ifu.io.out.bits.exceptionVec[15] @[FlushableQueue.scala 106:21]
    FlushableQueue.io.enq.bits.redirect.valid <= ifu.io.out.bits.redirect.valid @[FlushableQueue.scala 106:21]
    FlushableQueue.io.enq.bits.redirect.rtype <= ifu.io.out.bits.redirect.rtype @[FlushableQueue.scala 106:21]
    FlushableQueue.io.enq.bits.redirect.target <= ifu.io.out.bits.redirect.target @[FlushableQueue.scala 106:21]
    FlushableQueue.io.enq.bits.pnpc <= ifu.io.out.bits.pnpc @[FlushableQueue.scala 106:21]
    FlushableQueue.io.enq.bits.pc <= ifu.io.out.bits.pc @[FlushableQueue.scala 106:21]
    FlushableQueue.io.enq.bits.instr <= ifu.io.out.bits.instr @[FlushableQueue.scala 106:21]
    FlushableQueue.io.flush <= _T @[FlushableQueue.scala 107:18]
    ifu.io.out.ready <= FlushableQueue.io.enq.ready @[FlushableQueue.scala 108:17]
    ibf.io.in.bits.crossPageIPFFix <= FlushableQueue.io.deq.bits.crossPageIPFFix @[Frontend.scala 112:11]
    ibf.io.in.bits.isRVC <= FlushableQueue.io.deq.bits.isRVC @[Frontend.scala 112:11]
    ibf.io.in.bits.brIdx <= FlushableQueue.io.deq.bits.brIdx @[Frontend.scala 112:11]
    ibf.io.in.bits.intrVec[0] <= FlushableQueue.io.deq.bits.intrVec[0] @[Frontend.scala 112:11]
    ibf.io.in.bits.intrVec[1] <= FlushableQueue.io.deq.bits.intrVec[1] @[Frontend.scala 112:11]
    ibf.io.in.bits.intrVec[2] <= FlushableQueue.io.deq.bits.intrVec[2] @[Frontend.scala 112:11]
    ibf.io.in.bits.intrVec[3] <= FlushableQueue.io.deq.bits.intrVec[3] @[Frontend.scala 112:11]
    ibf.io.in.bits.intrVec[4] <= FlushableQueue.io.deq.bits.intrVec[4] @[Frontend.scala 112:11]
    ibf.io.in.bits.intrVec[5] <= FlushableQueue.io.deq.bits.intrVec[5] @[Frontend.scala 112:11]
    ibf.io.in.bits.intrVec[6] <= FlushableQueue.io.deq.bits.intrVec[6] @[Frontend.scala 112:11]
    ibf.io.in.bits.intrVec[7] <= FlushableQueue.io.deq.bits.intrVec[7] @[Frontend.scala 112:11]
    ibf.io.in.bits.intrVec[8] <= FlushableQueue.io.deq.bits.intrVec[8] @[Frontend.scala 112:11]
    ibf.io.in.bits.intrVec[9] <= FlushableQueue.io.deq.bits.intrVec[9] @[Frontend.scala 112:11]
    ibf.io.in.bits.intrVec[10] <= FlushableQueue.io.deq.bits.intrVec[10] @[Frontend.scala 112:11]
    ibf.io.in.bits.intrVec[11] <= FlushableQueue.io.deq.bits.intrVec[11] @[Frontend.scala 112:11]
    ibf.io.in.bits.exceptionVec[0] <= FlushableQueue.io.deq.bits.exceptionVec[0] @[Frontend.scala 112:11]
    ibf.io.in.bits.exceptionVec[1] <= FlushableQueue.io.deq.bits.exceptionVec[1] @[Frontend.scala 112:11]
    ibf.io.in.bits.exceptionVec[2] <= FlushableQueue.io.deq.bits.exceptionVec[2] @[Frontend.scala 112:11]
    ibf.io.in.bits.exceptionVec[3] <= FlushableQueue.io.deq.bits.exceptionVec[3] @[Frontend.scala 112:11]
    ibf.io.in.bits.exceptionVec[4] <= FlushableQueue.io.deq.bits.exceptionVec[4] @[Frontend.scala 112:11]
    ibf.io.in.bits.exceptionVec[5] <= FlushableQueue.io.deq.bits.exceptionVec[5] @[Frontend.scala 112:11]
    ibf.io.in.bits.exceptionVec[6] <= FlushableQueue.io.deq.bits.exceptionVec[6] @[Frontend.scala 112:11]
    ibf.io.in.bits.exceptionVec[7] <= FlushableQueue.io.deq.bits.exceptionVec[7] @[Frontend.scala 112:11]
    ibf.io.in.bits.exceptionVec[8] <= FlushableQueue.io.deq.bits.exceptionVec[8] @[Frontend.scala 112:11]
    ibf.io.in.bits.exceptionVec[9] <= FlushableQueue.io.deq.bits.exceptionVec[9] @[Frontend.scala 112:11]
    ibf.io.in.bits.exceptionVec[10] <= FlushableQueue.io.deq.bits.exceptionVec[10] @[Frontend.scala 112:11]
    ibf.io.in.bits.exceptionVec[11] <= FlushableQueue.io.deq.bits.exceptionVec[11] @[Frontend.scala 112:11]
    ibf.io.in.bits.exceptionVec[12] <= FlushableQueue.io.deq.bits.exceptionVec[12] @[Frontend.scala 112:11]
    ibf.io.in.bits.exceptionVec[13] <= FlushableQueue.io.deq.bits.exceptionVec[13] @[Frontend.scala 112:11]
    ibf.io.in.bits.exceptionVec[14] <= FlushableQueue.io.deq.bits.exceptionVec[14] @[Frontend.scala 112:11]
    ibf.io.in.bits.exceptionVec[15] <= FlushableQueue.io.deq.bits.exceptionVec[15] @[Frontend.scala 112:11]
    ibf.io.in.bits.redirect.valid <= FlushableQueue.io.deq.bits.redirect.valid @[Frontend.scala 112:11]
    ibf.io.in.bits.redirect.rtype <= FlushableQueue.io.deq.bits.redirect.rtype @[Frontend.scala 112:11]
    ibf.io.in.bits.redirect.target <= FlushableQueue.io.deq.bits.redirect.target @[Frontend.scala 112:11]
    ibf.io.in.bits.pnpc <= FlushableQueue.io.deq.bits.pnpc @[Frontend.scala 112:11]
    ibf.io.in.bits.pc <= FlushableQueue.io.deq.bits.pc @[Frontend.scala 112:11]
    ibf.io.in.bits.instr <= FlushableQueue.io.deq.bits.instr @[Frontend.scala 112:11]
    ibf.io.in.valid <= FlushableQueue.io.deq.valid @[Frontend.scala 112:11]
    FlushableQueue.io.deq.ready <= ibf.io.in.ready @[Frontend.scala 112:11]
    node _T_1 = and(idu.io.out[0].ready, idu.io.out[0].valid) @[Decoupled.scala 40:37]
    node _T_2 = bits(ifu.io.flushVec, 1, 1) @[Frontend.scala 116:82]
    reg _T_3 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Pipeline.scala 24:24]
    when _T_1 : @[Pipeline.scala 25:25]
      _T_3 <= UInt<1>("h00") @[Pipeline.scala 25:33]
      skip @[Pipeline.scala 25:25]
    node _T_4 = and(ibf.io.out.valid, idu.io.in[0].ready) @[Pipeline.scala 26:22]
    when _T_4 : @[Pipeline.scala 26:38]
      _T_3 <= UInt<1>("h01") @[Pipeline.scala 26:46]
      skip @[Pipeline.scala 26:38]
    when _T_2 : @[Pipeline.scala 27:20]
      _T_3 <= UInt<1>("h00") @[Pipeline.scala 27:28]
      skip @[Pipeline.scala 27:20]
    ibf.io.out.ready <= idu.io.in[0].ready @[Pipeline.scala 29:16]
    node _T_5 = and(ibf.io.out.valid, idu.io.in[0].ready) @[Pipeline.scala 30:51]
    reg _T_6 : {instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>}, clock @[Reg.scala 15:16]
    when _T_5 : @[Reg.scala 16:19]
      _T_6.crossPageIPFFix <= ibf.io.out.bits.crossPageIPFFix @[Reg.scala 16:23]
      _T_6.isRVC <= ibf.io.out.bits.isRVC @[Reg.scala 16:23]
      _T_6.brIdx <= ibf.io.out.bits.brIdx @[Reg.scala 16:23]
      _T_6.intrVec[0] <= ibf.io.out.bits.intrVec[0] @[Reg.scala 16:23]
      _T_6.intrVec[1] <= ibf.io.out.bits.intrVec[1] @[Reg.scala 16:23]
      _T_6.intrVec[2] <= ibf.io.out.bits.intrVec[2] @[Reg.scala 16:23]
      _T_6.intrVec[3] <= ibf.io.out.bits.intrVec[3] @[Reg.scala 16:23]
      _T_6.intrVec[4] <= ibf.io.out.bits.intrVec[4] @[Reg.scala 16:23]
      _T_6.intrVec[5] <= ibf.io.out.bits.intrVec[5] @[Reg.scala 16:23]
      _T_6.intrVec[6] <= ibf.io.out.bits.intrVec[6] @[Reg.scala 16:23]
      _T_6.intrVec[7] <= ibf.io.out.bits.intrVec[7] @[Reg.scala 16:23]
      _T_6.intrVec[8] <= ibf.io.out.bits.intrVec[8] @[Reg.scala 16:23]
      _T_6.intrVec[9] <= ibf.io.out.bits.intrVec[9] @[Reg.scala 16:23]
      _T_6.intrVec[10] <= ibf.io.out.bits.intrVec[10] @[Reg.scala 16:23]
      _T_6.intrVec[11] <= ibf.io.out.bits.intrVec[11] @[Reg.scala 16:23]
      _T_6.exceptionVec[0] <= ibf.io.out.bits.exceptionVec[0] @[Reg.scala 16:23]
      _T_6.exceptionVec[1] <= ibf.io.out.bits.exceptionVec[1] @[Reg.scala 16:23]
      _T_6.exceptionVec[2] <= ibf.io.out.bits.exceptionVec[2] @[Reg.scala 16:23]
      _T_6.exceptionVec[3] <= ibf.io.out.bits.exceptionVec[3] @[Reg.scala 16:23]
      _T_6.exceptionVec[4] <= ibf.io.out.bits.exceptionVec[4] @[Reg.scala 16:23]
      _T_6.exceptionVec[5] <= ibf.io.out.bits.exceptionVec[5] @[Reg.scala 16:23]
      _T_6.exceptionVec[6] <= ibf.io.out.bits.exceptionVec[6] @[Reg.scala 16:23]
      _T_6.exceptionVec[7] <= ibf.io.out.bits.exceptionVec[7] @[Reg.scala 16:23]
      _T_6.exceptionVec[8] <= ibf.io.out.bits.exceptionVec[8] @[Reg.scala 16:23]
      _T_6.exceptionVec[9] <= ibf.io.out.bits.exceptionVec[9] @[Reg.scala 16:23]
      _T_6.exceptionVec[10] <= ibf.io.out.bits.exceptionVec[10] @[Reg.scala 16:23]
      _T_6.exceptionVec[11] <= ibf.io.out.bits.exceptionVec[11] @[Reg.scala 16:23]
      _T_6.exceptionVec[12] <= ibf.io.out.bits.exceptionVec[12] @[Reg.scala 16:23]
      _T_6.exceptionVec[13] <= ibf.io.out.bits.exceptionVec[13] @[Reg.scala 16:23]
      _T_6.exceptionVec[14] <= ibf.io.out.bits.exceptionVec[14] @[Reg.scala 16:23]
      _T_6.exceptionVec[15] <= ibf.io.out.bits.exceptionVec[15] @[Reg.scala 16:23]
      _T_6.redirect.valid <= ibf.io.out.bits.redirect.valid @[Reg.scala 16:23]
      _T_6.redirect.rtype <= ibf.io.out.bits.redirect.rtype @[Reg.scala 16:23]
      _T_6.redirect.target <= ibf.io.out.bits.redirect.target @[Reg.scala 16:23]
      _T_6.pnpc <= ibf.io.out.bits.pnpc @[Reg.scala 16:23]
      _T_6.pc <= ibf.io.out.bits.pc @[Reg.scala 16:23]
      _T_6.instr <= ibf.io.out.bits.instr @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    idu.io.in[0].bits.crossPageIPFFix <= _T_6.crossPageIPFFix @[Pipeline.scala 30:16]
    idu.io.in[0].bits.isRVC <= _T_6.isRVC @[Pipeline.scala 30:16]
    idu.io.in[0].bits.brIdx <= _T_6.brIdx @[Pipeline.scala 30:16]
    idu.io.in[0].bits.intrVec[0] <= _T_6.intrVec[0] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.intrVec[1] <= _T_6.intrVec[1] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.intrVec[2] <= _T_6.intrVec[2] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.intrVec[3] <= _T_6.intrVec[3] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.intrVec[4] <= _T_6.intrVec[4] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.intrVec[5] <= _T_6.intrVec[5] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.intrVec[6] <= _T_6.intrVec[6] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.intrVec[7] <= _T_6.intrVec[7] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.intrVec[8] <= _T_6.intrVec[8] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.intrVec[9] <= _T_6.intrVec[9] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.intrVec[10] <= _T_6.intrVec[10] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.intrVec[11] <= _T_6.intrVec[11] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.exceptionVec[0] <= _T_6.exceptionVec[0] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.exceptionVec[1] <= _T_6.exceptionVec[1] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.exceptionVec[2] <= _T_6.exceptionVec[2] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.exceptionVec[3] <= _T_6.exceptionVec[3] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.exceptionVec[4] <= _T_6.exceptionVec[4] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.exceptionVec[5] <= _T_6.exceptionVec[5] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.exceptionVec[6] <= _T_6.exceptionVec[6] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.exceptionVec[7] <= _T_6.exceptionVec[7] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.exceptionVec[8] <= _T_6.exceptionVec[8] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.exceptionVec[9] <= _T_6.exceptionVec[9] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.exceptionVec[10] <= _T_6.exceptionVec[10] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.exceptionVec[11] <= _T_6.exceptionVec[11] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.exceptionVec[12] <= _T_6.exceptionVec[12] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.exceptionVec[13] <= _T_6.exceptionVec[13] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.exceptionVec[14] <= _T_6.exceptionVec[14] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.exceptionVec[15] <= _T_6.exceptionVec[15] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.redirect.valid <= _T_6.redirect.valid @[Pipeline.scala 30:16]
    idu.io.in[0].bits.redirect.rtype <= _T_6.redirect.rtype @[Pipeline.scala 30:16]
    idu.io.in[0].bits.redirect.target <= _T_6.redirect.target @[Pipeline.scala 30:16]
    idu.io.in[0].bits.pnpc <= _T_6.pnpc @[Pipeline.scala 30:16]
    idu.io.in[0].bits.pc <= _T_6.pc @[Pipeline.scala 30:16]
    idu.io.in[0].bits.instr <= _T_6.instr @[Pipeline.scala 30:16]
    idu.io.in[0].valid <= _T_3 @[Pipeline.scala 31:17]
    idu.io.in[1].bits.crossPageIPFFix is invalid @[Frontend.scala 117:16]
    idu.io.in[1].bits.isRVC is invalid @[Frontend.scala 117:16]
    idu.io.in[1].bits.brIdx is invalid @[Frontend.scala 117:16]
    idu.io.in[1].bits.intrVec[0] is invalid @[Frontend.scala 117:16]
    idu.io.in[1].bits.intrVec[1] is invalid @[Frontend.scala 117:16]
    idu.io.in[1].bits.intrVec[2] is invalid @[Frontend.scala 117:16]
    idu.io.in[1].bits.intrVec[3] is invalid @[Frontend.scala 117:16]
    idu.io.in[1].bits.intrVec[4] is invalid @[Frontend.scala 117:16]
    idu.io.in[1].bits.intrVec[5] is invalid @[Frontend.scala 117:16]
    idu.io.in[1].bits.intrVec[6] is invalid @[Frontend.scala 117:16]
    idu.io.in[1].bits.intrVec[7] is invalid @[Frontend.scala 117:16]
    idu.io.in[1].bits.intrVec[8] is invalid @[Frontend.scala 117:16]
    idu.io.in[1].bits.intrVec[9] is invalid @[Frontend.scala 117:16]
    idu.io.in[1].bits.intrVec[10] is invalid @[Frontend.scala 117:16]
    idu.io.in[1].bits.intrVec[11] is invalid @[Frontend.scala 117:16]
    idu.io.in[1].bits.exceptionVec[0] is invalid @[Frontend.scala 117:16]
    idu.io.in[1].bits.exceptionVec[1] is invalid @[Frontend.scala 117:16]
    idu.io.in[1].bits.exceptionVec[2] is invalid @[Frontend.scala 117:16]
    idu.io.in[1].bits.exceptionVec[3] is invalid @[Frontend.scala 117:16]
    idu.io.in[1].bits.exceptionVec[4] is invalid @[Frontend.scala 117:16]
    idu.io.in[1].bits.exceptionVec[5] is invalid @[Frontend.scala 117:16]
    idu.io.in[1].bits.exceptionVec[6] is invalid @[Frontend.scala 117:16]
    idu.io.in[1].bits.exceptionVec[7] is invalid @[Frontend.scala 117:16]
    idu.io.in[1].bits.exceptionVec[8] is invalid @[Frontend.scala 117:16]
    idu.io.in[1].bits.exceptionVec[9] is invalid @[Frontend.scala 117:16]
    idu.io.in[1].bits.exceptionVec[10] is invalid @[Frontend.scala 117:16]
    idu.io.in[1].bits.exceptionVec[11] is invalid @[Frontend.scala 117:16]
    idu.io.in[1].bits.exceptionVec[12] is invalid @[Frontend.scala 117:16]
    idu.io.in[1].bits.exceptionVec[13] is invalid @[Frontend.scala 117:16]
    idu.io.in[1].bits.exceptionVec[14] is invalid @[Frontend.scala 117:16]
    idu.io.in[1].bits.exceptionVec[15] is invalid @[Frontend.scala 117:16]
    idu.io.in[1].bits.redirect.valid is invalid @[Frontend.scala 117:16]
    idu.io.in[1].bits.redirect.rtype is invalid @[Frontend.scala 117:16]
    idu.io.in[1].bits.redirect.target is invalid @[Frontend.scala 117:16]
    idu.io.in[1].bits.pnpc is invalid @[Frontend.scala 117:16]
    idu.io.in[1].bits.pc is invalid @[Frontend.scala 117:16]
    idu.io.in[1].bits.instr is invalid @[Frontend.scala 117:16]
    idu.io.in[1].valid is invalid @[Frontend.scala 117:16]
    idu.io.in[1].ready is invalid @[Frontend.scala 117:16]
    node _T_7 = bits(ifu.io.flushVec, 1, 1) @[Frontend.scala 119:34]
    ibf.io.flush <= _T_7 @[Frontend.scala 119:16]
    io.out[0].bits.data.imm <= idu.io.out[0].bits.data.imm @[Frontend.scala 120:10]
    io.out[0].bits.data.src2 <= idu.io.out[0].bits.data.src2 @[Frontend.scala 120:10]
    io.out[0].bits.data.src1 <= idu.io.out[0].bits.data.src1 @[Frontend.scala 120:10]
    io.out[0].bits.ctrl.isBlocked <= idu.io.out[0].bits.ctrl.isBlocked @[Frontend.scala 120:10]
    io.out[0].bits.ctrl.noSpecExec <= idu.io.out[0].bits.ctrl.noSpecExec @[Frontend.scala 120:10]
    io.out[0].bits.ctrl.isSrc2Forward <= idu.io.out[0].bits.ctrl.isSrc2Forward @[Frontend.scala 120:10]
    io.out[0].bits.ctrl.isSrc1Forward <= idu.io.out[0].bits.ctrl.isSrc1Forward @[Frontend.scala 120:10]
    io.out[0].bits.ctrl.isNutCoreTrap <= idu.io.out[0].bits.ctrl.isNutCoreTrap @[Frontend.scala 120:10]
    io.out[0].bits.ctrl.rfDest <= idu.io.out[0].bits.ctrl.rfDest @[Frontend.scala 120:10]
    io.out[0].bits.ctrl.rfWen <= idu.io.out[0].bits.ctrl.rfWen @[Frontend.scala 120:10]
    io.out[0].bits.ctrl.rfSrc2 <= idu.io.out[0].bits.ctrl.rfSrc2 @[Frontend.scala 120:10]
    io.out[0].bits.ctrl.rfSrc1 <= idu.io.out[0].bits.ctrl.rfSrc1 @[Frontend.scala 120:10]
    io.out[0].bits.ctrl.fuOpType <= idu.io.out[0].bits.ctrl.fuOpType @[Frontend.scala 120:10]
    io.out[0].bits.ctrl.fuType <= idu.io.out[0].bits.ctrl.fuType @[Frontend.scala 120:10]
    io.out[0].bits.ctrl.src2Type <= idu.io.out[0].bits.ctrl.src2Type @[Frontend.scala 120:10]
    io.out[0].bits.ctrl.src1Type <= idu.io.out[0].bits.ctrl.src1Type @[Frontend.scala 120:10]
    io.out[0].bits.cf.crossPageIPFFix <= idu.io.out[0].bits.cf.crossPageIPFFix @[Frontend.scala 120:10]
    io.out[0].bits.cf.isRVC <= idu.io.out[0].bits.cf.isRVC @[Frontend.scala 120:10]
    io.out[0].bits.cf.brIdx <= idu.io.out[0].bits.cf.brIdx @[Frontend.scala 120:10]
    io.out[0].bits.cf.intrVec[0] <= idu.io.out[0].bits.cf.intrVec[0] @[Frontend.scala 120:10]
    io.out[0].bits.cf.intrVec[1] <= idu.io.out[0].bits.cf.intrVec[1] @[Frontend.scala 120:10]
    io.out[0].bits.cf.intrVec[2] <= idu.io.out[0].bits.cf.intrVec[2] @[Frontend.scala 120:10]
    io.out[0].bits.cf.intrVec[3] <= idu.io.out[0].bits.cf.intrVec[3] @[Frontend.scala 120:10]
    io.out[0].bits.cf.intrVec[4] <= idu.io.out[0].bits.cf.intrVec[4] @[Frontend.scala 120:10]
    io.out[0].bits.cf.intrVec[5] <= idu.io.out[0].bits.cf.intrVec[5] @[Frontend.scala 120:10]
    io.out[0].bits.cf.intrVec[6] <= idu.io.out[0].bits.cf.intrVec[6] @[Frontend.scala 120:10]
    io.out[0].bits.cf.intrVec[7] <= idu.io.out[0].bits.cf.intrVec[7] @[Frontend.scala 120:10]
    io.out[0].bits.cf.intrVec[8] <= idu.io.out[0].bits.cf.intrVec[8] @[Frontend.scala 120:10]
    io.out[0].bits.cf.intrVec[9] <= idu.io.out[0].bits.cf.intrVec[9] @[Frontend.scala 120:10]
    io.out[0].bits.cf.intrVec[10] <= idu.io.out[0].bits.cf.intrVec[10] @[Frontend.scala 120:10]
    io.out[0].bits.cf.intrVec[11] <= idu.io.out[0].bits.cf.intrVec[11] @[Frontend.scala 120:10]
    io.out[0].bits.cf.exceptionVec[0] <= idu.io.out[0].bits.cf.exceptionVec[0] @[Frontend.scala 120:10]
    io.out[0].bits.cf.exceptionVec[1] <= idu.io.out[0].bits.cf.exceptionVec[1] @[Frontend.scala 120:10]
    io.out[0].bits.cf.exceptionVec[2] <= idu.io.out[0].bits.cf.exceptionVec[2] @[Frontend.scala 120:10]
    io.out[0].bits.cf.exceptionVec[3] <= idu.io.out[0].bits.cf.exceptionVec[3] @[Frontend.scala 120:10]
    io.out[0].bits.cf.exceptionVec[4] <= idu.io.out[0].bits.cf.exceptionVec[4] @[Frontend.scala 120:10]
    io.out[0].bits.cf.exceptionVec[5] <= idu.io.out[0].bits.cf.exceptionVec[5] @[Frontend.scala 120:10]
    io.out[0].bits.cf.exceptionVec[6] <= idu.io.out[0].bits.cf.exceptionVec[6] @[Frontend.scala 120:10]
    io.out[0].bits.cf.exceptionVec[7] <= idu.io.out[0].bits.cf.exceptionVec[7] @[Frontend.scala 120:10]
    io.out[0].bits.cf.exceptionVec[8] <= idu.io.out[0].bits.cf.exceptionVec[8] @[Frontend.scala 120:10]
    io.out[0].bits.cf.exceptionVec[9] <= idu.io.out[0].bits.cf.exceptionVec[9] @[Frontend.scala 120:10]
    io.out[0].bits.cf.exceptionVec[10] <= idu.io.out[0].bits.cf.exceptionVec[10] @[Frontend.scala 120:10]
    io.out[0].bits.cf.exceptionVec[11] <= idu.io.out[0].bits.cf.exceptionVec[11] @[Frontend.scala 120:10]
    io.out[0].bits.cf.exceptionVec[12] <= idu.io.out[0].bits.cf.exceptionVec[12] @[Frontend.scala 120:10]
    io.out[0].bits.cf.exceptionVec[13] <= idu.io.out[0].bits.cf.exceptionVec[13] @[Frontend.scala 120:10]
    io.out[0].bits.cf.exceptionVec[14] <= idu.io.out[0].bits.cf.exceptionVec[14] @[Frontend.scala 120:10]
    io.out[0].bits.cf.exceptionVec[15] <= idu.io.out[0].bits.cf.exceptionVec[15] @[Frontend.scala 120:10]
    io.out[0].bits.cf.redirect.valid <= idu.io.out[0].bits.cf.redirect.valid @[Frontend.scala 120:10]
    io.out[0].bits.cf.redirect.rtype <= idu.io.out[0].bits.cf.redirect.rtype @[Frontend.scala 120:10]
    io.out[0].bits.cf.redirect.target <= idu.io.out[0].bits.cf.redirect.target @[Frontend.scala 120:10]
    io.out[0].bits.cf.pnpc <= idu.io.out[0].bits.cf.pnpc @[Frontend.scala 120:10]
    io.out[0].bits.cf.pc <= idu.io.out[0].bits.cf.pc @[Frontend.scala 120:10]
    io.out[0].bits.cf.instr <= idu.io.out[0].bits.cf.instr @[Frontend.scala 120:10]
    io.out[0].valid <= idu.io.out[0].valid @[Frontend.scala 120:10]
    idu.io.out[0].ready <= io.out[0].ready @[Frontend.scala 120:10]
    io.out[1].bits.data.imm <= idu.io.out[1].bits.data.imm @[Frontend.scala 120:10]
    io.out[1].bits.data.src2 <= idu.io.out[1].bits.data.src2 @[Frontend.scala 120:10]
    io.out[1].bits.data.src1 <= idu.io.out[1].bits.data.src1 @[Frontend.scala 120:10]
    io.out[1].bits.ctrl.isBlocked <= idu.io.out[1].bits.ctrl.isBlocked @[Frontend.scala 120:10]
    io.out[1].bits.ctrl.noSpecExec <= idu.io.out[1].bits.ctrl.noSpecExec @[Frontend.scala 120:10]
    io.out[1].bits.ctrl.isSrc2Forward <= idu.io.out[1].bits.ctrl.isSrc2Forward @[Frontend.scala 120:10]
    io.out[1].bits.ctrl.isSrc1Forward <= idu.io.out[1].bits.ctrl.isSrc1Forward @[Frontend.scala 120:10]
    io.out[1].bits.ctrl.isNutCoreTrap <= idu.io.out[1].bits.ctrl.isNutCoreTrap @[Frontend.scala 120:10]
    io.out[1].bits.ctrl.rfDest <= idu.io.out[1].bits.ctrl.rfDest @[Frontend.scala 120:10]
    io.out[1].bits.ctrl.rfWen <= idu.io.out[1].bits.ctrl.rfWen @[Frontend.scala 120:10]
    io.out[1].bits.ctrl.rfSrc2 <= idu.io.out[1].bits.ctrl.rfSrc2 @[Frontend.scala 120:10]
    io.out[1].bits.ctrl.rfSrc1 <= idu.io.out[1].bits.ctrl.rfSrc1 @[Frontend.scala 120:10]
    io.out[1].bits.ctrl.fuOpType <= idu.io.out[1].bits.ctrl.fuOpType @[Frontend.scala 120:10]
    io.out[1].bits.ctrl.fuType <= idu.io.out[1].bits.ctrl.fuType @[Frontend.scala 120:10]
    io.out[1].bits.ctrl.src2Type <= idu.io.out[1].bits.ctrl.src2Type @[Frontend.scala 120:10]
    io.out[1].bits.ctrl.src1Type <= idu.io.out[1].bits.ctrl.src1Type @[Frontend.scala 120:10]
    io.out[1].bits.cf.crossPageIPFFix <= idu.io.out[1].bits.cf.crossPageIPFFix @[Frontend.scala 120:10]
    io.out[1].bits.cf.isRVC <= idu.io.out[1].bits.cf.isRVC @[Frontend.scala 120:10]
    io.out[1].bits.cf.brIdx <= idu.io.out[1].bits.cf.brIdx @[Frontend.scala 120:10]
    io.out[1].bits.cf.intrVec[0] <= idu.io.out[1].bits.cf.intrVec[0] @[Frontend.scala 120:10]
    io.out[1].bits.cf.intrVec[1] <= idu.io.out[1].bits.cf.intrVec[1] @[Frontend.scala 120:10]
    io.out[1].bits.cf.intrVec[2] <= idu.io.out[1].bits.cf.intrVec[2] @[Frontend.scala 120:10]
    io.out[1].bits.cf.intrVec[3] <= idu.io.out[1].bits.cf.intrVec[3] @[Frontend.scala 120:10]
    io.out[1].bits.cf.intrVec[4] <= idu.io.out[1].bits.cf.intrVec[4] @[Frontend.scala 120:10]
    io.out[1].bits.cf.intrVec[5] <= idu.io.out[1].bits.cf.intrVec[5] @[Frontend.scala 120:10]
    io.out[1].bits.cf.intrVec[6] <= idu.io.out[1].bits.cf.intrVec[6] @[Frontend.scala 120:10]
    io.out[1].bits.cf.intrVec[7] <= idu.io.out[1].bits.cf.intrVec[7] @[Frontend.scala 120:10]
    io.out[1].bits.cf.intrVec[8] <= idu.io.out[1].bits.cf.intrVec[8] @[Frontend.scala 120:10]
    io.out[1].bits.cf.intrVec[9] <= idu.io.out[1].bits.cf.intrVec[9] @[Frontend.scala 120:10]
    io.out[1].bits.cf.intrVec[10] <= idu.io.out[1].bits.cf.intrVec[10] @[Frontend.scala 120:10]
    io.out[1].bits.cf.intrVec[11] <= idu.io.out[1].bits.cf.intrVec[11] @[Frontend.scala 120:10]
    io.out[1].bits.cf.exceptionVec[0] <= idu.io.out[1].bits.cf.exceptionVec[0] @[Frontend.scala 120:10]
    io.out[1].bits.cf.exceptionVec[1] <= idu.io.out[1].bits.cf.exceptionVec[1] @[Frontend.scala 120:10]
    io.out[1].bits.cf.exceptionVec[2] <= idu.io.out[1].bits.cf.exceptionVec[2] @[Frontend.scala 120:10]
    io.out[1].bits.cf.exceptionVec[3] <= idu.io.out[1].bits.cf.exceptionVec[3] @[Frontend.scala 120:10]
    io.out[1].bits.cf.exceptionVec[4] <= idu.io.out[1].bits.cf.exceptionVec[4] @[Frontend.scala 120:10]
    io.out[1].bits.cf.exceptionVec[5] <= idu.io.out[1].bits.cf.exceptionVec[5] @[Frontend.scala 120:10]
    io.out[1].bits.cf.exceptionVec[6] <= idu.io.out[1].bits.cf.exceptionVec[6] @[Frontend.scala 120:10]
    io.out[1].bits.cf.exceptionVec[7] <= idu.io.out[1].bits.cf.exceptionVec[7] @[Frontend.scala 120:10]
    io.out[1].bits.cf.exceptionVec[8] <= idu.io.out[1].bits.cf.exceptionVec[8] @[Frontend.scala 120:10]
    io.out[1].bits.cf.exceptionVec[9] <= idu.io.out[1].bits.cf.exceptionVec[9] @[Frontend.scala 120:10]
    io.out[1].bits.cf.exceptionVec[10] <= idu.io.out[1].bits.cf.exceptionVec[10] @[Frontend.scala 120:10]
    io.out[1].bits.cf.exceptionVec[11] <= idu.io.out[1].bits.cf.exceptionVec[11] @[Frontend.scala 120:10]
    io.out[1].bits.cf.exceptionVec[12] <= idu.io.out[1].bits.cf.exceptionVec[12] @[Frontend.scala 120:10]
    io.out[1].bits.cf.exceptionVec[13] <= idu.io.out[1].bits.cf.exceptionVec[13] @[Frontend.scala 120:10]
    io.out[1].bits.cf.exceptionVec[14] <= idu.io.out[1].bits.cf.exceptionVec[14] @[Frontend.scala 120:10]
    io.out[1].bits.cf.exceptionVec[15] <= idu.io.out[1].bits.cf.exceptionVec[15] @[Frontend.scala 120:10]
    io.out[1].bits.cf.redirect.valid <= idu.io.out[1].bits.cf.redirect.valid @[Frontend.scala 120:10]
    io.out[1].bits.cf.redirect.rtype <= idu.io.out[1].bits.cf.redirect.rtype @[Frontend.scala 120:10]
    io.out[1].bits.cf.redirect.target <= idu.io.out[1].bits.cf.redirect.target @[Frontend.scala 120:10]
    io.out[1].bits.cf.pnpc <= idu.io.out[1].bits.cf.pnpc @[Frontend.scala 120:10]
    io.out[1].bits.cf.pc <= idu.io.out[1].bits.cf.pc @[Frontend.scala 120:10]
    io.out[1].bits.cf.instr <= idu.io.out[1].bits.cf.instr @[Frontend.scala 120:10]
    io.out[1].valid <= idu.io.out[1].valid @[Frontend.scala 120:10]
    idu.io.out[1].ready <= io.out[1].ready @[Frontend.scala 120:10]
    ifu.io.redirect.valid <= io.redirect.valid @[Frontend.scala 121:15]
    ifu.io.redirect.rtype <= io.redirect.rtype @[Frontend.scala 121:15]
    ifu.io.redirect.target <= io.redirect.target @[Frontend.scala 121:15]
    io.flushVec <= ifu.io.flushVec @[Frontend.scala 122:15]
    io.bpFlush <= ifu.io.bpFlush @[Frontend.scala 123:14]
    ifu.io.ipf <= io.ipf @[Frontend.scala 124:10]
    ifu.io.imem.resp.bits.user <= io.imem.resp.bits.user @[Frontend.scala 125:11]
    ifu.io.imem.resp.bits.rdata <= io.imem.resp.bits.rdata @[Frontend.scala 125:11]
    ifu.io.imem.resp.bits.cmd <= io.imem.resp.bits.cmd @[Frontend.scala 125:11]
    ifu.io.imem.resp.valid <= io.imem.resp.valid @[Frontend.scala 125:11]
    io.imem.resp.ready <= ifu.io.imem.resp.ready @[Frontend.scala 125:11]
    io.imem.req.bits.user <= ifu.io.imem.req.bits.user @[Frontend.scala 125:11]
    io.imem.req.bits.wdata <= ifu.io.imem.req.bits.wdata @[Frontend.scala 125:11]
    io.imem.req.bits.wmask <= ifu.io.imem.req.bits.wmask @[Frontend.scala 125:11]
    io.imem.req.bits.cmd <= ifu.io.imem.req.bits.cmd @[Frontend.scala 125:11]
    io.imem.req.bits.size <= ifu.io.imem.req.bits.size @[Frontend.scala 125:11]
    io.imem.req.bits.addr <= ifu.io.imem.req.bits.addr @[Frontend.scala 125:11]
    io.imem.req.valid <= ifu.io.imem.req.valid @[Frontend.scala 125:11]
    ifu.io.imem.req.ready <= io.imem.req.ready @[Frontend.scala 125:11]
    reg _T_8 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_9 = add(_T_8, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_10 = tail(_T_9, 1) @[GTimer.scala 25:12]
    _T_8 <= _T_10 @[GTimer.scala 25:7]
    wire _T_11 : UInt<1>
    _T_11 <= UInt<1>("h00")
    node _T_12 = and(UInt<1>("h01"), _T_11) @[Debug.scala 55:16]
    when _T_12 : @[Debug.scala 55:31]
      node _T_13 = asUInt(reset) @[Debug.scala 56:24]
      node _T_14 = eq(_T_13, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_14 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] Frontend_inorder: ", _T_8) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_15 = asUInt(reset) @[Debug.scala 57:13]
      node _T_16 = eq(_T_15, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_16 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "------------------------ FRONTEND:------------------------\n") @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    reg _T_17 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_18 = add(_T_17, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_19 = tail(_T_18, 1) @[GTimer.scala 25:12]
    _T_17 <= _T_19 @[GTimer.scala 25:7]
    wire _T_20 : UInt<1>
    _T_20 <= UInt<1>("h00")
    node _T_21 = and(UInt<1>("h01"), _T_20) @[Debug.scala 55:16]
    when _T_21 : @[Debug.scala 55:31]
      node _T_22 = asUInt(reset) @[Debug.scala 56:24]
      node _T_23 = eq(_T_22, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_23 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] Frontend_inorder: ", _T_17) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_24 = asUInt(reset) @[Debug.scala 57:13]
      node _T_25 = eq(_T_24, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_25 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "flush = %b, ifu:(%d,%d), idu:(%d,%d)\n", ifu.io.flushVec, ifu.io.out.valid, ifu.io.out.ready, idu.io.in[0].valid, idu.io.in[0].ready) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    reg _T_26 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_27 = add(_T_26, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_28 = tail(_T_27, 1) @[GTimer.scala 25:12]
    _T_26 <= _T_28 @[GTimer.scala 25:7]
    wire _T_29 : UInt<1>
    _T_29 <= UInt<1>("h00")
    node _T_30 = and(ifu.io.out.valid, _T_29) @[Debug.scala 55:16]
    when _T_30 : @[Debug.scala 55:31]
      node _T_31 = asUInt(reset) @[Debug.scala 56:24]
      node _T_32 = eq(_T_31, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_32 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] Frontend_inorder: ", _T_26) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_33 = asUInt(reset) @[Debug.scala 57:13]
      node _T_34 = eq(_T_33, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_34 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "IFU: pc = 0x%x, instr = 0x%x\n", ifu.io.out.bits.pc, ifu.io.out.bits.instr) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    reg _T_35 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_36 = add(_T_35, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_37 = tail(_T_36, 1) @[GTimer.scala 25:12]
    _T_35 <= _T_37 @[GTimer.scala 25:7]
    wire _T_38 : UInt<1>
    _T_38 <= UInt<1>("h00")
    node _T_39 = and(idu.io.in[0].valid, _T_38) @[Debug.scala 55:16]
    when _T_39 : @[Debug.scala 55:31]
      node _T_40 = asUInt(reset) @[Debug.scala 56:24]
      node _T_41 = eq(_T_40, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_41 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] Frontend_inorder: ", _T_35) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_42 = asUInt(reset) @[Debug.scala 57:13]
      node _T_43 = eq(_T_42, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_43 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "IDU1: pc = 0x%x, instr = 0x%x, pnpc = 0x%x\n", idu.io.in[0].bits.pc, idu.io.in[0].bits.instr, idu.io.in[0].bits.pnpc) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    
  module ISU : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {cf : {instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>}, ctrl : {src1Type : UInt<1>, src2Type : UInt<1>, fuType : UInt<3>, fuOpType : UInt<7>, rfSrc1 : UInt<5>, rfSrc2 : UInt<5>, rfWen : UInt<1>, rfDest : UInt<5>, isNutCoreTrap : UInt<1>, isSrc1Forward : UInt<1>, isSrc2Forward : UInt<1>, noSpecExec : UInt<1>, isBlocked : UInt<1>}, data : {src1 : UInt<64>, src2 : UInt<64>, imm : UInt<64>}}}[2], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {cf : {instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>}, ctrl : {src1Type : UInt<1>, src2Type : UInt<1>, fuType : UInt<3>, fuOpType : UInt<7>, rfSrc1 : UInt<5>, rfSrc2 : UInt<5>, rfWen : UInt<1>, rfDest : UInt<5>, isNutCoreTrap : UInt<1>, isSrc1Forward : UInt<1>, isSrc2Forward : UInt<1>, noSpecExec : UInt<1>, isBlocked : UInt<1>}, data : {src1 : UInt<64>, src2 : UInt<64>, imm : UInt<64>}}}, flip wb : {rfWen : UInt<1>, rfDest : UInt<5>, rfData : UInt<64>}, flip forward : {valid : UInt<1>, wb : {rfWen : UInt<1>, rfDest : UInt<5>, rfData : UInt<64>}, fuType : UInt<3>}, flip flush : UInt<1>}
    
    io.out.bits.data.imm is invalid @[ISU.scala 35:15]
    io.out.bits.data.src2 is invalid @[ISU.scala 35:15]
    io.out.bits.data.src1 is invalid @[ISU.scala 35:15]
    io.out.bits.ctrl.isBlocked is invalid @[ISU.scala 35:15]
    io.out.bits.ctrl.noSpecExec is invalid @[ISU.scala 35:15]
    io.out.bits.ctrl.isSrc2Forward is invalid @[ISU.scala 35:15]
    io.out.bits.ctrl.isSrc1Forward is invalid @[ISU.scala 35:15]
    io.out.bits.ctrl.isNutCoreTrap is invalid @[ISU.scala 35:15]
    io.out.bits.ctrl.rfDest is invalid @[ISU.scala 35:15]
    io.out.bits.ctrl.rfWen is invalid @[ISU.scala 35:15]
    io.out.bits.ctrl.rfSrc2 is invalid @[ISU.scala 35:15]
    io.out.bits.ctrl.rfSrc1 is invalid @[ISU.scala 35:15]
    io.out.bits.ctrl.fuOpType is invalid @[ISU.scala 35:15]
    io.out.bits.ctrl.fuType is invalid @[ISU.scala 35:15]
    io.out.bits.ctrl.src2Type is invalid @[ISU.scala 35:15]
    io.out.bits.ctrl.src1Type is invalid @[ISU.scala 35:15]
    io.out.bits.cf.crossPageIPFFix is invalid @[ISU.scala 35:15]
    io.out.bits.cf.isRVC is invalid @[ISU.scala 35:15]
    io.out.bits.cf.brIdx is invalid @[ISU.scala 35:15]
    io.out.bits.cf.intrVec[0] is invalid @[ISU.scala 35:15]
    io.out.bits.cf.intrVec[1] is invalid @[ISU.scala 35:15]
    io.out.bits.cf.intrVec[2] is invalid @[ISU.scala 35:15]
    io.out.bits.cf.intrVec[3] is invalid @[ISU.scala 35:15]
    io.out.bits.cf.intrVec[4] is invalid @[ISU.scala 35:15]
    io.out.bits.cf.intrVec[5] is invalid @[ISU.scala 35:15]
    io.out.bits.cf.intrVec[6] is invalid @[ISU.scala 35:15]
    io.out.bits.cf.intrVec[7] is invalid @[ISU.scala 35:15]
    io.out.bits.cf.intrVec[8] is invalid @[ISU.scala 35:15]
    io.out.bits.cf.intrVec[9] is invalid @[ISU.scala 35:15]
    io.out.bits.cf.intrVec[10] is invalid @[ISU.scala 35:15]
    io.out.bits.cf.intrVec[11] is invalid @[ISU.scala 35:15]
    io.out.bits.cf.exceptionVec[0] is invalid @[ISU.scala 35:15]
    io.out.bits.cf.exceptionVec[1] is invalid @[ISU.scala 35:15]
    io.out.bits.cf.exceptionVec[2] is invalid @[ISU.scala 35:15]
    io.out.bits.cf.exceptionVec[3] is invalid @[ISU.scala 35:15]
    io.out.bits.cf.exceptionVec[4] is invalid @[ISU.scala 35:15]
    io.out.bits.cf.exceptionVec[5] is invalid @[ISU.scala 35:15]
    io.out.bits.cf.exceptionVec[6] is invalid @[ISU.scala 35:15]
    io.out.bits.cf.exceptionVec[7] is invalid @[ISU.scala 35:15]
    io.out.bits.cf.exceptionVec[8] is invalid @[ISU.scala 35:15]
    io.out.bits.cf.exceptionVec[9] is invalid @[ISU.scala 35:15]
    io.out.bits.cf.exceptionVec[10] is invalid @[ISU.scala 35:15]
    io.out.bits.cf.exceptionVec[11] is invalid @[ISU.scala 35:15]
    io.out.bits.cf.exceptionVec[12] is invalid @[ISU.scala 35:15]
    io.out.bits.cf.exceptionVec[13] is invalid @[ISU.scala 35:15]
    io.out.bits.cf.exceptionVec[14] is invalid @[ISU.scala 35:15]
    io.out.bits.cf.exceptionVec[15] is invalid @[ISU.scala 35:15]
    io.out.bits.cf.redirect.valid is invalid @[ISU.scala 35:15]
    io.out.bits.cf.redirect.rtype is invalid @[ISU.scala 35:15]
    io.out.bits.cf.redirect.target is invalid @[ISU.scala 35:15]
    io.out.bits.cf.pnpc is invalid @[ISU.scala 35:15]
    io.out.bits.cf.pc is invalid @[ISU.scala 35:15]
    io.out.bits.cf.instr is invalid @[ISU.scala 35:15]
    node forwardRfWen = and(io.forward.wb.rfWen, io.forward.valid) @[ISU.scala 42:42]
    node _T = neq(io.forward.fuType, UInt<1>("h00")) @[ISU.scala 43:41]
    node _T_1 = neq(io.forward.fuType, UInt<1>("h01")) @[ISU.scala 43:79]
    node dontForward1 = and(_T, _T_1) @[ISU.scala 43:57]
    node _T_2 = neq(io.in[0].bits.ctrl.rfSrc1, UInt<1>("h00")) @[ISU.scala 40:69]
    node _T_3 = eq(io.in[0].bits.ctrl.rfSrc1, io.forward.wb.rfDest) @[ISU.scala 40:88]
    node _T_4 = and(_T_2, _T_3) @[ISU.scala 40:78]
    node src1DependEX = and(_T_4, forwardRfWen) @[ISU.scala 40:100]
    node _T_5 = neq(io.in[0].bits.ctrl.rfSrc2, UInt<1>("h00")) @[ISU.scala 40:69]
    node _T_6 = eq(io.in[0].bits.ctrl.rfSrc2, io.forward.wb.rfDest) @[ISU.scala 40:88]
    node _T_7 = and(_T_5, _T_6) @[ISU.scala 40:78]
    node src2DependEX = and(_T_7, forwardRfWen) @[ISU.scala 40:100]
    node _T_8 = neq(io.in[0].bits.ctrl.rfSrc1, UInt<1>("h00")) @[ISU.scala 40:69]
    node _T_9 = eq(io.in[0].bits.ctrl.rfSrc1, io.wb.rfDest) @[ISU.scala 40:88]
    node _T_10 = and(_T_8, _T_9) @[ISU.scala 40:78]
    node src1DependWB = and(_T_10, io.wb.rfWen) @[ISU.scala 40:100]
    node _T_11 = neq(io.in[0].bits.ctrl.rfSrc2, UInt<1>("h00")) @[ISU.scala 40:69]
    node _T_12 = eq(io.in[0].bits.ctrl.rfSrc2, io.wb.rfDest) @[ISU.scala 40:88]
    node _T_13 = and(_T_11, _T_12) @[ISU.scala 40:78]
    node src2DependWB = and(_T_13, io.wb.rfWen) @[ISU.scala 40:100]
    node _T_14 = eq(dontForward1, UInt<1>("h00")) @[ISU.scala 49:46]
    node src1ForwardNextCycle = and(src1DependEX, _T_14) @[ISU.scala 49:43]
    node _T_15 = eq(dontForward1, UInt<1>("h00")) @[ISU.scala 50:46]
    node src2ForwardNextCycle = and(src2DependEX, _T_15) @[ISU.scala 50:43]
    node _T_16 = eq(src1DependEX, UInt<1>("h00")) @[ISU.scala 51:55]
    node _T_17 = mux(dontForward1, _T_16, UInt<1>("h01")) @[ISU.scala 51:40]
    node src1Forward = and(src1DependWB, _T_17) @[ISU.scala 51:34]
    node _T_18 = eq(src2DependEX, UInt<1>("h00")) @[ISU.scala 52:55]
    node _T_19 = mux(dontForward1, _T_18, UInt<1>("h01")) @[ISU.scala 52:40]
    node src2Forward = and(src2DependWB, _T_19) @[ISU.scala 52:34]
    reg _T_20 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[RF.scala 36:21]
    node _T_21 = dshr(_T_20, io.in[0].bits.ctrl.rfSrc1) @[RF.scala 37:37]
    node _T_22 = bits(_T_21, 0, 0) @[RF.scala 37:37]
    node _T_23 = eq(_T_22, UInt<1>("h00")) @[ISU.scala 55:19]
    node _T_24 = or(_T_23, src1ForwardNextCycle) @[ISU.scala 55:38]
    node src1Ready = or(_T_24, src1Forward) @[ISU.scala 55:62]
    node _T_25 = dshr(_T_20, io.in[0].bits.ctrl.rfSrc2) @[RF.scala 37:37]
    node _T_26 = bits(_T_25, 0, 0) @[RF.scala 37:37]
    node _T_27 = eq(_T_26, UInt<1>("h00")) @[ISU.scala 56:19]
    node _T_28 = or(_T_27, src2ForwardNextCycle) @[ISU.scala 56:38]
    node src2Ready = or(_T_28, src2Forward) @[ISU.scala 56:62]
    node _T_29 = and(io.in[0].valid, src1Ready) @[ISU.scala 57:34]
    node _T_30 = and(_T_29, src2Ready) @[ISU.scala 57:47]
    io.out.valid <= _T_30 @[ISU.scala 57:16]
    cmem _T_31 : UInt<64>[32] @[RF.scala 30:15]
    node _T_32 = eq(io.in[0].bits.ctrl.src1Type, UInt<1>("h01")) @[ISU.scala 63:34]
    node _T_33 = bits(io.in[0].bits.cf.pc, 38, 38) @[BitUtils.scala 39:20]
    node _T_34 = bits(_T_33, 0, 0) @[Bitwise.scala 72:15]
    node _T_35 = mux(_T_34, UInt<25>("h01ffffff"), UInt<25>("h00")) @[Bitwise.scala 72:12]
    node _T_36 = cat(_T_35, io.in[0].bits.cf.pc) @[Cat.scala 29:58]
    node _T_37 = eq(src1ForwardNextCycle, UInt<1>("h00")) @[ISU.scala 65:21]
    node _T_38 = and(src1Forward, _T_37) @[ISU.scala 65:18]
    node _T_39 = neq(io.in[0].bits.ctrl.src1Type, UInt<1>("h01")) @[ISU.scala 66:35]
    node _T_40 = eq(src1ForwardNextCycle, UInt<1>("h00")) @[ISU.scala 66:54]
    node _T_41 = and(_T_39, _T_40) @[ISU.scala 66:51]
    node _T_42 = eq(src1Forward, UInt<1>("h00")) @[ISU.scala 66:79]
    node _T_43 = and(_T_41, _T_42) @[ISU.scala 66:76]
    node _T_44 = eq(io.in[0].bits.ctrl.rfSrc1, UInt<1>("h00")) @[RF.scala 31:42]
    infer mport _T_45 = _T_31[io.in[0].bits.ctrl.rfSrc1], clock @[RF.scala 31:58]
    node _T_46 = mux(_T_44, UInt<1>("h00"), _T_45) @[RF.scala 31:36]
    node _T_47 = mux(_T_32, _T_36, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_48 = mux(src1ForwardNextCycle, io.forward.wb.rfData, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_49 = mux(_T_38, io.wb.rfData, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_50 = mux(_T_43, _T_46, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_51 = or(_T_47, _T_48) @[Mux.scala 27:72]
    node _T_52 = or(_T_51, _T_49) @[Mux.scala 27:72]
    node _T_53 = or(_T_52, _T_50) @[Mux.scala 27:72]
    wire _T_54 : UInt<64> @[Mux.scala 27:72]
    _T_54 <= _T_53 @[Mux.scala 27:72]
    io.out.bits.data.src1 <= _T_54 @[ISU.scala 62:25]
    node _T_55 = neq(io.in[0].bits.ctrl.src2Type, UInt<1>("h00")) @[ISU.scala 69:34]
    node _T_56 = eq(src2ForwardNextCycle, UInt<1>("h00")) @[ISU.scala 71:21]
    node _T_57 = and(src2Forward, _T_56) @[ISU.scala 71:18]
    node _T_58 = eq(io.in[0].bits.ctrl.src2Type, UInt<1>("h00")) @[ISU.scala 72:35]
    node _T_59 = eq(src2ForwardNextCycle, UInt<1>("h00")) @[ISU.scala 72:55]
    node _T_60 = and(_T_58, _T_59) @[ISU.scala 72:52]
    node _T_61 = eq(src2Forward, UInt<1>("h00")) @[ISU.scala 72:80]
    node _T_62 = and(_T_60, _T_61) @[ISU.scala 72:77]
    node _T_63 = eq(io.in[0].bits.ctrl.rfSrc2, UInt<1>("h00")) @[RF.scala 31:42]
    infer mport _T_64 = _T_31[io.in[0].bits.ctrl.rfSrc2], clock @[RF.scala 31:58]
    node _T_65 = mux(_T_63, UInt<1>("h00"), _T_64) @[RF.scala 31:36]
    node _T_66 = mux(_T_55, io.in[0].bits.data.imm, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_67 = mux(src2ForwardNextCycle, io.forward.wb.rfData, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_68 = mux(_T_57, io.wb.rfData, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_69 = mux(_T_62, _T_65, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_70 = or(_T_66, _T_67) @[Mux.scala 27:72]
    node _T_71 = or(_T_70, _T_68) @[Mux.scala 27:72]
    node _T_72 = or(_T_71, _T_69) @[Mux.scala 27:72]
    wire _T_73 : UInt<64> @[Mux.scala 27:72]
    _T_73 <= _T_72 @[Mux.scala 27:72]
    io.out.bits.data.src2 <= _T_73 @[ISU.scala 68:25]
    io.out.bits.data.imm <= io.in[0].bits.data.imm @[ISU.scala 74:25]
    io.out.bits.cf.crossPageIPFFix <= io.in[0].bits.cf.crossPageIPFFix @[ISU.scala 76:18]
    io.out.bits.cf.isRVC <= io.in[0].bits.cf.isRVC @[ISU.scala 76:18]
    io.out.bits.cf.brIdx <= io.in[0].bits.cf.brIdx @[ISU.scala 76:18]
    io.out.bits.cf.intrVec[0] <= io.in[0].bits.cf.intrVec[0] @[ISU.scala 76:18]
    io.out.bits.cf.intrVec[1] <= io.in[0].bits.cf.intrVec[1] @[ISU.scala 76:18]
    io.out.bits.cf.intrVec[2] <= io.in[0].bits.cf.intrVec[2] @[ISU.scala 76:18]
    io.out.bits.cf.intrVec[3] <= io.in[0].bits.cf.intrVec[3] @[ISU.scala 76:18]
    io.out.bits.cf.intrVec[4] <= io.in[0].bits.cf.intrVec[4] @[ISU.scala 76:18]
    io.out.bits.cf.intrVec[5] <= io.in[0].bits.cf.intrVec[5] @[ISU.scala 76:18]
    io.out.bits.cf.intrVec[6] <= io.in[0].bits.cf.intrVec[6] @[ISU.scala 76:18]
    io.out.bits.cf.intrVec[7] <= io.in[0].bits.cf.intrVec[7] @[ISU.scala 76:18]
    io.out.bits.cf.intrVec[8] <= io.in[0].bits.cf.intrVec[8] @[ISU.scala 76:18]
    io.out.bits.cf.intrVec[9] <= io.in[0].bits.cf.intrVec[9] @[ISU.scala 76:18]
    io.out.bits.cf.intrVec[10] <= io.in[0].bits.cf.intrVec[10] @[ISU.scala 76:18]
    io.out.bits.cf.intrVec[11] <= io.in[0].bits.cf.intrVec[11] @[ISU.scala 76:18]
    io.out.bits.cf.exceptionVec[0] <= io.in[0].bits.cf.exceptionVec[0] @[ISU.scala 76:18]
    io.out.bits.cf.exceptionVec[1] <= io.in[0].bits.cf.exceptionVec[1] @[ISU.scala 76:18]
    io.out.bits.cf.exceptionVec[2] <= io.in[0].bits.cf.exceptionVec[2] @[ISU.scala 76:18]
    io.out.bits.cf.exceptionVec[3] <= io.in[0].bits.cf.exceptionVec[3] @[ISU.scala 76:18]
    io.out.bits.cf.exceptionVec[4] <= io.in[0].bits.cf.exceptionVec[4] @[ISU.scala 76:18]
    io.out.bits.cf.exceptionVec[5] <= io.in[0].bits.cf.exceptionVec[5] @[ISU.scala 76:18]
    io.out.bits.cf.exceptionVec[6] <= io.in[0].bits.cf.exceptionVec[6] @[ISU.scala 76:18]
    io.out.bits.cf.exceptionVec[7] <= io.in[0].bits.cf.exceptionVec[7] @[ISU.scala 76:18]
    io.out.bits.cf.exceptionVec[8] <= io.in[0].bits.cf.exceptionVec[8] @[ISU.scala 76:18]
    io.out.bits.cf.exceptionVec[9] <= io.in[0].bits.cf.exceptionVec[9] @[ISU.scala 76:18]
    io.out.bits.cf.exceptionVec[10] <= io.in[0].bits.cf.exceptionVec[10] @[ISU.scala 76:18]
    io.out.bits.cf.exceptionVec[11] <= io.in[0].bits.cf.exceptionVec[11] @[ISU.scala 76:18]
    io.out.bits.cf.exceptionVec[12] <= io.in[0].bits.cf.exceptionVec[12] @[ISU.scala 76:18]
    io.out.bits.cf.exceptionVec[13] <= io.in[0].bits.cf.exceptionVec[13] @[ISU.scala 76:18]
    io.out.bits.cf.exceptionVec[14] <= io.in[0].bits.cf.exceptionVec[14] @[ISU.scala 76:18]
    io.out.bits.cf.exceptionVec[15] <= io.in[0].bits.cf.exceptionVec[15] @[ISU.scala 76:18]
    io.out.bits.cf.redirect.valid <= io.in[0].bits.cf.redirect.valid @[ISU.scala 76:18]
    io.out.bits.cf.redirect.rtype <= io.in[0].bits.cf.redirect.rtype @[ISU.scala 76:18]
    io.out.bits.cf.redirect.target <= io.in[0].bits.cf.redirect.target @[ISU.scala 76:18]
    io.out.bits.cf.pnpc <= io.in[0].bits.cf.pnpc @[ISU.scala 76:18]
    io.out.bits.cf.pc <= io.in[0].bits.cf.pc @[ISU.scala 76:18]
    io.out.bits.cf.instr <= io.in[0].bits.cf.instr @[ISU.scala 76:18]
    io.out.bits.ctrl.isBlocked <= io.in[0].bits.ctrl.isBlocked @[ISU.scala 77:20]
    io.out.bits.ctrl.noSpecExec <= io.in[0].bits.ctrl.noSpecExec @[ISU.scala 77:20]
    io.out.bits.ctrl.isSrc2Forward <= io.in[0].bits.ctrl.isSrc2Forward @[ISU.scala 77:20]
    io.out.bits.ctrl.isSrc1Forward <= io.in[0].bits.ctrl.isSrc1Forward @[ISU.scala 77:20]
    io.out.bits.ctrl.isNutCoreTrap <= io.in[0].bits.ctrl.isNutCoreTrap @[ISU.scala 77:20]
    io.out.bits.ctrl.rfDest <= io.in[0].bits.ctrl.rfDest @[ISU.scala 77:20]
    io.out.bits.ctrl.rfWen <= io.in[0].bits.ctrl.rfWen @[ISU.scala 77:20]
    io.out.bits.ctrl.rfSrc2 <= io.in[0].bits.ctrl.rfSrc2 @[ISU.scala 77:20]
    io.out.bits.ctrl.rfSrc1 <= io.in[0].bits.ctrl.rfSrc1 @[ISU.scala 77:20]
    io.out.bits.ctrl.fuOpType <= io.in[0].bits.ctrl.fuOpType @[ISU.scala 77:20]
    io.out.bits.ctrl.fuType <= io.in[0].bits.ctrl.fuType @[ISU.scala 77:20]
    io.out.bits.ctrl.src2Type <= io.in[0].bits.ctrl.src2Type @[ISU.scala 77:20]
    io.out.bits.ctrl.src1Type <= io.in[0].bits.ctrl.src1Type @[ISU.scala 77:20]
    io.out.bits.ctrl.isSrc1Forward <= src1ForwardNextCycle @[ISU.scala 78:34]
    io.out.bits.ctrl.isSrc2Forward <= src2ForwardNextCycle @[ISU.scala 79:34]
    when io.wb.rfWen : @[ISU.scala 82:22]
      infer mport _T_74 = _T_31[io.wb.rfDest], clock @[RF.scala 32:43]
      node _T_75 = bits(io.wb.rfData, 63, 0) @[RF.scala 32:57]
      _T_74 <= _T_75 @[RF.scala 32:50]
      skip @[ISU.scala 82:22]
    node _T_76 = neq(io.wb.rfDest, UInt<1>("h00")) @[ISU.scala 40:69]
    node _T_77 = eq(io.wb.rfDest, io.forward.wb.rfDest) @[ISU.scala 40:88]
    node _T_78 = and(_T_76, _T_77) @[ISU.scala 40:78]
    node _T_79 = and(_T_78, forwardRfWen) @[ISU.scala 40:100]
    node _T_80 = eq(_T_79, UInt<1>("h00")) @[ISU.scala 84:40]
    node _T_81 = and(io.wb.rfWen, _T_80) @[ISU.scala 84:37]
    node _T_82 = dshl(UInt<32>("h01"), io.wb.rfDest) @[RF.scala 38:39]
    node _T_83 = bits(_T_82, 31, 0) @[RF.scala 38:46]
    node wbClearMask = mux(_T_81, _T_83, UInt<32>("h00")) @[ISU.scala 84:24]
    node _T_84 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_85 = dshl(UInt<32>("h01"), io.in[0].bits.ctrl.rfDest) @[RF.scala 38:39]
    node _T_86 = bits(_T_85, 31, 0) @[RF.scala 38:46]
    node isuFireSetMask = mux(_T_84, _T_86, UInt<1>("h00")) @[ISU.scala 86:27]
    when io.flush : @[ISU.scala 87:19]
      node _T_87 = mux(UInt<1>("h01"), UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 72:12]
      node _T_88 = not(_T_87) @[RF.scala 44:26]
      node _T_89 = and(_T_20, _T_88) @[RF.scala 44:24]
      node _T_90 = or(_T_89, UInt<1>("h00")) @[RF.scala 44:38]
      node _T_91 = bits(_T_90, 31, 1) @[RF.scala 44:48]
      node _T_92 = cat(_T_91, UInt<1>("h00")) @[Cat.scala 29:58]
      _T_20 <= _T_92 @[RF.scala 44:10]
      skip @[ISU.scala 87:19]
    else : @[ISU.scala 88:14]
      node _T_93 = not(wbClearMask) @[RF.scala 44:26]
      node _T_94 = and(_T_20, _T_93) @[RF.scala 44:24]
      node _T_95 = or(_T_94, isuFireSetMask) @[RF.scala 44:38]
      node _T_96 = bits(_T_95, 31, 1) @[RF.scala 44:48]
      node _T_97 = cat(_T_96, UInt<1>("h00")) @[Cat.scala 29:58]
      _T_20 <= _T_97 @[RF.scala 44:10]
      skip @[ISU.scala 88:14]
    node _T_98 = eq(io.in[0].valid, UInt<1>("h00")) @[ISU.scala 90:21]
    node _T_99 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_100 = or(_T_98, _T_99) @[ISU.scala 90:37]
    io.in[0].ready <= _T_100 @[ISU.scala 90:18]
    io.in[1].ready <= UInt<1>("h00") @[ISU.scala 91:18]
    node _T_101 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    reg _T_102 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_103 = add(_T_102, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_104 = tail(_T_103, 1) @[GTimer.scala 25:12]
    _T_102 <= _T_104 @[GTimer.scala 25:7]
    wire _T_105 : UInt<1>
    _T_105 <= UInt<1>("h00")
    node _T_106 = and(_T_101, _T_105) @[Debug.scala 55:16]
    when _T_106 : @[Debug.scala 55:31]
      node _T_107 = asUInt(reset) @[Debug.scala 56:24]
      node _T_108 = eq(_T_107, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_108 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] ISU: ", _T_102) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_109 = asUInt(reset) @[Debug.scala 57:13]
      node _T_110 = eq(_T_109, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_110 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "issue: pc %x npc %x instr %x src1 %x src2 %x imm %x\n", io.out.bits.cf.pc, io.out.bits.cf.pnpc, io.out.bits.cf.instr, io.out.bits.data.src1, io.out.bits.data.src2, io.out.bits.data.imm) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_111 = eq(io.out.valid, UInt<1>("h00")) @[ISU.scala 96:43]
    node _T_112 = and(io.in[0].valid, _T_111) @[ISU.scala 96:40]
    node _T_113 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_114 = eq(_T_113, UInt<1>("h00")) @[ISU.scala 97:41]
    node _T_115 = and(io.out.valid, _T_114) @[ISU.scala 97:38]
    node _T_116 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    
  module ALU : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {src1 : UInt<64>, src2 : UInt<64>, func : UInt<7>}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, flip cfIn : {instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>}, redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, flip offset : UInt<64>}
    
    node _T = bits(io.in.bits.func, 6, 6) @[ALU.scala 59:31]
    node isAdderSub = eq(_T, UInt<1>("h00")) @[ALU.scala 86:20]
    node _T_1 = bits(isAdderSub, 0, 0) @[Bitwise.scala 72:15]
    node _T_2 = mux(_T_1, UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_3 = xor(io.in.bits.src2, _T_2) @[ALU.scala 87:33]
    node _T_4 = add(io.in.bits.src1, _T_3) @[ALU.scala 87:24]
    node _T_5 = add(_T_4, isAdderSub) @[ALU.scala 87:60]
    node adderRes = tail(_T_5, 1) @[ALU.scala 87:60]
    node xorRes = xor(io.in.bits.src1, io.in.bits.src2) @[ALU.scala 88:21]
    node _T_6 = bits(adderRes, 64, 64) @[ALU.scala 89:23]
    node sltu = eq(_T_6, UInt<1>("h00")) @[ALU.scala 89:14]
    node _T_7 = bits(xorRes, 63, 63) @[ALU.scala 90:19]
    node slt = xor(_T_7, sltu) @[ALU.scala 90:28]
    node _T_8 = bits(io.in.bits.src1, 63, 0) @[ALU.scala 92:44]
    node _T_9 = bits(io.in.bits.src1, 31, 0) @[ALU.scala 93:35]
    node _T_10 = cat(UInt<32>("h00"), _T_9) @[Cat.scala 29:58]
    node _T_11 = bits(io.in.bits.src1, 31, 0) @[ALU.scala 94:35]
    node _T_12 = bits(_T_11, 31, 31) @[BitUtils.scala 39:20]
    node _T_13 = bits(_T_12, 0, 0) @[Bitwise.scala 72:15]
    node _T_14 = mux(_T_13, UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 72:12]
    node _T_15 = cat(_T_14, _T_11) @[Cat.scala 29:58]
    node _T_16 = eq(UInt<6>("h025"), io.in.bits.func) @[Mux.scala 80:60]
    node _T_17 = mux(_T_16, _T_10, _T_8) @[Mux.scala 80:57]
    node _T_18 = eq(UInt<6>("h02d"), io.in.bits.func) @[Mux.scala 80:60]
    node shsrc1 = mux(_T_18, _T_15, _T_17) @[Mux.scala 80:57]
    node _T_19 = bits(io.in.bits.func, 5, 5) @[ALU.scala 44:34]
    node _T_20 = bits(io.in.bits.src2, 4, 0) @[ALU.scala 96:49]
    node _T_21 = bits(io.in.bits.src2, 5, 0) @[ALU.scala 96:77]
    node shamt = mux(_T_19, _T_20, _T_21) @[ALU.scala 96:18]
    node _T_22 = bits(io.in.bits.func, 3, 0) @[ALU.scala 97:35]
    node _T_23 = dshl(shsrc1, shamt) @[ALU.scala 98:33]
    node _T_24 = bits(_T_23, 63, 0) @[ALU.scala 98:42]
    node _T_25 = cat(UInt<63>("h00"), slt) @[Cat.scala 29:58]
    node _T_26 = cat(UInt<63>("h00"), sltu) @[Cat.scala 29:58]
    node _T_27 = dshr(shsrc1, shamt) @[ALU.scala 102:32]
    node _T_28 = or(io.in.bits.src1, io.in.bits.src2) @[ALU.scala 103:30]
    node _T_29 = and(io.in.bits.src1, io.in.bits.src2) @[ALU.scala 104:30]
    node _T_30 = asSInt(shsrc1) @[ALU.scala 105:32]
    node _T_31 = dshr(_T_30, shamt) @[ALU.scala 105:39]
    node _T_32 = asUInt(_T_31) @[ALU.scala 105:49]
    node _T_33 = eq(UInt<1>("h01"), _T_22) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_24, adderRes) @[Mux.scala 80:57]
    node _T_35 = eq(UInt<2>("h02"), _T_22) @[Mux.scala 80:60]
    node _T_36 = mux(_T_35, _T_25, _T_34) @[Mux.scala 80:57]
    node _T_37 = eq(UInt<2>("h03"), _T_22) @[Mux.scala 80:60]
    node _T_38 = mux(_T_37, _T_26, _T_36) @[Mux.scala 80:57]
    node _T_39 = eq(UInt<3>("h04"), _T_22) @[Mux.scala 80:60]
    node _T_40 = mux(_T_39, xorRes, _T_38) @[Mux.scala 80:57]
    node _T_41 = eq(UInt<3>("h05"), _T_22) @[Mux.scala 80:60]
    node _T_42 = mux(_T_41, _T_27, _T_40) @[Mux.scala 80:57]
    node _T_43 = eq(UInt<3>("h06"), _T_22) @[Mux.scala 80:60]
    node _T_44 = mux(_T_43, _T_28, _T_42) @[Mux.scala 80:57]
    node _T_45 = eq(UInt<3>("h07"), _T_22) @[Mux.scala 80:60]
    node _T_46 = mux(_T_45, _T_29, _T_44) @[Mux.scala 80:57]
    node _T_47 = eq(UInt<4>("h0d"), _T_22) @[Mux.scala 80:60]
    node res = mux(_T_47, _T_32, _T_46) @[Mux.scala 80:57]
    node _T_48 = bits(io.in.bits.func, 5, 5) @[ALU.scala 44:34]
    node _T_49 = bits(res, 31, 0) @[ALU.scala 107:57]
    node _T_50 = bits(_T_49, 31, 31) @[BitUtils.scala 39:20]
    node _T_51 = bits(_T_50, 0, 0) @[Bitwise.scala 72:15]
    node _T_52 = mux(_T_51, UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 72:12]
    node _T_53 = cat(_T_52, _T_49) @[Cat.scala 29:58]
    node aluRes = mux(_T_48, _T_53, res) @[ALU.scala 107:19]
    node _T_54 = orr(xorRes) @[ALU.scala 110:56]
    node _T_55 = eq(_T_54, UInt<1>("h00")) @[ALU.scala 110:48]
    node _T_56 = bits(io.in.bits.func, 3, 3) @[ALU.scala 62:35]
    node isBranch = eq(_T_56, UInt<1>("h00")) @[ALU.scala 62:30]
    node isBru = bits(io.in.bits.func, 4, 4) @[ALU.scala 61:31]
    node _T_57 = bits(io.in.bits.func, 2, 1) @[ALU.scala 64:39]
    node _T_58 = eq(UInt<2>("h00"), _T_57) @[LookupTree.scala 24:34]
    node _T_59 = eq(UInt<2>("h02"), _T_57) @[LookupTree.scala 24:34]
    node _T_60 = eq(UInt<2>("h03"), _T_57) @[LookupTree.scala 24:34]
    node _T_61 = mux(_T_58, _T_55, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_62 = mux(_T_59, slt, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_63 = mux(_T_60, sltu, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_64 = or(_T_61, _T_62) @[Mux.scala 27:72]
    node _T_65 = or(_T_64, _T_63) @[Mux.scala 27:72]
    wire _T_66 : UInt<1> @[Mux.scala 27:72]
    _T_66 <= _T_65 @[Mux.scala 27:72]
    node _T_67 = bits(io.in.bits.func, 0, 0) @[ALU.scala 65:40]
    node taken = xor(_T_66, _T_67) @[ALU.scala 117:72]
    node _T_68 = add(io.cfIn.pc, io.offset) @[ALU.scala 118:41]
    node _T_69 = tail(_T_68, 1) @[ALU.scala 118:41]
    node _T_70 = mux(isBranch, _T_69, adderRes) @[ALU.scala 118:19]
    node target = bits(_T_70, 38, 0) @[ALU.scala 118:63]
    node _T_71 = eq(taken, UInt<1>("h00")) @[ALU.scala 119:26]
    node _T_72 = and(_T_71, isBranch) @[ALU.scala 119:33]
    node _T_73 = bits(io.cfIn.brIdx, 0, 0) @[ALU.scala 119:59]
    node _T_74 = bits(io.cfIn.brIdx, 0, 0) @[ALU.scala 119:78]
    node _T_75 = eq(_T_74, UInt<1>("h00")) @[ALU.scala 119:64]
    node _T_76 = neq(io.redirect.target, io.cfIn.pnpc) @[ALU.scala 119:105]
    node _T_77 = or(_T_75, _T_76) @[ALU.scala 119:82]
    node predictWrong = mux(_T_72, _T_73, _T_77) @[ALU.scala 119:25]
    node _T_78 = bits(io.cfIn.instr, 1, 0) @[ALU.scala 120:29]
    node isRVC = neq(_T_78, UInt<2>("h03")) @[ALU.scala 120:35]
    node _T_79 = bits(io.cfIn.instr, 1, 0) @[ALU.scala 121:23]
    node _T_80 = eq(_T_79, UInt<2>("h03")) @[ALU.scala 121:29]
    node _T_81 = or(_T_80, isRVC) @[ALU.scala 121:41]
    node _T_82 = eq(io.in.valid, UInt<1>("h00")) @[ALU.scala 121:53]
    node _T_83 = or(_T_81, _T_82) @[ALU.scala 121:50]
    node _T_84 = asUInt(reset) @[ALU.scala 121:9]
    node _T_85 = or(_T_83, _T_84) @[ALU.scala 121:9]
    node _T_86 = eq(_T_85, UInt<1>("h00")) @[ALU.scala 121:9]
    when _T_86 : @[ALU.scala 121:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at ALU.scala:121 assert(io.cfIn.instr(1,0) === \"b11\".U || isRVC || !valid)\n") @[ALU.scala 121:9]
      stop(clock, UInt<1>(1), 1) @[ALU.scala 121:9]
      skip @[ALU.scala 121:9]
    node _T_87 = bits(io.cfIn.instr, 1, 0) @[ALU.scala 122:32]
    node _T_88 = eq(_T_87, UInt<2>("h03")) @[ALU.scala 122:38]
    node _T_89 = eq(isRVC, UInt<1>("h00")) @[ALU.scala 122:55]
    node _T_90 = neq(_T_88, _T_89) @[ALU.scala 122:51]
    node _T_91 = and(io.in.valid, _T_90) @[ALU.scala 122:15]
    reg _T_92 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_93 = add(_T_92, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_94 = tail(_T_93, 1) @[GTimer.scala 25:12]
    _T_92 <= _T_94 @[GTimer.scala 25:7]
    wire _T_95 : UInt<1>
    _T_95 <= UInt<1>("h00")
    node _T_96 = and(_T_91, _T_95) @[Debug.scala 55:16]
    when _T_96 : @[Debug.scala 55:31]
      node _T_97 = asUInt(reset) @[Debug.scala 56:24]
      node _T_98 = eq(_T_97, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_98 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] ALU: ", _T_92) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_99 = asUInt(reset) @[Debug.scala 57:13]
      node _T_100 = eq(_T_99, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_100 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[ERROR] pc %x inst %x rvc %x\n", io.cfIn.pc, io.cfIn.instr, isRVC) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_101 = eq(taken, UInt<1>("h00")) @[ALU.scala 123:29]
    node _T_102 = and(_T_101, isBranch) @[ALU.scala 123:36]
    node _T_103 = add(io.cfIn.pc, UInt<2>("h02")) @[ALU.scala 123:71]
    node _T_104 = tail(_T_103, 1) @[ALU.scala 123:71]
    node _T_105 = add(io.cfIn.pc, UInt<3>("h04")) @[ALU.scala 123:89]
    node _T_106 = tail(_T_105, 1) @[ALU.scala 123:89]
    node _T_107 = mux(isRVC, _T_104, _T_106) @[ALU.scala 123:52]
    node _T_108 = mux(_T_102, _T_107, target) @[ALU.scala 123:28]
    io.redirect.target <= _T_108 @[ALU.scala 123:22]
    node _T_109 = and(io.in.valid, isBru) @[ALU.scala 125:30]
    node _T_110 = and(_T_109, predictWrong) @[ALU.scala 125:39]
    io.redirect.valid <= _T_110 @[ALU.scala 125:21]
    io.redirect.rtype <= UInt<1>("h00") @[ALU.scala 127:21]
    node _T_111 = eq(isRVC, UInt<1>("h00")) @[ALU.scala 131:33]
    node _T_112 = bits(io.cfIn.pc, 38, 38) @[BitUtils.scala 39:20]
    node _T_113 = bits(_T_112, 0, 0) @[Bitwise.scala 72:15]
    node _T_114 = mux(_T_113, UInt<25>("h01ffffff"), UInt<25>("h00")) @[Bitwise.scala 72:12]
    node _T_115 = cat(_T_114, io.cfIn.pc) @[Cat.scala 29:58]
    node _T_116 = add(_T_115, UInt<3>("h04")) @[ALU.scala 131:71]
    node _T_117 = tail(_T_116, 1) @[ALU.scala 131:71]
    node _T_118 = bits(io.cfIn.pc, 38, 38) @[BitUtils.scala 39:20]
    node _T_119 = bits(_T_118, 0, 0) @[Bitwise.scala 72:15]
    node _T_120 = mux(_T_119, UInt<25>("h01ffffff"), UInt<25>("h00")) @[Bitwise.scala 72:12]
    node _T_121 = cat(_T_120, io.cfIn.pc) @[Cat.scala 29:58]
    node _T_122 = add(_T_121, UInt<2>("h02")) @[ALU.scala 131:108]
    node _T_123 = tail(_T_122, 1) @[ALU.scala 131:108]
    node _T_124 = mux(_T_111, _T_117, _T_123) @[ALU.scala 131:32]
    node _T_125 = mux(isBru, _T_124, aluRes) @[ALU.scala 131:21]
    io.out.bits <= _T_125 @[ALU.scala 131:15]
    node _T_126 = and(io.in.valid, isBru) @[ALU.scala 133:15]
    reg _T_127 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_128 = add(_T_127, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_129 = tail(_T_128, 1) @[GTimer.scala 25:12]
    _T_127 <= _T_129 @[GTimer.scala 25:7]
    wire _T_130 : UInt<1>
    _T_130 <= UInt<1>("h00")
    node _T_131 = and(_T_126, _T_130) @[Debug.scala 55:16]
    when _T_131 : @[Debug.scala 55:31]
      node _T_132 = asUInt(reset) @[Debug.scala 56:24]
      node _T_133 = eq(_T_132, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_133 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] ALU: ", _T_127) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_134 = asUInt(reset) @[Debug.scala 57:13]
      node _T_135 = eq(_T_134, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_135 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "tgt %x, valid:%d, npc: %x, pdwrong: %x\n", io.redirect.target, io.redirect.valid, io.cfIn.pnpc, predictWrong) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_136 = and(io.in.valid, isBru) @[ALU.scala 134:15]
    reg _T_137 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_138 = add(_T_137, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_139 = tail(_T_138, 1) @[GTimer.scala 25:12]
    _T_137 <= _T_139 @[GTimer.scala 25:7]
    wire _T_140 : UInt<1>
    _T_140 <= UInt<1>("h00")
    node _T_141 = and(_T_136, _T_140) @[Debug.scala 55:16]
    when _T_141 : @[Debug.scala 55:31]
      node _T_142 = asUInt(reset) @[Debug.scala 56:24]
      node _T_143 = eq(_T_142, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_143 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] ALU: ", _T_137) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_144 = asUInt(reset) @[Debug.scala 57:13]
      node _T_145 = eq(_T_144, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_145 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "taken:%d addrRes:%x src1:%x src2:%x func:%x\n", taken, adderRes, io.in.bits.src1, io.in.bits.src2, io.in.bits.func) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_146 = and(io.in.valid, isBru) @[ALU.scala 135:15]
    node _T_147 = eq(io.in.bits.func, UInt<7>("h058")) @[ALU.scala 135:162]
    node _T_148 = eq(io.in.bits.func, UInt<7>("h05c")) @[ALU.scala 135:188]
    node _T_149 = or(_T_147, _T_148) @[ALU.scala 135:180]
    node _T_150 = eq(io.in.bits.func, UInt<7>("h05a")) @[ALU.scala 135:214]
    node _T_151 = eq(io.in.bits.func, UInt<7>("h05e")) @[ALU.scala 135:239]
    reg _T_152 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_153 = add(_T_152, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_154 = tail(_T_153, 1) @[GTimer.scala 25:12]
    _T_152 <= _T_154 @[GTimer.scala 25:7]
    wire _T_155 : UInt<1>
    _T_155 <= UInt<1>("h00")
    node _T_156 = and(_T_146, _T_155) @[Debug.scala 55:16]
    when _T_156 : @[Debug.scala 55:31]
      node _T_157 = asUInt(reset) @[Debug.scala 56:24]
      node _T_158 = eq(_T_157, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_158 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] ALU: ", _T_152) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_159 = asUInt(reset) @[Debug.scala 57:13]
      node _T_160 = eq(_T_159, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_160 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[BPW] pc %x tgt %x, npc: %x, pdwrong: %x type: %x%x%x%x\n", io.cfIn.pc, io.redirect.target, io.cfIn.pnpc, predictWrong, isBranch, _T_149, _T_150, _T_151) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    reg _T_161 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_162 = add(_T_161, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_163 = tail(_T_162, 1) @[GTimer.scala 25:12]
    _T_161 <= _T_163 @[GTimer.scala 25:7]
    wire _T_164 : UInt<1>
    _T_164 <= UInt<1>("h00")
    node _T_165 = and(UInt<1>("h01"), _T_164) @[Debug.scala 55:16]
    when _T_165 : @[Debug.scala 55:31]
      node _T_166 = asUInt(reset) @[Debug.scala 56:24]
      node _T_167 = eq(_T_166, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_167 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] ALU: ", _T_161) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_168 = asUInt(reset) @[Debug.scala 57:13]
      node _T_169 = eq(_T_168, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_169 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "valid:%d isBru:%d isBranch:%d \n", io.in.valid, isBru, isBranch) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_170 = and(io.in.valid, isBru) @[ALU.scala 142:15]
    node _T_171 = and(io.in.valid, isBru) @[ALU.scala 142:147]
    node _T_172 = eq(UInt<5>("h010"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_173 = eq(UInt<5>("h011"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_174 = eq(UInt<5>("h014"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_175 = eq(UInt<5>("h015"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_176 = eq(UInt<5>("h016"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_177 = eq(UInt<5>("h017"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_178 = eq(UInt<7>("h05c"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_179 = eq(UInt<7>("h05e"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_180 = eq(UInt<7>("h058"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_181 = eq(UInt<7>("h05a"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_182 = mux(_T_172, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_183 = mux(_T_173, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_184 = mux(_T_174, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_185 = mux(_T_175, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_186 = mux(_T_176, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_187 = mux(_T_177, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_188 = mux(_T_178, UInt<1>("h01"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_189 = mux(_T_179, UInt<2>("h03"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_190 = mux(_T_180, UInt<1>("h01"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_191 = mux(_T_181, UInt<2>("h02"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_192 = or(_T_182, _T_183) @[Mux.scala 27:72]
    node _T_193 = or(_T_192, _T_184) @[Mux.scala 27:72]
    node _T_194 = or(_T_193, _T_185) @[Mux.scala 27:72]
    node _T_195 = or(_T_194, _T_186) @[Mux.scala 27:72]
    node _T_196 = or(_T_195, _T_187) @[Mux.scala 27:72]
    node _T_197 = or(_T_196, _T_188) @[Mux.scala 27:72]
    node _T_198 = or(_T_197, _T_189) @[Mux.scala 27:72]
    node _T_199 = or(_T_198, _T_190) @[Mux.scala 27:72]
    node _T_200 = or(_T_199, _T_191) @[Mux.scala 27:72]
    wire _T_201 : UInt<2> @[Mux.scala 27:72]
    _T_201 <= _T_200 @[Mux.scala 27:72]
    reg _T_202 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_203 = add(_T_202, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_204 = tail(_T_203, 1) @[GTimer.scala 25:12]
    _T_202 <= _T_204 @[GTimer.scala 25:7]
    wire _T_205 : UInt<1>
    _T_205 <= UInt<1>("h00")
    node _T_206 = and(_T_170, _T_205) @[Debug.scala 55:16]
    when _T_206 : @[Debug.scala 55:31]
      node _T_207 = asUInt(reset) @[Debug.scala 56:24]
      node _T_208 = eq(_T_207, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_208 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] ALU: ", _T_202) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_209 = asUInt(reset) @[Debug.scala 57:13]
      node _T_210 = eq(_T_209, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_210 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), " bpuUpdateReq: valid:%d pc:%x isMissPredict:%d actualTarget:%x actualTaken:%x fuOpType:%x btbType:%x isRVC:%d \n", _T_171, io.cfIn.pc, predictWrong, target, taken, io.in.bits.func, _T_201, isRVC) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    io.in.ready <= io.out.ready @[ALU.scala 144:15]
    io.out.valid <= io.in.valid @[ALU.scala 145:16]
    wire _T_211 : {valid : UInt<1>, pc : UInt<39>, isMissPredict : UInt<1>, actualTarget : UInt<39>, actualTaken : UInt<1>, fuOpType : UInt<7>, btbType : UInt<2>, isRVC : UInt<1>} @[ALU.scala 147:43]
    _T_211.isRVC <= UInt<1>("h00") @[ALU.scala 147:43]
    _T_211.btbType <= UInt<2>("h00") @[ALU.scala 147:43]
    _T_211.fuOpType <= UInt<7>("h00") @[ALU.scala 147:43]
    _T_211.actualTaken <= UInt<1>("h00") @[ALU.scala 147:43]
    _T_211.actualTarget <= UInt<39>("h00") @[ALU.scala 147:43]
    _T_211.isMissPredict <= UInt<1>("h00") @[ALU.scala 147:43]
    _T_211.pc <= UInt<39>("h00") @[ALU.scala 147:43]
    _T_211.valid <= UInt<1>("h00") @[ALU.scala 147:43]
    wire bpuUpdateReq : {valid : UInt<1>, pc : UInt<39>, isMissPredict : UInt<1>, actualTarget : UInt<39>, actualTaken : UInt<1>, fuOpType : UInt<7>, btbType : UInt<2>, isRVC : UInt<1>}
    bpuUpdateReq.isRVC <= _T_211.isRVC
    bpuUpdateReq.btbType <= _T_211.btbType
    bpuUpdateReq.fuOpType <= _T_211.fuOpType
    bpuUpdateReq.actualTaken <= _T_211.actualTaken
    bpuUpdateReq.actualTarget <= _T_211.actualTarget
    bpuUpdateReq.isMissPredict <= _T_211.isMissPredict
    bpuUpdateReq.pc <= _T_211.pc
    bpuUpdateReq.valid <= _T_211.valid
    node _T_212 = and(io.in.valid, isBru) @[ALU.scala 148:31]
    bpuUpdateReq.valid <= _T_212 @[ALU.scala 148:22]
    bpuUpdateReq.pc <= io.cfIn.pc @[ALU.scala 149:19]
    bpuUpdateReq.isMissPredict <= predictWrong @[ALU.scala 150:30]
    bpuUpdateReq.actualTarget <= target @[ALU.scala 151:29]
    bpuUpdateReq.actualTaken <= taken @[ALU.scala 152:28]
    bpuUpdateReq.fuOpType <= io.in.bits.func @[ALU.scala 153:25]
    node _T_213 = eq(UInt<5>("h010"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_214 = eq(UInt<5>("h011"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_215 = eq(UInt<5>("h014"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_216 = eq(UInt<5>("h015"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_217 = eq(UInt<5>("h016"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_218 = eq(UInt<5>("h017"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_219 = eq(UInt<7>("h05c"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_220 = eq(UInt<7>("h05e"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_221 = eq(UInt<7>("h058"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_222 = eq(UInt<7>("h05a"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_223 = mux(_T_213, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_224 = mux(_T_214, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_225 = mux(_T_215, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_226 = mux(_T_216, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_227 = mux(_T_217, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_228 = mux(_T_218, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_229 = mux(_T_219, UInt<1>("h01"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_230 = mux(_T_220, UInt<2>("h03"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_231 = mux(_T_221, UInt<1>("h01"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_232 = mux(_T_222, UInt<2>("h02"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_233 = or(_T_223, _T_224) @[Mux.scala 27:72]
    node _T_234 = or(_T_233, _T_225) @[Mux.scala 27:72]
    node _T_235 = or(_T_234, _T_226) @[Mux.scala 27:72]
    node _T_236 = or(_T_235, _T_227) @[Mux.scala 27:72]
    node _T_237 = or(_T_236, _T_228) @[Mux.scala 27:72]
    node _T_238 = or(_T_237, _T_229) @[Mux.scala 27:72]
    node _T_239 = or(_T_238, _T_230) @[Mux.scala 27:72]
    node _T_240 = or(_T_239, _T_231) @[Mux.scala 27:72]
    node _T_241 = or(_T_240, _T_232) @[Mux.scala 27:72]
    wire _T_242 : UInt<2> @[Mux.scala 27:72]
    _T_242 <= _T_241 @[Mux.scala 27:72]
    bpuUpdateReq.btbType <= _T_242 @[ALU.scala 154:24]
    bpuUpdateReq.isRVC <= isRVC @[ALU.scala 155:22]
    reg _T_243 : {valid : UInt<1>, pc : UInt<39>, isMissPredict : UInt<1>, actualTarget : UInt<39>, actualTaken : UInt<1>, fuOpType : UInt<7>, btbType : UInt<2>, isRVC : UInt<1>}, clock @[ALU.scala 158:34]
    _T_243.isRVC <= bpuUpdateReq.isRVC @[ALU.scala 158:34]
    _T_243.btbType <= bpuUpdateReq.btbType @[ALU.scala 158:34]
    _T_243.fuOpType <= bpuUpdateReq.fuOpType @[ALU.scala 158:34]
    _T_243.actualTaken <= bpuUpdateReq.actualTaken @[ALU.scala 158:34]
    _T_243.actualTarget <= bpuUpdateReq.actualTarget @[ALU.scala 158:34]
    _T_243.isMissPredict <= bpuUpdateReq.isMissPredict @[ALU.scala 158:34]
    _T_243.pc <= bpuUpdateReq.pc @[ALU.scala 158:34]
    _T_243.valid <= bpuUpdateReq.valid @[ALU.scala 158:34]
    node _T_244 = and(io.in.valid, isBru) @[ALU.scala 160:23]
    node _T_245 = eq(predictWrong, UInt<1>("h00")) @[ALU.scala 160:35]
    node _T_246 = and(_T_244, _T_245) @[ALU.scala 160:32]
    node _T_247 = and(io.in.valid, isBru) @[ALU.scala 161:23]
    node _T_248 = and(_T_247, predictWrong) @[ALU.scala 161:32]
    node _T_249 = and(_T_246, isBranch) @[ALU.scala 162:33]
    node _T_250 = and(_T_248, isBranch) @[ALU.scala 163:33]
    node _T_251 = and(_T_248, isBranch) @[ALU.scala 164:33]
    node _T_252 = bits(io.cfIn.pc, 2, 0) @[ALU.scala 164:58]
    node _T_253 = eq(_T_252, UInt<1>("h00")) @[ALU.scala 164:63]
    node _T_254 = and(_T_251, _T_253) @[ALU.scala 164:45]
    node _T_255 = and(_T_254, isRVC) @[ALU.scala 164:73]
    node _T_256 = and(_T_248, isBranch) @[ALU.scala 165:33]
    node _T_257 = bits(io.cfIn.pc, 2, 0) @[ALU.scala 165:58]
    node _T_258 = eq(_T_257, UInt<1>("h00")) @[ALU.scala 165:63]
    node _T_259 = and(_T_256, _T_258) @[ALU.scala 165:45]
    node _T_260 = eq(isRVC, UInt<1>("h00")) @[ALU.scala 165:76]
    node _T_261 = and(_T_259, _T_260) @[ALU.scala 165:73]
    node _T_262 = and(_T_248, isBranch) @[ALU.scala 166:33]
    node _T_263 = bits(io.cfIn.pc, 2, 0) @[ALU.scala 166:58]
    node _T_264 = eq(_T_263, UInt<2>("h02")) @[ALU.scala 166:63]
    node _T_265 = and(_T_262, _T_264) @[ALU.scala 166:45]
    node _T_266 = and(_T_265, isRVC) @[ALU.scala 166:73]
    node _T_267 = and(_T_248, isBranch) @[ALU.scala 167:33]
    node _T_268 = bits(io.cfIn.pc, 2, 0) @[ALU.scala 167:58]
    node _T_269 = eq(_T_268, UInt<2>("h02")) @[ALU.scala 167:63]
    node _T_270 = and(_T_267, _T_269) @[ALU.scala 167:45]
    node _T_271 = eq(isRVC, UInt<1>("h00")) @[ALU.scala 167:76]
    node _T_272 = and(_T_270, _T_271) @[ALU.scala 167:73]
    node _T_273 = and(_T_248, isBranch) @[ALU.scala 168:33]
    node _T_274 = bits(io.cfIn.pc, 2, 0) @[ALU.scala 168:58]
    node _T_275 = eq(_T_274, UInt<3>("h04")) @[ALU.scala 168:63]
    node _T_276 = and(_T_273, _T_275) @[ALU.scala 168:45]
    node _T_277 = and(_T_276, isRVC) @[ALU.scala 168:73]
    node _T_278 = and(_T_248, isBranch) @[ALU.scala 169:33]
    node _T_279 = bits(io.cfIn.pc, 2, 0) @[ALU.scala 169:58]
    node _T_280 = eq(_T_279, UInt<3>("h04")) @[ALU.scala 169:63]
    node _T_281 = and(_T_278, _T_280) @[ALU.scala 169:45]
    node _T_282 = eq(isRVC, UInt<1>("h00")) @[ALU.scala 169:76]
    node _T_283 = and(_T_281, _T_282) @[ALU.scala 169:73]
    node _T_284 = and(_T_248, isBranch) @[ALU.scala 170:33]
    node _T_285 = bits(io.cfIn.pc, 2, 0) @[ALU.scala 170:58]
    node _T_286 = eq(_T_285, UInt<3>("h06")) @[ALU.scala 170:63]
    node _T_287 = and(_T_284, _T_286) @[ALU.scala 170:45]
    node _T_288 = and(_T_287, isRVC) @[ALU.scala 170:73]
    node _T_289 = and(_T_248, isBranch) @[ALU.scala 171:33]
    node _T_290 = bits(io.cfIn.pc, 2, 0) @[ALU.scala 171:58]
    node _T_291 = eq(_T_290, UInt<3>("h06")) @[ALU.scala 171:63]
    node _T_292 = and(_T_289, _T_291) @[ALU.scala 171:45]
    node _T_293 = eq(isRVC, UInt<1>("h00")) @[ALU.scala 171:76]
    node _T_294 = and(_T_292, _T_293) @[ALU.scala 171:73]
    node _T_295 = eq(io.in.bits.func, UInt<7>("h058")) @[ALU.scala 172:42]
    node _T_296 = eq(io.in.bits.func, UInt<7>("h05c")) @[ALU.scala 172:68]
    node _T_297 = or(_T_295, _T_296) @[ALU.scala 172:60]
    node _T_298 = and(_T_246, _T_297) @[ALU.scala 172:33]
    node _T_299 = eq(io.in.bits.func, UInt<7>("h058")) @[ALU.scala 173:42]
    node _T_300 = eq(io.in.bits.func, UInt<7>("h05c")) @[ALU.scala 173:68]
    node _T_301 = or(_T_299, _T_300) @[ALU.scala 173:60]
    node _T_302 = and(_T_248, _T_301) @[ALU.scala 173:33]
    node _T_303 = eq(io.in.bits.func, UInt<7>("h05a")) @[ALU.scala 174:41]
    node _T_304 = and(_T_246, _T_303) @[ALU.scala 174:33]
    node _T_305 = eq(io.in.bits.func, UInt<7>("h05a")) @[ALU.scala 175:41]
    node _T_306 = and(_T_248, _T_305) @[ALU.scala 175:33]
    node _T_307 = eq(io.in.bits.func, UInt<7>("h05e")) @[ALU.scala 176:41]
    node _T_308 = and(_T_246, _T_307) @[ALU.scala 176:33]
    node _T_309 = eq(io.in.bits.func, UInt<7>("h05e")) @[ALU.scala 177:41]
    node _T_310 = and(_T_248, _T_309) @[ALU.scala 177:33]
    
  module LSExecUnit : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {src1 : UInt<64>, src2 : UInt<64>, func : UInt<7>}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, flip wdata : UInt<64>, flip instr : UInt<32>, dmem : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<39>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}, isMMIO : UInt<1>, dtlbPF : UInt<1>, loadAddrMisaligned : UInt<1>, storeAddrMisaligned : UInt<1>}
    
    reg addrLatch : UInt, clock @[UnpipelinedLSU.scala 333:26]
    addrLatch <= io.in.bits.src1 @[UnpipelinedLSU.scala 333:26]
    node _T = bits(io.in.bits.func, 3, 3) @[LSU.scala 55:39]
    node isStore = and(io.in.valid, _T) @[UnpipelinedLSU.scala 334:23]
    node _T_1 = eq(isStore, UInt<1>("h00")) @[UnpipelinedLSU.scala 335:21]
    node _T_2 = neq(io.in.bits.func, UInt<2>("h03")) @[UnpipelinedLSU.scala 335:39]
    node partialLoad = and(_T_1, _T_2) @[UnpipelinedLSU.scala 335:30]
    reg state : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[UnpipelinedLSU.scala 338:22]
    wire dtlbFinish : UInt<1>
    dtlbFinish <= UInt<1>("h00")
    wire dtlbPF : UInt<1>
    dtlbPF <= UInt<1>("h00")
    wire dtlbEnable : UInt<1>
    dtlbEnable <= UInt<1>("h00")
    io.dtlbPF <= dtlbPF @[UnpipelinedLSU.scala 349:13]
    node _T_3 = eq(UInt<2>("h00"), state) @[Conditional.scala 37:30]
    when _T_3 : @[Conditional.scala 40:58]
      node _T_4 = and(io.dmem.req.ready, io.dmem.req.valid) @[Decoupled.scala 40:37]
      node _T_5 = and(_T_4, dtlbEnable) @[UnpipelinedLSU.scala 353:29]
      when _T_5 : @[UnpipelinedLSU.scala 353:45]
        state <= UInt<2>("h01") @[UnpipelinedLSU.scala 353:53]
        skip @[UnpipelinedLSU.scala 353:45]
      node _T_6 = and(io.dmem.req.ready, io.dmem.req.valid) @[Decoupled.scala 40:37]
      node _T_7 = eq(dtlbEnable, UInt<1>("h00")) @[UnpipelinedLSU.scala 354:32]
      node _T_8 = and(_T_6, _T_7) @[UnpipelinedLSU.scala 354:29]
      when _T_8 : @[UnpipelinedLSU.scala 354:45]
        state <= UInt<2>("h02") @[UnpipelinedLSU.scala 354:53]
        skip @[UnpipelinedLSU.scala 354:45]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_9 = eq(UInt<2>("h01"), state) @[Conditional.scala 37:30]
      when _T_9 : @[Conditional.scala 39:67]
        node _T_10 = and(dtlbFinish, dtlbPF) @[UnpipelinedLSU.scala 358:24]
        when _T_10 : @[UnpipelinedLSU.scala 358:36]
          state <= UInt<2>("h00") @[UnpipelinedLSU.scala 358:44]
          skip @[UnpipelinedLSU.scala 358:36]
        node _T_11 = eq(dtlbPF, UInt<1>("h00")) @[UnpipelinedLSU.scala 359:27]
        node _T_12 = and(dtlbFinish, _T_11) @[UnpipelinedLSU.scala 359:24]
        when _T_12 : @[UnpipelinedLSU.scala 359:36]
          state <= UInt<2>("h02") @[UnpipelinedLSU.scala 359:44]
          skip @[UnpipelinedLSU.scala 359:36]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_13 = eq(UInt<2>("h02"), state) @[Conditional.scala 37:30]
        when _T_13 : @[Conditional.scala 39:67]
          node _T_14 = and(io.dmem.resp.ready, io.dmem.resp.valid) @[Decoupled.scala 40:37]
          when _T_14 : @[UnpipelinedLSU.scala 361:48]
            node _T_15 = mux(partialLoad, UInt<2>("h03"), UInt<2>("h00")) @[UnpipelinedLSU.scala 361:62]
            state <= _T_15 @[UnpipelinedLSU.scala 361:56]
            skip @[UnpipelinedLSU.scala 361:48]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_16 = eq(UInt<2>("h03"), state) @[Conditional.scala 37:30]
          when _T_16 : @[Conditional.scala 39:67]
            state <= UInt<2>("h00") @[UnpipelinedLSU.scala 362:32]
            skip @[Conditional.scala 39:67]
    node _T_17 = and(io.dmem.req.ready, io.dmem.req.valid) @[Decoupled.scala 40:37]
    node _T_18 = bits(io.in.bits.func, 1, 0) @[UnpipelinedLSU.scala 365:85]
    reg _T_19 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_20 = add(_T_19, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_21 = tail(_T_20, 1) @[GTimer.scala 25:12]
    _T_19 <= _T_21 @[GTimer.scala 25:7]
    wire _T_22 : UInt<1>
    _T_22 <= UInt<1>("h00")
    node _T_23 = and(_T_17, _T_22) @[Debug.scala 55:16]
    when _T_23 : @[Debug.scala 55:31]
      node _T_24 = asUInt(reset) @[Debug.scala 56:24]
      node _T_25 = eq(_T_24, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_25 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] LSExecUnit: ", _T_19) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_26 = asUInt(reset) @[Debug.scala 57:13]
      node _T_27 = eq(_T_26, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_27 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[LSU] %x, size %x, wdata_raw %x, isStore %x\n", io.in.bits.src1, _T_18, io.wdata, isStore) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_28 = and(io.dmem.req.ready, io.dmem.req.valid) @[Decoupled.scala 40:37]
    node _T_29 = and(io.dmem.req.ready, io.dmem.req.valid) @[Decoupled.scala 40:37]
    node _T_30 = and(io.dmem.resp.ready, io.dmem.resp.valid) @[Decoupled.scala 40:37]
    reg _T_31 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_32 = add(_T_31, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_33 = tail(_T_32, 1) @[GTimer.scala 25:12]
    _T_31 <= _T_33 @[GTimer.scala 25:7]
    wire _T_34 : UInt<1>
    _T_34 <= UInt<1>("h00")
    node _T_35 = and(_T_28, _T_34) @[Debug.scala 55:16]
    when _T_35 : @[Debug.scala 55:31]
      node _T_36 = asUInt(reset) @[Debug.scala 56:24]
      node _T_37 = eq(_T_36, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_37 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] LSExecUnit: ", _T_31) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_38 = asUInt(reset) @[Debug.scala 57:13]
      node _T_39 = eq(_T_38, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_39 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[LSU] dtlbFinish:%d dtlbEnable:%d dtlbPF:%d state:%d addr:%x dmemReqFire:%d dmemRespFire:%d dmemRdata:%x\n", dtlbFinish, dtlbEnable, dtlbPF, state, io.dmem.req.bits.addr, _T_29, _T_30, io.dmem.resp.bits.rdata) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_40 = and(dtlbFinish, dtlbEnable) @[UnpipelinedLSU.scala 367:20]
    node _T_41 = and(io.dmem.req.ready, io.dmem.req.valid) @[Decoupled.scala 40:37]
    node _T_42 = and(io.dmem.resp.ready, io.dmem.resp.valid) @[Decoupled.scala 40:37]
    reg _T_43 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_44 = add(_T_43, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_45 = tail(_T_44, 1) @[GTimer.scala 25:12]
    _T_43 <= _T_45 @[GTimer.scala 25:7]
    wire _T_46 : UInt<1>
    _T_46 <= UInt<1>("h00")
    node _T_47 = and(_T_40, _T_46) @[Debug.scala 55:16]
    when _T_47 : @[Debug.scala 55:31]
      node _T_48 = asUInt(reset) @[Debug.scala 56:24]
      node _T_49 = eq(_T_48, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_49 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] LSExecUnit: ", _T_43) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_50 = asUInt(reset) @[Debug.scala 57:13]
      node _T_51 = eq(_T_50, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_51 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[LSU] dtlbFinish:%d dtlbEnable:%d dtlbPF:%d state:%d addr:%x dmemReqFire:%d dmemRespFire:%d dmemRdata:%x\n", dtlbFinish, dtlbEnable, dtlbPF, state, io.dmem.req.bits.addr, _T_41, _T_42, io.dmem.resp.bits.rdata) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node size = bits(io.in.bits.func, 1, 0) @[UnpipelinedLSU.scala 369:18]
    node reqAddr = bits(io.in.bits.src1, 38, 0) @[UnpipelinedLSU.scala 370:68]
    node _T_52 = bits(io.wdata, 7, 0) @[UnpipelinedLSU.scala 310:30]
    node _T_53 = cat(_T_52, _T_52) @[Cat.scala 29:58]
    node _T_54 = cat(_T_53, _T_53) @[Cat.scala 29:58]
    node _T_55 = cat(_T_54, _T_54) @[Cat.scala 29:58]
    node _T_56 = bits(io.wdata, 15, 0) @[UnpipelinedLSU.scala 311:30]
    node _T_57 = cat(_T_56, _T_56) @[Cat.scala 29:58]
    node _T_58 = cat(_T_57, _T_57) @[Cat.scala 29:58]
    node _T_59 = bits(io.wdata, 31, 0) @[UnpipelinedLSU.scala 312:30]
    node _T_60 = cat(_T_59, _T_59) @[Cat.scala 29:58]
    node _T_61 = eq(UInt<1>("h00"), size) @[LookupTree.scala 24:34]
    node _T_62 = eq(UInt<1>("h01"), size) @[LookupTree.scala 24:34]
    node _T_63 = eq(UInt<2>("h02"), size) @[LookupTree.scala 24:34]
    node _T_64 = eq(UInt<2>("h03"), size) @[LookupTree.scala 24:34]
    node _T_65 = mux(_T_61, _T_55, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_66 = mux(_T_62, _T_58, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_67 = mux(_T_63, _T_60, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_68 = mux(_T_64, io.wdata, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_69 = or(_T_65, _T_66) @[Mux.scala 27:72]
    node _T_70 = or(_T_69, _T_67) @[Mux.scala 27:72]
    node _T_71 = or(_T_70, _T_68) @[Mux.scala 27:72]
    wire reqWdata : UInt<64> @[Mux.scala 27:72]
    reqWdata <= _T_71 @[Mux.scala 27:72]
    node _T_72 = eq(UInt<1>("h00"), size) @[LookupTree.scala 24:34]
    node _T_73 = eq(UInt<1>("h01"), size) @[LookupTree.scala 24:34]
    node _T_74 = eq(UInt<2>("h02"), size) @[LookupTree.scala 24:34]
    node _T_75 = eq(UInt<2>("h03"), size) @[LookupTree.scala 24:34]
    node _T_76 = mux(_T_72, UInt<1>("h01"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_77 = mux(_T_73, UInt<2>("h03"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_78 = mux(_T_74, UInt<4>("h0f"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_79 = mux(_T_75, UInt<8>("h0ff"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_80 = or(_T_76, _T_77) @[Mux.scala 27:72]
    node _T_81 = or(_T_80, _T_78) @[Mux.scala 27:72]
    node _T_82 = or(_T_81, _T_79) @[Mux.scala 27:72]
    wire _T_83 : UInt<8> @[Mux.scala 27:72]
    _T_83 <= _T_82 @[Mux.scala 27:72]
    node _T_84 = bits(io.in.bits.src1, 2, 0) @[UnpipelinedLSU.scala 306:15]
    node reqWmask = dshl(_T_83, _T_84) @[UnpipelinedLSU.scala 306:8]
    node _T_85 = mux(isStore, UInt<1>("h01"), UInt<1>("h00")) @[UnpipelinedLSU.scala 378:14]
    io.dmem.req.bits.addr <= reqAddr @[SimpleBus.scala 64:15]
    io.dmem.req.bits.cmd <= _T_85 @[SimpleBus.scala 65:14]
    io.dmem.req.bits.size <= size @[SimpleBus.scala 66:15]
    io.dmem.req.bits.wdata <= reqWdata @[SimpleBus.scala 67:16]
    io.dmem.req.bits.wmask <= reqWmask @[SimpleBus.scala 68:16]
    node _T_86 = eq(state, UInt<2>("h00")) @[UnpipelinedLSU.scala 379:37]
    node _T_87 = and(io.in.valid, _T_86) @[UnpipelinedLSU.scala 379:27]
    node _T_88 = eq(io.loadAddrMisaligned, UInt<1>("h00")) @[UnpipelinedLSU.scala 379:52]
    node _T_89 = and(_T_87, _T_88) @[UnpipelinedLSU.scala 379:49]
    node _T_90 = eq(io.storeAddrMisaligned, UInt<1>("h00")) @[UnpipelinedLSU.scala 379:78]
    node _T_91 = and(_T_89, _T_90) @[UnpipelinedLSU.scala 379:75]
    io.dmem.req.valid <= _T_91 @[UnpipelinedLSU.scala 379:18]
    io.dmem.resp.ready <= UInt<1>("h01") @[UnpipelinedLSU.scala 380:19]
    node _T_92 = neq(state, UInt<2>("h00")) @[UnpipelinedLSU.scala 382:40]
    node _T_93 = and(dtlbPF, _T_92) @[UnpipelinedLSU.scala 382:31]
    node _T_94 = or(_T_93, io.loadAddrMisaligned) @[UnpipelinedLSU.scala 382:51]
    node _T_95 = or(_T_94, io.storeAddrMisaligned) @[UnpipelinedLSU.scala 382:76]
    node _T_96 = eq(state, UInt<2>("h03")) @[UnpipelinedLSU.scala 382:134]
    node _T_97 = and(io.dmem.resp.ready, io.dmem.resp.valid) @[Decoupled.scala 40:37]
    node _T_98 = eq(state, UInt<2>("h02")) @[UnpipelinedLSU.scala 382:180]
    node _T_99 = and(_T_97, _T_98) @[UnpipelinedLSU.scala 382:170]
    node _T_100 = mux(partialLoad, _T_96, _T_99) @[UnpipelinedLSU.scala 382:114]
    node _T_101 = mux(_T_95, UInt<1>("h01"), _T_100) @[UnpipelinedLSU.scala 382:22]
    io.out.valid <= _T_101 @[UnpipelinedLSU.scala 382:16]
    node _T_102 = eq(state, UInt<2>("h00")) @[UnpipelinedLSU.scala 383:25]
    node _T_103 = or(_T_102, dtlbPF) @[UnpipelinedLSU.scala 383:37]
    io.in.ready <= _T_103 @[UnpipelinedLSU.scala 383:15]
    node _T_104 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_105 = and(io.dmem.resp.ready, io.dmem.resp.valid) @[Decoupled.scala 40:37]
    reg _T_106 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_107 = add(_T_106, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_108 = tail(_T_107, 1) @[GTimer.scala 25:12]
    _T_106 <= _T_108 @[GTimer.scala 25:7]
    wire _T_109 : UInt<1>
    _T_109 <= UInt<1>("h00")
    node _T_110 = and(_T_104, _T_109) @[Debug.scala 55:16]
    when _T_110 : @[Debug.scala 55:31]
      node _T_111 = asUInt(reset) @[Debug.scala 56:24]
      node _T_112 = eq(_T_111, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_112 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] LSExecUnit: ", _T_106) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_113 = asUInt(reset) @[Debug.scala 57:13]
      node _T_114 = eq(_T_113, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_114 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[LSU-EXECUNIT] state %x dresp %x dpf %x lm %x sm %x\n", state, _T_105, dtlbPF, io.loadAddrMisaligned, io.storeAddrMisaligned) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    reg rdataLatch : UInt, clock @[UnpipelinedLSU.scala 388:27]
    rdataLatch <= io.dmem.resp.bits.rdata @[UnpipelinedLSU.scala 388:27]
    node _T_115 = bits(addrLatch, 2, 0) @[UnpipelinedLSU.scala 389:40]
    node _T_116 = bits(rdataLatch, 63, 0) @[UnpipelinedLSU.scala 390:27]
    node _T_117 = bits(rdataLatch, 63, 8) @[UnpipelinedLSU.scala 391:27]
    node _T_118 = bits(rdataLatch, 63, 16) @[UnpipelinedLSU.scala 392:27]
    node _T_119 = bits(rdataLatch, 63, 24) @[UnpipelinedLSU.scala 393:27]
    node _T_120 = bits(rdataLatch, 63, 32) @[UnpipelinedLSU.scala 394:27]
    node _T_121 = bits(rdataLatch, 63, 40) @[UnpipelinedLSU.scala 395:27]
    node _T_122 = bits(rdataLatch, 63, 48) @[UnpipelinedLSU.scala 396:27]
    node _T_123 = bits(rdataLatch, 63, 56) @[UnpipelinedLSU.scala 397:27]
    node _T_124 = eq(UInt<1>("h00"), _T_115) @[LookupTree.scala 24:34]
    node _T_125 = eq(UInt<1>("h01"), _T_115) @[LookupTree.scala 24:34]
    node _T_126 = eq(UInt<2>("h02"), _T_115) @[LookupTree.scala 24:34]
    node _T_127 = eq(UInt<2>("h03"), _T_115) @[LookupTree.scala 24:34]
    node _T_128 = eq(UInt<3>("h04"), _T_115) @[LookupTree.scala 24:34]
    node _T_129 = eq(UInt<3>("h05"), _T_115) @[LookupTree.scala 24:34]
    node _T_130 = eq(UInt<3>("h06"), _T_115) @[LookupTree.scala 24:34]
    node _T_131 = eq(UInt<3>("h07"), _T_115) @[LookupTree.scala 24:34]
    node _T_132 = mux(_T_124, _T_116, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_133 = mux(_T_125, _T_117, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_134 = mux(_T_126, _T_118, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_135 = mux(_T_127, _T_119, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_136 = mux(_T_128, _T_120, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_137 = mux(_T_129, _T_121, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_138 = mux(_T_130, _T_122, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_139 = mux(_T_131, _T_123, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_140 = or(_T_132, _T_133) @[Mux.scala 27:72]
    node _T_141 = or(_T_140, _T_134) @[Mux.scala 27:72]
    node _T_142 = or(_T_141, _T_135) @[Mux.scala 27:72]
    node _T_143 = or(_T_142, _T_136) @[Mux.scala 27:72]
    node _T_144 = or(_T_143, _T_137) @[Mux.scala 27:72]
    node _T_145 = or(_T_144, _T_138) @[Mux.scala 27:72]
    node _T_146 = or(_T_145, _T_139) @[Mux.scala 27:72]
    wire rdataSel : UInt<64> @[Mux.scala 27:72]
    rdataSel <= _T_146 @[Mux.scala 27:72]
    node _T_147 = bits(addrLatch, 1, 0) @[UnpipelinedLSU.scala 399:40]
    node _T_148 = bits(rdataLatch, 31, 0) @[UnpipelinedLSU.scala 400:26]
    node _T_149 = bits(rdataLatch, 31, 8) @[UnpipelinedLSU.scala 401:26]
    node _T_150 = bits(rdataLatch, 31, 16) @[UnpipelinedLSU.scala 402:26]
    node _T_151 = bits(rdataLatch, 31, 24) @[UnpipelinedLSU.scala 403:26]
    node _T_152 = eq(UInt<1>("h00"), _T_147) @[LookupTree.scala 24:34]
    node _T_153 = eq(UInt<1>("h01"), _T_147) @[LookupTree.scala 24:34]
    node _T_154 = eq(UInt<2>("h02"), _T_147) @[LookupTree.scala 24:34]
    node _T_155 = eq(UInt<2>("h03"), _T_147) @[LookupTree.scala 24:34]
    node _T_156 = mux(_T_152, _T_148, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_157 = mux(_T_153, _T_149, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_158 = mux(_T_154, _T_150, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_159 = mux(_T_155, _T_151, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_160 = or(_T_156, _T_157) @[Mux.scala 27:72]
    node _T_161 = or(_T_160, _T_158) @[Mux.scala 27:72]
    node _T_162 = or(_T_161, _T_159) @[Mux.scala 27:72]
    wire rdataSel32 : UInt<32> @[Mux.scala 27:72]
    rdataSel32 <= _T_162 @[Mux.scala 27:72]
    node _T_163 = bits(rdataSel, 7, 0) @[UnpipelinedLSU.scala 407:41]
    node _T_164 = bits(_T_163, 7, 7) @[BitUtils.scala 39:20]
    node _T_165 = bits(_T_164, 0, 0) @[Bitwise.scala 72:15]
    node _T_166 = mux(_T_165, UInt<56>("h0ffffffffffffff"), UInt<56>("h00")) @[Bitwise.scala 72:12]
    node _T_167 = cat(_T_166, _T_163) @[Cat.scala 29:58]
    node _T_168 = bits(rdataSel, 15, 0) @[UnpipelinedLSU.scala 408:41]
    node _T_169 = bits(_T_168, 15, 15) @[BitUtils.scala 39:20]
    node _T_170 = bits(_T_169, 0, 0) @[Bitwise.scala 72:15]
    node _T_171 = mux(_T_170, UInt<48>("h0ffffffffffff"), UInt<48>("h00")) @[Bitwise.scala 72:12]
    node _T_172 = cat(_T_171, _T_168) @[Cat.scala 29:58]
    node _T_173 = bits(rdataSel, 31, 0) @[UnpipelinedLSU.scala 409:41]
    node _T_174 = bits(_T_173, 31, 31) @[BitUtils.scala 39:20]
    node _T_175 = bits(_T_174, 0, 0) @[Bitwise.scala 72:15]
    node _T_176 = mux(_T_175, UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 72:12]
    node _T_177 = cat(_T_176, _T_173) @[Cat.scala 29:58]
    node _T_178 = bits(rdataSel, 7, 0) @[UnpipelinedLSU.scala 410:41]
    node _T_179 = cat(UInt<56>("h00"), _T_178) @[Cat.scala 29:58]
    node _T_180 = bits(rdataSel, 15, 0) @[UnpipelinedLSU.scala 411:41]
    node _T_181 = cat(UInt<48>("h00"), _T_180) @[Cat.scala 29:58]
    node _T_182 = bits(rdataSel, 31, 0) @[UnpipelinedLSU.scala 412:41]
    node _T_183 = cat(UInt<32>("h00"), _T_182) @[Cat.scala 29:58]
    node _T_184 = eq(UInt<1>("h00"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_185 = eq(UInt<1>("h01"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_186 = eq(UInt<2>("h02"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_187 = eq(UInt<3>("h04"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_188 = eq(UInt<3>("h05"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_189 = eq(UInt<3>("h06"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_190 = mux(_T_184, _T_167, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_191 = mux(_T_185, _T_172, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_192 = mux(_T_186, _T_177, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_193 = mux(_T_187, _T_179, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_194 = mux(_T_188, _T_181, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_195 = mux(_T_189, _T_183, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_196 = or(_T_190, _T_191) @[Mux.scala 27:72]
    node _T_197 = or(_T_196, _T_192) @[Mux.scala 27:72]
    node _T_198 = or(_T_197, _T_193) @[Mux.scala 27:72]
    node _T_199 = or(_T_198, _T_194) @[Mux.scala 27:72]
    node _T_200 = or(_T_199, _T_195) @[Mux.scala 27:72]
    wire rdataPartialLoad : UInt<64> @[Mux.scala 27:72]
    rdataPartialLoad <= _T_200 @[Mux.scala 27:72]
    node _T_201 = bits(io.in.bits.func, 1, 0) @[UnpipelinedLSU.scala 414:36]
    node _T_202 = bits(io.in.bits.src1, 0, 0) @[UnpipelinedLSU.scala 416:23]
    node _T_203 = eq(_T_202, UInt<1>("h00")) @[UnpipelinedLSU.scala 416:27]
    node _T_204 = bits(io.in.bits.src1, 1, 0) @[UnpipelinedLSU.scala 417:23]
    node _T_205 = eq(_T_204, UInt<1>("h00")) @[UnpipelinedLSU.scala 417:29]
    node _T_206 = bits(io.in.bits.src1, 2, 0) @[UnpipelinedLSU.scala 418:23]
    node _T_207 = eq(_T_206, UInt<1>("h00")) @[UnpipelinedLSU.scala 418:29]
    node _T_208 = eq(UInt<1>("h00"), _T_201) @[LookupTree.scala 24:34]
    node _T_209 = eq(UInt<1>("h01"), _T_201) @[LookupTree.scala 24:34]
    node _T_210 = eq(UInt<2>("h02"), _T_201) @[LookupTree.scala 24:34]
    node _T_211 = eq(UInt<2>("h03"), _T_201) @[LookupTree.scala 24:34]
    node _T_212 = mux(_T_208, UInt<1>("h01"), UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_213 = mux(_T_209, _T_203, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_214 = mux(_T_210, _T_205, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_215 = mux(_T_211, _T_207, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_216 = or(_T_212, _T_213) @[Mux.scala 27:72]
    node _T_217 = or(_T_216, _T_214) @[Mux.scala 27:72]
    node _T_218 = or(_T_217, _T_215) @[Mux.scala 27:72]
    wire addrAligned : UInt<1> @[Mux.scala 27:72]
    addrAligned <= _T_218 @[Mux.scala 27:72]
    node _T_219 = bits(io.dmem.resp.bits.rdata, 63, 0) @[UnpipelinedLSU.scala 421:58]
    node _T_220 = mux(partialLoad, rdataPartialLoad, _T_219) @[UnpipelinedLSU.scala 421:21]
    io.out.bits <= _T_220 @[UnpipelinedLSU.scala 421:15]
    io.isMMIO is invalid @[UnpipelinedLSU.scala 423:13]
    wire isAMO : UInt<1>
    isAMO <= UInt<1>("h00")
    node _T_221 = eq(isStore, UInt<1>("h00")) @[UnpipelinedLSU.scala 429:38]
    node _T_222 = and(io.in.valid, _T_221) @[UnpipelinedLSU.scala 429:35]
    node _T_223 = eq(isAMO, UInt<1>("h00")) @[UnpipelinedLSU.scala 429:50]
    node _T_224 = and(_T_222, _T_223) @[UnpipelinedLSU.scala 429:47]
    node _T_225 = eq(addrAligned, UInt<1>("h00")) @[UnpipelinedLSU.scala 429:60]
    node _T_226 = and(_T_224, _T_225) @[UnpipelinedLSU.scala 429:57]
    io.loadAddrMisaligned <= _T_226 @[UnpipelinedLSU.scala 429:25]
    node _T_227 = or(isStore, isAMO) @[UnpipelinedLSU.scala 430:47]
    node _T_228 = and(io.in.valid, _T_227) @[UnpipelinedLSU.scala 430:35]
    node _T_229 = eq(addrAligned, UInt<1>("h00")) @[UnpipelinedLSU.scala 430:60]
    node _T_230 = and(_T_228, _T_229) @[UnpipelinedLSU.scala 430:57]
    io.storeAddrMisaligned <= _T_230 @[UnpipelinedLSU.scala 430:26]
    node _T_231 = or(io.loadAddrMisaligned, io.storeAddrMisaligned) @[UnpipelinedLSU.scala 432:31]
    reg _T_232 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_233 = add(_T_232, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_234 = tail(_T_233, 1) @[GTimer.scala 25:12]
    _T_232 <= _T_234 @[GTimer.scala 25:7]
    wire _T_235 : UInt<1>
    _T_235 <= UInt<1>("h00")
    node _T_236 = and(_T_231, _T_235) @[Debug.scala 55:16]
    when _T_236 : @[Debug.scala 55:31]
      node _T_237 = asUInt(reset) @[Debug.scala 56:24]
      node _T_238 = eq(_T_237, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_238 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] LSExecUnit: ", _T_232) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_239 = asUInt(reset) @[Debug.scala 57:13]
      node _T_240 = eq(_T_239, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_240 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "misaligned addr detected\n") @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_241 = bits(io.dmem.req.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_242 = eq(_T_241, UInt<1>("h00")) @[SimpleBus.scala 73:18]
    node _T_243 = bits(io.dmem.req.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_244 = eq(_T_243, UInt<1>("h00")) @[SimpleBus.scala 73:29]
    node _T_245 = and(_T_242, _T_244) @[SimpleBus.scala 73:26]
    node _T_246 = and(io.dmem.req.valid, _T_245) @[SimpleBus.scala 104:29]
    node _T_247 = and(io.dmem.req.ready, io.dmem.req.valid) @[Decoupled.scala 40:37]
    node _T_248 = and(_T_246, _T_247) @[UnpipelinedLSU.scala 434:39]
    node _T_249 = bits(io.dmem.req.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_250 = eq(_T_249, UInt<1>("h00")) @[SimpleBus.scala 73:18]
    node _T_251 = bits(io.dmem.req.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_252 = eq(_T_251, UInt<1>("h00")) @[SimpleBus.scala 73:29]
    node _T_253 = and(_T_250, _T_252) @[SimpleBus.scala 73:26]
    node _T_254 = and(io.dmem.req.valid, _T_253) @[SimpleBus.scala 104:29]
    node _T_255 = and(io.dmem.resp.ready, io.dmem.resp.valid) @[Decoupled.scala 40:37]
    reg _T_256 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[StopWatch.scala 24:20]
    when _T_254 : @[StopWatch.scala 30:20]
      _T_256 <= UInt<1>("h01") @[StopWatch.scala 30:24]
      skip @[StopWatch.scala 30:20]
    when _T_255 : @[StopWatch.scala 31:19]
      _T_256 <= UInt<1>("h00") @[StopWatch.scala 31:23]
      skip @[StopWatch.scala 31:19]
    node _T_257 = bits(io.dmem.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_258 = and(io.dmem.req.valid, _T_257) @[SimpleBus.scala 103:29]
    node _T_259 = and(io.dmem.resp.ready, io.dmem.resp.valid) @[Decoupled.scala 40:37]
    reg _T_260 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[StopWatch.scala 24:20]
    when _T_258 : @[StopWatch.scala 30:20]
      _T_260 <= UInt<1>("h01") @[StopWatch.scala 30:24]
      skip @[StopWatch.scala 30:20]
    when _T_259 : @[StopWatch.scala 31:19]
      _T_260 <= UInt<1>("h00") @[StopWatch.scala 31:23]
      skip @[StopWatch.scala 31:19]
    
  module AtomALU : 
    input clock : Clock
    input reset : Reset
    output io : {flip src1 : UInt<64>, flip src2 : UInt<64>, flip func : UInt<7>, flip isWordOp : UInt<1>, result : UInt<64>}
    
    node _T = bits(io.func, 6, 6) @[LSU.scala 53:31]
    node isAdderSub = eq(_T, UInt<1>("h00")) @[LSU.scala 184:20]
    node _T_1 = bits(isAdderSub, 0, 0) @[Bitwise.scala 72:15]
    node _T_2 = mux(_T_1, UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_3 = xor(io.src2, _T_2) @[LSU.scala 185:33]
    node _T_4 = add(io.src1, _T_3) @[LSU.scala 185:24]
    node _T_5 = add(_T_4, isAdderSub) @[LSU.scala 185:60]
    node adderRes = tail(_T_5, 1) @[LSU.scala 185:60]
    node xorRes = xor(io.src1, io.src2) @[LSU.scala 186:21]
    node _T_6 = bits(adderRes, 64, 64) @[LSU.scala 187:23]
    node sltu = eq(_T_6, UInt<1>("h00")) @[LSU.scala 187:14]
    node _T_7 = bits(xorRes, 63, 63) @[LSU.scala 188:19]
    node slt = xor(_T_7, sltu) @[LSU.scala 188:28]
    node _T_8 = bits(io.func, 5, 0) @[LSU.scala 190:35]
    node _T_9 = and(io.src1, io.src2) @[LSU.scala 194:32]
    node _T_10 = or(io.src1, io.src2) @[LSU.scala 195:32]
    node _T_11 = bits(slt, 0, 0) @[LSU.scala 196:33]
    node _T_12 = mux(_T_11, io.src1, io.src2) @[LSU.scala 196:29]
    node _T_13 = bits(slt, 0, 0) @[LSU.scala 197:33]
    node _T_14 = mux(_T_13, io.src2, io.src1) @[LSU.scala 197:29]
    node _T_15 = bits(sltu, 0, 0) @[LSU.scala 198:34]
    node _T_16 = mux(_T_15, io.src1, io.src2) @[LSU.scala 198:29]
    node _T_17 = bits(sltu, 0, 0) @[LSU.scala 199:34]
    node _T_18 = mux(_T_17, io.src2, io.src1) @[LSU.scala 199:29]
    node _T_19 = eq(UInt<6>("h022"), _T_8) @[Mux.scala 80:60]
    node _T_20 = mux(_T_19, io.src2, adderRes) @[Mux.scala 80:57]
    node _T_21 = eq(UInt<6>("h024"), _T_8) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, xorRes, _T_20) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<6>("h025"), _T_8) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_9, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<6>("h026"), _T_8) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_10, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<6>("h037"), _T_8) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_12, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<6>("h030"), _T_8) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<6>("h031"), _T_8) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_16, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<6>("h032"), _T_8) @[Mux.scala 80:60]
    node res = mux(_T_33, _T_18, _T_32) @[Mux.scala 80:57]
    node _T_34 = bits(res, 31, 0) @[LSU.scala 202:45]
    node _T_35 = bits(_T_34, 31, 31) @[BitUtils.scala 39:20]
    node _T_36 = bits(_T_35, 0, 0) @[Bitwise.scala 72:15]
    node _T_37 = mux(_T_36, UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 72:12]
    node _T_38 = cat(_T_37, _T_34) @[Cat.scala 29:58]
    node _T_39 = bits(res, 63, 0) @[LSU.scala 202:61]
    node _T_40 = mux(io.isWordOp, _T_38, _T_39) @[LSU.scala 202:20]
    io.result <= _T_40 @[LSU.scala 202:13]
    
  module UnpipelinedLSU : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {src1 : UInt<64>, src2 : UInt<64>, func : UInt<7>}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, flip wdata : UInt<64>, flip instr : UInt<32>, dmem : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<39>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}, isMMIO : UInt<1>, dtlbPF : UInt<1>, loadAddrMisaligned : UInt<1>, storeAddrMisaligned : UInt<1>}
    
    inst lsExecUnit of LSExecUnit @[UnpipelinedLSU.scala 47:28]
    lsExecUnit.clock <= clock
    lsExecUnit.reset <= reset
    lsExecUnit.io.instr is invalid @[UnpipelinedLSU.scala 48:25]
    io.dtlbPF <= lsExecUnit.io.dtlbPF @[UnpipelinedLSU.scala 49:15]
    node _T = bits(io.in.bits.func, 3, 3) @[LSU.scala 55:39]
    node storeReq = and(io.in.valid, _T) @[UnpipelinedLSU.scala 51:26]
    node _T_1 = bits(io.in.bits.func, 3, 3) @[LSU.scala 55:39]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[LSU.scala 56:34]
    node _T_3 = bits(io.in.bits.func, 5, 5) @[LSU.scala 54:38]
    node _T_4 = eq(_T_3, UInt<1>("h00")) @[LSU.scala 56:51]
    node _T_5 = and(_T_2, _T_4) @[LSU.scala 56:49]
    node loadReq = and(io.in.valid, _T_5) @[UnpipelinedLSU.scala 52:26]
    node _T_6 = bits(io.in.bits.func, 5, 5) @[LSU.scala 54:38]
    node atomReq = and(io.in.valid, _T_6) @[UnpipelinedLSU.scala 53:26]
    node _T_7 = bits(io.in.bits.func, 5, 5) @[LSU.scala 54:38]
    node _T_8 = eq(io.in.bits.func, UInt<6>("h020")) @[LSU.scala 57:37]
    node _T_9 = eq(_T_8, UInt<1>("h00")) @[LSU.scala 59:49]
    node _T_10 = and(_T_7, _T_9) @[LSU.scala 59:46]
    node _T_11 = eq(io.in.bits.func, UInt<6>("h021")) @[LSU.scala 58:37]
    node _T_12 = eq(_T_11, UInt<1>("h00")) @[LSU.scala 59:64]
    node _T_13 = and(_T_10, _T_12) @[LSU.scala 59:61]
    node amoReq = and(io.in.valid, _T_13) @[UnpipelinedLSU.scala 54:26]
    node _T_14 = eq(io.in.bits.func, UInt<6>("h020")) @[LSU.scala 57:37]
    node lrReq = and(io.in.valid, _T_14) @[UnpipelinedLSU.scala 55:25]
    node _T_15 = eq(io.in.bits.func, UInt<6>("h021")) @[LSU.scala 58:37]
    node scReq = and(io.in.valid, _T_15) @[UnpipelinedLSU.scala 56:25]
    node aq = bits(io.instr, 26, 26) @[UnpipelinedLSU.scala 62:22]
    node rl = bits(io.instr, 25, 25) @[UnpipelinedLSU.scala 63:22]
    node funct3 = bits(io.instr, 14, 12) @[UnpipelinedLSU.scala 64:26]
    node _T_16 = bits(funct3, 0, 0) @[UnpipelinedLSU.scala 66:29]
    node atomWidthW = eq(_T_16, UInt<1>("h00")) @[UnpipelinedLSU.scala 66:22]
    node atomWidthD = bits(funct3, 0, 0) @[UnpipelinedLSU.scala 67:28]
    wire setLr : UInt<1> @[UnpipelinedLSU.scala 70:21]
    wire setLrVal : UInt<1> @[UnpipelinedLSU.scala 71:24]
    wire setLrAddr : UInt<64> @[UnpipelinedLSU.scala 72:25]
    wire lr : UInt<1>
    lr <= UInt<1>("h00")
    wire lrAddr : UInt<64>
    lrAddr is invalid
    node _T_17 = eq(io.in.bits.src1, lrAddr) @[UnpipelinedLSU.scala 81:28]
    node _T_18 = eq(_T_17, UInt<1>("h00")) @[UnpipelinedLSU.scala 81:21]
    node scInvalid = and(_T_18, scReq) @[UnpipelinedLSU.scala 81:40]
    wire dtlbFinish : UInt<1>
    dtlbFinish <= UInt<1>("h00")
    wire dtlbPF : UInt<1>
    dtlbPF <= UInt<1>("h00")
    wire dtlbEnable : UInt<1>
    dtlbEnable <= UInt<1>("h00")
    reg state : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[UnpipelinedLSU.scala 95:24]
    reg atomMemReg : UInt<64>, clock @[UnpipelinedLSU.scala 96:25]
    reg atomRegReg : UInt<64>, clock @[UnpipelinedLSU.scala 97:25]
    inst atomALU of AtomALU @[UnpipelinedLSU.scala 98:25]
    atomALU.clock <= clock
    atomALU.reset <= reset
    atomALU.io.src1 <= atomMemReg @[UnpipelinedLSU.scala 99:21]
    atomALU.io.src2 <= io.wdata @[UnpipelinedLSU.scala 100:21]
    atomALU.io.func <= io.in.bits.func @[UnpipelinedLSU.scala 101:21]
    atomALU.io.isWordOp <= atomWidthW @[UnpipelinedLSU.scala 102:25]
    lsExecUnit.io.in.valid <= UInt<1>("h00") @[UnpipelinedLSU.scala 119:32]
    lsExecUnit.io.out.ready is invalid @[UnpipelinedLSU.scala 120:32]
    lsExecUnit.io.in.bits.src1 is invalid @[UnpipelinedLSU.scala 121:32]
    lsExecUnit.io.in.bits.src2 is invalid @[UnpipelinedLSU.scala 122:32]
    lsExecUnit.io.in.bits.func is invalid @[UnpipelinedLSU.scala 123:32]
    lsExecUnit.io.wdata is invalid @[UnpipelinedLSU.scala 124:32]
    io.out.valid <= UInt<1>("h00") @[UnpipelinedLSU.scala 125:32]
    io.in.ready <= UInt<1>("h00") @[UnpipelinedLSU.scala 126:32]
    node _T_19 = eq(UInt<3>("h00"), state) @[Conditional.scala 37:30]
    when _T_19 : @[Conditional.scala 40:58]
      lsExecUnit.io.in.valid <= UInt<1>("h00") @[UnpipelinedLSU.scala 130:36]
      lsExecUnit.io.out.ready is invalid @[UnpipelinedLSU.scala 131:36]
      lsExecUnit.io.in.bits.src1 is invalid @[UnpipelinedLSU.scala 132:36]
      lsExecUnit.io.in.bits.src2 is invalid @[UnpipelinedLSU.scala 133:36]
      lsExecUnit.io.in.bits.func is invalid @[UnpipelinedLSU.scala 134:36]
      lsExecUnit.io.wdata is invalid @[UnpipelinedLSU.scala 135:36]
      node _T_20 = or(UInt<1>("h00"), scInvalid) @[UnpipelinedLSU.scala 136:47]
      io.in.ready <= _T_20 @[UnpipelinedLSU.scala 136:36]
      node _T_21 = or(UInt<1>("h00"), scInvalid) @[UnpipelinedLSU.scala 137:47]
      io.out.valid <= _T_21 @[UnpipelinedLSU.scala 137:36]
      when io.in.valid : @[UnpipelinedLSU.scala 138:20]
        state <= UInt<3>("h01") @[UnpipelinedLSU.scala 138:27]
        skip @[UnpipelinedLSU.scala 138:20]
      node _T_22 = eq(atomReq, UInt<1>("h00")) @[UnpipelinedLSU.scala 141:56]
      node _T_23 = and(io.in.valid, _T_22) @[UnpipelinedLSU.scala 141:53]
      lsExecUnit.io.in.valid <= _T_23 @[UnpipelinedLSU.scala 141:38]
      lsExecUnit.io.out.ready <= io.out.ready @[UnpipelinedLSU.scala 142:38]
      node _T_24 = add(io.in.bits.src1, io.in.bits.src2) @[UnpipelinedLSU.scala 143:46]
      node _T_25 = tail(_T_24, 1) @[UnpipelinedLSU.scala 143:46]
      lsExecUnit.io.in.bits.src1 <= _T_25 @[UnpipelinedLSU.scala 143:38]
      lsExecUnit.io.in.bits.src2 is invalid @[UnpipelinedLSU.scala 144:38]
      lsExecUnit.io.in.bits.func <= io.in.bits.func @[UnpipelinedLSU.scala 145:38]
      lsExecUnit.io.wdata <= io.wdata @[UnpipelinedLSU.scala 146:38]
      node _T_26 = and(lsExecUnit.io.out.ready, lsExecUnit.io.out.valid) @[Decoupled.scala 40:37]
      node _T_27 = or(_T_26, scInvalid) @[UnpipelinedLSU.scala 147:66]
      io.in.ready <= _T_27 @[UnpipelinedLSU.scala 147:38]
      node _T_28 = or(lsExecUnit.io.out.valid, scInvalid) @[UnpipelinedLSU.scala 148:66]
      io.out.valid <= _T_28 @[UnpipelinedLSU.scala 148:38]
      state <= UInt<3>("h00") @[UnpipelinedLSU.scala 149:17]
      when amoReq : @[UnpipelinedLSU.scala 152:21]
        state <= UInt<3>("h05") @[UnpipelinedLSU.scala 152:28]
        skip @[UnpipelinedLSU.scala 152:21]
      when lrReq : @[UnpipelinedLSU.scala 153:20]
        state <= UInt<3>("h03") @[UnpipelinedLSU.scala 153:27]
        skip @[UnpipelinedLSU.scala 153:20]
      when scReq : @[UnpipelinedLSU.scala 154:20]
        node _T_29 = mux(scInvalid, UInt<3>("h00"), UInt<3>("h04")) @[UnpipelinedLSU.scala 154:33]
        state <= _T_29 @[UnpipelinedLSU.scala 154:27]
        skip @[UnpipelinedLSU.scala 154:20]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_30 = eq(UInt<3>("h01"), state) @[Conditional.scala 37:30]
      when _T_30 : @[Conditional.scala 39:67]
        lsExecUnit.io.in.valid <= UInt<1>("h01") @[UnpipelinedLSU.scala 159:36]
        lsExecUnit.io.out.ready <= io.out.ready @[UnpipelinedLSU.scala 160:36]
        lsExecUnit.io.in.bits.src1 is invalid @[UnpipelinedLSU.scala 161:36]
        lsExecUnit.io.in.bits.src2 is invalid @[UnpipelinedLSU.scala 162:36]
        lsExecUnit.io.in.bits.func <= io.in.bits.func @[UnpipelinedLSU.scala 163:36]
        lsExecUnit.io.wdata <= io.wdata @[UnpipelinedLSU.scala 164:36]
        node _T_31 = and(lsExecUnit.io.out.ready, lsExecUnit.io.out.valid) @[Decoupled.scala 40:37]
        io.in.ready <= _T_31 @[UnpipelinedLSU.scala 165:36]
        io.out.valid <= lsExecUnit.io.out.valid @[UnpipelinedLSU.scala 166:36]
        node _T_32 = eq(atomReq, UInt<1>("h00")) @[UnpipelinedLSU.scala 167:16]
        node _T_33 = eq(amoReq, UInt<1>("h00")) @[UnpipelinedLSU.scala 167:28]
        node _T_34 = or(_T_32, _T_33) @[UnpipelinedLSU.scala 167:25]
        node _T_35 = eq(lrReq, UInt<1>("h00")) @[UnpipelinedLSU.scala 167:39]
        node _T_36 = or(_T_34, _T_35) @[UnpipelinedLSU.scala 167:36]
        node _T_37 = eq(scReq, UInt<1>("h00")) @[UnpipelinedLSU.scala 167:49]
        node _T_38 = or(_T_36, _T_37) @[UnpipelinedLSU.scala 167:46]
        node _T_39 = asUInt(reset) @[UnpipelinedLSU.scala 167:15]
        node _T_40 = or(_T_38, _T_39) @[UnpipelinedLSU.scala 167:15]
        node _T_41 = eq(_T_40, UInt<1>("h00")) @[UnpipelinedLSU.scala 167:15]
        when _T_41 : @[UnpipelinedLSU.scala 167:15]
          printf(clock, UInt<1>(1), "Assertion failed\n    at UnpipelinedLSU.scala:167 assert(!atomReq || !amoReq || !lrReq || !scReq)\n") @[UnpipelinedLSU.scala 167:15]
          stop(clock, UInt<1>(1), 1) @[UnpipelinedLSU.scala 167:15]
          skip @[UnpipelinedLSU.scala 167:15]
        node _T_42 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
        when _T_42 : @[UnpipelinedLSU.scala 168:28]
          state <= UInt<3>("h00") @[UnpipelinedLSU.scala 168:35]
          skip @[UnpipelinedLSU.scala 168:28]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_43 = eq(UInt<3>("h05"), state) @[Conditional.scala 37:30]
        when _T_43 : @[Conditional.scala 39:67]
          lsExecUnit.io.in.valid <= UInt<1>("h01") @[UnpipelinedLSU.scala 184:36]
          lsExecUnit.io.out.ready <= UInt<1>("h01") @[UnpipelinedLSU.scala 185:36]
          lsExecUnit.io.in.bits.src1 <= io.in.bits.src1 @[UnpipelinedLSU.scala 186:36]
          lsExecUnit.io.in.bits.src2 is invalid @[UnpipelinedLSU.scala 187:36]
          node _T_44 = mux(atomWidthD, UInt<2>("h03"), UInt<2>("h02")) @[UnpipelinedLSU.scala 188:42]
          lsExecUnit.io.in.bits.func <= _T_44 @[UnpipelinedLSU.scala 188:36]
          lsExecUnit.io.wdata is invalid @[UnpipelinedLSU.scala 189:36]
          io.in.ready <= UInt<1>("h00") @[UnpipelinedLSU.scala 190:36]
          io.out.valid <= UInt<1>("h00") @[UnpipelinedLSU.scala 191:36]
          node _T_45 = and(lsExecUnit.io.out.ready, lsExecUnit.io.out.valid) @[Decoupled.scala 40:37]
          when _T_45 : @[UnpipelinedLSU.scala 192:39]
            state <= UInt<3>("h06") @[UnpipelinedLSU.scala 193:17]
            reg _T_46 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
            node _T_47 = add(_T_46, UInt<1>("h01")) @[GTimer.scala 25:12]
            node _T_48 = tail(_T_47, 1) @[GTimer.scala 25:12]
            _T_46 <= _T_48 @[GTimer.scala 25:7]
            wire _T_49 : UInt<1>
            _T_49 <= UInt<1>("h00")
            node _T_50 = and(UInt<1>("h01"), _T_49) @[Debug.scala 55:16]
            when _T_50 : @[Debug.scala 55:31]
              node _T_51 = asUInt(reset) @[Debug.scala 56:24]
              node _T_52 = eq(_T_51, UInt<1>("h00")) @[Debug.scala 56:24]
              when _T_52 : @[Debug.scala 56:24]
                printf(clock, UInt<1>(1), "[%d] UnpipelinedLSU: ", _T_46) @[Debug.scala 56:24]
                skip @[Debug.scala 56:24]
              node _T_53 = asUInt(reset) @[Debug.scala 57:13]
              node _T_54 = eq(_T_53, UInt<1>("h00")) @[Debug.scala 57:13]
              when _T_54 : @[Debug.scala 57:13]
                printf(clock, UInt<1>(1), "[AMO-L] lsExecUnit.io.out.bits %x addr %x src2 %x\n", lsExecUnit.io.out.bits, lsExecUnit.io.in.bits.src1, io.wdata) @[Debug.scala 57:13]
                skip @[Debug.scala 57:13]
              skip @[Debug.scala 55:31]
            skip @[UnpipelinedLSU.scala 192:39]
          atomMemReg <= lsExecUnit.io.out.bits @[UnpipelinedLSU.scala 196:20]
          atomRegReg <= lsExecUnit.io.out.bits @[UnpipelinedLSU.scala 197:20]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_55 = eq(UInt<3>("h06"), state) @[Conditional.scala 37:30]
          when _T_55 : @[Conditional.scala 39:67]
            lsExecUnit.io.in.valid <= UInt<1>("h00") @[UnpipelinedLSU.scala 201:36]
            lsExecUnit.io.out.ready <= UInt<1>("h00") @[UnpipelinedLSU.scala 202:36]
            lsExecUnit.io.in.bits.src1 is invalid @[UnpipelinedLSU.scala 203:36]
            lsExecUnit.io.in.bits.src2 is invalid @[UnpipelinedLSU.scala 204:36]
            lsExecUnit.io.in.bits.func is invalid @[UnpipelinedLSU.scala 205:36]
            lsExecUnit.io.wdata is invalid @[UnpipelinedLSU.scala 206:36]
            io.in.ready <= UInt<1>("h00") @[UnpipelinedLSU.scala 207:36]
            io.out.valid <= UInt<1>("h00") @[UnpipelinedLSU.scala 208:36]
            state <= UInt<3>("h07") @[UnpipelinedLSU.scala 209:15]
            atomMemReg <= atomALU.io.result @[UnpipelinedLSU.scala 210:20]
            reg _T_56 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
            node _T_57 = add(_T_56, UInt<1>("h01")) @[GTimer.scala 25:12]
            node _T_58 = tail(_T_57, 1) @[GTimer.scala 25:12]
            _T_56 <= _T_58 @[GTimer.scala 25:7]
            wire _T_59 : UInt<1>
            _T_59 <= UInt<1>("h00")
            node _T_60 = and(UInt<1>("h01"), _T_59) @[Debug.scala 55:16]
            when _T_60 : @[Debug.scala 55:31]
              node _T_61 = asUInt(reset) @[Debug.scala 56:24]
              node _T_62 = eq(_T_61, UInt<1>("h00")) @[Debug.scala 56:24]
              when _T_62 : @[Debug.scala 56:24]
                printf(clock, UInt<1>(1), "[%d] UnpipelinedLSU: ", _T_56) @[Debug.scala 56:24]
                skip @[Debug.scala 56:24]
              node _T_63 = asUInt(reset) @[Debug.scala 57:13]
              node _T_64 = eq(_T_63, UInt<1>("h00")) @[Debug.scala 57:13]
              when _T_64 : @[Debug.scala 57:13]
                printf(clock, UInt<1>(1), "[AMO-A] src1 %x src2 %x res %x\n", atomMemReg, io.wdata, atomALU.io.result) @[Debug.scala 57:13]
                skip @[Debug.scala 57:13]
              skip @[Debug.scala 55:31]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_65 = eq(UInt<3>("h07"), state) @[Conditional.scala 37:30]
            when _T_65 : @[Conditional.scala 39:67]
              lsExecUnit.io.in.valid <= UInt<1>("h01") @[UnpipelinedLSU.scala 215:36]
              lsExecUnit.io.out.ready <= io.out.ready @[UnpipelinedLSU.scala 216:36]
              lsExecUnit.io.in.bits.src1 <= io.in.bits.src1 @[UnpipelinedLSU.scala 217:36]
              lsExecUnit.io.in.bits.src2 is invalid @[UnpipelinedLSU.scala 218:36]
              node _T_66 = mux(atomWidthD, UInt<4>("h0b"), UInt<4>("h0a")) @[UnpipelinedLSU.scala 219:42]
              lsExecUnit.io.in.bits.func <= _T_66 @[UnpipelinedLSU.scala 219:36]
              lsExecUnit.io.wdata <= atomMemReg @[UnpipelinedLSU.scala 220:36]
              node _T_67 = and(lsExecUnit.io.out.ready, lsExecUnit.io.out.valid) @[Decoupled.scala 40:37]
              io.in.ready <= _T_67 @[UnpipelinedLSU.scala 221:36]
              node _T_68 = and(lsExecUnit.io.out.ready, lsExecUnit.io.out.valid) @[Decoupled.scala 40:37]
              io.out.valid <= _T_68 @[UnpipelinedLSU.scala 222:36]
              node _T_69 = and(lsExecUnit.io.out.ready, lsExecUnit.io.out.valid) @[Decoupled.scala 40:37]
              when _T_69 : @[UnpipelinedLSU.scala 223:39]
                state <= UInt<3>("h00") @[UnpipelinedLSU.scala 224:17]
                reg _T_70 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
                node _T_71 = add(_T_70, UInt<1>("h01")) @[GTimer.scala 25:12]
                node _T_72 = tail(_T_71, 1) @[GTimer.scala 25:12]
                _T_70 <= _T_72 @[GTimer.scala 25:7]
                wire _T_73 : UInt<1>
                _T_73 <= UInt<1>("h00")
                node _T_74 = and(UInt<1>("h01"), _T_73) @[Debug.scala 55:16]
                when _T_74 : @[Debug.scala 55:31]
                  node _T_75 = asUInt(reset) @[Debug.scala 56:24]
                  node _T_76 = eq(_T_75, UInt<1>("h00")) @[Debug.scala 56:24]
                  when _T_76 : @[Debug.scala 56:24]
                    printf(clock, UInt<1>(1), "[%d] UnpipelinedLSU: ", _T_70) @[Debug.scala 56:24]
                    skip @[Debug.scala 56:24]
                  node _T_77 = asUInt(reset) @[Debug.scala 57:13]
                  node _T_78 = eq(_T_77, UInt<1>("h00")) @[Debug.scala 57:13]
                  when _T_78 : @[Debug.scala 57:13]
                    printf(clock, UInt<1>(1), "[AMO-S] atomRegReg %x addr %x\n", atomRegReg, lsExecUnit.io.in.bits.src1) @[Debug.scala 57:13]
                    skip @[Debug.scala 57:13]
                  skip @[Debug.scala 55:31]
                skip @[UnpipelinedLSU.scala 223:39]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_79 = eq(UInt<3>("h03"), state) @[Conditional.scala 37:30]
              when _T_79 : @[Conditional.scala 39:67]
                lsExecUnit.io.in.valid <= UInt<1>("h01") @[UnpipelinedLSU.scala 229:36]
                lsExecUnit.io.out.ready <= io.out.ready @[UnpipelinedLSU.scala 230:36]
                lsExecUnit.io.in.bits.src1 <= io.in.bits.src1 @[UnpipelinedLSU.scala 231:36]
                lsExecUnit.io.in.bits.src2 is invalid @[UnpipelinedLSU.scala 232:36]
                node _T_80 = mux(atomWidthD, UInt<2>("h03"), UInt<2>("h02")) @[UnpipelinedLSU.scala 233:42]
                lsExecUnit.io.in.bits.func <= _T_80 @[UnpipelinedLSU.scala 233:36]
                lsExecUnit.io.wdata is invalid @[UnpipelinedLSU.scala 234:36]
                node _T_81 = and(lsExecUnit.io.out.ready, lsExecUnit.io.out.valid) @[Decoupled.scala 40:37]
                io.in.ready <= _T_81 @[UnpipelinedLSU.scala 235:36]
                node _T_82 = and(lsExecUnit.io.out.ready, lsExecUnit.io.out.valid) @[Decoupled.scala 40:37]
                io.out.valid <= _T_82 @[UnpipelinedLSU.scala 236:36]
                node _T_83 = and(lsExecUnit.io.out.ready, lsExecUnit.io.out.valid) @[Decoupled.scala 40:37]
                when _T_83 : @[UnpipelinedLSU.scala 237:39]
                  state <= UInt<3>("h00") @[UnpipelinedLSU.scala 238:17]
                  reg _T_84 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
                  node _T_85 = add(_T_84, UInt<1>("h01")) @[GTimer.scala 25:12]
                  node _T_86 = tail(_T_85, 1) @[GTimer.scala 25:12]
                  _T_84 <= _T_86 @[GTimer.scala 25:7]
                  wire _T_87 : UInt<1>
                  _T_87 <= UInt<1>("h00")
                  node _T_88 = and(UInt<1>("h01"), _T_87) @[Debug.scala 55:16]
                  when _T_88 : @[Debug.scala 55:31]
                    node _T_89 = asUInt(reset) @[Debug.scala 56:24]
                    node _T_90 = eq(_T_89, UInt<1>("h00")) @[Debug.scala 56:24]
                    when _T_90 : @[Debug.scala 56:24]
                      printf(clock, UInt<1>(1), "[%d] UnpipelinedLSU: ", _T_84) @[Debug.scala 56:24]
                      skip @[Debug.scala 56:24]
                    node _T_91 = asUInt(reset) @[Debug.scala 57:13]
                    node _T_92 = eq(_T_91, UInt<1>("h00")) @[Debug.scala 57:13]
                    when _T_92 : @[Debug.scala 57:13]
                      printf(clock, UInt<1>(1), "[LR]\n") @[Debug.scala 57:13]
                      skip @[Debug.scala 57:13]
                    skip @[Debug.scala 55:31]
                  skip @[UnpipelinedLSU.scala 237:39]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_93 = eq(UInt<3>("h04"), state) @[Conditional.scala 37:30]
                when _T_93 : @[Conditional.scala 39:67]
                  lsExecUnit.io.in.valid <= UInt<1>("h01") @[UnpipelinedLSU.scala 243:36]
                  lsExecUnit.io.out.ready <= io.out.ready @[UnpipelinedLSU.scala 244:36]
                  lsExecUnit.io.in.bits.src1 <= io.in.bits.src1 @[UnpipelinedLSU.scala 245:36]
                  lsExecUnit.io.in.bits.src2 is invalid @[UnpipelinedLSU.scala 246:36]
                  node _T_94 = mux(atomWidthD, UInt<4>("h0b"), UInt<4>("h0a")) @[UnpipelinedLSU.scala 247:42]
                  lsExecUnit.io.in.bits.func <= _T_94 @[UnpipelinedLSU.scala 247:36]
                  lsExecUnit.io.wdata <= io.wdata @[UnpipelinedLSU.scala 248:36]
                  node _T_95 = and(lsExecUnit.io.out.ready, lsExecUnit.io.out.valid) @[Decoupled.scala 40:37]
                  io.in.ready <= _T_95 @[UnpipelinedLSU.scala 249:36]
                  node _T_96 = and(lsExecUnit.io.out.ready, lsExecUnit.io.out.valid) @[Decoupled.scala 40:37]
                  io.out.valid <= _T_96 @[UnpipelinedLSU.scala 250:36]
                  node _T_97 = and(lsExecUnit.io.out.ready, lsExecUnit.io.out.valid) @[Decoupled.scala 40:37]
                  when _T_97 : @[UnpipelinedLSU.scala 251:39]
                    state <= UInt<3>("h00") @[UnpipelinedLSU.scala 252:17]
                    reg _T_98 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
                    node _T_99 = add(_T_98, UInt<1>("h01")) @[GTimer.scala 25:12]
                    node _T_100 = tail(_T_99, 1) @[GTimer.scala 25:12]
                    _T_98 <= _T_100 @[GTimer.scala 25:7]
                    wire _T_101 : UInt<1>
                    _T_101 <= UInt<1>("h00")
                    node _T_102 = and(UInt<1>("h01"), _T_101) @[Debug.scala 55:16]
                    when _T_102 : @[Debug.scala 55:31]
                      node _T_103 = asUInt(reset) @[Debug.scala 56:24]
                      node _T_104 = eq(_T_103, UInt<1>("h00")) @[Debug.scala 56:24]
                      when _T_104 : @[Debug.scala 56:24]
                        printf(clock, UInt<1>(1), "[%d] UnpipelinedLSU: ", _T_98) @[Debug.scala 56:24]
                        skip @[Debug.scala 56:24]
                      node _T_105 = asUInt(reset) @[Debug.scala 57:13]
                      node _T_106 = eq(_T_105, UInt<1>("h00")) @[Debug.scala 57:13]
                      when _T_106 : @[Debug.scala 57:13]
                        printf(clock, UInt<1>(1), "[SC] \n") @[Debug.scala 57:13]
                        skip @[Debug.scala 57:13]
                      skip @[Debug.scala 55:31]
                    skip @[UnpipelinedLSU.scala 251:39]
                  skip @[Conditional.scala 39:67]
    node _T_107 = or(dtlbPF, io.loadAddrMisaligned) @[UnpipelinedLSU.scala 257:17]
    node _T_108 = or(_T_107, io.storeAddrMisaligned) @[UnpipelinedLSU.scala 257:42]
    when _T_108 : @[UnpipelinedLSU.scala 257:68]
      state <= UInt<3>("h00") @[UnpipelinedLSU.scala 258:13]
      io.out.valid <= UInt<1>("h01") @[UnpipelinedLSU.scala 259:20]
      io.in.ready <= UInt<1>("h01") @[UnpipelinedLSU.scala 260:19]
      skip @[UnpipelinedLSU.scala 257:68]
    node _T_109 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    reg _T_110 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_111 = add(_T_110, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_112 = tail(_T_111, 1) @[GTimer.scala 25:12]
    _T_110 <= _T_112 @[GTimer.scala 25:7]
    wire _T_113 : UInt<1>
    _T_113 <= UInt<1>("h00")
    node _T_114 = and(_T_109, _T_113) @[Debug.scala 55:16]
    when _T_114 : @[Debug.scala 55:31]
      node _T_115 = asUInt(reset) @[Debug.scala 56:24]
      node _T_116 = eq(_T_115, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_116 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] UnpipelinedLSU: ", _T_110) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_117 = asUInt(reset) @[Debug.scala 57:13]
      node _T_118 = eq(_T_117, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_118 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[LSU-AGU] state %x inv %x inr %x\n", state, io.in.valid, io.in.ready) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_119 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_120 = or(lrReq, scReq) @[UnpipelinedLSU.scala 270:38]
    node _T_121 = and(_T_119, _T_120) @[UnpipelinedLSU.scala 270:28]
    setLr <= _T_121 @[UnpipelinedLSU.scala 270:11]
    setLrVal <= lrReq @[UnpipelinedLSU.scala 271:14]
    setLrAddr <= io.in.bits.src1 @[UnpipelinedLSU.scala 272:15]
    lsExecUnit.io.dmem.resp.bits.rdata <= io.dmem.resp.bits.rdata @[UnpipelinedLSU.scala 274:13]
    lsExecUnit.io.dmem.resp.bits.cmd <= io.dmem.resp.bits.cmd @[UnpipelinedLSU.scala 274:13]
    lsExecUnit.io.dmem.resp.valid <= io.dmem.resp.valid @[UnpipelinedLSU.scala 274:13]
    io.dmem.resp.ready <= lsExecUnit.io.dmem.resp.ready @[UnpipelinedLSU.scala 274:13]
    io.dmem.req.bits.wdata <= lsExecUnit.io.dmem.req.bits.wdata @[UnpipelinedLSU.scala 274:13]
    io.dmem.req.bits.wmask <= lsExecUnit.io.dmem.req.bits.wmask @[UnpipelinedLSU.scala 274:13]
    io.dmem.req.bits.cmd <= lsExecUnit.io.dmem.req.bits.cmd @[UnpipelinedLSU.scala 274:13]
    io.dmem.req.bits.size <= lsExecUnit.io.dmem.req.bits.size @[UnpipelinedLSU.scala 274:13]
    io.dmem.req.bits.addr <= lsExecUnit.io.dmem.req.bits.addr @[UnpipelinedLSU.scala 274:13]
    io.dmem.req.valid <= lsExecUnit.io.dmem.req.valid @[UnpipelinedLSU.scala 274:13]
    lsExecUnit.io.dmem.req.ready <= io.dmem.req.ready @[UnpipelinedLSU.scala 274:13]
    node _T_122 = eq(state, UInt<3>("h07")) @[UnpipelinedLSU.scala 275:52]
    node _T_123 = mux(_T_122, atomRegReg, lsExecUnit.io.out.bits) @[UnpipelinedLSU.scala 275:45]
    node _T_124 = mux(scReq, scInvalid, _T_123) @[UnpipelinedLSU.scala 275:23]
    io.out.bits <= _T_124 @[UnpipelinedLSU.scala 275:17]
    wire lsuMMIO : UInt<1>
    lsuMMIO <= UInt<1>("h00")
    reg mmioReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[UnpipelinedLSU.scala 280:26]
    node _T_125 = eq(mmioReg, UInt<1>("h00")) @[UnpipelinedLSU.scala 281:11]
    when _T_125 : @[UnpipelinedLSU.scala 281:21]
      mmioReg <= lsuMMIO @[UnpipelinedLSU.scala 281:31]
      skip @[UnpipelinedLSU.scala 281:21]
    when io.out.valid : @[UnpipelinedLSU.scala 282:25]
      mmioReg <= UInt<1>("h00") @[UnpipelinedLSU.scala 282:35]
      skip @[UnpipelinedLSU.scala 282:25]
    node _T_126 = and(mmioReg, io.out.valid) @[UnpipelinedLSU.scala 283:26]
    io.isMMIO <= _T_126 @[UnpipelinedLSU.scala 283:15]
    io.loadAddrMisaligned <= lsExecUnit.io.loadAddrMisaligned @[UnpipelinedLSU.scala 285:27]
    io.storeAddrMisaligned <= lsExecUnit.io.storeAddrMisaligned @[UnpipelinedLSU.scala 286:28]
    
  module Multiplier : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<65>[2]}, flip sign : UInt<1>, out : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<130>}}
    
    reg _T : UInt, clock @[MDU.scala 56:43]
    _T <= io.in.bits[0] @[MDU.scala 56:43]
    node _T_1 = asSInt(_T) @[MDU.scala 58:42]
    reg _T_2 : UInt, clock @[MDU.scala 56:43]
    _T_2 <= io.in.bits[1] @[MDU.scala 56:43]
    node _T_3 = asSInt(_T_2) @[MDU.scala 58:76]
    node mulRes = mul(_T_1, _T_3) @[MDU.scala 58:49]
    reg _T_4 : SInt, clock @[MDU.scala 57:60]
    _T_4 <= mulRes @[MDU.scala 57:60]
    reg _T_5 : SInt, clock @[MDU.scala 57:52]
    _T_5 <= _T_4 @[MDU.scala 57:52]
    reg _T_6 : SInt, clock @[MDU.scala 57:44]
    _T_6 <= _T_5 @[MDU.scala 57:44]
    node _T_7 = asUInt(_T_6) @[MDU.scala 59:37]
    io.out.bits <= _T_7 @[MDU.scala 59:15]
    node _T_8 = and(io.in.ready, io.in.valid) @[Decoupled.scala 40:37]
    reg _T_9 : UInt<1>, clock @[MDU.scala 56:43]
    _T_9 <= _T_8 @[MDU.scala 56:43]
    reg _T_10 : UInt<1>, clock @[MDU.scala 57:60]
    _T_10 <= _T_9 @[MDU.scala 57:60]
    reg _T_11 : UInt<1>, clock @[MDU.scala 57:52]
    _T_11 <= _T_10 @[MDU.scala 57:52]
    reg _T_12 : UInt<1>, clock @[MDU.scala 57:44]
    _T_12 <= _T_11 @[MDU.scala 57:44]
    io.out.valid <= _T_12 @[MDU.scala 60:16]
    reg busy : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MDU.scala 62:21]
    node _T_13 = eq(busy, UInt<1>("h00")) @[MDU.scala 63:24]
    node _T_14 = and(io.in.valid, _T_13) @[MDU.scala 63:21]
    when _T_14 : @[MDU.scala 63:31]
      busy <= UInt<1>("h01") @[MDU.scala 63:38]
      skip @[MDU.scala 63:31]
    when io.out.valid : @[MDU.scala 64:23]
      busy <= UInt<1>("h00") @[MDU.scala 64:30]
      skip @[MDU.scala 64:23]
    node _T_15 = eq(busy, UInt<1>("h00")) @[MDU.scala 65:49]
    io.in.ready <= _T_15 @[MDU.scala 65:15]
    
  module Divider : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>[2]}, flip sign : UInt<1>, out : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<128>}}
    
    reg state : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[MDU.scala 77:22]
    node _T = eq(state, UInt<3>("h00")) @[MDU.scala 78:23]
    node _T_1 = and(io.in.ready, io.in.valid) @[Decoupled.scala 40:37]
    node newReq = and(_T, _T_1) @[MDU.scala 78:35]
    node divBy0 = eq(io.in.bits[1], UInt<64>("h00")) @[MDU.scala 81:18]
    reg shiftReg : UInt<129>, clock @[MDU.scala 83:21]
    node hi = bits(shiftReg, 128, 64) @[MDU.scala 84:20]
    node lo = bits(shiftReg, 63, 0) @[MDU.scala 85:20]
    node _T_2 = bits(io.in.bits[0], 63, 63) @[MDU.scala 72:14]
    node aSign = and(_T_2, io.sign) @[MDU.scala 72:24]
    node _T_3 = sub(UInt<1>("h00"), io.in.bits[0]) @[MDU.scala 73:16]
    node _T_4 = tail(_T_3, 1) @[MDU.scala 73:16]
    node aVal = mux(aSign, _T_4, io.in.bits[0]) @[MDU.scala 73:12]
    node _T_5 = bits(io.in.bits[1], 63, 63) @[MDU.scala 72:14]
    node bSign = and(_T_5, io.sign) @[MDU.scala 72:24]
    node _T_6 = sub(UInt<1>("h00"), io.in.bits[1]) @[MDU.scala 73:16]
    node _T_7 = tail(_T_6, 1) @[MDU.scala 73:16]
    node bVal = mux(bSign, _T_7, io.in.bits[1]) @[MDU.scala 73:12]
    reg aSignReg : UInt<1>, clock @[Reg.scala 15:16]
    when newReq : @[Reg.scala 16:19]
      aSignReg <= aSign @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _T_8 = xor(aSign, bSign) @[MDU.scala 90:35]
    node _T_9 = eq(divBy0, UInt<1>("h00")) @[MDU.scala 90:47]
    node _T_10 = and(_T_8, _T_9) @[MDU.scala 90:44]
    reg qSignReg : UInt<1>, clock @[Reg.scala 15:16]
    when newReq : @[Reg.scala 16:19]
      qSignReg <= _T_10 @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg bReg : UInt<64>, clock @[Reg.scala 15:16]
    when newReq : @[Reg.scala 16:19]
      bReg <= bVal @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _T_11 = cat(aVal, UInt<1>("h00")) @[Cat.scala 29:58]
    reg aValx2Reg : UInt<65>, clock @[Reg.scala 15:16]
    when newReq : @[Reg.scala 16:19]
      aValx2Reg <= _T_11 @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg value : UInt<6>, clock with : (reset => (reset, UInt<6>("h00"))) @[Counter.scala 29:33]
    when newReq : @[MDU.scala 95:17]
      state <= UInt<3>("h01") @[MDU.scala 96:11]
      skip @[MDU.scala 95:17]
    else : @[MDU.scala 97:34]
      node _T_12 = eq(state, UInt<3>("h01")) @[MDU.scala 97:22]
      when _T_12 : @[MDU.scala 97:34]
        node _T_13 = bits(bReg, 63, 32) @[CircuitMath.scala 35:17]
        node _T_14 = bits(bReg, 31, 0) @[CircuitMath.scala 36:17]
        node _T_15 = orr(_T_13) @[CircuitMath.scala 37:22]
        node _T_16 = bits(_T_13, 31, 16) @[CircuitMath.scala 35:17]
        node _T_17 = bits(_T_13, 15, 0) @[CircuitMath.scala 36:17]
        node _T_18 = orr(_T_16) @[CircuitMath.scala 37:22]
        node _T_19 = bits(_T_16, 15, 8) @[CircuitMath.scala 35:17]
        node _T_20 = bits(_T_16, 7, 0) @[CircuitMath.scala 36:17]
        node _T_21 = orr(_T_19) @[CircuitMath.scala 37:22]
        node _T_22 = bits(_T_19, 7, 4) @[CircuitMath.scala 35:17]
        node _T_23 = bits(_T_19, 3, 0) @[CircuitMath.scala 36:17]
        node _T_24 = orr(_T_22) @[CircuitMath.scala 37:22]
        node _T_25 = bits(_T_22, 3, 3) @[CircuitMath.scala 32:12]
        node _T_26 = bits(_T_22, 2, 2) @[CircuitMath.scala 32:12]
        node _T_27 = bits(_T_22, 1, 1) @[CircuitMath.scala 30:8]
        node _T_28 = mux(_T_26, UInt<2>("h02"), _T_27) @[CircuitMath.scala 32:10]
        node _T_29 = mux(_T_25, UInt<2>("h03"), _T_28) @[CircuitMath.scala 32:10]
        node _T_30 = bits(_T_23, 3, 3) @[CircuitMath.scala 32:12]
        node _T_31 = bits(_T_23, 2, 2) @[CircuitMath.scala 32:12]
        node _T_32 = bits(_T_23, 1, 1) @[CircuitMath.scala 30:8]
        node _T_33 = mux(_T_31, UInt<2>("h02"), _T_32) @[CircuitMath.scala 32:10]
        node _T_34 = mux(_T_30, UInt<2>("h03"), _T_33) @[CircuitMath.scala 32:10]
        node _T_35 = mux(_T_24, _T_29, _T_34) @[CircuitMath.scala 38:21]
        node _T_36 = cat(_T_24, _T_35) @[Cat.scala 29:58]
        node _T_37 = bits(_T_20, 7, 4) @[CircuitMath.scala 35:17]
        node _T_38 = bits(_T_20, 3, 0) @[CircuitMath.scala 36:17]
        node _T_39 = orr(_T_37) @[CircuitMath.scala 37:22]
        node _T_40 = bits(_T_37, 3, 3) @[CircuitMath.scala 32:12]
        node _T_41 = bits(_T_37, 2, 2) @[CircuitMath.scala 32:12]
        node _T_42 = bits(_T_37, 1, 1) @[CircuitMath.scala 30:8]
        node _T_43 = mux(_T_41, UInt<2>("h02"), _T_42) @[CircuitMath.scala 32:10]
        node _T_44 = mux(_T_40, UInt<2>("h03"), _T_43) @[CircuitMath.scala 32:10]
        node _T_45 = bits(_T_38, 3, 3) @[CircuitMath.scala 32:12]
        node _T_46 = bits(_T_38, 2, 2) @[CircuitMath.scala 32:12]
        node _T_47 = bits(_T_38, 1, 1) @[CircuitMath.scala 30:8]
        node _T_48 = mux(_T_46, UInt<2>("h02"), _T_47) @[CircuitMath.scala 32:10]
        node _T_49 = mux(_T_45, UInt<2>("h03"), _T_48) @[CircuitMath.scala 32:10]
        node _T_50 = mux(_T_39, _T_44, _T_49) @[CircuitMath.scala 38:21]
        node _T_51 = cat(_T_39, _T_50) @[Cat.scala 29:58]
        node _T_52 = mux(_T_21, _T_36, _T_51) @[CircuitMath.scala 38:21]
        node _T_53 = cat(_T_21, _T_52) @[Cat.scala 29:58]
        node _T_54 = bits(_T_17, 15, 8) @[CircuitMath.scala 35:17]
        node _T_55 = bits(_T_17, 7, 0) @[CircuitMath.scala 36:17]
        node _T_56 = orr(_T_54) @[CircuitMath.scala 37:22]
        node _T_57 = bits(_T_54, 7, 4) @[CircuitMath.scala 35:17]
        node _T_58 = bits(_T_54, 3, 0) @[CircuitMath.scala 36:17]
        node _T_59 = orr(_T_57) @[CircuitMath.scala 37:22]
        node _T_60 = bits(_T_57, 3, 3) @[CircuitMath.scala 32:12]
        node _T_61 = bits(_T_57, 2, 2) @[CircuitMath.scala 32:12]
        node _T_62 = bits(_T_57, 1, 1) @[CircuitMath.scala 30:8]
        node _T_63 = mux(_T_61, UInt<2>("h02"), _T_62) @[CircuitMath.scala 32:10]
        node _T_64 = mux(_T_60, UInt<2>("h03"), _T_63) @[CircuitMath.scala 32:10]
        node _T_65 = bits(_T_58, 3, 3) @[CircuitMath.scala 32:12]
        node _T_66 = bits(_T_58, 2, 2) @[CircuitMath.scala 32:12]
        node _T_67 = bits(_T_58, 1, 1) @[CircuitMath.scala 30:8]
        node _T_68 = mux(_T_66, UInt<2>("h02"), _T_67) @[CircuitMath.scala 32:10]
        node _T_69 = mux(_T_65, UInt<2>("h03"), _T_68) @[CircuitMath.scala 32:10]
        node _T_70 = mux(_T_59, _T_64, _T_69) @[CircuitMath.scala 38:21]
        node _T_71 = cat(_T_59, _T_70) @[Cat.scala 29:58]
        node _T_72 = bits(_T_55, 7, 4) @[CircuitMath.scala 35:17]
        node _T_73 = bits(_T_55, 3, 0) @[CircuitMath.scala 36:17]
        node _T_74 = orr(_T_72) @[CircuitMath.scala 37:22]
        node _T_75 = bits(_T_72, 3, 3) @[CircuitMath.scala 32:12]
        node _T_76 = bits(_T_72, 2, 2) @[CircuitMath.scala 32:12]
        node _T_77 = bits(_T_72, 1, 1) @[CircuitMath.scala 30:8]
        node _T_78 = mux(_T_76, UInt<2>("h02"), _T_77) @[CircuitMath.scala 32:10]
        node _T_79 = mux(_T_75, UInt<2>("h03"), _T_78) @[CircuitMath.scala 32:10]
        node _T_80 = bits(_T_73, 3, 3) @[CircuitMath.scala 32:12]
        node _T_81 = bits(_T_73, 2, 2) @[CircuitMath.scala 32:12]
        node _T_82 = bits(_T_73, 1, 1) @[CircuitMath.scala 30:8]
        node _T_83 = mux(_T_81, UInt<2>("h02"), _T_82) @[CircuitMath.scala 32:10]
        node _T_84 = mux(_T_80, UInt<2>("h03"), _T_83) @[CircuitMath.scala 32:10]
        node _T_85 = mux(_T_74, _T_79, _T_84) @[CircuitMath.scala 38:21]
        node _T_86 = cat(_T_74, _T_85) @[Cat.scala 29:58]
        node _T_87 = mux(_T_56, _T_71, _T_86) @[CircuitMath.scala 38:21]
        node _T_88 = cat(_T_56, _T_87) @[Cat.scala 29:58]
        node _T_89 = mux(_T_18, _T_53, _T_88) @[CircuitMath.scala 38:21]
        node _T_90 = cat(_T_18, _T_89) @[Cat.scala 29:58]
        node _T_91 = bits(_T_14, 31, 16) @[CircuitMath.scala 35:17]
        node _T_92 = bits(_T_14, 15, 0) @[CircuitMath.scala 36:17]
        node _T_93 = orr(_T_91) @[CircuitMath.scala 37:22]
        node _T_94 = bits(_T_91, 15, 8) @[CircuitMath.scala 35:17]
        node _T_95 = bits(_T_91, 7, 0) @[CircuitMath.scala 36:17]
        node _T_96 = orr(_T_94) @[CircuitMath.scala 37:22]
        node _T_97 = bits(_T_94, 7, 4) @[CircuitMath.scala 35:17]
        node _T_98 = bits(_T_94, 3, 0) @[CircuitMath.scala 36:17]
        node _T_99 = orr(_T_97) @[CircuitMath.scala 37:22]
        node _T_100 = bits(_T_97, 3, 3) @[CircuitMath.scala 32:12]
        node _T_101 = bits(_T_97, 2, 2) @[CircuitMath.scala 32:12]
        node _T_102 = bits(_T_97, 1, 1) @[CircuitMath.scala 30:8]
        node _T_103 = mux(_T_101, UInt<2>("h02"), _T_102) @[CircuitMath.scala 32:10]
        node _T_104 = mux(_T_100, UInt<2>("h03"), _T_103) @[CircuitMath.scala 32:10]
        node _T_105 = bits(_T_98, 3, 3) @[CircuitMath.scala 32:12]
        node _T_106 = bits(_T_98, 2, 2) @[CircuitMath.scala 32:12]
        node _T_107 = bits(_T_98, 1, 1) @[CircuitMath.scala 30:8]
        node _T_108 = mux(_T_106, UInt<2>("h02"), _T_107) @[CircuitMath.scala 32:10]
        node _T_109 = mux(_T_105, UInt<2>("h03"), _T_108) @[CircuitMath.scala 32:10]
        node _T_110 = mux(_T_99, _T_104, _T_109) @[CircuitMath.scala 38:21]
        node _T_111 = cat(_T_99, _T_110) @[Cat.scala 29:58]
        node _T_112 = bits(_T_95, 7, 4) @[CircuitMath.scala 35:17]
        node _T_113 = bits(_T_95, 3, 0) @[CircuitMath.scala 36:17]
        node _T_114 = orr(_T_112) @[CircuitMath.scala 37:22]
        node _T_115 = bits(_T_112, 3, 3) @[CircuitMath.scala 32:12]
        node _T_116 = bits(_T_112, 2, 2) @[CircuitMath.scala 32:12]
        node _T_117 = bits(_T_112, 1, 1) @[CircuitMath.scala 30:8]
        node _T_118 = mux(_T_116, UInt<2>("h02"), _T_117) @[CircuitMath.scala 32:10]
        node _T_119 = mux(_T_115, UInt<2>("h03"), _T_118) @[CircuitMath.scala 32:10]
        node _T_120 = bits(_T_113, 3, 3) @[CircuitMath.scala 32:12]
        node _T_121 = bits(_T_113, 2, 2) @[CircuitMath.scala 32:12]
        node _T_122 = bits(_T_113, 1, 1) @[CircuitMath.scala 30:8]
        node _T_123 = mux(_T_121, UInt<2>("h02"), _T_122) @[CircuitMath.scala 32:10]
        node _T_124 = mux(_T_120, UInt<2>("h03"), _T_123) @[CircuitMath.scala 32:10]
        node _T_125 = mux(_T_114, _T_119, _T_124) @[CircuitMath.scala 38:21]
        node _T_126 = cat(_T_114, _T_125) @[Cat.scala 29:58]
        node _T_127 = mux(_T_96, _T_111, _T_126) @[CircuitMath.scala 38:21]
        node _T_128 = cat(_T_96, _T_127) @[Cat.scala 29:58]
        node _T_129 = bits(_T_92, 15, 8) @[CircuitMath.scala 35:17]
        node _T_130 = bits(_T_92, 7, 0) @[CircuitMath.scala 36:17]
        node _T_131 = orr(_T_129) @[CircuitMath.scala 37:22]
        node _T_132 = bits(_T_129, 7, 4) @[CircuitMath.scala 35:17]
        node _T_133 = bits(_T_129, 3, 0) @[CircuitMath.scala 36:17]
        node _T_134 = orr(_T_132) @[CircuitMath.scala 37:22]
        node _T_135 = bits(_T_132, 3, 3) @[CircuitMath.scala 32:12]
        node _T_136 = bits(_T_132, 2, 2) @[CircuitMath.scala 32:12]
        node _T_137 = bits(_T_132, 1, 1) @[CircuitMath.scala 30:8]
        node _T_138 = mux(_T_136, UInt<2>("h02"), _T_137) @[CircuitMath.scala 32:10]
        node _T_139 = mux(_T_135, UInt<2>("h03"), _T_138) @[CircuitMath.scala 32:10]
        node _T_140 = bits(_T_133, 3, 3) @[CircuitMath.scala 32:12]
        node _T_141 = bits(_T_133, 2, 2) @[CircuitMath.scala 32:12]
        node _T_142 = bits(_T_133, 1, 1) @[CircuitMath.scala 30:8]
        node _T_143 = mux(_T_141, UInt<2>("h02"), _T_142) @[CircuitMath.scala 32:10]
        node _T_144 = mux(_T_140, UInt<2>("h03"), _T_143) @[CircuitMath.scala 32:10]
        node _T_145 = mux(_T_134, _T_139, _T_144) @[CircuitMath.scala 38:21]
        node _T_146 = cat(_T_134, _T_145) @[Cat.scala 29:58]
        node _T_147 = bits(_T_130, 7, 4) @[CircuitMath.scala 35:17]
        node _T_148 = bits(_T_130, 3, 0) @[CircuitMath.scala 36:17]
        node _T_149 = orr(_T_147) @[CircuitMath.scala 37:22]
        node _T_150 = bits(_T_147, 3, 3) @[CircuitMath.scala 32:12]
        node _T_151 = bits(_T_147, 2, 2) @[CircuitMath.scala 32:12]
        node _T_152 = bits(_T_147, 1, 1) @[CircuitMath.scala 30:8]
        node _T_153 = mux(_T_151, UInt<2>("h02"), _T_152) @[CircuitMath.scala 32:10]
        node _T_154 = mux(_T_150, UInt<2>("h03"), _T_153) @[CircuitMath.scala 32:10]
        node _T_155 = bits(_T_148, 3, 3) @[CircuitMath.scala 32:12]
        node _T_156 = bits(_T_148, 2, 2) @[CircuitMath.scala 32:12]
        node _T_157 = bits(_T_148, 1, 1) @[CircuitMath.scala 30:8]
        node _T_158 = mux(_T_156, UInt<2>("h02"), _T_157) @[CircuitMath.scala 32:10]
        node _T_159 = mux(_T_155, UInt<2>("h03"), _T_158) @[CircuitMath.scala 32:10]
        node _T_160 = mux(_T_149, _T_154, _T_159) @[CircuitMath.scala 38:21]
        node _T_161 = cat(_T_149, _T_160) @[Cat.scala 29:58]
        node _T_162 = mux(_T_131, _T_146, _T_161) @[CircuitMath.scala 38:21]
        node _T_163 = cat(_T_131, _T_162) @[Cat.scala 29:58]
        node _T_164 = mux(_T_93, _T_128, _T_163) @[CircuitMath.scala 38:21]
        node _T_165 = cat(_T_93, _T_164) @[Cat.scala 29:58]
        node _T_166 = mux(_T_15, _T_90, _T_165) @[CircuitMath.scala 38:21]
        node _T_167 = cat(_T_15, _T_166) @[Cat.scala 29:58]
        node _T_168 = or(UInt<7>("h040"), _T_167) @[MDU.scala 105:31]
        node _T_169 = bits(aValx2Reg, 64, 64) @[CircuitMath.scala 35:17]
        node _T_170 = bits(aValx2Reg, 63, 0) @[CircuitMath.scala 36:17]
        node _T_171 = orr(_T_169) @[CircuitMath.scala 37:22]
        node _T_172 = bits(_T_170, 63, 32) @[CircuitMath.scala 35:17]
        node _T_173 = bits(_T_170, 31, 0) @[CircuitMath.scala 36:17]
        node _T_174 = orr(_T_172) @[CircuitMath.scala 37:22]
        node _T_175 = bits(_T_172, 31, 16) @[CircuitMath.scala 35:17]
        node _T_176 = bits(_T_172, 15, 0) @[CircuitMath.scala 36:17]
        node _T_177 = orr(_T_175) @[CircuitMath.scala 37:22]
        node _T_178 = bits(_T_175, 15, 8) @[CircuitMath.scala 35:17]
        node _T_179 = bits(_T_175, 7, 0) @[CircuitMath.scala 36:17]
        node _T_180 = orr(_T_178) @[CircuitMath.scala 37:22]
        node _T_181 = bits(_T_178, 7, 4) @[CircuitMath.scala 35:17]
        node _T_182 = bits(_T_178, 3, 0) @[CircuitMath.scala 36:17]
        node _T_183 = orr(_T_181) @[CircuitMath.scala 37:22]
        node _T_184 = bits(_T_181, 3, 3) @[CircuitMath.scala 32:12]
        node _T_185 = bits(_T_181, 2, 2) @[CircuitMath.scala 32:12]
        node _T_186 = bits(_T_181, 1, 1) @[CircuitMath.scala 30:8]
        node _T_187 = mux(_T_185, UInt<2>("h02"), _T_186) @[CircuitMath.scala 32:10]
        node _T_188 = mux(_T_184, UInt<2>("h03"), _T_187) @[CircuitMath.scala 32:10]
        node _T_189 = bits(_T_182, 3, 3) @[CircuitMath.scala 32:12]
        node _T_190 = bits(_T_182, 2, 2) @[CircuitMath.scala 32:12]
        node _T_191 = bits(_T_182, 1, 1) @[CircuitMath.scala 30:8]
        node _T_192 = mux(_T_190, UInt<2>("h02"), _T_191) @[CircuitMath.scala 32:10]
        node _T_193 = mux(_T_189, UInt<2>("h03"), _T_192) @[CircuitMath.scala 32:10]
        node _T_194 = mux(_T_183, _T_188, _T_193) @[CircuitMath.scala 38:21]
        node _T_195 = cat(_T_183, _T_194) @[Cat.scala 29:58]
        node _T_196 = bits(_T_179, 7, 4) @[CircuitMath.scala 35:17]
        node _T_197 = bits(_T_179, 3, 0) @[CircuitMath.scala 36:17]
        node _T_198 = orr(_T_196) @[CircuitMath.scala 37:22]
        node _T_199 = bits(_T_196, 3, 3) @[CircuitMath.scala 32:12]
        node _T_200 = bits(_T_196, 2, 2) @[CircuitMath.scala 32:12]
        node _T_201 = bits(_T_196, 1, 1) @[CircuitMath.scala 30:8]
        node _T_202 = mux(_T_200, UInt<2>("h02"), _T_201) @[CircuitMath.scala 32:10]
        node _T_203 = mux(_T_199, UInt<2>("h03"), _T_202) @[CircuitMath.scala 32:10]
        node _T_204 = bits(_T_197, 3, 3) @[CircuitMath.scala 32:12]
        node _T_205 = bits(_T_197, 2, 2) @[CircuitMath.scala 32:12]
        node _T_206 = bits(_T_197, 1, 1) @[CircuitMath.scala 30:8]
        node _T_207 = mux(_T_205, UInt<2>("h02"), _T_206) @[CircuitMath.scala 32:10]
        node _T_208 = mux(_T_204, UInt<2>("h03"), _T_207) @[CircuitMath.scala 32:10]
        node _T_209 = mux(_T_198, _T_203, _T_208) @[CircuitMath.scala 38:21]
        node _T_210 = cat(_T_198, _T_209) @[Cat.scala 29:58]
        node _T_211 = mux(_T_180, _T_195, _T_210) @[CircuitMath.scala 38:21]
        node _T_212 = cat(_T_180, _T_211) @[Cat.scala 29:58]
        node _T_213 = bits(_T_176, 15, 8) @[CircuitMath.scala 35:17]
        node _T_214 = bits(_T_176, 7, 0) @[CircuitMath.scala 36:17]
        node _T_215 = orr(_T_213) @[CircuitMath.scala 37:22]
        node _T_216 = bits(_T_213, 7, 4) @[CircuitMath.scala 35:17]
        node _T_217 = bits(_T_213, 3, 0) @[CircuitMath.scala 36:17]
        node _T_218 = orr(_T_216) @[CircuitMath.scala 37:22]
        node _T_219 = bits(_T_216, 3, 3) @[CircuitMath.scala 32:12]
        node _T_220 = bits(_T_216, 2, 2) @[CircuitMath.scala 32:12]
        node _T_221 = bits(_T_216, 1, 1) @[CircuitMath.scala 30:8]
        node _T_222 = mux(_T_220, UInt<2>("h02"), _T_221) @[CircuitMath.scala 32:10]
        node _T_223 = mux(_T_219, UInt<2>("h03"), _T_222) @[CircuitMath.scala 32:10]
        node _T_224 = bits(_T_217, 3, 3) @[CircuitMath.scala 32:12]
        node _T_225 = bits(_T_217, 2, 2) @[CircuitMath.scala 32:12]
        node _T_226 = bits(_T_217, 1, 1) @[CircuitMath.scala 30:8]
        node _T_227 = mux(_T_225, UInt<2>("h02"), _T_226) @[CircuitMath.scala 32:10]
        node _T_228 = mux(_T_224, UInt<2>("h03"), _T_227) @[CircuitMath.scala 32:10]
        node _T_229 = mux(_T_218, _T_223, _T_228) @[CircuitMath.scala 38:21]
        node _T_230 = cat(_T_218, _T_229) @[Cat.scala 29:58]
        node _T_231 = bits(_T_214, 7, 4) @[CircuitMath.scala 35:17]
        node _T_232 = bits(_T_214, 3, 0) @[CircuitMath.scala 36:17]
        node _T_233 = orr(_T_231) @[CircuitMath.scala 37:22]
        node _T_234 = bits(_T_231, 3, 3) @[CircuitMath.scala 32:12]
        node _T_235 = bits(_T_231, 2, 2) @[CircuitMath.scala 32:12]
        node _T_236 = bits(_T_231, 1, 1) @[CircuitMath.scala 30:8]
        node _T_237 = mux(_T_235, UInt<2>("h02"), _T_236) @[CircuitMath.scala 32:10]
        node _T_238 = mux(_T_234, UInt<2>("h03"), _T_237) @[CircuitMath.scala 32:10]
        node _T_239 = bits(_T_232, 3, 3) @[CircuitMath.scala 32:12]
        node _T_240 = bits(_T_232, 2, 2) @[CircuitMath.scala 32:12]
        node _T_241 = bits(_T_232, 1, 1) @[CircuitMath.scala 30:8]
        node _T_242 = mux(_T_240, UInt<2>("h02"), _T_241) @[CircuitMath.scala 32:10]
        node _T_243 = mux(_T_239, UInt<2>("h03"), _T_242) @[CircuitMath.scala 32:10]
        node _T_244 = mux(_T_233, _T_238, _T_243) @[CircuitMath.scala 38:21]
        node _T_245 = cat(_T_233, _T_244) @[Cat.scala 29:58]
        node _T_246 = mux(_T_215, _T_230, _T_245) @[CircuitMath.scala 38:21]
        node _T_247 = cat(_T_215, _T_246) @[Cat.scala 29:58]
        node _T_248 = mux(_T_177, _T_212, _T_247) @[CircuitMath.scala 38:21]
        node _T_249 = cat(_T_177, _T_248) @[Cat.scala 29:58]
        node _T_250 = bits(_T_173, 31, 16) @[CircuitMath.scala 35:17]
        node _T_251 = bits(_T_173, 15, 0) @[CircuitMath.scala 36:17]
        node _T_252 = orr(_T_250) @[CircuitMath.scala 37:22]
        node _T_253 = bits(_T_250, 15, 8) @[CircuitMath.scala 35:17]
        node _T_254 = bits(_T_250, 7, 0) @[CircuitMath.scala 36:17]
        node _T_255 = orr(_T_253) @[CircuitMath.scala 37:22]
        node _T_256 = bits(_T_253, 7, 4) @[CircuitMath.scala 35:17]
        node _T_257 = bits(_T_253, 3, 0) @[CircuitMath.scala 36:17]
        node _T_258 = orr(_T_256) @[CircuitMath.scala 37:22]
        node _T_259 = bits(_T_256, 3, 3) @[CircuitMath.scala 32:12]
        node _T_260 = bits(_T_256, 2, 2) @[CircuitMath.scala 32:12]
        node _T_261 = bits(_T_256, 1, 1) @[CircuitMath.scala 30:8]
        node _T_262 = mux(_T_260, UInt<2>("h02"), _T_261) @[CircuitMath.scala 32:10]
        node _T_263 = mux(_T_259, UInt<2>("h03"), _T_262) @[CircuitMath.scala 32:10]
        node _T_264 = bits(_T_257, 3, 3) @[CircuitMath.scala 32:12]
        node _T_265 = bits(_T_257, 2, 2) @[CircuitMath.scala 32:12]
        node _T_266 = bits(_T_257, 1, 1) @[CircuitMath.scala 30:8]
        node _T_267 = mux(_T_265, UInt<2>("h02"), _T_266) @[CircuitMath.scala 32:10]
        node _T_268 = mux(_T_264, UInt<2>("h03"), _T_267) @[CircuitMath.scala 32:10]
        node _T_269 = mux(_T_258, _T_263, _T_268) @[CircuitMath.scala 38:21]
        node _T_270 = cat(_T_258, _T_269) @[Cat.scala 29:58]
        node _T_271 = bits(_T_254, 7, 4) @[CircuitMath.scala 35:17]
        node _T_272 = bits(_T_254, 3, 0) @[CircuitMath.scala 36:17]
        node _T_273 = orr(_T_271) @[CircuitMath.scala 37:22]
        node _T_274 = bits(_T_271, 3, 3) @[CircuitMath.scala 32:12]
        node _T_275 = bits(_T_271, 2, 2) @[CircuitMath.scala 32:12]
        node _T_276 = bits(_T_271, 1, 1) @[CircuitMath.scala 30:8]
        node _T_277 = mux(_T_275, UInt<2>("h02"), _T_276) @[CircuitMath.scala 32:10]
        node _T_278 = mux(_T_274, UInt<2>("h03"), _T_277) @[CircuitMath.scala 32:10]
        node _T_279 = bits(_T_272, 3, 3) @[CircuitMath.scala 32:12]
        node _T_280 = bits(_T_272, 2, 2) @[CircuitMath.scala 32:12]
        node _T_281 = bits(_T_272, 1, 1) @[CircuitMath.scala 30:8]
        node _T_282 = mux(_T_280, UInt<2>("h02"), _T_281) @[CircuitMath.scala 32:10]
        node _T_283 = mux(_T_279, UInt<2>("h03"), _T_282) @[CircuitMath.scala 32:10]
        node _T_284 = mux(_T_273, _T_278, _T_283) @[CircuitMath.scala 38:21]
        node _T_285 = cat(_T_273, _T_284) @[Cat.scala 29:58]
        node _T_286 = mux(_T_255, _T_270, _T_285) @[CircuitMath.scala 38:21]
        node _T_287 = cat(_T_255, _T_286) @[Cat.scala 29:58]
        node _T_288 = bits(_T_251, 15, 8) @[CircuitMath.scala 35:17]
        node _T_289 = bits(_T_251, 7, 0) @[CircuitMath.scala 36:17]
        node _T_290 = orr(_T_288) @[CircuitMath.scala 37:22]
        node _T_291 = bits(_T_288, 7, 4) @[CircuitMath.scala 35:17]
        node _T_292 = bits(_T_288, 3, 0) @[CircuitMath.scala 36:17]
        node _T_293 = orr(_T_291) @[CircuitMath.scala 37:22]
        node _T_294 = bits(_T_291, 3, 3) @[CircuitMath.scala 32:12]
        node _T_295 = bits(_T_291, 2, 2) @[CircuitMath.scala 32:12]
        node _T_296 = bits(_T_291, 1, 1) @[CircuitMath.scala 30:8]
        node _T_297 = mux(_T_295, UInt<2>("h02"), _T_296) @[CircuitMath.scala 32:10]
        node _T_298 = mux(_T_294, UInt<2>("h03"), _T_297) @[CircuitMath.scala 32:10]
        node _T_299 = bits(_T_292, 3, 3) @[CircuitMath.scala 32:12]
        node _T_300 = bits(_T_292, 2, 2) @[CircuitMath.scala 32:12]
        node _T_301 = bits(_T_292, 1, 1) @[CircuitMath.scala 30:8]
        node _T_302 = mux(_T_300, UInt<2>("h02"), _T_301) @[CircuitMath.scala 32:10]
        node _T_303 = mux(_T_299, UInt<2>("h03"), _T_302) @[CircuitMath.scala 32:10]
        node _T_304 = mux(_T_293, _T_298, _T_303) @[CircuitMath.scala 38:21]
        node _T_305 = cat(_T_293, _T_304) @[Cat.scala 29:58]
        node _T_306 = bits(_T_289, 7, 4) @[CircuitMath.scala 35:17]
        node _T_307 = bits(_T_289, 3, 0) @[CircuitMath.scala 36:17]
        node _T_308 = orr(_T_306) @[CircuitMath.scala 37:22]
        node _T_309 = bits(_T_306, 3, 3) @[CircuitMath.scala 32:12]
        node _T_310 = bits(_T_306, 2, 2) @[CircuitMath.scala 32:12]
        node _T_311 = bits(_T_306, 1, 1) @[CircuitMath.scala 30:8]
        node _T_312 = mux(_T_310, UInt<2>("h02"), _T_311) @[CircuitMath.scala 32:10]
        node _T_313 = mux(_T_309, UInt<2>("h03"), _T_312) @[CircuitMath.scala 32:10]
        node _T_314 = bits(_T_307, 3, 3) @[CircuitMath.scala 32:12]
        node _T_315 = bits(_T_307, 2, 2) @[CircuitMath.scala 32:12]
        node _T_316 = bits(_T_307, 1, 1) @[CircuitMath.scala 30:8]
        node _T_317 = mux(_T_315, UInt<2>("h02"), _T_316) @[CircuitMath.scala 32:10]
        node _T_318 = mux(_T_314, UInt<2>("h03"), _T_317) @[CircuitMath.scala 32:10]
        node _T_319 = mux(_T_308, _T_313, _T_318) @[CircuitMath.scala 38:21]
        node _T_320 = cat(_T_308, _T_319) @[Cat.scala 29:58]
        node _T_321 = mux(_T_290, _T_305, _T_320) @[CircuitMath.scala 38:21]
        node _T_322 = cat(_T_290, _T_321) @[Cat.scala 29:58]
        node _T_323 = mux(_T_252, _T_287, _T_322) @[CircuitMath.scala 38:21]
        node _T_324 = cat(_T_252, _T_323) @[Cat.scala 29:58]
        node _T_325 = mux(_T_174, _T_249, _T_324) @[CircuitMath.scala 38:21]
        node _T_326 = cat(_T_174, _T_325) @[Cat.scala 29:58]
        node _T_327 = mux(_T_171, UInt<1>("h00"), _T_326) @[CircuitMath.scala 38:21]
        node _T_328 = cat(_T_171, _T_327) @[Cat.scala 29:58]
        node _T_329 = sub(_T_168, _T_328) @[MDU.scala 105:45]
        node _T_330 = tail(_T_329, 1) @[MDU.scala 105:45]
        node _T_331 = geq(_T_330, UInt<6>("h03f")) @[MDU.scala 109:52]
        node _T_332 = mux(_T_331, UInt<6>("h03f"), _T_330) @[MDU.scala 109:38]
        node _T_333 = mux(divBy0, UInt<1>("h00"), _T_332) @[MDU.scala 109:21]
        value <= _T_333 @[MDU.scala 109:15]
        state <= UInt<3>("h02") @[MDU.scala 110:11]
        skip @[MDU.scala 97:34]
      else : @[MDU.scala 111:35]
        node _T_334 = eq(state, UInt<3>("h02")) @[MDU.scala 111:22]
        when _T_334 : @[MDU.scala 111:35]
          node _T_335 = dshl(aValx2Reg, value) @[MDU.scala 112:27]
          shiftReg <= _T_335 @[MDU.scala 112:14]
          state <= UInt<3>("h03") @[MDU.scala 113:11]
          skip @[MDU.scala 111:35]
        else : @[MDU.scala 114:37]
          node _T_336 = eq(state, UInt<3>("h03")) @[MDU.scala 114:22]
          when _T_336 : @[MDU.scala 114:37]
            node _T_337 = geq(hi, bReg) @[MDU.scala 115:28]
            node _T_338 = sub(hi, bReg) @[MDU.scala 116:36]
            node _T_339 = tail(_T_338, 1) @[MDU.scala 116:36]
            node _T_340 = mux(_T_337, _T_339, hi) @[MDU.scala 116:24]
            node _T_341 = bits(_T_340, 63, 0) @[MDU.scala 116:47]
            node _T_342 = cat(_T_341, lo) @[Cat.scala 29:58]
            node _T_343 = cat(_T_342, _T_337) @[Cat.scala 29:58]
            shiftReg <= _T_343 @[MDU.scala 116:14]
            node _T_344 = eq(value, UInt<6>("h03f")) @[Counter.scala 38:24]
            node _T_345 = add(value, UInt<1>("h01")) @[Counter.scala 39:22]
            node _T_346 = tail(_T_345, 1) @[Counter.scala 39:22]
            value <= _T_346 @[Counter.scala 39:13]
            node _T_347 = eq(value, UInt<6>("h03f")) @[MDU.scala 118:21]
            when _T_347 : @[MDU.scala 118:36]
              state <= UInt<3>("h04") @[MDU.scala 118:44]
              skip @[MDU.scala 118:36]
            skip @[MDU.scala 114:37]
          else : @[MDU.scala 119:36]
            node _T_348 = eq(state, UInt<3>("h04")) @[MDU.scala 119:22]
            when _T_348 : @[MDU.scala 119:36]
              state <= UInt<3>("h00") @[MDU.scala 120:11]
              skip @[MDU.scala 119:36]
    node r = bits(hi, 64, 1) @[MDU.scala 123:13]
    node _T_349 = sub(UInt<1>("h00"), lo) @[MDU.scala 124:28]
    node _T_350 = tail(_T_349, 1) @[MDU.scala 124:28]
    node resQ = mux(qSignReg, _T_350, lo) @[MDU.scala 124:17]
    node _T_351 = sub(UInt<1>("h00"), r) @[MDU.scala 125:28]
    node _T_352 = tail(_T_351, 1) @[MDU.scala 125:28]
    node resR = mux(aSignReg, _T_352, r) @[MDU.scala 125:17]
    node _T_353 = cat(resR, resQ) @[Cat.scala 29:58]
    io.out.bits <= _T_353 @[MDU.scala 126:15]
    node _T_354 = eq(state, UInt<3>("h04")) @[MDU.scala 128:39]
    io.out.valid <= _T_354 @[MDU.scala 128:16]
    node _T_355 = eq(state, UInt<3>("h00")) @[MDU.scala 129:25]
    io.in.ready <= _T_355 @[MDU.scala 129:15]
    
  module MDU : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {src1 : UInt<64>, src2 : UInt<64>, func : UInt<7>}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}}
    
    node isDiv = bits(io.in.bits.func, 2, 2) @[MDU.scala 41:27]
    node _T = bits(io.in.bits.func, 2, 2) @[MDU.scala 41:27]
    node _T_1 = bits(io.in.bits.func, 0, 0) @[MDU.scala 42:45]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[MDU.scala 42:42]
    node isDivSign = and(_T, _T_2) @[MDU.scala 42:39]
    node isW = bits(io.in.bits.func, 3, 3) @[MDU.scala 43:25]
    inst mul of Multiplier @[MDU.scala 151:19]
    mul.clock <= clock
    mul.reset <= reset
    inst div of Divider @[MDU.scala 152:19]
    div.clock <= clock
    div.reset <= reset
    mul.io.sign <= isDivSign @[MDU.scala 154:12]
    mul.io.out.ready <= io.out.ready @[MDU.scala 155:17]
    div.io.sign <= isDivSign @[MDU.scala 154:12]
    div.io.out.ready <= io.out.ready @[MDU.scala 155:17]
    node _T_3 = bits(io.in.bits.func, 1, 0) @[MDU.scala 166:39]
    node _T_4 = cat(UInt<1>("h00"), io.in.bits.src1) @[Cat.scala 29:58]
    node _T_5 = bits(io.in.bits.src1, 63, 63) @[BitUtils.scala 39:20]
    node _T_6 = cat(_T_5, io.in.bits.src1) @[Cat.scala 29:58]
    node _T_7 = bits(io.in.bits.src1, 63, 63) @[BitUtils.scala 39:20]
    node _T_8 = cat(_T_7, io.in.bits.src1) @[Cat.scala 29:58]
    node _T_9 = cat(UInt<1>("h00"), io.in.bits.src1) @[Cat.scala 29:58]
    node _T_10 = eq(UInt<2>("h00"), _T_3) @[LookupTree.scala 24:34]
    node _T_11 = eq(UInt<2>("h01"), _T_3) @[LookupTree.scala 24:34]
    node _T_12 = eq(UInt<2>("h02"), _T_3) @[LookupTree.scala 24:34]
    node _T_13 = eq(UInt<2>("h03"), _T_3) @[LookupTree.scala 24:34]
    node _T_14 = mux(_T_10, _T_4, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_15 = mux(_T_11, _T_6, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_16 = mux(_T_12, _T_8, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_17 = mux(_T_13, _T_9, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_18 = or(_T_14, _T_15) @[Mux.scala 27:72]
    node _T_19 = or(_T_18, _T_16) @[Mux.scala 27:72]
    node _T_20 = or(_T_19, _T_17) @[Mux.scala 27:72]
    wire _T_21 : UInt<65> @[Mux.scala 27:72]
    _T_21 <= _T_20 @[Mux.scala 27:72]
    mul.io.in.bits[0] <= _T_21 @[MDU.scala 166:21]
    node _T_22 = bits(io.in.bits.func, 1, 0) @[MDU.scala 167:39]
    node _T_23 = cat(UInt<1>("h00"), io.in.bits.src2) @[Cat.scala 29:58]
    node _T_24 = bits(io.in.bits.src2, 63, 63) @[BitUtils.scala 39:20]
    node _T_25 = cat(_T_24, io.in.bits.src2) @[Cat.scala 29:58]
    node _T_26 = cat(UInt<1>("h00"), io.in.bits.src2) @[Cat.scala 29:58]
    node _T_27 = cat(UInt<1>("h00"), io.in.bits.src2) @[Cat.scala 29:58]
    node _T_28 = eq(UInt<2>("h00"), _T_22) @[LookupTree.scala 24:34]
    node _T_29 = eq(UInt<2>("h01"), _T_22) @[LookupTree.scala 24:34]
    node _T_30 = eq(UInt<2>("h02"), _T_22) @[LookupTree.scala 24:34]
    node _T_31 = eq(UInt<2>("h03"), _T_22) @[LookupTree.scala 24:34]
    node _T_32 = mux(_T_28, _T_23, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_33 = mux(_T_29, _T_25, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_34 = mux(_T_30, _T_26, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_35 = mux(_T_31, _T_27, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_36 = or(_T_32, _T_33) @[Mux.scala 27:72]
    node _T_37 = or(_T_36, _T_34) @[Mux.scala 27:72]
    node _T_38 = or(_T_37, _T_35) @[Mux.scala 27:72]
    wire _T_39 : UInt<65> @[Mux.scala 27:72]
    _T_39 <= _T_38 @[Mux.scala 27:72]
    mul.io.in.bits[1] <= _T_39 @[MDU.scala 167:21]
    node _T_40 = bits(io.in.bits.src1, 31, 0) @[MDU.scala 169:68]
    node _T_41 = bits(_T_40, 31, 31) @[BitUtils.scala 39:20]
    node _T_42 = bits(_T_41, 0, 0) @[Bitwise.scala 72:15]
    node _T_43 = mux(_T_42, UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 72:12]
    node _T_44 = cat(_T_43, _T_40) @[Cat.scala 29:58]
    node _T_45 = bits(io.in.bits.src1, 31, 0) @[MDU.scala 169:92]
    node _T_46 = cat(UInt<32>("h00"), _T_45) @[Cat.scala 29:58]
    node _T_47 = mux(isDivSign, _T_44, _T_46) @[MDU.scala 169:47]
    node _T_48 = mux(isW, _T_47, io.in.bits.src1) @[MDU.scala 169:38]
    div.io.in.bits[0] <= _T_48 @[MDU.scala 170:21]
    node _T_49 = bits(io.in.bits.src2, 31, 0) @[MDU.scala 169:68]
    node _T_50 = bits(_T_49, 31, 31) @[BitUtils.scala 39:20]
    node _T_51 = bits(_T_50, 0, 0) @[Bitwise.scala 72:15]
    node _T_52 = mux(_T_51, UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 72:12]
    node _T_53 = cat(_T_52, _T_49) @[Cat.scala 29:58]
    node _T_54 = bits(io.in.bits.src2, 31, 0) @[MDU.scala 169:92]
    node _T_55 = cat(UInt<32>("h00"), _T_54) @[Cat.scala 29:58]
    node _T_56 = mux(isDivSign, _T_53, _T_55) @[MDU.scala 169:47]
    node _T_57 = mux(isW, _T_56, io.in.bits.src2) @[MDU.scala 169:38]
    div.io.in.bits[1] <= _T_57 @[MDU.scala 171:21]
    node _T_58 = eq(isDiv, UInt<1>("h00")) @[MDU.scala 173:37]
    node _T_59 = and(io.in.valid, _T_58) @[MDU.scala 173:34]
    mul.io.in.valid <= _T_59 @[MDU.scala 173:19]
    node _T_60 = and(io.in.valid, isDiv) @[MDU.scala 174:34]
    div.io.in.valid <= _T_60 @[MDU.scala 174:19]
    node _T_61 = bits(io.in.bits.func, 1, 0) @[MDU.scala 176:24]
    node _T_62 = eq(_T_61, UInt<2>("h00")) @[MDU.scala 176:30]
    node _T_63 = bits(mul.io.out.bits, 63, 0) @[MDU.scala 176:69]
    node _T_64 = bits(mul.io.out.bits, 127, 64) @[MDU.scala 176:96]
    node mulRes = mux(_T_62, _T_63, _T_64) @[MDU.scala 176:19]
    node _T_65 = bits(io.in.bits.func, 1, 1) @[MDU.scala 177:24]
    node _T_66 = bits(div.io.out.bits, 127, 64) @[MDU.scala 177:54]
    node _T_67 = bits(div.io.out.bits, 63, 0) @[MDU.scala 177:86]
    node divRes = mux(_T_65, _T_66, _T_67) @[MDU.scala 177:19]
    node res = mux(isDiv, divRes, mulRes) @[MDU.scala 178:16]
    node _T_68 = bits(res, 31, 0) @[MDU.scala 179:38]
    node _T_69 = bits(_T_68, 31, 31) @[BitUtils.scala 39:20]
    node _T_70 = bits(_T_69, 0, 0) @[Bitwise.scala 72:15]
    node _T_71 = mux(_T_70, UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 72:12]
    node _T_72 = cat(_T_71, _T_68) @[Cat.scala 29:58]
    node _T_73 = mux(isW, _T_72, res) @[MDU.scala 179:21]
    io.out.bits <= _T_73 @[MDU.scala 179:15]
    node _T_74 = and(io.in.ready, io.in.valid) @[Decoupled.scala 40:37]
    reg _T_75 : UInt<1>, clock @[MDU.scala 181:50]
    _T_75 <= isDiv @[MDU.scala 181:50]
    node isDivReg = mux(_T_74, isDiv, _T_75) @[MDU.scala 181:21]
    node _T_76 = mux(isDiv, div.io.in.ready, mul.io.in.ready) @[MDU.scala 182:21]
    io.in.ready <= _T_76 @[MDU.scala 182:15]
    node _T_77 = mux(isDivReg, div.io.out.valid, mul.io.out.valid) @[MDU.scala 183:22]
    io.out.valid <= _T_77 @[MDU.scala 183:16]
    reg _T_78 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_79 = add(_T_78, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_80 = tail(_T_79, 1) @[GTimer.scala 25:12]
    _T_78 <= _T_80 @[GTimer.scala 25:7]
    wire _T_81 : UInt<1>
    _T_81 <= UInt<1>("h00")
    node _T_82 = and(UInt<1>("h01"), _T_81) @[Debug.scala 55:16]
    when _T_82 : @[Debug.scala 55:31]
      node _T_83 = asUInt(reset) @[Debug.scala 56:24]
      node _T_84 = eq(_T_83, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_84 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] MDU: ", _T_78) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_85 = asUInt(reset) @[Debug.scala 57:13]
      node _T_86 = eq(_T_85, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_86 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[FU-MDU] irv-orv %d %d - %d %d\n", io.in.ready, io.in.valid, io.out.ready, io.out.valid) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_87 = and(mul.io.out.ready, mul.io.out.valid) @[Decoupled.scala 40:37]
    
  module CSR : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {src1 : UInt<64>, src2 : UInt<64>, func : UInt<7>}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, flip cfIn : {instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>}, redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, flip instrValid : UInt<1>, flip isBackendException : UInt<1>, intrNO : UInt<64>, flip imemMMU : {flip priviledgeMode : UInt<2>, flip status_sum : UInt<1>, flip status_mxr : UInt<1>, loadPF : UInt<1>, storePF : UInt<1>, addr : UInt<39>}, flip dmemMMU : {flip priviledgeMode : UInt<2>, flip status_sum : UInt<1>, flip status_mxr : UInt<1>, loadPF : UInt<1>, storePF : UInt<1>, addr : UInt<39>}, wenFix : UInt<1>}
    
    reg csrNotImplemented : UInt<64>, clock with : (reset => (reset, UInt<1>("h00"))) @[CSR.scala 212:34]
    reg mtvec : UInt<64>, clock with : (reset => (reset, UInt<1>("h00"))) @[CSR.scala 251:22]
    reg mcounteren : UInt<64>, clock with : (reset => (reset, UInt<1>("h00"))) @[CSR.scala 252:27]
    reg mcause : UInt<64>, clock with : (reset => (reset, UInt<1>("h00"))) @[CSR.scala 253:23]
    reg mtval : UInt<64>, clock with : (reset => (reset, UInt<1>("h00"))) @[CSR.scala 254:22]
    reg mepc : UInt<64>, clock @[CSR.scala 255:17]
    reg mie : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[CSR.scala 257:20]
    wire _T : {e : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, t : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, s : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}} @[CSR.scala 258:38]
    _T.s.u <= UInt<1>("h00") @[CSR.scala 258:38]
    _T.s.s <= UInt<1>("h00") @[CSR.scala 258:38]
    _T.s.h <= UInt<1>("h00") @[CSR.scala 258:38]
    _T.s.m <= UInt<1>("h00") @[CSR.scala 258:38]
    _T.t.u <= UInt<1>("h00") @[CSR.scala 258:38]
    _T.t.s <= UInt<1>("h00") @[CSR.scala 258:38]
    _T.t.h <= UInt<1>("h00") @[CSR.scala 258:38]
    _T.t.m <= UInt<1>("h00") @[CSR.scala 258:38]
    _T.e.u <= UInt<1>("h00") @[CSR.scala 258:38]
    _T.e.s <= UInt<1>("h00") @[CSR.scala 258:38]
    _T.e.h <= UInt<1>("h00") @[CSR.scala 258:38]
    _T.e.m <= UInt<1>("h00") @[CSR.scala 258:38]
    wire mipWire : {e : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, t : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, s : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}}
    mipWire.s.u <= _T.s.u
    mipWire.s.s <= _T.s.s
    mipWire.s.h <= _T.s.h
    mipWire.s.m <= _T.s.m
    mipWire.t.u <= _T.t.u
    mipWire.t.s <= _T.t.s
    mipWire.t.h <= _T.t.h
    mipWire.t.m <= _T.t.m
    mipWire.e.u <= _T.e.u
    mipWire.e.s <= _T.e.s
    mipWire.e.h <= _T.e.h
    mipWire.e.m <= _T.e.m
    wire _T_1 : {e : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, t : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, s : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}} @[CSR.scala 259:37]
    _T_1.s.u <= UInt<1>("h00") @[CSR.scala 259:37]
    _T_1.s.s <= UInt<1>("h00") @[CSR.scala 259:37]
    _T_1.s.h <= UInt<1>("h00") @[CSR.scala 259:37]
    _T_1.s.m <= UInt<1>("h00") @[CSR.scala 259:37]
    _T_1.t.u <= UInt<1>("h00") @[CSR.scala 259:37]
    _T_1.t.s <= UInt<1>("h00") @[CSR.scala 259:37]
    _T_1.t.h <= UInt<1>("h00") @[CSR.scala 259:37]
    _T_1.t.m <= UInt<1>("h00") @[CSR.scala 259:37]
    _T_1.e.u <= UInt<1>("h00") @[CSR.scala 259:37]
    _T_1.e.s <= UInt<1>("h00") @[CSR.scala 259:37]
    _T_1.e.h <= UInt<1>("h00") @[CSR.scala 259:37]
    _T_1.e.m <= UInt<1>("h00") @[CSR.scala 259:37]
    node _T_2 = cat(_T_1.s.h, _T_1.s.s) @[CSR.scala 259:53]
    node _T_3 = cat(_T_2, _T_1.s.u) @[CSR.scala 259:53]
    node _T_4 = cat(_T_1.t.s, _T_1.t.u) @[CSR.scala 259:53]
    node _T_5 = cat(_T_4, _T_1.s.m) @[CSR.scala 259:53]
    node _T_6 = cat(_T_5, _T_3) @[CSR.scala 259:53]
    node _T_7 = cat(_T_1.e.u, _T_1.t.m) @[CSR.scala 259:53]
    node _T_8 = cat(_T_7, _T_1.t.h) @[CSR.scala 259:53]
    node _T_9 = cat(_T_1.e.m, _T_1.e.h) @[CSR.scala 259:53]
    node _T_10 = cat(_T_9, _T_1.e.s) @[CSR.scala 259:53]
    node _T_11 = cat(_T_10, _T_8) @[CSR.scala 259:53]
    node _T_12 = cat(_T_11, _T_6) @[CSR.scala 259:53]
    reg mipReg : UInt, clock with : (reset => (reset, _T_12)) @[CSR.scala 259:24]
    node _T_13 = cat(mipWire.s.h, mipWire.s.s) @[CSR.scala 261:22]
    node _T_14 = cat(_T_13, mipWire.s.u) @[CSR.scala 261:22]
    node _T_15 = cat(mipWire.t.s, mipWire.t.u) @[CSR.scala 261:22]
    node _T_16 = cat(_T_15, mipWire.s.m) @[CSR.scala 261:22]
    node _T_17 = cat(_T_16, _T_14) @[CSR.scala 261:22]
    node _T_18 = cat(mipWire.e.u, mipWire.t.m) @[CSR.scala 261:22]
    node _T_19 = cat(_T_18, mipWire.t.h) @[CSR.scala 261:22]
    node _T_20 = cat(mipWire.e.m, mipWire.e.h) @[CSR.scala 261:22]
    node _T_21 = cat(_T_20, mipWire.e.s) @[CSR.scala 261:22]
    node _T_22 = cat(_T_21, _T_19) @[CSR.scala 261:22]
    node _T_23 = cat(_T_22, _T_17) @[CSR.scala 261:22]
    node _T_24 = or(_T_23, mipReg) @[CSR.scala 261:29]
    wire mip : {e : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, t : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, s : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}} @[CSR.scala 261:47]
    wire _T_25 : UInt<12>
    _T_25 <= _T_24
    node _T_26 = bits(_T_25, 0, 0) @[CSR.scala 261:47]
    mip.s.u <= _T_26 @[CSR.scala 261:47]
    node _T_27 = bits(_T_25, 1, 1) @[CSR.scala 261:47]
    mip.s.s <= _T_27 @[CSR.scala 261:47]
    node _T_28 = bits(_T_25, 2, 2) @[CSR.scala 261:47]
    mip.s.h <= _T_28 @[CSR.scala 261:47]
    node _T_29 = bits(_T_25, 3, 3) @[CSR.scala 261:47]
    mip.s.m <= _T_29 @[CSR.scala 261:47]
    node _T_30 = bits(_T_25, 4, 4) @[CSR.scala 261:47]
    mip.t.u <= _T_30 @[CSR.scala 261:47]
    node _T_31 = bits(_T_25, 5, 5) @[CSR.scala 261:47]
    mip.t.s <= _T_31 @[CSR.scala 261:47]
    node _T_32 = bits(_T_25, 6, 6) @[CSR.scala 261:47]
    mip.t.h <= _T_32 @[CSR.scala 261:47]
    node _T_33 = bits(_T_25, 7, 7) @[CSR.scala 261:47]
    mip.t.m <= _T_33 @[CSR.scala 261:47]
    node _T_34 = bits(_T_25, 8, 8) @[CSR.scala 261:47]
    mip.e.u <= _T_34 @[CSR.scala 261:47]
    node _T_35 = bits(_T_25, 9, 9) @[CSR.scala 261:47]
    mip.e.s <= _T_35 @[CSR.scala 261:47]
    node _T_36 = bits(_T_25, 10, 10) @[CSR.scala 261:47]
    mip.e.h <= _T_36 @[CSR.scala 261:47]
    node _T_37 = bits(_T_25, 11, 11) @[CSR.scala 261:47]
    mip.e.m <= _T_37 @[CSR.scala 261:47]
    node _T_38 = shl(UInt<2>("h02"), 62) @[CSR.scala 263:43]
    node _T_39 = shl(UInt<1>("h01"), 0) @[CSR.scala 264:42]
    node _T_40 = or(UInt<1>("h00"), _T_39) @[CSR.scala 268:75]
    node _T_41 = shl(UInt<1>("h01"), 18) @[CSR.scala 264:42]
    node _T_42 = or(_T_40, _T_41) @[CSR.scala 268:75]
    node _T_43 = shl(UInt<1>("h01"), 8) @[CSR.scala 264:42]
    node _T_44 = or(_T_42, _T_43) @[CSR.scala 268:75]
    node _T_45 = shl(UInt<1>("h01"), 20) @[CSR.scala 264:42]
    node _T_46 = or(_T_44, _T_45) @[CSR.scala 268:75]
    node _T_47 = shl(UInt<1>("h01"), 12) @[CSR.scala 264:42]
    node _T_48 = or(_T_46, _T_47) @[CSR.scala 268:75]
    node _T_49 = shl(UInt<1>("h01"), 2) @[CSR.scala 264:42]
    node _T_50 = or(_T_48, _T_49) @[CSR.scala 268:75]
    node misaInitVal = or(_T_38, _T_50) @[CSR.scala 268:35]
    reg misa : UInt<64>, clock with : (reset => (reset, misaInitVal)) @[CSR.scala 269:21]
    reg mvendorid : UInt<64>, clock with : (reset => (reset, UInt<1>("h00"))) @[CSR.scala 273:26]
    reg marchid : UInt<64>, clock with : (reset => (reset, UInt<1>("h00"))) @[CSR.scala 274:24]
    reg mimpid : UInt<64>, clock with : (reset => (reset, UInt<1>("h00"))) @[CSR.scala 275:23]
    reg mhartid : UInt<64>, clock with : (reset => (reset, UInt<1>("h00"))) @[CSR.scala 276:24]
    reg mstatus : UInt<64>, clock with : (reset => (reset, UInt<13>("h01800"))) @[CSR.scala 277:24]
    wire mstatusStruct : {sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}} @[CSR.scala 298:39]
    wire _T_51 : UInt<64>
    _T_51 <= mstatus
    node _T_52 = bits(_T_51, 0, 0) @[CSR.scala 298:39]
    mstatusStruct.ie.u <= _T_52 @[CSR.scala 298:39]
    node _T_53 = bits(_T_51, 1, 1) @[CSR.scala 298:39]
    mstatusStruct.ie.s <= _T_53 @[CSR.scala 298:39]
    node _T_54 = bits(_T_51, 2, 2) @[CSR.scala 298:39]
    mstatusStruct.ie.h <= _T_54 @[CSR.scala 298:39]
    node _T_55 = bits(_T_51, 3, 3) @[CSR.scala 298:39]
    mstatusStruct.ie.m <= _T_55 @[CSR.scala 298:39]
    node _T_56 = bits(_T_51, 4, 4) @[CSR.scala 298:39]
    mstatusStruct.pie.u <= _T_56 @[CSR.scala 298:39]
    node _T_57 = bits(_T_51, 5, 5) @[CSR.scala 298:39]
    mstatusStruct.pie.s <= _T_57 @[CSR.scala 298:39]
    node _T_58 = bits(_T_51, 6, 6) @[CSR.scala 298:39]
    mstatusStruct.pie.h <= _T_58 @[CSR.scala 298:39]
    node _T_59 = bits(_T_51, 7, 7) @[CSR.scala 298:39]
    mstatusStruct.pie.m <= _T_59 @[CSR.scala 298:39]
    node _T_60 = bits(_T_51, 8, 8) @[CSR.scala 298:39]
    mstatusStruct.spp <= _T_60 @[CSR.scala 298:39]
    node _T_61 = bits(_T_51, 10, 9) @[CSR.scala 298:39]
    mstatusStruct.hpp <= _T_61 @[CSR.scala 298:39]
    node _T_62 = bits(_T_51, 12, 11) @[CSR.scala 298:39]
    mstatusStruct.mpp <= _T_62 @[CSR.scala 298:39]
    node _T_63 = bits(_T_51, 14, 13) @[CSR.scala 298:39]
    mstatusStruct.fs <= _T_63 @[CSR.scala 298:39]
    node _T_64 = bits(_T_51, 16, 15) @[CSR.scala 298:39]
    mstatusStruct.xs <= _T_64 @[CSR.scala 298:39]
    node _T_65 = bits(_T_51, 17, 17) @[CSR.scala 298:39]
    mstatusStruct.mprv <= _T_65 @[CSR.scala 298:39]
    node _T_66 = bits(_T_51, 18, 18) @[CSR.scala 298:39]
    mstatusStruct.sum <= _T_66 @[CSR.scala 298:39]
    node _T_67 = bits(_T_51, 19, 19) @[CSR.scala 298:39]
    mstatusStruct.mxr <= _T_67 @[CSR.scala 298:39]
    node _T_68 = bits(_T_51, 20, 20) @[CSR.scala 298:39]
    mstatusStruct.tvm <= _T_68 @[CSR.scala 298:39]
    node _T_69 = bits(_T_51, 21, 21) @[CSR.scala 298:39]
    mstatusStruct.tw <= _T_69 @[CSR.scala 298:39]
    node _T_70 = bits(_T_51, 22, 22) @[CSR.scala 298:39]
    mstatusStruct.tsr <= _T_70 @[CSR.scala 298:39]
    node _T_71 = bits(_T_51, 31, 23) @[CSR.scala 298:39]
    mstatusStruct.pad0 <= _T_71 @[CSR.scala 298:39]
    node _T_72 = bits(_T_51, 33, 32) @[CSR.scala 298:39]
    mstatusStruct.uxl <= _T_72 @[CSR.scala 298:39]
    node _T_73 = bits(_T_51, 35, 34) @[CSR.scala 298:39]
    mstatusStruct.sxl <= _T_73 @[CSR.scala 298:39]
    node _T_74 = bits(_T_51, 62, 36) @[CSR.scala 298:39]
    mstatusStruct.pad1 <= _T_74 @[CSR.scala 298:39]
    node _T_75 = bits(_T_51, 63, 63) @[CSR.scala 298:39]
    mstatusStruct.sd <= _T_75 @[CSR.scala 298:39]
    reg medeleg : UInt<64>, clock with : (reset => (reset, UInt<1>("h00"))) @[CSR.scala 305:24]
    reg mideleg : UInt<64>, clock with : (reset => (reset, UInt<1>("h00"))) @[CSR.scala 306:24]
    reg mscratch : UInt<64>, clock with : (reset => (reset, UInt<1>("h00"))) @[CSR.scala 307:25]
    reg pmpcfg0 : UInt<64>, clock with : (reset => (reset, UInt<1>("h00"))) @[CSR.scala 309:24]
    reg pmpcfg1 : UInt<64>, clock with : (reset => (reset, UInt<1>("h00"))) @[CSR.scala 310:24]
    reg pmpcfg2 : UInt<64>, clock with : (reset => (reset, UInt<1>("h00"))) @[CSR.scala 311:24]
    reg pmpcfg3 : UInt<64>, clock with : (reset => (reset, UInt<1>("h00"))) @[CSR.scala 312:24]
    reg pmpaddr0 : UInt<64>, clock with : (reset => (reset, UInt<1>("h00"))) @[CSR.scala 313:25]
    reg pmpaddr1 : UInt<64>, clock with : (reset => (reset, UInt<1>("h00"))) @[CSR.scala 314:25]
    reg pmpaddr2 : UInt<64>, clock with : (reset => (reset, UInt<1>("h00"))) @[CSR.scala 315:25]
    reg pmpaddr3 : UInt<64>, clock with : (reset => (reset, UInt<1>("h00"))) @[CSR.scala 316:25]
    node sstatusRmask = or(UInt<20>("h0c6122"), UInt<64>("h08000000300018000")) @[CSR.scala 328:35]
    reg stvec : UInt<64>, clock with : (reset => (reset, UInt<1>("h00"))) @[CSR.scala 330:22]
    node sieMask = and(UInt<10>("h0222"), mideleg) @[CSR.scala 332:26]
    node sipMask = and(UInt<10>("h0222"), mideleg) @[CSR.scala 333:27]
    reg satp : UInt<64>, clock with : (reset => (reset, UInt<1>("h00"))) @[CSR.scala 335:21]
    reg sepc : UInt<64>, clock with : (reset => (reset, UInt<1>("h00"))) @[CSR.scala 336:21]
    reg scause : UInt<64>, clock with : (reset => (reset, UInt<1>("h00"))) @[CSR.scala 337:23]
    reg stval : UInt<64>, clock @[CSR.scala 338:18]
    reg sscratch : UInt<64>, clock with : (reset => (reset, UInt<1>("h00"))) @[CSR.scala 339:25]
    reg scounteren : UInt<64>, clock with : (reset => (reset, UInt<1>("h00"))) @[CSR.scala 340:27]
    reg uepc : UInt<64>, clock @[CSR.scala 347:17]
    wire setLr : UInt<1>
    setLr <= UInt<1>("h00")
    wire setLrVal : UInt<1>
    setLrVal <= UInt<1>("h00")
    wire setLrAddr : UInt<64>
    setLrAddr is invalid
    reg lr : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[CSR.scala 353:19]
    reg lrAddr : UInt<64>, clock with : (reset => (reset, UInt<1>("h00"))) @[CSR.scala 354:23]
    when setLr : @[CSR.scala 361:14]
      lr <= setLrVal @[CSR.scala 362:8]
      lrAddr <= setLrAddr @[CSR.scala 363:12]
      skip @[CSR.scala 361:14]
    reg priviledgeMode : UInt<2>, clock with : (reset => (reset, UInt<2>("h03"))) @[CSR.scala 367:31]
    reg perfCnts_0 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[CSR.scala 372:47]
    reg perfCnts_1 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[CSR.scala 372:47]
    reg perfCnts_2 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[CSR.scala 372:47]
    node _T_76 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_77 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_78 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_79 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_80 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_81 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_82 = bits(perfCnts_0, 63, 32) @[CSR.scala 374:99]
    node _T_83 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_84 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_85 = bits(perfCnts_1, 63, 32) @[CSR.scala 374:99]
    node _T_86 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_87 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_88 = bits(perfCnts_2, 63, 32) @[CSR.scala 374:99]
    node _T_89 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_90 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_91 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_92 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_93 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_94 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_95 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_96 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_97 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_98 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_99 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_100 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_101 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_102 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_103 = cat(mip.s.h, mip.s.s) @[CSR.scala 415:27]
    node _T_104 = cat(_T_103, mip.s.u) @[CSR.scala 415:27]
    node _T_105 = cat(mip.t.s, mip.t.u) @[CSR.scala 415:27]
    node _T_106 = cat(_T_105, mip.s.m) @[CSR.scala 415:27]
    node _T_107 = cat(_T_106, _T_104) @[CSR.scala 415:27]
    node _T_108 = cat(mip.e.u, mip.t.m) @[CSR.scala 415:27]
    node _T_109 = cat(_T_108, mip.t.h) @[CSR.scala 415:27]
    node _T_110 = cat(mip.e.m, mip.e.h) @[CSR.scala 415:27]
    node _T_111 = cat(_T_110, mip.e.s) @[CSR.scala 415:27]
    node _T_112 = cat(_T_111, _T_109) @[CSR.scala 415:27]
    node _T_113 = cat(_T_112, _T_107) @[CSR.scala 415:27]
    node _T_114 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_115 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_116 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_117 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_118 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_119 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_120 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_121 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_122 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_123 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_124 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_125 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_126 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_127 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_128 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_129 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_130 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_131 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_132 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_133 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_134 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_135 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_136 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_137 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_138 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_139 = cat(mip.s.h, mip.s.s) @[CSR.scala 441:27]
    node _T_140 = cat(_T_139, mip.s.u) @[CSR.scala 441:27]
    node _T_141 = cat(mip.t.s, mip.t.u) @[CSR.scala 441:27]
    node _T_142 = cat(_T_141, mip.s.m) @[CSR.scala 441:27]
    node _T_143 = cat(_T_142, _T_140) @[CSR.scala 441:27]
    node _T_144 = cat(mip.e.u, mip.t.m) @[CSR.scala 441:27]
    node _T_145 = cat(_T_144, mip.t.h) @[CSR.scala 441:27]
    node _T_146 = cat(mip.e.m, mip.e.h) @[CSR.scala 441:27]
    node _T_147 = cat(_T_146, mip.e.s) @[CSR.scala 441:27]
    node _T_148 = cat(_T_147, _T_145) @[CSR.scala 441:27]
    node _T_149 = cat(_T_148, _T_143) @[CSR.scala 441:27]
    node _T_150 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_151 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_152 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_153 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_154 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_155 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_156 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_157 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_158 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_159 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_160 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_161 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_162 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_163 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_164 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_165 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node _T_166 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    node addr = bits(io.in.bits.src2, 11, 0) @[CSR.scala 455:18]
    wire rdata : UInt<64> @[CSR.scala 456:19]
    node _T_167 = bits(io.cfIn.instr, 19, 15) @[CSR.scala 457:35]
    node csri = cat(UInt<59>("h00"), _T_167) @[Cat.scala 29:58]
    node _T_168 = or(rdata, io.in.bits.src1) @[CSR.scala 460:30]
    node _T_169 = not(io.in.bits.src1) @[CSR.scala 461:32]
    node _T_170 = and(rdata, _T_169) @[CSR.scala 461:30]
    node _T_171 = or(rdata, csri) @[CSR.scala 463:30]
    node _T_172 = not(csri) @[CSR.scala 464:32]
    node _T_173 = and(rdata, _T_172) @[CSR.scala 464:30]
    node _T_174 = eq(UInt<1>("h01"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_175 = eq(UInt<2>("h02"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_176 = eq(UInt<2>("h03"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_177 = eq(UInt<3>("h05"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_178 = eq(UInt<3>("h06"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_179 = eq(UInt<3>("h07"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_180 = mux(_T_174, io.in.bits.src1, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_181 = mux(_T_175, _T_168, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_182 = mux(_T_176, _T_170, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_183 = mux(_T_177, csri, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_184 = mux(_T_178, _T_171, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_185 = mux(_T_179, _T_173, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_186 = or(_T_180, _T_181) @[Mux.scala 27:72]
    node _T_187 = or(_T_186, _T_182) @[Mux.scala 27:72]
    node _T_188 = or(_T_187, _T_183) @[Mux.scala 27:72]
    node _T_189 = or(_T_188, _T_184) @[Mux.scala 27:72]
    node _T_190 = or(_T_189, _T_185) @[Mux.scala 27:72]
    wire wdata : UInt<64> @[Mux.scala 27:72]
    wdata <= _T_190 @[Mux.scala 27:72]
    wire _T_191 : {mode : UInt<4>, asid : UInt<16>, ppn : UInt<44>} @[CSR.scala 468:38]
    wire _T_192 : UInt<64>
    _T_192 <= wdata
    node _T_193 = bits(_T_192, 43, 0) @[CSR.scala 468:38]
    _T_191.ppn <= _T_193 @[CSR.scala 468:38]
    node _T_194 = bits(_T_192, 59, 44) @[CSR.scala 468:38]
    _T_191.asid <= _T_194 @[CSR.scala 468:38]
    node _T_195 = bits(_T_192, 63, 60) @[CSR.scala 468:38]
    _T_191.mode <= _T_195 @[CSR.scala 468:38]
    node _T_196 = eq(_T_191.mode, UInt<1>("h00")) @[CSR.scala 468:60]
    wire _T_197 : {mode : UInt<4>, asid : UInt<16>, ppn : UInt<44>} @[CSR.scala 468:87]
    wire _T_198 : UInt<64>
    _T_198 <= wdata
    node _T_199 = bits(_T_198, 43, 0) @[CSR.scala 468:87]
    _T_197.ppn <= _T_199 @[CSR.scala 468:87]
    node _T_200 = bits(_T_198, 59, 44) @[CSR.scala 468:87]
    _T_197.asid <= _T_200 @[CSR.scala 468:87]
    node _T_201 = bits(_T_198, 63, 60) @[CSR.scala 468:87]
    _T_197.mode <= _T_201 @[CSR.scala 468:87]
    node _T_202 = eq(_T_197.mode, UInt<4>("h08")) @[CSR.scala 468:109]
    node satpLegalMode = or(_T_196, _T_202) @[CSR.scala 468:69]
    node _T_203 = neq(io.in.bits.func, UInt<1>("h00")) @[CSR.scala 471:28]
    node _T_204 = and(io.in.valid, _T_203) @[CSR.scala 471:20]
    node _T_205 = neq(addr, UInt<9>("h0180")) @[CSR.scala 471:56]
    node _T_206 = or(_T_205, satpLegalMode) @[CSR.scala 471:67]
    node _T_207 = and(_T_204, _T_206) @[CSR.scala 471:47]
    node _T_208 = eq(io.isBackendException, UInt<1>("h00")) @[CSR.scala 471:88]
    node wen = and(_T_207, _T_208) @[CSR.scala 471:85]
    node _T_209 = bits(addr, 9, 8) @[CSR.scala 472:45]
    node isIllegalMode = lt(priviledgeMode, _T_209) @[CSR.scala 472:39]
    node _T_210 = eq(io.in.bits.func, UInt<2>("h02")) @[CSR.scala 473:24]
    node _T_211 = eq(io.in.bits.func, UInt<3>("h06")) @[CSR.scala 473:50]
    node _T_212 = or(_T_210, _T_211) @[CSR.scala 473:42]
    node _T_213 = eq(io.in.bits.src1, UInt<1>("h00")) @[CSR.scala 473:78]
    node justRead = and(_T_212, _T_213) @[CSR.scala 473:70]
    node _T_214 = bits(addr, 11, 10) @[CSR.scala 474:36]
    node _T_215 = eq(_T_214, UInt<2>("h03")) @[CSR.scala 474:45]
    node _T_216 = and(wen, _T_215) @[CSR.scala 474:28]
    node _T_217 = eq(justRead, UInt<1>("h00")) @[CSR.scala 474:61]
    node isIllegalWrite = and(_T_216, _T_217) @[CSR.scala 474:58]
    node isIllegalAccess = or(isIllegalMode, isIllegalWrite) @[CSR.scala 475:39]
    node _T_218 = eq(isIllegalAccess, UInt<1>("h00")) @[CSR.scala 477:54]
    node _T_219 = and(wen, _T_218) @[CSR.scala 477:51]
    node _T_220 = and(marchid, _T_117) @[RegMap.scala 48:84]
    node _T_221 = and(satp, _T_115) @[RegMap.scala 48:84]
    node _T_222 = and(pmpaddr1, _T_162) @[RegMap.scala 48:84]
    node _T_223 = and(pmpcfg2, _T_156) @[RegMap.scala 48:84]
    node _T_224 = and(sscratch, _T_96) @[RegMap.scala 48:84]
    node _T_225 = and(medeleg, _T_123) @[RegMap.scala 48:84]
    node _T_226 = and(stvec, _T_92) @[RegMap.scala 48:84]
    node _T_227 = and(sepc, _T_98) @[RegMap.scala 48:84]
    node _T_228 = and(mcause, _T_136) @[RegMap.scala 48:84]
    node _T_229 = and(mcounteren, _T_130) @[RegMap.scala 48:84]
    node _T_230 = and(mvendorid, _T_116) @[RegMap.scala 48:84]
    node _T_231 = and(mie, sieMask) @[RegMap.scala 48:84]
    node _T_232 = and(_T_113, sipMask) @[RegMap.scala 48:84]
    node _T_233 = and(mstatus, sstatusRmask) @[RegMap.scala 48:84]
    node _T_234 = and(mtvec, _T_128) @[RegMap.scala 48:84]
    node _T_235 = and(mie, _T_126) @[RegMap.scala 48:84]
    node _T_236 = and(perfCnts_1, _T_79) @[RegMap.scala 48:84]
    node _T_237 = and(pmpaddr3, _T_166) @[RegMap.scala 48:84]
    node _T_238 = and(stval, _T_102) @[RegMap.scala 48:84]
    node _T_239 = and(misa, _T_122) @[RegMap.scala 48:84]
    node _T_240 = and(mstatus, _T_120) @[RegMap.scala 48:84]
    node _T_241 = and(perfCnts_0, _T_77) @[RegMap.scala 48:84]
    node _T_242 = and(pmpaddr0, _T_160) @[RegMap.scala 48:84]
    node _T_243 = and(_T_149, _T_150) @[RegMap.scala 48:84]
    node _T_244 = and(perfCnts_2, _T_81) @[RegMap.scala 48:84]
    node _T_245 = and(pmpcfg3, _T_158) @[RegMap.scala 48:84]
    node _T_246 = and(mideleg, _T_124) @[RegMap.scala 48:84]
    node _T_247 = and(pmpaddr2, _T_164) @[RegMap.scala 48:84]
    node _T_248 = and(mimpid, _T_118) @[RegMap.scala 48:84]
    node _T_249 = and(pmpcfg1, _T_154) @[RegMap.scala 48:84]
    node _T_250 = and(mscratch, _T_132) @[RegMap.scala 48:84]
    node _T_251 = and(mhartid, _T_119) @[RegMap.scala 48:84]
    node _T_252 = and(mepc, _T_134) @[RegMap.scala 48:84]
    node _T_253 = and(mtval, _T_138) @[RegMap.scala 48:84]
    node _T_254 = and(scounteren, _T_94) @[RegMap.scala 48:84]
    node _T_255 = and(pmpcfg0, _T_152) @[RegMap.scala 48:84]
    node _T_256 = and(scause, _T_100) @[RegMap.scala 48:84]
    node _T_257 = eq(UInt<12>("h0f12"), addr) @[LookupTree.scala 24:34]
    node _T_258 = eq(UInt<9>("h0180"), addr) @[LookupTree.scala 24:34]
    node _T_259 = eq(UInt<10>("h03b1"), addr) @[LookupTree.scala 24:34]
    node _T_260 = eq(UInt<10>("h03a2"), addr) @[LookupTree.scala 24:34]
    node _T_261 = eq(UInt<9>("h0140"), addr) @[LookupTree.scala 24:34]
    node _T_262 = eq(UInt<10>("h0302"), addr) @[LookupTree.scala 24:34]
    node _T_263 = eq(UInt<9>("h0105"), addr) @[LookupTree.scala 24:34]
    node _T_264 = eq(UInt<9>("h0141"), addr) @[LookupTree.scala 24:34]
    node _T_265 = eq(UInt<10>("h0342"), addr) @[LookupTree.scala 24:34]
    node _T_266 = eq(UInt<10>("h0306"), addr) @[LookupTree.scala 24:34]
    node _T_267 = eq(UInt<12>("h0f11"), addr) @[LookupTree.scala 24:34]
    node _T_268 = eq(UInt<9>("h0104"), addr) @[LookupTree.scala 24:34]
    node _T_269 = eq(UInt<9>("h0144"), addr) @[LookupTree.scala 24:34]
    node _T_270 = eq(UInt<9>("h0100"), addr) @[LookupTree.scala 24:34]
    node _T_271 = eq(UInt<10>("h0305"), addr) @[LookupTree.scala 24:34]
    node _T_272 = eq(UInt<10>("h0304"), addr) @[LookupTree.scala 24:34]
    node _T_273 = eq(UInt<12>("h0b01"), addr) @[LookupTree.scala 24:34]
    node _T_274 = eq(UInt<10>("h03b3"), addr) @[LookupTree.scala 24:34]
    node _T_275 = eq(UInt<9>("h0143"), addr) @[LookupTree.scala 24:34]
    node _T_276 = eq(UInt<10>("h0301"), addr) @[LookupTree.scala 24:34]
    node _T_277 = eq(UInt<10>("h0300"), addr) @[LookupTree.scala 24:34]
    node _T_278 = eq(UInt<12>("h0b00"), addr) @[LookupTree.scala 24:34]
    node _T_279 = eq(UInt<10>("h03b0"), addr) @[LookupTree.scala 24:34]
    node _T_280 = eq(UInt<10>("h0344"), addr) @[LookupTree.scala 24:34]
    node _T_281 = eq(UInt<12>("h0b02"), addr) @[LookupTree.scala 24:34]
    node _T_282 = eq(UInt<10>("h03a3"), addr) @[LookupTree.scala 24:34]
    node _T_283 = eq(UInt<10>("h0303"), addr) @[LookupTree.scala 24:34]
    node _T_284 = eq(UInt<10>("h03b2"), addr) @[LookupTree.scala 24:34]
    node _T_285 = eq(UInt<12>("h0f13"), addr) @[LookupTree.scala 24:34]
    node _T_286 = eq(UInt<10>("h03a1"), addr) @[LookupTree.scala 24:34]
    node _T_287 = eq(UInt<10>("h0340"), addr) @[LookupTree.scala 24:34]
    node _T_288 = eq(UInt<12>("h0f14"), addr) @[LookupTree.scala 24:34]
    node _T_289 = eq(UInt<10>("h0341"), addr) @[LookupTree.scala 24:34]
    node _T_290 = eq(UInt<10>("h0343"), addr) @[LookupTree.scala 24:34]
    node _T_291 = eq(UInt<9>("h0106"), addr) @[LookupTree.scala 24:34]
    node _T_292 = eq(UInt<10>("h03a0"), addr) @[LookupTree.scala 24:34]
    node _T_293 = eq(UInt<9>("h0142"), addr) @[LookupTree.scala 24:34]
    node _T_294 = mux(_T_257, _T_220, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_295 = mux(_T_258, _T_221, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_296 = mux(_T_259, _T_222, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_297 = mux(_T_260, _T_223, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_298 = mux(_T_261, _T_224, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_299 = mux(_T_262, _T_225, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_300 = mux(_T_263, _T_226, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_301 = mux(_T_264, _T_227, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_302 = mux(_T_265, _T_228, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_303 = mux(_T_266, _T_229, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_304 = mux(_T_267, _T_230, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_305 = mux(_T_268, _T_231, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_306 = mux(_T_269, _T_232, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_307 = mux(_T_270, _T_233, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_308 = mux(_T_271, _T_234, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_309 = mux(_T_272, _T_235, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_310 = mux(_T_273, _T_236, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_311 = mux(_T_274, _T_237, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_312 = mux(_T_275, _T_238, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_313 = mux(_T_276, _T_239, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_314 = mux(_T_277, _T_240, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_315 = mux(_T_278, _T_241, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_316 = mux(_T_279, _T_242, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_317 = mux(_T_280, _T_243, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_318 = mux(_T_281, _T_244, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_319 = mux(_T_282, _T_245, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_320 = mux(_T_283, _T_246, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_321 = mux(_T_284, _T_247, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_322 = mux(_T_285, _T_248, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_323 = mux(_T_286, _T_249, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_324 = mux(_T_287, _T_250, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_325 = mux(_T_288, _T_251, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_326 = mux(_T_289, _T_252, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_327 = mux(_T_290, _T_253, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_328 = mux(_T_291, _T_254, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_329 = mux(_T_292, _T_255, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_330 = mux(_T_293, _T_256, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_331 = or(_T_294, _T_295) @[Mux.scala 27:72]
    node _T_332 = or(_T_331, _T_296) @[Mux.scala 27:72]
    node _T_333 = or(_T_332, _T_297) @[Mux.scala 27:72]
    node _T_334 = or(_T_333, _T_298) @[Mux.scala 27:72]
    node _T_335 = or(_T_334, _T_299) @[Mux.scala 27:72]
    node _T_336 = or(_T_335, _T_300) @[Mux.scala 27:72]
    node _T_337 = or(_T_336, _T_301) @[Mux.scala 27:72]
    node _T_338 = or(_T_337, _T_302) @[Mux.scala 27:72]
    node _T_339 = or(_T_338, _T_303) @[Mux.scala 27:72]
    node _T_340 = or(_T_339, _T_304) @[Mux.scala 27:72]
    node _T_341 = or(_T_340, _T_305) @[Mux.scala 27:72]
    node _T_342 = or(_T_341, _T_306) @[Mux.scala 27:72]
    node _T_343 = or(_T_342, _T_307) @[Mux.scala 27:72]
    node _T_344 = or(_T_343, _T_308) @[Mux.scala 27:72]
    node _T_345 = or(_T_344, _T_309) @[Mux.scala 27:72]
    node _T_346 = or(_T_345, _T_310) @[Mux.scala 27:72]
    node _T_347 = or(_T_346, _T_311) @[Mux.scala 27:72]
    node _T_348 = or(_T_347, _T_312) @[Mux.scala 27:72]
    node _T_349 = or(_T_348, _T_313) @[Mux.scala 27:72]
    node _T_350 = or(_T_349, _T_314) @[Mux.scala 27:72]
    node _T_351 = or(_T_350, _T_315) @[Mux.scala 27:72]
    node _T_352 = or(_T_351, _T_316) @[Mux.scala 27:72]
    node _T_353 = or(_T_352, _T_317) @[Mux.scala 27:72]
    node _T_354 = or(_T_353, _T_318) @[Mux.scala 27:72]
    node _T_355 = or(_T_354, _T_319) @[Mux.scala 27:72]
    node _T_356 = or(_T_355, _T_320) @[Mux.scala 27:72]
    node _T_357 = or(_T_356, _T_321) @[Mux.scala 27:72]
    node _T_358 = or(_T_357, _T_322) @[Mux.scala 27:72]
    node _T_359 = or(_T_358, _T_323) @[Mux.scala 27:72]
    node _T_360 = or(_T_359, _T_324) @[Mux.scala 27:72]
    node _T_361 = or(_T_360, _T_325) @[Mux.scala 27:72]
    node _T_362 = or(_T_361, _T_326) @[Mux.scala 27:72]
    node _T_363 = or(_T_362, _T_327) @[Mux.scala 27:72]
    node _T_364 = or(_T_363, _T_328) @[Mux.scala 27:72]
    node _T_365 = or(_T_364, _T_329) @[Mux.scala 27:72]
    node _T_366 = or(_T_365, _T_330) @[Mux.scala 27:72]
    wire _T_367 : UInt<64> @[Mux.scala 27:72]
    _T_367 <= _T_366 @[Mux.scala 27:72]
    rdata <= _T_367 @[RegMap.scala 48:11]
    node _T_368 = eq(addr, UInt<9>("h0180")) @[RegMap.scala 50:65]
    node _T_369 = and(_T_219, _T_368) @[RegMap.scala 50:56]
    when _T_369 : @[RegMap.scala 50:72]
      node _T_370 = and(wdata, _T_114) @[BitUtils.scala 32:13]
      node _T_371 = not(_T_114) @[BitUtils.scala 32:38]
      node _T_372 = and(satp, _T_371) @[BitUtils.scala 32:36]
      node _T_373 = or(_T_370, _T_372) @[BitUtils.scala 32:25]
      satp <= _T_373 @[RegMap.scala 50:76]
      skip @[RegMap.scala 50:72]
    node _T_374 = eq(addr, UInt<10>("h03b1")) @[RegMap.scala 50:65]
    node _T_375 = and(_T_219, _T_374) @[RegMap.scala 50:56]
    when _T_375 : @[RegMap.scala 50:72]
      node _T_376 = and(wdata, _T_161) @[BitUtils.scala 32:13]
      node _T_377 = not(_T_161) @[BitUtils.scala 32:38]
      node _T_378 = and(pmpaddr1, _T_377) @[BitUtils.scala 32:36]
      node _T_379 = or(_T_376, _T_378) @[BitUtils.scala 32:25]
      pmpaddr1 <= _T_379 @[RegMap.scala 50:76]
      skip @[RegMap.scala 50:72]
    node _T_380 = eq(addr, UInt<10>("h03a2")) @[RegMap.scala 50:65]
    node _T_381 = and(_T_219, _T_380) @[RegMap.scala 50:56]
    when _T_381 : @[RegMap.scala 50:72]
      node _T_382 = and(wdata, _T_155) @[BitUtils.scala 32:13]
      node _T_383 = not(_T_155) @[BitUtils.scala 32:38]
      node _T_384 = and(pmpcfg2, _T_383) @[BitUtils.scala 32:36]
      node _T_385 = or(_T_382, _T_384) @[BitUtils.scala 32:25]
      pmpcfg2 <= _T_385 @[RegMap.scala 50:76]
      skip @[RegMap.scala 50:72]
    node _T_386 = eq(addr, UInt<9>("h0140")) @[RegMap.scala 50:65]
    node _T_387 = and(_T_219, _T_386) @[RegMap.scala 50:56]
    when _T_387 : @[RegMap.scala 50:72]
      node _T_388 = and(wdata, _T_95) @[BitUtils.scala 32:13]
      node _T_389 = not(_T_95) @[BitUtils.scala 32:38]
      node _T_390 = and(sscratch, _T_389) @[BitUtils.scala 32:36]
      node _T_391 = or(_T_388, _T_390) @[BitUtils.scala 32:25]
      sscratch <= _T_391 @[RegMap.scala 50:76]
      skip @[RegMap.scala 50:72]
    node _T_392 = eq(addr, UInt<10>("h0302")) @[RegMap.scala 50:65]
    node _T_393 = and(_T_219, _T_392) @[RegMap.scala 50:56]
    when _T_393 : @[RegMap.scala 50:72]
      node _T_394 = and(wdata, UInt<16>("h0bbff")) @[BitUtils.scala 32:13]
      node _T_395 = not(UInt<16>("h0bbff")) @[BitUtils.scala 32:38]
      node _T_396 = and(medeleg, _T_395) @[BitUtils.scala 32:36]
      node _T_397 = or(_T_394, _T_396) @[BitUtils.scala 32:25]
      medeleg <= _T_397 @[RegMap.scala 50:76]
      skip @[RegMap.scala 50:72]
    node _T_398 = eq(addr, UInt<9>("h0105")) @[RegMap.scala 50:65]
    node _T_399 = and(_T_219, _T_398) @[RegMap.scala 50:56]
    when _T_399 : @[RegMap.scala 50:72]
      node _T_400 = and(wdata, _T_91) @[BitUtils.scala 32:13]
      node _T_401 = not(_T_91) @[BitUtils.scala 32:38]
      node _T_402 = and(stvec, _T_401) @[BitUtils.scala 32:36]
      node _T_403 = or(_T_400, _T_402) @[BitUtils.scala 32:25]
      stvec <= _T_403 @[RegMap.scala 50:76]
      skip @[RegMap.scala 50:72]
    node _T_404 = eq(addr, UInt<9>("h0141")) @[RegMap.scala 50:65]
    node _T_405 = and(_T_219, _T_404) @[RegMap.scala 50:56]
    when _T_405 : @[RegMap.scala 50:72]
      node _T_406 = and(wdata, _T_97) @[BitUtils.scala 32:13]
      node _T_407 = not(_T_97) @[BitUtils.scala 32:38]
      node _T_408 = and(sepc, _T_407) @[BitUtils.scala 32:36]
      node _T_409 = or(_T_406, _T_408) @[BitUtils.scala 32:25]
      sepc <= _T_409 @[RegMap.scala 50:76]
      skip @[RegMap.scala 50:72]
    node _T_410 = eq(addr, UInt<10>("h0342")) @[RegMap.scala 50:65]
    node _T_411 = and(_T_219, _T_410) @[RegMap.scala 50:56]
    when _T_411 : @[RegMap.scala 50:72]
      node _T_412 = and(wdata, _T_135) @[BitUtils.scala 32:13]
      node _T_413 = not(_T_135) @[BitUtils.scala 32:38]
      node _T_414 = and(mcause, _T_413) @[BitUtils.scala 32:36]
      node _T_415 = or(_T_412, _T_414) @[BitUtils.scala 32:25]
      mcause <= _T_415 @[RegMap.scala 50:76]
      skip @[RegMap.scala 50:72]
    node _T_416 = eq(addr, UInt<10>("h0306")) @[RegMap.scala 50:65]
    node _T_417 = and(_T_219, _T_416) @[RegMap.scala 50:56]
    when _T_417 : @[RegMap.scala 50:72]
      node _T_418 = and(wdata, _T_129) @[BitUtils.scala 32:13]
      node _T_419 = not(_T_129) @[BitUtils.scala 32:38]
      node _T_420 = and(mcounteren, _T_419) @[BitUtils.scala 32:36]
      node _T_421 = or(_T_418, _T_420) @[BitUtils.scala 32:25]
      mcounteren <= _T_421 @[RegMap.scala 50:76]
      skip @[RegMap.scala 50:72]
    node _T_422 = eq(addr, UInt<9>("h0104")) @[RegMap.scala 50:65]
    node _T_423 = and(_T_219, _T_422) @[RegMap.scala 50:56]
    when _T_423 : @[RegMap.scala 50:72]
      node _T_424 = and(wdata, sieMask) @[BitUtils.scala 32:13]
      node _T_425 = not(sieMask) @[BitUtils.scala 32:38]
      node _T_426 = and(mie, _T_425) @[BitUtils.scala 32:36]
      node _T_427 = or(_T_424, _T_426) @[BitUtils.scala 32:25]
      mie <= _T_427 @[RegMap.scala 50:76]
      skip @[RegMap.scala 50:72]
    node _T_428 = eq(addr, UInt<9>("h0100")) @[RegMap.scala 50:65]
    node _T_429 = and(_T_219, _T_428) @[RegMap.scala 50:56]
    when _T_429 : @[RegMap.scala 50:72]
      node _T_430 = and(wdata, UInt<20>("h0c6122")) @[BitUtils.scala 32:13]
      node _T_431 = not(UInt<20>("h0c6122")) @[BitUtils.scala 32:38]
      node _T_432 = and(mstatus, _T_431) @[BitUtils.scala 32:36]
      node _T_433 = or(_T_430, _T_432) @[BitUtils.scala 32:25]
      wire _T_434 : {sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}} @[CSR.scala 300:47]
      wire _T_435 : UInt<64>
      _T_435 <= _T_433
      node _T_436 = bits(_T_435, 0, 0) @[CSR.scala 300:47]
      _T_434.ie.u <= _T_436 @[CSR.scala 300:47]
      node _T_437 = bits(_T_435, 1, 1) @[CSR.scala 300:47]
      _T_434.ie.s <= _T_437 @[CSR.scala 300:47]
      node _T_438 = bits(_T_435, 2, 2) @[CSR.scala 300:47]
      _T_434.ie.h <= _T_438 @[CSR.scala 300:47]
      node _T_439 = bits(_T_435, 3, 3) @[CSR.scala 300:47]
      _T_434.ie.m <= _T_439 @[CSR.scala 300:47]
      node _T_440 = bits(_T_435, 4, 4) @[CSR.scala 300:47]
      _T_434.pie.u <= _T_440 @[CSR.scala 300:47]
      node _T_441 = bits(_T_435, 5, 5) @[CSR.scala 300:47]
      _T_434.pie.s <= _T_441 @[CSR.scala 300:47]
      node _T_442 = bits(_T_435, 6, 6) @[CSR.scala 300:47]
      _T_434.pie.h <= _T_442 @[CSR.scala 300:47]
      node _T_443 = bits(_T_435, 7, 7) @[CSR.scala 300:47]
      _T_434.pie.m <= _T_443 @[CSR.scala 300:47]
      node _T_444 = bits(_T_435, 8, 8) @[CSR.scala 300:47]
      _T_434.spp <= _T_444 @[CSR.scala 300:47]
      node _T_445 = bits(_T_435, 10, 9) @[CSR.scala 300:47]
      _T_434.hpp <= _T_445 @[CSR.scala 300:47]
      node _T_446 = bits(_T_435, 12, 11) @[CSR.scala 300:47]
      _T_434.mpp <= _T_446 @[CSR.scala 300:47]
      node _T_447 = bits(_T_435, 14, 13) @[CSR.scala 300:47]
      _T_434.fs <= _T_447 @[CSR.scala 300:47]
      node _T_448 = bits(_T_435, 16, 15) @[CSR.scala 300:47]
      _T_434.xs <= _T_448 @[CSR.scala 300:47]
      node _T_449 = bits(_T_435, 17, 17) @[CSR.scala 300:47]
      _T_434.mprv <= _T_449 @[CSR.scala 300:47]
      node _T_450 = bits(_T_435, 18, 18) @[CSR.scala 300:47]
      _T_434.sum <= _T_450 @[CSR.scala 300:47]
      node _T_451 = bits(_T_435, 19, 19) @[CSR.scala 300:47]
      _T_434.mxr <= _T_451 @[CSR.scala 300:47]
      node _T_452 = bits(_T_435, 20, 20) @[CSR.scala 300:47]
      _T_434.tvm <= _T_452 @[CSR.scala 300:47]
      node _T_453 = bits(_T_435, 21, 21) @[CSR.scala 300:47]
      _T_434.tw <= _T_453 @[CSR.scala 300:47]
      node _T_454 = bits(_T_435, 22, 22) @[CSR.scala 300:47]
      _T_434.tsr <= _T_454 @[CSR.scala 300:47]
      node _T_455 = bits(_T_435, 31, 23) @[CSR.scala 300:47]
      _T_434.pad0 <= _T_455 @[CSR.scala 300:47]
      node _T_456 = bits(_T_435, 33, 32) @[CSR.scala 300:47]
      _T_434.uxl <= _T_456 @[CSR.scala 300:47]
      node _T_457 = bits(_T_435, 35, 34) @[CSR.scala 300:47]
      _T_434.sxl <= _T_457 @[CSR.scala 300:47]
      node _T_458 = bits(_T_435, 62, 36) @[CSR.scala 300:47]
      _T_434.pad1 <= _T_458 @[CSR.scala 300:47]
      node _T_459 = bits(_T_435, 63, 63) @[CSR.scala 300:47]
      _T_434.sd <= _T_459 @[CSR.scala 300:47]
      wire _T_460 : {sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}}
      _T_460.ie.u <= _T_434.ie.u
      _T_460.ie.s <= _T_434.ie.s
      _T_460.ie.h <= _T_434.ie.h
      _T_460.ie.m <= _T_434.ie.m
      _T_460.pie.u <= _T_434.pie.u
      _T_460.pie.s <= _T_434.pie.s
      _T_460.pie.h <= _T_434.pie.h
      _T_460.pie.m <= _T_434.pie.m
      _T_460.spp <= _T_434.spp
      _T_460.hpp <= _T_434.hpp
      _T_460.mpp <= _T_434.mpp
      _T_460.fs <= _T_434.fs
      _T_460.xs <= _T_434.xs
      _T_460.mprv <= _T_434.mprv
      _T_460.sum <= _T_434.sum
      _T_460.mxr <= _T_434.mxr
      _T_460.tvm <= _T_434.tvm
      _T_460.tw <= _T_434.tw
      _T_460.tsr <= _T_434.tsr
      _T_460.pad0 <= _T_434.pad0
      _T_460.uxl <= _T_434.uxl
      _T_460.sxl <= _T_434.sxl
      _T_460.pad1 <= _T_434.pad1
      _T_460.sd <= _T_434.sd
      node _T_461 = eq(_T_460.fs, UInt<2>("h03")) @[CSR.scala 301:40]
      node _T_462 = bits(_T_433, 62, 0) @[CSR.scala 301:60]
      node _T_463 = cat(_T_461, _T_462) @[Cat.scala 29:58]
      mstatus <= _T_463 @[RegMap.scala 50:76]
      skip @[RegMap.scala 50:72]
    node _T_464 = eq(addr, UInt<10>("h0305")) @[RegMap.scala 50:65]
    node _T_465 = and(_T_219, _T_464) @[RegMap.scala 50:56]
    when _T_465 : @[RegMap.scala 50:72]
      node _T_466 = and(wdata, _T_127) @[BitUtils.scala 32:13]
      node _T_467 = not(_T_127) @[BitUtils.scala 32:38]
      node _T_468 = and(mtvec, _T_467) @[BitUtils.scala 32:36]
      node _T_469 = or(_T_466, _T_468) @[BitUtils.scala 32:25]
      mtvec <= _T_469 @[RegMap.scala 50:76]
      skip @[RegMap.scala 50:72]
    node _T_470 = eq(addr, UInt<10>("h0304")) @[RegMap.scala 50:65]
    node _T_471 = and(_T_219, _T_470) @[RegMap.scala 50:56]
    when _T_471 : @[RegMap.scala 50:72]
      node _T_472 = and(wdata, _T_125) @[BitUtils.scala 32:13]
      node _T_473 = not(_T_125) @[BitUtils.scala 32:38]
      node _T_474 = and(mie, _T_473) @[BitUtils.scala 32:36]
      node _T_475 = or(_T_472, _T_474) @[BitUtils.scala 32:25]
      mie <= _T_475 @[RegMap.scala 50:76]
      skip @[RegMap.scala 50:72]
    node _T_476 = eq(addr, UInt<12>("h0b01")) @[RegMap.scala 50:65]
    node _T_477 = and(_T_219, _T_476) @[RegMap.scala 50:56]
    when _T_477 : @[RegMap.scala 50:72]
      node _T_478 = and(wdata, _T_78) @[BitUtils.scala 32:13]
      node _T_479 = not(_T_78) @[BitUtils.scala 32:38]
      node _T_480 = and(perfCnts_1, _T_479) @[BitUtils.scala 32:36]
      node _T_481 = or(_T_478, _T_480) @[BitUtils.scala 32:25]
      perfCnts_1 <= _T_481 @[RegMap.scala 50:76]
      skip @[RegMap.scala 50:72]
    node _T_482 = eq(addr, UInt<10>("h03b3")) @[RegMap.scala 50:65]
    node _T_483 = and(_T_219, _T_482) @[RegMap.scala 50:56]
    when _T_483 : @[RegMap.scala 50:72]
      node _T_484 = and(wdata, _T_165) @[BitUtils.scala 32:13]
      node _T_485 = not(_T_165) @[BitUtils.scala 32:38]
      node _T_486 = and(pmpaddr3, _T_485) @[BitUtils.scala 32:36]
      node _T_487 = or(_T_484, _T_486) @[BitUtils.scala 32:25]
      pmpaddr3 <= _T_487 @[RegMap.scala 50:76]
      skip @[RegMap.scala 50:72]
    node _T_488 = eq(addr, UInt<9>("h0143")) @[RegMap.scala 50:65]
    node _T_489 = and(_T_219, _T_488) @[RegMap.scala 50:56]
    when _T_489 : @[RegMap.scala 50:72]
      node _T_490 = and(wdata, _T_101) @[BitUtils.scala 32:13]
      node _T_491 = not(_T_101) @[BitUtils.scala 32:38]
      node _T_492 = and(stval, _T_491) @[BitUtils.scala 32:36]
      node _T_493 = or(_T_490, _T_492) @[BitUtils.scala 32:25]
      stval <= _T_493 @[RegMap.scala 50:76]
      skip @[RegMap.scala 50:72]
    node _T_494 = eq(addr, UInt<10>("h0301")) @[RegMap.scala 50:65]
    node _T_495 = and(_T_219, _T_494) @[RegMap.scala 50:56]
    when _T_495 : @[RegMap.scala 50:72]
      node _T_496 = and(wdata, _T_121) @[BitUtils.scala 32:13]
      node _T_497 = not(_T_121) @[BitUtils.scala 32:38]
      node _T_498 = and(misa, _T_497) @[BitUtils.scala 32:36]
      node _T_499 = or(_T_496, _T_498) @[BitUtils.scala 32:25]
      misa <= _T_499 @[RegMap.scala 50:76]
      skip @[RegMap.scala 50:72]
    node _T_500 = eq(addr, UInt<10>("h0300")) @[RegMap.scala 50:65]
    node _T_501 = and(_T_219, _T_500) @[RegMap.scala 50:56]
    when _T_501 : @[RegMap.scala 50:72]
      node _T_502 = and(wdata, UInt<64>("h0ffffffffffffffff")) @[BitUtils.scala 32:13]
      node _T_503 = not(UInt<64>("h0ffffffffffffffff")) @[BitUtils.scala 32:38]
      node _T_504 = and(mstatus, _T_503) @[BitUtils.scala 32:36]
      node _T_505 = or(_T_502, _T_504) @[BitUtils.scala 32:25]
      wire _T_506 : {sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}} @[CSR.scala 300:47]
      wire _T_507 : UInt<64>
      _T_507 <= _T_505
      node _T_508 = bits(_T_507, 0, 0) @[CSR.scala 300:47]
      _T_506.ie.u <= _T_508 @[CSR.scala 300:47]
      node _T_509 = bits(_T_507, 1, 1) @[CSR.scala 300:47]
      _T_506.ie.s <= _T_509 @[CSR.scala 300:47]
      node _T_510 = bits(_T_507, 2, 2) @[CSR.scala 300:47]
      _T_506.ie.h <= _T_510 @[CSR.scala 300:47]
      node _T_511 = bits(_T_507, 3, 3) @[CSR.scala 300:47]
      _T_506.ie.m <= _T_511 @[CSR.scala 300:47]
      node _T_512 = bits(_T_507, 4, 4) @[CSR.scala 300:47]
      _T_506.pie.u <= _T_512 @[CSR.scala 300:47]
      node _T_513 = bits(_T_507, 5, 5) @[CSR.scala 300:47]
      _T_506.pie.s <= _T_513 @[CSR.scala 300:47]
      node _T_514 = bits(_T_507, 6, 6) @[CSR.scala 300:47]
      _T_506.pie.h <= _T_514 @[CSR.scala 300:47]
      node _T_515 = bits(_T_507, 7, 7) @[CSR.scala 300:47]
      _T_506.pie.m <= _T_515 @[CSR.scala 300:47]
      node _T_516 = bits(_T_507, 8, 8) @[CSR.scala 300:47]
      _T_506.spp <= _T_516 @[CSR.scala 300:47]
      node _T_517 = bits(_T_507, 10, 9) @[CSR.scala 300:47]
      _T_506.hpp <= _T_517 @[CSR.scala 300:47]
      node _T_518 = bits(_T_507, 12, 11) @[CSR.scala 300:47]
      _T_506.mpp <= _T_518 @[CSR.scala 300:47]
      node _T_519 = bits(_T_507, 14, 13) @[CSR.scala 300:47]
      _T_506.fs <= _T_519 @[CSR.scala 300:47]
      node _T_520 = bits(_T_507, 16, 15) @[CSR.scala 300:47]
      _T_506.xs <= _T_520 @[CSR.scala 300:47]
      node _T_521 = bits(_T_507, 17, 17) @[CSR.scala 300:47]
      _T_506.mprv <= _T_521 @[CSR.scala 300:47]
      node _T_522 = bits(_T_507, 18, 18) @[CSR.scala 300:47]
      _T_506.sum <= _T_522 @[CSR.scala 300:47]
      node _T_523 = bits(_T_507, 19, 19) @[CSR.scala 300:47]
      _T_506.mxr <= _T_523 @[CSR.scala 300:47]
      node _T_524 = bits(_T_507, 20, 20) @[CSR.scala 300:47]
      _T_506.tvm <= _T_524 @[CSR.scala 300:47]
      node _T_525 = bits(_T_507, 21, 21) @[CSR.scala 300:47]
      _T_506.tw <= _T_525 @[CSR.scala 300:47]
      node _T_526 = bits(_T_507, 22, 22) @[CSR.scala 300:47]
      _T_506.tsr <= _T_526 @[CSR.scala 300:47]
      node _T_527 = bits(_T_507, 31, 23) @[CSR.scala 300:47]
      _T_506.pad0 <= _T_527 @[CSR.scala 300:47]
      node _T_528 = bits(_T_507, 33, 32) @[CSR.scala 300:47]
      _T_506.uxl <= _T_528 @[CSR.scala 300:47]
      node _T_529 = bits(_T_507, 35, 34) @[CSR.scala 300:47]
      _T_506.sxl <= _T_529 @[CSR.scala 300:47]
      node _T_530 = bits(_T_507, 62, 36) @[CSR.scala 300:47]
      _T_506.pad1 <= _T_530 @[CSR.scala 300:47]
      node _T_531 = bits(_T_507, 63, 63) @[CSR.scala 300:47]
      _T_506.sd <= _T_531 @[CSR.scala 300:47]
      wire _T_532 : {sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}}
      _T_532.ie.u <= _T_506.ie.u
      _T_532.ie.s <= _T_506.ie.s
      _T_532.ie.h <= _T_506.ie.h
      _T_532.ie.m <= _T_506.ie.m
      _T_532.pie.u <= _T_506.pie.u
      _T_532.pie.s <= _T_506.pie.s
      _T_532.pie.h <= _T_506.pie.h
      _T_532.pie.m <= _T_506.pie.m
      _T_532.spp <= _T_506.spp
      _T_532.hpp <= _T_506.hpp
      _T_532.mpp <= _T_506.mpp
      _T_532.fs <= _T_506.fs
      _T_532.xs <= _T_506.xs
      _T_532.mprv <= _T_506.mprv
      _T_532.sum <= _T_506.sum
      _T_532.mxr <= _T_506.mxr
      _T_532.tvm <= _T_506.tvm
      _T_532.tw <= _T_506.tw
      _T_532.tsr <= _T_506.tsr
      _T_532.pad0 <= _T_506.pad0
      _T_532.uxl <= _T_506.uxl
      _T_532.sxl <= _T_506.sxl
      _T_532.pad1 <= _T_506.pad1
      _T_532.sd <= _T_506.sd
      node _T_533 = eq(_T_532.fs, UInt<2>("h03")) @[CSR.scala 301:40]
      node _T_534 = bits(_T_505, 62, 0) @[CSR.scala 301:60]
      node _T_535 = cat(_T_533, _T_534) @[Cat.scala 29:58]
      mstatus <= _T_535 @[RegMap.scala 50:76]
      skip @[RegMap.scala 50:72]
    node _T_536 = eq(addr, UInt<12>("h0b00")) @[RegMap.scala 50:65]
    node _T_537 = and(_T_219, _T_536) @[RegMap.scala 50:56]
    when _T_537 : @[RegMap.scala 50:72]
      node _T_538 = and(wdata, _T_76) @[BitUtils.scala 32:13]
      node _T_539 = not(_T_76) @[BitUtils.scala 32:38]
      node _T_540 = and(perfCnts_0, _T_539) @[BitUtils.scala 32:36]
      node _T_541 = or(_T_538, _T_540) @[BitUtils.scala 32:25]
      perfCnts_0 <= _T_541 @[RegMap.scala 50:76]
      skip @[RegMap.scala 50:72]
    node _T_542 = eq(addr, UInt<10>("h03b0")) @[RegMap.scala 50:65]
    node _T_543 = and(_T_219, _T_542) @[RegMap.scala 50:56]
    when _T_543 : @[RegMap.scala 50:72]
      node _T_544 = and(wdata, _T_159) @[BitUtils.scala 32:13]
      node _T_545 = not(_T_159) @[BitUtils.scala 32:38]
      node _T_546 = and(pmpaddr0, _T_545) @[BitUtils.scala 32:36]
      node _T_547 = or(_T_544, _T_546) @[BitUtils.scala 32:25]
      pmpaddr0 <= _T_547 @[RegMap.scala 50:76]
      skip @[RegMap.scala 50:72]
    node _T_548 = eq(addr, UInt<12>("h0b02")) @[RegMap.scala 50:65]
    node _T_549 = and(_T_219, _T_548) @[RegMap.scala 50:56]
    when _T_549 : @[RegMap.scala 50:72]
      node _T_550 = and(wdata, _T_80) @[BitUtils.scala 32:13]
      node _T_551 = not(_T_80) @[BitUtils.scala 32:38]
      node _T_552 = and(perfCnts_2, _T_551) @[BitUtils.scala 32:36]
      node _T_553 = or(_T_550, _T_552) @[BitUtils.scala 32:25]
      perfCnts_2 <= _T_553 @[RegMap.scala 50:76]
      skip @[RegMap.scala 50:72]
    node _T_554 = eq(addr, UInt<10>("h03a3")) @[RegMap.scala 50:65]
    node _T_555 = and(_T_219, _T_554) @[RegMap.scala 50:56]
    when _T_555 : @[RegMap.scala 50:72]
      node _T_556 = and(wdata, _T_157) @[BitUtils.scala 32:13]
      node _T_557 = not(_T_157) @[BitUtils.scala 32:38]
      node _T_558 = and(pmpcfg3, _T_557) @[BitUtils.scala 32:36]
      node _T_559 = or(_T_556, _T_558) @[BitUtils.scala 32:25]
      pmpcfg3 <= _T_559 @[RegMap.scala 50:76]
      skip @[RegMap.scala 50:72]
    node _T_560 = eq(addr, UInt<10>("h0303")) @[RegMap.scala 50:65]
    node _T_561 = and(_T_219, _T_560) @[RegMap.scala 50:56]
    when _T_561 : @[RegMap.scala 50:72]
      node _T_562 = and(wdata, UInt<10>("h0222")) @[BitUtils.scala 32:13]
      node _T_563 = not(UInt<10>("h0222")) @[BitUtils.scala 32:38]
      node _T_564 = and(mideleg, _T_563) @[BitUtils.scala 32:36]
      node _T_565 = or(_T_562, _T_564) @[BitUtils.scala 32:25]
      mideleg <= _T_565 @[RegMap.scala 50:76]
      skip @[RegMap.scala 50:72]
    node _T_566 = eq(addr, UInt<10>("h03b2")) @[RegMap.scala 50:65]
    node _T_567 = and(_T_219, _T_566) @[RegMap.scala 50:56]
    when _T_567 : @[RegMap.scala 50:72]
      node _T_568 = and(wdata, _T_163) @[BitUtils.scala 32:13]
      node _T_569 = not(_T_163) @[BitUtils.scala 32:38]
      node _T_570 = and(pmpaddr2, _T_569) @[BitUtils.scala 32:36]
      node _T_571 = or(_T_568, _T_570) @[BitUtils.scala 32:25]
      pmpaddr2 <= _T_571 @[RegMap.scala 50:76]
      skip @[RegMap.scala 50:72]
    node _T_572 = eq(addr, UInt<10>("h03a1")) @[RegMap.scala 50:65]
    node _T_573 = and(_T_219, _T_572) @[RegMap.scala 50:56]
    when _T_573 : @[RegMap.scala 50:72]
      node _T_574 = and(wdata, _T_153) @[BitUtils.scala 32:13]
      node _T_575 = not(_T_153) @[BitUtils.scala 32:38]
      node _T_576 = and(pmpcfg1, _T_575) @[BitUtils.scala 32:36]
      node _T_577 = or(_T_574, _T_576) @[BitUtils.scala 32:25]
      pmpcfg1 <= _T_577 @[RegMap.scala 50:76]
      skip @[RegMap.scala 50:72]
    node _T_578 = eq(addr, UInt<10>("h0340")) @[RegMap.scala 50:65]
    node _T_579 = and(_T_219, _T_578) @[RegMap.scala 50:56]
    when _T_579 : @[RegMap.scala 50:72]
      node _T_580 = and(wdata, _T_131) @[BitUtils.scala 32:13]
      node _T_581 = not(_T_131) @[BitUtils.scala 32:38]
      node _T_582 = and(mscratch, _T_581) @[BitUtils.scala 32:36]
      node _T_583 = or(_T_580, _T_582) @[BitUtils.scala 32:25]
      mscratch <= _T_583 @[RegMap.scala 50:76]
      skip @[RegMap.scala 50:72]
    node _T_584 = eq(addr, UInt<10>("h0341")) @[RegMap.scala 50:65]
    node _T_585 = and(_T_219, _T_584) @[RegMap.scala 50:56]
    when _T_585 : @[RegMap.scala 50:72]
      node _T_586 = and(wdata, _T_133) @[BitUtils.scala 32:13]
      node _T_587 = not(_T_133) @[BitUtils.scala 32:38]
      node _T_588 = and(mepc, _T_587) @[BitUtils.scala 32:36]
      node _T_589 = or(_T_586, _T_588) @[BitUtils.scala 32:25]
      mepc <= _T_589 @[RegMap.scala 50:76]
      skip @[RegMap.scala 50:72]
    node _T_590 = eq(addr, UInt<10>("h0343")) @[RegMap.scala 50:65]
    node _T_591 = and(_T_219, _T_590) @[RegMap.scala 50:56]
    when _T_591 : @[RegMap.scala 50:72]
      node _T_592 = and(wdata, _T_137) @[BitUtils.scala 32:13]
      node _T_593 = not(_T_137) @[BitUtils.scala 32:38]
      node _T_594 = and(mtval, _T_593) @[BitUtils.scala 32:36]
      node _T_595 = or(_T_592, _T_594) @[BitUtils.scala 32:25]
      mtval <= _T_595 @[RegMap.scala 50:76]
      skip @[RegMap.scala 50:72]
    node _T_596 = eq(addr, UInt<9>("h0106")) @[RegMap.scala 50:65]
    node _T_597 = and(_T_219, _T_596) @[RegMap.scala 50:56]
    when _T_597 : @[RegMap.scala 50:72]
      node _T_598 = and(wdata, _T_93) @[BitUtils.scala 32:13]
      node _T_599 = not(_T_93) @[BitUtils.scala 32:38]
      node _T_600 = and(scounteren, _T_599) @[BitUtils.scala 32:36]
      node _T_601 = or(_T_598, _T_600) @[BitUtils.scala 32:25]
      scounteren <= _T_601 @[RegMap.scala 50:76]
      skip @[RegMap.scala 50:72]
    node _T_602 = eq(addr, UInt<10>("h03a0")) @[RegMap.scala 50:65]
    node _T_603 = and(_T_219, _T_602) @[RegMap.scala 50:56]
    when _T_603 : @[RegMap.scala 50:72]
      node _T_604 = and(wdata, _T_151) @[BitUtils.scala 32:13]
      node _T_605 = not(_T_151) @[BitUtils.scala 32:38]
      node _T_606 = and(pmpcfg0, _T_605) @[BitUtils.scala 32:36]
      node _T_607 = or(_T_604, _T_606) @[BitUtils.scala 32:25]
      pmpcfg0 <= _T_607 @[RegMap.scala 50:76]
      skip @[RegMap.scala 50:72]
    node _T_608 = eq(addr, UInt<9>("h0142")) @[RegMap.scala 50:65]
    node _T_609 = and(_T_219, _T_608) @[RegMap.scala 50:56]
    when _T_609 : @[RegMap.scala 50:72]
      node _T_610 = and(wdata, _T_99) @[BitUtils.scala 32:13]
      node _T_611 = not(_T_99) @[BitUtils.scala 32:38]
      node _T_612 = and(scause, _T_611) @[BitUtils.scala 32:36]
      node _T_613 = or(_T_610, _T_612) @[BitUtils.scala 32:25]
      scause <= _T_613 @[RegMap.scala 50:76]
      skip @[RegMap.scala 50:72]
    wire isIllegalAddr : UInt<1> @[RegMap.scala 54:27]
    node _T_614 = eq(UInt<12>("h0f12"), addr) @[Mux.scala 80:60]
    node _T_615 = mux(_T_614, UInt<1>("h00"), UInt<1>("h01")) @[Mux.scala 80:57]
    node _T_616 = eq(UInt<9>("h0180"), addr) @[Mux.scala 80:60]
    node _T_617 = mux(_T_616, UInt<1>("h00"), _T_615) @[Mux.scala 80:57]
    node _T_618 = eq(UInt<10>("h03b1"), addr) @[Mux.scala 80:60]
    node _T_619 = mux(_T_618, UInt<1>("h00"), _T_617) @[Mux.scala 80:57]
    node _T_620 = eq(UInt<10>("h03a2"), addr) @[Mux.scala 80:60]
    node _T_621 = mux(_T_620, UInt<1>("h00"), _T_619) @[Mux.scala 80:57]
    node _T_622 = eq(UInt<9>("h0140"), addr) @[Mux.scala 80:60]
    node _T_623 = mux(_T_622, UInt<1>("h00"), _T_621) @[Mux.scala 80:57]
    node _T_624 = eq(UInt<10>("h0302"), addr) @[Mux.scala 80:60]
    node _T_625 = mux(_T_624, UInt<1>("h00"), _T_623) @[Mux.scala 80:57]
    node _T_626 = eq(UInt<9>("h0105"), addr) @[Mux.scala 80:60]
    node _T_627 = mux(_T_626, UInt<1>("h00"), _T_625) @[Mux.scala 80:57]
    node _T_628 = eq(UInt<9>("h0141"), addr) @[Mux.scala 80:60]
    node _T_629 = mux(_T_628, UInt<1>("h00"), _T_627) @[Mux.scala 80:57]
    node _T_630 = eq(UInt<10>("h0342"), addr) @[Mux.scala 80:60]
    node _T_631 = mux(_T_630, UInt<1>("h00"), _T_629) @[Mux.scala 80:57]
    node _T_632 = eq(UInt<10>("h0306"), addr) @[Mux.scala 80:60]
    node _T_633 = mux(_T_632, UInt<1>("h00"), _T_631) @[Mux.scala 80:57]
    node _T_634 = eq(UInt<12>("h0f11"), addr) @[Mux.scala 80:60]
    node _T_635 = mux(_T_634, UInt<1>("h00"), _T_633) @[Mux.scala 80:57]
    node _T_636 = eq(UInt<9>("h0104"), addr) @[Mux.scala 80:60]
    node _T_637 = mux(_T_636, UInt<1>("h00"), _T_635) @[Mux.scala 80:57]
    node _T_638 = eq(UInt<9>("h0144"), addr) @[Mux.scala 80:60]
    node _T_639 = mux(_T_638, UInt<1>("h00"), _T_637) @[Mux.scala 80:57]
    node _T_640 = eq(UInt<9>("h0100"), addr) @[Mux.scala 80:60]
    node _T_641 = mux(_T_640, UInt<1>("h00"), _T_639) @[Mux.scala 80:57]
    node _T_642 = eq(UInt<10>("h0305"), addr) @[Mux.scala 80:60]
    node _T_643 = mux(_T_642, UInt<1>("h00"), _T_641) @[Mux.scala 80:57]
    node _T_644 = eq(UInt<10>("h0304"), addr) @[Mux.scala 80:60]
    node _T_645 = mux(_T_644, UInt<1>("h00"), _T_643) @[Mux.scala 80:57]
    node _T_646 = eq(UInt<12>("h0b01"), addr) @[Mux.scala 80:60]
    node _T_647 = mux(_T_646, UInt<1>("h00"), _T_645) @[Mux.scala 80:57]
    node _T_648 = eq(UInt<10>("h03b3"), addr) @[Mux.scala 80:60]
    node _T_649 = mux(_T_648, UInt<1>("h00"), _T_647) @[Mux.scala 80:57]
    node _T_650 = eq(UInt<9>("h0143"), addr) @[Mux.scala 80:60]
    node _T_651 = mux(_T_650, UInt<1>("h00"), _T_649) @[Mux.scala 80:57]
    node _T_652 = eq(UInt<10>("h0301"), addr) @[Mux.scala 80:60]
    node _T_653 = mux(_T_652, UInt<1>("h00"), _T_651) @[Mux.scala 80:57]
    node _T_654 = eq(UInt<10>("h0300"), addr) @[Mux.scala 80:60]
    node _T_655 = mux(_T_654, UInt<1>("h00"), _T_653) @[Mux.scala 80:57]
    node _T_656 = eq(UInt<12>("h0b00"), addr) @[Mux.scala 80:60]
    node _T_657 = mux(_T_656, UInt<1>("h00"), _T_655) @[Mux.scala 80:57]
    node _T_658 = eq(UInt<10>("h03b0"), addr) @[Mux.scala 80:60]
    node _T_659 = mux(_T_658, UInt<1>("h00"), _T_657) @[Mux.scala 80:57]
    node _T_660 = eq(UInt<10>("h0344"), addr) @[Mux.scala 80:60]
    node _T_661 = mux(_T_660, UInt<1>("h00"), _T_659) @[Mux.scala 80:57]
    node _T_662 = eq(UInt<12>("h0b02"), addr) @[Mux.scala 80:60]
    node _T_663 = mux(_T_662, UInt<1>("h00"), _T_661) @[Mux.scala 80:57]
    node _T_664 = eq(UInt<10>("h03a3"), addr) @[Mux.scala 80:60]
    node _T_665 = mux(_T_664, UInt<1>("h00"), _T_663) @[Mux.scala 80:57]
    node _T_666 = eq(UInt<10>("h0303"), addr) @[Mux.scala 80:60]
    node _T_667 = mux(_T_666, UInt<1>("h00"), _T_665) @[Mux.scala 80:57]
    node _T_668 = eq(UInt<10>("h03b2"), addr) @[Mux.scala 80:60]
    node _T_669 = mux(_T_668, UInt<1>("h00"), _T_667) @[Mux.scala 80:57]
    node _T_670 = eq(UInt<12>("h0f13"), addr) @[Mux.scala 80:60]
    node _T_671 = mux(_T_670, UInt<1>("h00"), _T_669) @[Mux.scala 80:57]
    node _T_672 = eq(UInt<10>("h03a1"), addr) @[Mux.scala 80:60]
    node _T_673 = mux(_T_672, UInt<1>("h00"), _T_671) @[Mux.scala 80:57]
    node _T_674 = eq(UInt<10>("h0340"), addr) @[Mux.scala 80:60]
    node _T_675 = mux(_T_674, UInt<1>("h00"), _T_673) @[Mux.scala 80:57]
    node _T_676 = eq(UInt<12>("h0f14"), addr) @[Mux.scala 80:60]
    node _T_677 = mux(_T_676, UInt<1>("h00"), _T_675) @[Mux.scala 80:57]
    node _T_678 = eq(UInt<10>("h0341"), addr) @[Mux.scala 80:60]
    node _T_679 = mux(_T_678, UInt<1>("h00"), _T_677) @[Mux.scala 80:57]
    node _T_680 = eq(UInt<10>("h0343"), addr) @[Mux.scala 80:60]
    node _T_681 = mux(_T_680, UInt<1>("h00"), _T_679) @[Mux.scala 80:57]
    node _T_682 = eq(UInt<9>("h0106"), addr) @[Mux.scala 80:60]
    node _T_683 = mux(_T_682, UInt<1>("h00"), _T_681) @[Mux.scala 80:57]
    node _T_684 = eq(UInt<10>("h03a0"), addr) @[Mux.scala 80:60]
    node _T_685 = mux(_T_684, UInt<1>("h00"), _T_683) @[Mux.scala 80:57]
    node _T_686 = eq(UInt<9>("h0142"), addr) @[Mux.scala 80:60]
    node _T_687 = mux(_T_686, UInt<1>("h00"), _T_685) @[Mux.scala 80:57]
    isIllegalAddr <= _T_687 @[RegMap.scala 56:17]
    node _T_688 = eq(addr, UInt<9>("h0180")) @[CSR.scala 479:24]
    node resetSatp = and(_T_688, wen) @[CSR.scala 479:35]
    io.out.bits <= rdata @[CSR.scala 480:15]
    node _T_689 = mux(UInt<1>("h01"), UInt<64>("h0ffffffffffffffff"), UInt<64>("h00")) @[Bitwise.scala 72:12]
    wire rdataDummy : UInt<64> @[CSR.scala 487:24]
    node _T_690 = eq(isIllegalAccess, UInt<1>("h00")) @[CSR.scala 488:62]
    node _T_691 = and(wen, _T_690) @[CSR.scala 488:59]
    node _T_692 = and(mipReg, _T_689) @[RegMap.scala 48:84]
    node _T_693 = and(mipReg, sipMask) @[RegMap.scala 48:84]
    node _T_694 = eq(UInt<10>("h0344"), addr) @[LookupTree.scala 24:34]
    node _T_695 = eq(UInt<9>("h0144"), addr) @[LookupTree.scala 24:34]
    node _T_696 = mux(_T_694, _T_692, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_697 = mux(_T_695, _T_693, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_698 = or(_T_696, _T_697) @[Mux.scala 27:72]
    wire _T_699 : UInt @[Mux.scala 27:72]
    _T_699 <= _T_698 @[Mux.scala 27:72]
    rdataDummy <= _T_699 @[RegMap.scala 48:11]
    node _T_700 = eq(addr, UInt<10>("h0344")) @[RegMap.scala 50:65]
    node _T_701 = and(_T_691, _T_700) @[RegMap.scala 50:56]
    when _T_701 : @[RegMap.scala 50:72]
      node _T_702 = and(wdata, UInt<11>("h077f")) @[BitUtils.scala 32:13]
      node _T_703 = not(UInt<11>("h077f")) @[BitUtils.scala 32:38]
      node _T_704 = and(mipReg, _T_703) @[BitUtils.scala 32:36]
      node _T_705 = or(_T_702, _T_704) @[BitUtils.scala 32:25]
      mipReg <= _T_705 @[RegMap.scala 50:76]
      skip @[RegMap.scala 50:72]
    node _T_706 = eq(addr, UInt<9>("h0144")) @[RegMap.scala 50:65]
    node _T_707 = and(_T_691, _T_706) @[RegMap.scala 50:56]
    when _T_707 : @[RegMap.scala 50:72]
      node _T_708 = and(wdata, sipMask) @[BitUtils.scala 32:13]
      node _T_709 = not(sipMask) @[BitUtils.scala 32:38]
      node _T_710 = and(mipReg, _T_709) @[BitUtils.scala 32:36]
      node _T_711 = or(_T_708, _T_710) @[BitUtils.scala 32:25]
      mipReg <= _T_711 @[RegMap.scala 50:76]
      skip @[RegMap.scala 50:72]
    wire ret : UInt<1> @[CSR.scala 491:17]
    node _T_712 = eq(addr, UInt<1>("h01")) @[CSR.scala 492:23]
    node _T_713 = eq(io.in.bits.func, UInt<1>("h00")) @[CSR.scala 492:46]
    node _T_714 = and(_T_712, _T_713) @[CSR.scala 492:38]
    node _T_715 = eq(io.isBackendException, UInt<1>("h00")) @[CSR.scala 492:67]
    node isEbreak = and(_T_714, _T_715) @[CSR.scala 492:64]
    node _T_716 = eq(addr, UInt<1>("h00")) @[CSR.scala 493:22]
    node _T_717 = eq(io.in.bits.func, UInt<1>("h00")) @[CSR.scala 493:44]
    node _T_718 = and(_T_716, _T_717) @[CSR.scala 493:36]
    node _T_719 = eq(io.isBackendException, UInt<1>("h00")) @[CSR.scala 493:65]
    node isEcall = and(_T_718, _T_719) @[CSR.scala 493:62]
    node _T_720 = eq(addr, UInt<10>("h0302")) @[CSR.scala 494:21]
    node _T_721 = eq(io.in.bits.func, UInt<1>("h00")) @[CSR.scala 494:44]
    node _T_722 = and(_T_720, _T_721) @[CSR.scala 494:36]
    node _T_723 = eq(io.isBackendException, UInt<1>("h00")) @[CSR.scala 494:65]
    node isMret = and(_T_722, _T_723) @[CSR.scala 494:62]
    node _T_724 = eq(addr, UInt<9>("h0102")) @[CSR.scala 495:21]
    node _T_725 = eq(io.in.bits.func, UInt<1>("h00")) @[CSR.scala 495:44]
    node _T_726 = and(_T_724, _T_725) @[CSR.scala 495:36]
    node _T_727 = eq(io.isBackendException, UInt<1>("h00")) @[CSR.scala 495:65]
    node isSret = and(_T_726, _T_727) @[CSR.scala 495:62]
    node _T_728 = eq(addr, UInt<2>("h02")) @[CSR.scala 496:21]
    node _T_729 = eq(io.in.bits.func, UInt<1>("h00")) @[CSR.scala 496:44]
    node _T_730 = and(_T_728, _T_729) @[CSR.scala 496:36]
    node _T_731 = eq(io.isBackendException, UInt<1>("h00")) @[CSR.scala 496:65]
    node isUret = and(_T_730, _T_731) @[CSR.scala 496:62]
    reg _T_732 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_733 = add(_T_732, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_734 = tail(_T_733, 1) @[GTimer.scala 25:12]
    _T_732 <= _T_734 @[GTimer.scala 25:7]
    wire _T_735 : UInt<1>
    _T_735 <= UInt<1>("h00")
    node _T_736 = and(wen, _T_735) @[Debug.scala 55:16]
    when _T_736 : @[Debug.scala 55:31]
      node _T_737 = asUInt(reset) @[Debug.scala 56:24]
      node _T_738 = eq(_T_737, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_738 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CSR: ", _T_732) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_739 = asUInt(reset) @[Debug.scala 57:13]
      node _T_740 = eq(_T_739, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_740 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "csr write: pc %x addr %x rdata %x wdata %x func %x\n", io.cfIn.pc, addr, rdata, wdata, io.in.bits.func) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    reg _T_741 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_742 = add(_T_741, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_743 = tail(_T_742, 1) @[GTimer.scala 25:12]
    _T_741 <= _T_743 @[GTimer.scala 25:7]
    reg _T_744 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_745 = add(_T_744, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_746 = tail(_T_745, 1) @[GTimer.scala 25:12]
    _T_744 <= _T_746 @[GTimer.scala 25:7]
    wire _T_747 : UInt<1>
    _T_747 <= UInt<1>("h00")
    node _T_748 = and(wen, _T_747) @[Debug.scala 55:16]
    when _T_748 : @[Debug.scala 55:31]
      node _T_749 = asUInt(reset) @[Debug.scala 56:24]
      node _T_750 = eq(_T_749, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_750 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CSR: ", _T_744) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_751 = asUInt(reset) @[Debug.scala 57:13]
      node _T_752 = eq(_T_751, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_752 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[MST] time %d pc %x mstatus %x mideleg %x medeleg %x mode %x\n", _T_741, io.cfIn.pc, mstatus, mideleg, medeleg, priviledgeMode) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    io.imemMMU.priviledgeMode <= priviledgeMode @[CSR.scala 527:29]
    node _T_753 = bits(mstatusStruct.mprv, 0, 0) @[CSR.scala 528:55]
    node _T_754 = mux(_T_753, mstatusStruct.mpp, priviledgeMode) @[CSR.scala 528:35]
    io.dmemMMU.priviledgeMode <= _T_754 @[CSR.scala 528:29]
    node _T_755 = bits(mstatusStruct.sum, 0, 0) @[CSR.scala 529:46]
    io.imemMMU.status_sum <= _T_755 @[CSR.scala 529:25]
    node _T_756 = bits(mstatusStruct.sum, 0, 0) @[CSR.scala 530:46]
    io.dmemMMU.status_sum <= _T_756 @[CSR.scala 530:25]
    io.imemMMU.status_mxr is invalid @[CSR.scala 531:25]
    node _T_757 = bits(mstatusStruct.mxr, 0, 0) @[CSR.scala 532:46]
    io.dmemMMU.status_mxr <= _T_757 @[CSR.scala 532:25]
    wire hasInstrPageFault : UInt<1> @[CSR.scala 534:31]
    wire hasLoadPageFault : UInt<1> @[CSR.scala 535:30]
    wire hasStorePageFault : UInt<1> @[CSR.scala 536:31]
    wire hasStoreAddrMisaligned : UInt<1> @[CSR.scala 537:36]
    wire hasLoadAddrMisaligned : UInt<1> @[CSR.scala 538:35]
    wire dmemPagefaultAddr : UInt<39> @[CSR.scala 540:31]
    wire dmemAddrMisalignedAddr : UInt<39> @[CSR.scala 541:36]
    wire lsuAddr : UInt<64>
    lsuAddr <= UInt<64>("h00")
    node _T_758 = and(io.cfIn.exceptionVec[12], io.in.valid) @[CSR.scala 553:63]
    hasInstrPageFault <= _T_758 @[CSR.scala 553:23]
    hasLoadPageFault <= io.dmemMMU.loadPF @[CSR.scala 554:22]
    hasStorePageFault <= io.dmemMMU.storePF @[CSR.scala 555:23]
    hasStoreAddrMisaligned <= io.cfIn.exceptionVec[6] @[CSR.scala 556:28]
    hasLoadAddrMisaligned <= io.cfIn.exceptionVec[4] @[CSR.scala 557:27]
    dmemPagefaultAddr <= io.dmemMMU.addr @[CSR.scala 558:23]
    dmemAddrMisalignedAddr <= lsuAddr @[CSR.scala 559:28]
    node _T_759 = or(hasInstrPageFault, hasLoadPageFault) @[CSR.scala 562:26]
    node _T_760 = or(_T_759, hasStorePageFault) @[CSR.scala 562:46]
    when _T_760 : @[CSR.scala 562:67]
      node _T_761 = add(io.cfIn.pc, UInt<2>("h02")) @[CSR.scala 563:88]
      node _T_762 = tail(_T_761, 1) @[CSR.scala 563:88]
      node _T_763 = bits(_T_762, 38, 0) @[CSR.scala 563:94]
      node _T_764 = bits(_T_763, 38, 38) @[BitUtils.scala 39:20]
      node _T_765 = bits(_T_764, 0, 0) @[Bitwise.scala 72:15]
      node _T_766 = mux(_T_765, UInt<25>("h01ffffff"), UInt<25>("h00")) @[Bitwise.scala 72:12]
      node _T_767 = cat(_T_766, _T_763) @[Cat.scala 29:58]
      node _T_768 = bits(io.cfIn.pc, 38, 0) @[CSR.scala 563:136]
      node _T_769 = bits(_T_768, 38, 38) @[BitUtils.scala 39:20]
      node _T_770 = bits(_T_769, 0, 0) @[Bitwise.scala 72:15]
      node _T_771 = mux(_T_770, UInt<25>("h01ffffff"), UInt<25>("h00")) @[Bitwise.scala 72:12]
      node _T_772 = cat(_T_771, _T_768) @[Cat.scala 29:58]
      node _T_773 = mux(io.cfIn.crossPageIPFFix, _T_767, _T_772) @[CSR.scala 563:42]
      node _T_774 = bits(dmemPagefaultAddr, 38, 38) @[BitUtils.scala 39:20]
      node _T_775 = bits(_T_774, 0, 0) @[Bitwise.scala 72:15]
      node _T_776 = mux(_T_775, UInt<25>("h01ffffff"), UInt<25>("h00")) @[Bitwise.scala 72:12]
      node _T_777 = cat(_T_776, dmemPagefaultAddr) @[Cat.scala 29:58]
      node _T_778 = mux(hasInstrPageFault, _T_773, _T_777) @[CSR.scala 563:19]
      node _T_779 = eq(priviledgeMode, UInt<2>("h03")) @[CSR.scala 564:25]
      when _T_779 : @[CSR.scala 564:35]
        mtval <= _T_778 @[CSR.scala 565:13]
        skip @[CSR.scala 564:35]
      else : @[CSR.scala 566:16]
        stval <= _T_778 @[CSR.scala 567:13]
        skip @[CSR.scala 566:16]
      reg _T_780 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_781 = add(_T_780, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_782 = tail(_T_781, 1) @[GTimer.scala 25:12]
      _T_780 <= _T_782 @[GTimer.scala 25:7]
      node _T_783 = bits(dmemPagefaultAddr, 38, 38) @[BitUtils.scala 39:20]
      node _T_784 = bits(_T_783, 0, 0) @[Bitwise.scala 72:15]
      node _T_785 = mux(_T_784, UInt<25>("h01ffffff"), UInt<25>("h00")) @[Bitwise.scala 72:12]
      node _T_786 = cat(_T_785, dmemPagefaultAddr) @[Cat.scala 29:58]
      reg _T_787 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_788 = add(_T_787, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_789 = tail(_T_788, 1) @[GTimer.scala 25:12]
      _T_787 <= _T_789 @[GTimer.scala 25:7]
      wire _T_790 : UInt<1>
      _T_790 <= UInt<1>("h00")
      node _T_791 = and(UInt<1>("h01"), _T_790) @[Debug.scala 55:16]
      when _T_791 : @[Debug.scala 55:31]
        node _T_792 = asUInt(reset) @[Debug.scala 56:24]
        node _T_793 = eq(_T_792, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_793 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] CSR: ", _T_787) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_794 = asUInt(reset) @[Debug.scala 57:13]
        node _T_795 = eq(_T_794, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_795 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[PF] %d: ipf %b tval %x := addr %x pc %x priviledgeMode %x\n", _T_780, hasInstrPageFault, _T_778, _T_786, io.cfIn.pc, priviledgeMode) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      skip @[CSR.scala 562:67]
    node _T_796 = or(hasLoadAddrMisaligned, hasStoreAddrMisaligned) @[CSR.scala 572:30]
    when _T_796 : @[CSR.scala 573:3]
      node _T_797 = bits(dmemAddrMisalignedAddr, 38, 38) @[BitUtils.scala 39:20]
      node _T_798 = bits(_T_797, 0, 0) @[Bitwise.scala 72:15]
      node _T_799 = mux(_T_798, UInt<25>("h01ffffff"), UInt<25>("h00")) @[Bitwise.scala 72:12]
      node _T_800 = cat(_T_799, dmemAddrMisalignedAddr) @[Cat.scala 29:58]
      mtval <= _T_800 @[CSR.scala 574:11]
      reg _T_801 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_802 = add(_T_801, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_803 = tail(_T_802, 1) @[GTimer.scala 25:12]
      _T_801 <= _T_803 @[GTimer.scala 25:7]
      node _T_804 = bits(dmemAddrMisalignedAddr, 38, 38) @[BitUtils.scala 39:20]
      node _T_805 = bits(_T_804, 0, 0) @[Bitwise.scala 72:15]
      node _T_806 = mux(_T_805, UInt<25>("h01ffffff"), UInt<25>("h00")) @[Bitwise.scala 72:12]
      node _T_807 = cat(_T_806, dmemAddrMisalignedAddr) @[Cat.scala 29:58]
      reg _T_808 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_809 = add(_T_808, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_810 = tail(_T_809, 1) @[GTimer.scala 25:12]
      _T_808 <= _T_810 @[GTimer.scala 25:7]
      wire _T_811 : UInt<1>
      _T_811 <= UInt<1>("h00")
      node _T_812 = and(UInt<1>("h01"), _T_811) @[Debug.scala 55:16]
      when _T_812 : @[Debug.scala 55:31]
        node _T_813 = asUInt(reset) @[Debug.scala 56:24]
        node _T_814 = eq(_T_813, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_814 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] CSR: ", _T_808) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_815 = asUInt(reset) @[Debug.scala 57:13]
        node _T_816 = eq(_T_815, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_816 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[ML] %d: addr %x pc %x priviledgeMode %x\n", _T_801, _T_807, io.cfIn.pc, priviledgeMode) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      skip @[CSR.scala 573:3]
    wire mtip : UInt<1>
    mtip <= UInt<1>("h00")
    wire meip : UInt<1>
    meip <= UInt<1>("h00")
    wire msip : UInt<1>
    msip <= UInt<1>("h00")
    mipWire.t.m <= mtip @[CSR.scala 588:15]
    mipWire.e.m <= meip @[CSR.scala 589:15]
    mipWire.s.m <= msip @[CSR.scala 590:15]
    wire mipRaiseIntr : {e : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, t : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, s : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}}
    mipRaiseIntr.s.u <= mip.s.u
    mipRaiseIntr.s.s <= mip.s.s
    mipRaiseIntr.s.h <= mip.s.h
    mipRaiseIntr.s.m <= mip.s.m
    mipRaiseIntr.t.u <= mip.t.u
    mipRaiseIntr.t.s <= mip.t.s
    mipRaiseIntr.t.h <= mip.t.h
    mipRaiseIntr.t.m <= mip.t.m
    mipRaiseIntr.e.u <= mip.e.u
    mipRaiseIntr.e.s <= mip.e.s
    mipRaiseIntr.e.h <= mip.e.h
    mipRaiseIntr.e.m <= mip.e.m
    node _T_817 = or(mip.e.s, meip) @[CSR.scala 596:31]
    mipRaiseIntr.e.s <= _T_817 @[CSR.scala 596:20]
    node _T_818 = cat(mipRaiseIntr.s.h, mipRaiseIntr.s.s) @[CSR.scala 598:41]
    node _T_819 = cat(_T_818, mipRaiseIntr.s.u) @[CSR.scala 598:41]
    node _T_820 = cat(mipRaiseIntr.t.s, mipRaiseIntr.t.u) @[CSR.scala 598:41]
    node _T_821 = cat(_T_820, mipRaiseIntr.s.m) @[CSR.scala 598:41]
    node _T_822 = cat(_T_821, _T_819) @[CSR.scala 598:41]
    node _T_823 = cat(mipRaiseIntr.e.u, mipRaiseIntr.t.m) @[CSR.scala 598:41]
    node _T_824 = cat(_T_823, mipRaiseIntr.t.h) @[CSR.scala 598:41]
    node _T_825 = cat(mipRaiseIntr.e.m, mipRaiseIntr.e.h) @[CSR.scala 598:41]
    node _T_826 = cat(_T_825, mipRaiseIntr.e.s) @[CSR.scala 598:41]
    node _T_827 = cat(_T_826, _T_824) @[CSR.scala 598:41]
    node _T_828 = cat(_T_827, _T_822) @[CSR.scala 598:41]
    node ideleg = and(mideleg, _T_828) @[CSR.scala 598:26]
    wire intrVecEnable : UInt<1>[12] @[CSR.scala 602:27]
    node _T_829 = bits(ideleg, 0, 0) @[CSR.scala 603:28]
    node _T_830 = bits(ideleg, 1, 1) @[CSR.scala 603:28]
    node _T_831 = bits(ideleg, 2, 2) @[CSR.scala 603:28]
    node _T_832 = bits(ideleg, 3, 3) @[CSR.scala 603:28]
    node _T_833 = bits(ideleg, 4, 4) @[CSR.scala 603:28]
    node _T_834 = bits(ideleg, 5, 5) @[CSR.scala 603:28]
    node _T_835 = bits(ideleg, 6, 6) @[CSR.scala 603:28]
    node _T_836 = bits(ideleg, 7, 7) @[CSR.scala 603:28]
    node _T_837 = bits(ideleg, 8, 8) @[CSR.scala 603:28]
    node _T_838 = bits(ideleg, 9, 9) @[CSR.scala 603:28]
    node _T_839 = bits(ideleg, 10, 10) @[CSR.scala 603:28]
    node _T_840 = bits(ideleg, 11, 11) @[CSR.scala 603:28]
    node _T_841 = bits(ideleg, 12, 12) @[CSR.scala 603:28]
    node _T_842 = bits(ideleg, 13, 13) @[CSR.scala 603:28]
    node _T_843 = bits(ideleg, 14, 14) @[CSR.scala 603:28]
    node _T_844 = bits(ideleg, 15, 15) @[CSR.scala 603:28]
    node _T_845 = bits(ideleg, 16, 16) @[CSR.scala 603:28]
    node _T_846 = bits(ideleg, 17, 17) @[CSR.scala 603:28]
    node _T_847 = bits(ideleg, 18, 18) @[CSR.scala 603:28]
    node _T_848 = bits(ideleg, 19, 19) @[CSR.scala 603:28]
    node _T_849 = bits(ideleg, 20, 20) @[CSR.scala 603:28]
    node _T_850 = bits(ideleg, 21, 21) @[CSR.scala 603:28]
    node _T_851 = bits(ideleg, 22, 22) @[CSR.scala 603:28]
    node _T_852 = bits(ideleg, 23, 23) @[CSR.scala 603:28]
    node _T_853 = bits(ideleg, 24, 24) @[CSR.scala 603:28]
    node _T_854 = bits(ideleg, 25, 25) @[CSR.scala 603:28]
    node _T_855 = bits(ideleg, 26, 26) @[CSR.scala 603:28]
    node _T_856 = bits(ideleg, 27, 27) @[CSR.scala 603:28]
    node _T_857 = bits(ideleg, 28, 28) @[CSR.scala 603:28]
    node _T_858 = bits(ideleg, 29, 29) @[CSR.scala 603:28]
    node _T_859 = bits(ideleg, 30, 30) @[CSR.scala 603:28]
    node _T_860 = bits(ideleg, 31, 31) @[CSR.scala 603:28]
    node _T_861 = bits(ideleg, 32, 32) @[CSR.scala 603:28]
    node _T_862 = bits(ideleg, 33, 33) @[CSR.scala 603:28]
    node _T_863 = bits(ideleg, 34, 34) @[CSR.scala 603:28]
    node _T_864 = bits(ideleg, 35, 35) @[CSR.scala 603:28]
    node _T_865 = bits(ideleg, 36, 36) @[CSR.scala 603:28]
    node _T_866 = bits(ideleg, 37, 37) @[CSR.scala 603:28]
    node _T_867 = bits(ideleg, 38, 38) @[CSR.scala 603:28]
    node _T_868 = bits(ideleg, 39, 39) @[CSR.scala 603:28]
    node _T_869 = bits(ideleg, 40, 40) @[CSR.scala 603:28]
    node _T_870 = bits(ideleg, 41, 41) @[CSR.scala 603:28]
    node _T_871 = bits(ideleg, 42, 42) @[CSR.scala 603:28]
    node _T_872 = bits(ideleg, 43, 43) @[CSR.scala 603:28]
    node _T_873 = bits(ideleg, 44, 44) @[CSR.scala 603:28]
    node _T_874 = bits(ideleg, 45, 45) @[CSR.scala 603:28]
    node _T_875 = bits(ideleg, 46, 46) @[CSR.scala 603:28]
    node _T_876 = bits(ideleg, 47, 47) @[CSR.scala 603:28]
    node _T_877 = bits(ideleg, 48, 48) @[CSR.scala 603:28]
    node _T_878 = bits(ideleg, 49, 49) @[CSR.scala 603:28]
    node _T_879 = bits(ideleg, 50, 50) @[CSR.scala 603:28]
    node _T_880 = bits(ideleg, 51, 51) @[CSR.scala 603:28]
    node _T_881 = bits(ideleg, 52, 52) @[CSR.scala 603:28]
    node _T_882 = bits(ideleg, 53, 53) @[CSR.scala 603:28]
    node _T_883 = bits(ideleg, 54, 54) @[CSR.scala 603:28]
    node _T_884 = bits(ideleg, 55, 55) @[CSR.scala 603:28]
    node _T_885 = bits(ideleg, 56, 56) @[CSR.scala 603:28]
    node _T_886 = bits(ideleg, 57, 57) @[CSR.scala 603:28]
    node _T_887 = bits(ideleg, 58, 58) @[CSR.scala 603:28]
    node _T_888 = bits(ideleg, 59, 59) @[CSR.scala 603:28]
    node _T_889 = bits(ideleg, 60, 60) @[CSR.scala 603:28]
    node _T_890 = bits(ideleg, 61, 61) @[CSR.scala 603:28]
    node _T_891 = bits(ideleg, 62, 62) @[CSR.scala 603:28]
    node _T_892 = bits(ideleg, 63, 63) @[CSR.scala 603:28]
    node _T_893 = eq(priviledgeMode, UInt<1>("h01")) @[CSR.scala 599:72]
    node _T_894 = and(_T_893, mstatusStruct.ie.s) @[CSR.scala 599:83]
    node _T_895 = lt(priviledgeMode, UInt<1>("h01")) @[CSR.scala 599:125]
    node _T_896 = or(_T_894, _T_895) @[CSR.scala 599:106]
    node _T_897 = eq(priviledgeMode, UInt<2>("h03")) @[CSR.scala 600:53]
    node _T_898 = and(_T_897, mstatusStruct.ie.m) @[CSR.scala 600:64]
    node _T_899 = lt(priviledgeMode, UInt<2>("h03")) @[CSR.scala 600:106]
    node _T_900 = or(_T_898, _T_899) @[CSR.scala 600:87]
    node _T_901 = mux(_T_829, _T_896, _T_900) @[CSR.scala 599:51]
    intrVecEnable[0] <= _T_901 @[CSR.scala 603:56]
    node _T_902 = eq(priviledgeMode, UInt<1>("h01")) @[CSR.scala 599:72]
    node _T_903 = and(_T_902, mstatusStruct.ie.s) @[CSR.scala 599:83]
    node _T_904 = lt(priviledgeMode, UInt<1>("h01")) @[CSR.scala 599:125]
    node _T_905 = or(_T_903, _T_904) @[CSR.scala 599:106]
    node _T_906 = eq(priviledgeMode, UInt<2>("h03")) @[CSR.scala 600:53]
    node _T_907 = and(_T_906, mstatusStruct.ie.m) @[CSR.scala 600:64]
    node _T_908 = lt(priviledgeMode, UInt<2>("h03")) @[CSR.scala 600:106]
    node _T_909 = or(_T_907, _T_908) @[CSR.scala 600:87]
    node _T_910 = mux(_T_830, _T_905, _T_909) @[CSR.scala 599:51]
    intrVecEnable[1] <= _T_910 @[CSR.scala 603:56]
    node _T_911 = eq(priviledgeMode, UInt<1>("h01")) @[CSR.scala 599:72]
    node _T_912 = and(_T_911, mstatusStruct.ie.s) @[CSR.scala 599:83]
    node _T_913 = lt(priviledgeMode, UInt<1>("h01")) @[CSR.scala 599:125]
    node _T_914 = or(_T_912, _T_913) @[CSR.scala 599:106]
    node _T_915 = eq(priviledgeMode, UInt<2>("h03")) @[CSR.scala 600:53]
    node _T_916 = and(_T_915, mstatusStruct.ie.m) @[CSR.scala 600:64]
    node _T_917 = lt(priviledgeMode, UInt<2>("h03")) @[CSR.scala 600:106]
    node _T_918 = or(_T_916, _T_917) @[CSR.scala 600:87]
    node _T_919 = mux(_T_831, _T_914, _T_918) @[CSR.scala 599:51]
    intrVecEnable[2] <= _T_919 @[CSR.scala 603:56]
    node _T_920 = eq(priviledgeMode, UInt<1>("h01")) @[CSR.scala 599:72]
    node _T_921 = and(_T_920, mstatusStruct.ie.s) @[CSR.scala 599:83]
    node _T_922 = lt(priviledgeMode, UInt<1>("h01")) @[CSR.scala 599:125]
    node _T_923 = or(_T_921, _T_922) @[CSR.scala 599:106]
    node _T_924 = eq(priviledgeMode, UInt<2>("h03")) @[CSR.scala 600:53]
    node _T_925 = and(_T_924, mstatusStruct.ie.m) @[CSR.scala 600:64]
    node _T_926 = lt(priviledgeMode, UInt<2>("h03")) @[CSR.scala 600:106]
    node _T_927 = or(_T_925, _T_926) @[CSR.scala 600:87]
    node _T_928 = mux(_T_832, _T_923, _T_927) @[CSR.scala 599:51]
    intrVecEnable[3] <= _T_928 @[CSR.scala 603:56]
    node _T_929 = eq(priviledgeMode, UInt<1>("h01")) @[CSR.scala 599:72]
    node _T_930 = and(_T_929, mstatusStruct.ie.s) @[CSR.scala 599:83]
    node _T_931 = lt(priviledgeMode, UInt<1>("h01")) @[CSR.scala 599:125]
    node _T_932 = or(_T_930, _T_931) @[CSR.scala 599:106]
    node _T_933 = eq(priviledgeMode, UInt<2>("h03")) @[CSR.scala 600:53]
    node _T_934 = and(_T_933, mstatusStruct.ie.m) @[CSR.scala 600:64]
    node _T_935 = lt(priviledgeMode, UInt<2>("h03")) @[CSR.scala 600:106]
    node _T_936 = or(_T_934, _T_935) @[CSR.scala 600:87]
    node _T_937 = mux(_T_833, _T_932, _T_936) @[CSR.scala 599:51]
    intrVecEnable[4] <= _T_937 @[CSR.scala 603:56]
    node _T_938 = eq(priviledgeMode, UInt<1>("h01")) @[CSR.scala 599:72]
    node _T_939 = and(_T_938, mstatusStruct.ie.s) @[CSR.scala 599:83]
    node _T_940 = lt(priviledgeMode, UInt<1>("h01")) @[CSR.scala 599:125]
    node _T_941 = or(_T_939, _T_940) @[CSR.scala 599:106]
    node _T_942 = eq(priviledgeMode, UInt<2>("h03")) @[CSR.scala 600:53]
    node _T_943 = and(_T_942, mstatusStruct.ie.m) @[CSR.scala 600:64]
    node _T_944 = lt(priviledgeMode, UInt<2>("h03")) @[CSR.scala 600:106]
    node _T_945 = or(_T_943, _T_944) @[CSR.scala 600:87]
    node _T_946 = mux(_T_834, _T_941, _T_945) @[CSR.scala 599:51]
    intrVecEnable[5] <= _T_946 @[CSR.scala 603:56]
    node _T_947 = eq(priviledgeMode, UInt<1>("h01")) @[CSR.scala 599:72]
    node _T_948 = and(_T_947, mstatusStruct.ie.s) @[CSR.scala 599:83]
    node _T_949 = lt(priviledgeMode, UInt<1>("h01")) @[CSR.scala 599:125]
    node _T_950 = or(_T_948, _T_949) @[CSR.scala 599:106]
    node _T_951 = eq(priviledgeMode, UInt<2>("h03")) @[CSR.scala 600:53]
    node _T_952 = and(_T_951, mstatusStruct.ie.m) @[CSR.scala 600:64]
    node _T_953 = lt(priviledgeMode, UInt<2>("h03")) @[CSR.scala 600:106]
    node _T_954 = or(_T_952, _T_953) @[CSR.scala 600:87]
    node _T_955 = mux(_T_835, _T_950, _T_954) @[CSR.scala 599:51]
    intrVecEnable[6] <= _T_955 @[CSR.scala 603:56]
    node _T_956 = eq(priviledgeMode, UInt<1>("h01")) @[CSR.scala 599:72]
    node _T_957 = and(_T_956, mstatusStruct.ie.s) @[CSR.scala 599:83]
    node _T_958 = lt(priviledgeMode, UInt<1>("h01")) @[CSR.scala 599:125]
    node _T_959 = or(_T_957, _T_958) @[CSR.scala 599:106]
    node _T_960 = eq(priviledgeMode, UInt<2>("h03")) @[CSR.scala 600:53]
    node _T_961 = and(_T_960, mstatusStruct.ie.m) @[CSR.scala 600:64]
    node _T_962 = lt(priviledgeMode, UInt<2>("h03")) @[CSR.scala 600:106]
    node _T_963 = or(_T_961, _T_962) @[CSR.scala 600:87]
    node _T_964 = mux(_T_836, _T_959, _T_963) @[CSR.scala 599:51]
    intrVecEnable[7] <= _T_964 @[CSR.scala 603:56]
    node _T_965 = eq(priviledgeMode, UInt<1>("h01")) @[CSR.scala 599:72]
    node _T_966 = and(_T_965, mstatusStruct.ie.s) @[CSR.scala 599:83]
    node _T_967 = lt(priviledgeMode, UInt<1>("h01")) @[CSR.scala 599:125]
    node _T_968 = or(_T_966, _T_967) @[CSR.scala 599:106]
    node _T_969 = eq(priviledgeMode, UInt<2>("h03")) @[CSR.scala 600:53]
    node _T_970 = and(_T_969, mstatusStruct.ie.m) @[CSR.scala 600:64]
    node _T_971 = lt(priviledgeMode, UInt<2>("h03")) @[CSR.scala 600:106]
    node _T_972 = or(_T_970, _T_971) @[CSR.scala 600:87]
    node _T_973 = mux(_T_837, _T_968, _T_972) @[CSR.scala 599:51]
    intrVecEnable[8] <= _T_973 @[CSR.scala 603:56]
    node _T_974 = eq(priviledgeMode, UInt<1>("h01")) @[CSR.scala 599:72]
    node _T_975 = and(_T_974, mstatusStruct.ie.s) @[CSR.scala 599:83]
    node _T_976 = lt(priviledgeMode, UInt<1>("h01")) @[CSR.scala 599:125]
    node _T_977 = or(_T_975, _T_976) @[CSR.scala 599:106]
    node _T_978 = eq(priviledgeMode, UInt<2>("h03")) @[CSR.scala 600:53]
    node _T_979 = and(_T_978, mstatusStruct.ie.m) @[CSR.scala 600:64]
    node _T_980 = lt(priviledgeMode, UInt<2>("h03")) @[CSR.scala 600:106]
    node _T_981 = or(_T_979, _T_980) @[CSR.scala 600:87]
    node _T_982 = mux(_T_838, _T_977, _T_981) @[CSR.scala 599:51]
    intrVecEnable[9] <= _T_982 @[CSR.scala 603:56]
    node _T_983 = eq(priviledgeMode, UInt<1>("h01")) @[CSR.scala 599:72]
    node _T_984 = and(_T_983, mstatusStruct.ie.s) @[CSR.scala 599:83]
    node _T_985 = lt(priviledgeMode, UInt<1>("h01")) @[CSR.scala 599:125]
    node _T_986 = or(_T_984, _T_985) @[CSR.scala 599:106]
    node _T_987 = eq(priviledgeMode, UInt<2>("h03")) @[CSR.scala 600:53]
    node _T_988 = and(_T_987, mstatusStruct.ie.m) @[CSR.scala 600:64]
    node _T_989 = lt(priviledgeMode, UInt<2>("h03")) @[CSR.scala 600:106]
    node _T_990 = or(_T_988, _T_989) @[CSR.scala 600:87]
    node _T_991 = mux(_T_839, _T_986, _T_990) @[CSR.scala 599:51]
    intrVecEnable[10] <= _T_991 @[CSR.scala 603:56]
    node _T_992 = eq(priviledgeMode, UInt<1>("h01")) @[CSR.scala 599:72]
    node _T_993 = and(_T_992, mstatusStruct.ie.s) @[CSR.scala 599:83]
    node _T_994 = lt(priviledgeMode, UInt<1>("h01")) @[CSR.scala 599:125]
    node _T_995 = or(_T_993, _T_994) @[CSR.scala 599:106]
    node _T_996 = eq(priviledgeMode, UInt<2>("h03")) @[CSR.scala 600:53]
    node _T_997 = and(_T_996, mstatusStruct.ie.m) @[CSR.scala 600:64]
    node _T_998 = lt(priviledgeMode, UInt<2>("h03")) @[CSR.scala 600:106]
    node _T_999 = or(_T_997, _T_998) @[CSR.scala 600:87]
    node _T_1000 = mux(_T_840, _T_995, _T_999) @[CSR.scala 599:51]
    intrVecEnable[11] <= _T_1000 @[CSR.scala 603:56]
    node _T_1001 = bits(mie, 11, 0) @[CSR.scala 604:20]
    node _T_1002 = cat(mipRaiseIntr.s.h, mipRaiseIntr.s.s) @[CSR.scala 604:42]
    node _T_1003 = cat(_T_1002, mipRaiseIntr.s.u) @[CSR.scala 604:42]
    node _T_1004 = cat(mipRaiseIntr.t.s, mipRaiseIntr.t.u) @[CSR.scala 604:42]
    node _T_1005 = cat(_T_1004, mipRaiseIntr.s.m) @[CSR.scala 604:42]
    node _T_1006 = cat(_T_1005, _T_1003) @[CSR.scala 604:42]
    node _T_1007 = cat(mipRaiseIntr.e.u, mipRaiseIntr.t.m) @[CSR.scala 604:42]
    node _T_1008 = cat(_T_1007, mipRaiseIntr.t.h) @[CSR.scala 604:42]
    node _T_1009 = cat(mipRaiseIntr.e.m, mipRaiseIntr.e.h) @[CSR.scala 604:42]
    node _T_1010 = cat(_T_1009, mipRaiseIntr.e.s) @[CSR.scala 604:42]
    node _T_1011 = cat(_T_1010, _T_1008) @[CSR.scala 604:42]
    node _T_1012 = cat(_T_1011, _T_1006) @[CSR.scala 604:42]
    node _T_1013 = and(_T_1001, _T_1012) @[CSR.scala 604:27]
    node _T_1014 = cat(intrVecEnable[2], intrVecEnable[1]) @[CSR.scala 604:65]
    node _T_1015 = cat(_T_1014, intrVecEnable[0]) @[CSR.scala 604:65]
    node _T_1016 = cat(intrVecEnable[5], intrVecEnable[4]) @[CSR.scala 604:65]
    node _T_1017 = cat(_T_1016, intrVecEnable[3]) @[CSR.scala 604:65]
    node _T_1018 = cat(_T_1017, _T_1015) @[CSR.scala 604:65]
    node _T_1019 = cat(intrVecEnable[8], intrVecEnable[7]) @[CSR.scala 604:65]
    node _T_1020 = cat(_T_1019, intrVecEnable[6]) @[CSR.scala 604:65]
    node _T_1021 = cat(intrVecEnable[11], intrVecEnable[10]) @[CSR.scala 604:65]
    node _T_1022 = cat(_T_1021, intrVecEnable[9]) @[CSR.scala 604:65]
    node _T_1023 = cat(_T_1022, _T_1020) @[CSR.scala 604:65]
    node _T_1024 = cat(_T_1023, _T_1018) @[CSR.scala 604:65]
    node intrVec = and(_T_1013, _T_1024) @[CSR.scala 604:49]
    node _T_1025 = mux(io.cfIn.intrVec[4], UInt<3>("h04"), UInt<1>("h00")) @[CSR.scala 608:69]
    node _T_1026 = mux(io.cfIn.intrVec[8], UInt<4>("h08"), _T_1025) @[CSR.scala 608:69]
    node _T_1027 = mux(io.cfIn.intrVec[0], UInt<1>("h00"), _T_1026) @[CSR.scala 608:69]
    node _T_1028 = mux(io.cfIn.intrVec[5], UInt<3>("h05"), _T_1027) @[CSR.scala 608:69]
    node _T_1029 = mux(io.cfIn.intrVec[9], UInt<4>("h09"), _T_1028) @[CSR.scala 608:69]
    node _T_1030 = mux(io.cfIn.intrVec[1], UInt<1>("h01"), _T_1029) @[CSR.scala 608:69]
    node _T_1031 = mux(io.cfIn.intrVec[7], UInt<3>("h07"), _T_1030) @[CSR.scala 608:69]
    node _T_1032 = mux(io.cfIn.intrVec[11], UInt<4>("h0b"), _T_1031) @[CSR.scala 608:69]
    node intrNO = mux(io.cfIn.intrVec[3], UInt<2>("h03"), _T_1032) @[CSR.scala 608:69]
    node _T_1033 = cat(io.cfIn.intrVec[2], io.cfIn.intrVec[1]) @[CSR.scala 610:35]
    node _T_1034 = cat(_T_1033, io.cfIn.intrVec[0]) @[CSR.scala 610:35]
    node _T_1035 = cat(io.cfIn.intrVec[5], io.cfIn.intrVec[4]) @[CSR.scala 610:35]
    node _T_1036 = cat(_T_1035, io.cfIn.intrVec[3]) @[CSR.scala 610:35]
    node _T_1037 = cat(_T_1036, _T_1034) @[CSR.scala 610:35]
    node _T_1038 = cat(io.cfIn.intrVec[8], io.cfIn.intrVec[7]) @[CSR.scala 610:35]
    node _T_1039 = cat(_T_1038, io.cfIn.intrVec[6]) @[CSR.scala 610:35]
    node _T_1040 = cat(io.cfIn.intrVec[11], io.cfIn.intrVec[10]) @[CSR.scala 610:35]
    node _T_1041 = cat(_T_1040, io.cfIn.intrVec[9]) @[CSR.scala 610:35]
    node _T_1042 = cat(_T_1041, _T_1039) @[CSR.scala 610:35]
    node _T_1043 = cat(_T_1042, _T_1037) @[CSR.scala 610:35]
    node raiseIntr = orr(_T_1043) @[CSR.scala 610:42]
    wire csrExceptionVec : UInt<1>[16] @[CSR.scala 615:29]
    csrExceptionVec[0] <= UInt<1>("h00") @[CSR.scala 616:25]
    csrExceptionVec[1] <= UInt<1>("h00") @[CSR.scala 616:25]
    csrExceptionVec[2] <= UInt<1>("h00") @[CSR.scala 616:25]
    csrExceptionVec[3] <= UInt<1>("h00") @[CSR.scala 616:25]
    csrExceptionVec[4] <= UInt<1>("h00") @[CSR.scala 616:25]
    csrExceptionVec[5] <= UInt<1>("h00") @[CSR.scala 616:25]
    csrExceptionVec[6] <= UInt<1>("h00") @[CSR.scala 616:25]
    csrExceptionVec[7] <= UInt<1>("h00") @[CSR.scala 616:25]
    csrExceptionVec[8] <= UInt<1>("h00") @[CSR.scala 616:25]
    csrExceptionVec[9] <= UInt<1>("h00") @[CSR.scala 616:25]
    csrExceptionVec[10] <= UInt<1>("h00") @[CSR.scala 616:25]
    csrExceptionVec[11] <= UInt<1>("h00") @[CSR.scala 616:25]
    csrExceptionVec[12] <= UInt<1>("h00") @[CSR.scala 616:25]
    csrExceptionVec[13] <= UInt<1>("h00") @[CSR.scala 616:25]
    csrExceptionVec[14] <= UInt<1>("h00") @[CSR.scala 616:25]
    csrExceptionVec[15] <= UInt<1>("h00") @[CSR.scala 616:25]
    node _T_1044 = and(io.in.valid, isEbreak) @[CSR.scala 617:46]
    csrExceptionVec[3] <= _T_1044 @[CSR.scala 617:31]
    node _T_1045 = eq(priviledgeMode, UInt<2>("h03")) @[CSR.scala 618:45]
    node _T_1046 = and(_T_1045, io.in.valid) @[CSR.scala 618:55]
    node _T_1047 = and(_T_1046, isEcall) @[CSR.scala 618:70]
    csrExceptionVec[11] <= _T_1047 @[CSR.scala 618:27]
    node _T_1048 = eq(priviledgeMode, UInt<1>("h01")) @[CSR.scala 619:45]
    node _T_1049 = and(_T_1048, io.in.valid) @[CSR.scala 619:55]
    node _T_1050 = and(_T_1049, isEcall) @[CSR.scala 619:70]
    csrExceptionVec[9] <= _T_1050 @[CSR.scala 619:27]
    node _T_1051 = eq(priviledgeMode, UInt<1>("h00")) @[CSR.scala 620:45]
    node _T_1052 = and(_T_1051, io.in.valid) @[CSR.scala 620:55]
    node _T_1053 = and(_T_1052, isEcall) @[CSR.scala 620:70]
    csrExceptionVec[8] <= _T_1053 @[CSR.scala 620:27]
    node _T_1054 = or(isIllegalAddr, isIllegalAccess) @[CSR.scala 621:51]
    node _T_1055 = and(_T_1054, wen) @[CSR.scala 621:71]
    node _T_1056 = eq(io.isBackendException, UInt<1>("h00")) @[CSR.scala 621:81]
    node _T_1057 = and(_T_1055, _T_1056) @[CSR.scala 621:78]
    csrExceptionVec[2] <= _T_1057 @[CSR.scala 621:33]
    csrExceptionVec[13] <= hasLoadPageFault @[CSR.scala 622:34]
    csrExceptionVec[15] <= hasStorePageFault @[CSR.scala 623:35]
    node _T_1058 = cat(csrExceptionVec[1], csrExceptionVec[0]) @[CSR.scala 625:49]
    node _T_1059 = cat(csrExceptionVec[3], csrExceptionVec[2]) @[CSR.scala 625:49]
    node _T_1060 = cat(_T_1059, _T_1058) @[CSR.scala 625:49]
    node _T_1061 = cat(csrExceptionVec[5], csrExceptionVec[4]) @[CSR.scala 625:49]
    node _T_1062 = cat(csrExceptionVec[7], csrExceptionVec[6]) @[CSR.scala 625:49]
    node _T_1063 = cat(_T_1062, _T_1061) @[CSR.scala 625:49]
    node _T_1064 = cat(_T_1063, _T_1060) @[CSR.scala 625:49]
    node _T_1065 = cat(csrExceptionVec[9], csrExceptionVec[8]) @[CSR.scala 625:49]
    node _T_1066 = cat(csrExceptionVec[11], csrExceptionVec[10]) @[CSR.scala 625:49]
    node _T_1067 = cat(_T_1066, _T_1065) @[CSR.scala 625:49]
    node _T_1068 = cat(csrExceptionVec[13], csrExceptionVec[12]) @[CSR.scala 625:49]
    node _T_1069 = cat(csrExceptionVec[15], csrExceptionVec[14]) @[CSR.scala 625:49]
    node _T_1070 = cat(_T_1069, _T_1068) @[CSR.scala 625:49]
    node _T_1071 = cat(_T_1070, _T_1067) @[CSR.scala 625:49]
    node _T_1072 = cat(_T_1071, _T_1064) @[CSR.scala 625:49]
    node _T_1073 = cat(io.cfIn.exceptionVec[1], io.cfIn.exceptionVec[0]) @[CSR.scala 625:76]
    node _T_1074 = cat(io.cfIn.exceptionVec[3], io.cfIn.exceptionVec[2]) @[CSR.scala 625:76]
    node _T_1075 = cat(_T_1074, _T_1073) @[CSR.scala 625:76]
    node _T_1076 = cat(io.cfIn.exceptionVec[5], io.cfIn.exceptionVec[4]) @[CSR.scala 625:76]
    node _T_1077 = cat(io.cfIn.exceptionVec[7], io.cfIn.exceptionVec[6]) @[CSR.scala 625:76]
    node _T_1078 = cat(_T_1077, _T_1076) @[CSR.scala 625:76]
    node _T_1079 = cat(_T_1078, _T_1075) @[CSR.scala 625:76]
    node _T_1080 = cat(io.cfIn.exceptionVec[9], io.cfIn.exceptionVec[8]) @[CSR.scala 625:76]
    node _T_1081 = cat(io.cfIn.exceptionVec[11], io.cfIn.exceptionVec[10]) @[CSR.scala 625:76]
    node _T_1082 = cat(_T_1081, _T_1080) @[CSR.scala 625:76]
    node _T_1083 = cat(io.cfIn.exceptionVec[13], io.cfIn.exceptionVec[12]) @[CSR.scala 625:76]
    node _T_1084 = cat(io.cfIn.exceptionVec[15], io.cfIn.exceptionVec[14]) @[CSR.scala 625:76]
    node _T_1085 = cat(_T_1084, _T_1083) @[CSR.scala 625:76]
    node _T_1086 = cat(_T_1085, _T_1082) @[CSR.scala 625:76]
    node _T_1087 = cat(_T_1086, _T_1079) @[CSR.scala 625:76]
    node raiseExceptionVec = or(_T_1072, _T_1087) @[CSR.scala 625:52]
    node raiseException = orr(raiseExceptionVec) @[CSR.scala 626:42]
    node _T_1088 = bits(raiseExceptionVec, 5, 5) @[CSR.scala 627:92]
    node _T_1089 = mux(_T_1088, UInt<3>("h05"), UInt<1>("h00")) @[CSR.scala 627:74]
    node _T_1090 = bits(raiseExceptionVec, 7, 7) @[CSR.scala 627:92]
    node _T_1091 = mux(_T_1090, UInt<3>("h07"), _T_1089) @[CSR.scala 627:74]
    node _T_1092 = bits(raiseExceptionVec, 13, 13) @[CSR.scala 627:92]
    node _T_1093 = mux(_T_1092, UInt<4>("h0d"), _T_1091) @[CSR.scala 627:74]
    node _T_1094 = bits(raiseExceptionVec, 15, 15) @[CSR.scala 627:92]
    node _T_1095 = mux(_T_1094, UInt<4>("h0f"), _T_1093) @[CSR.scala 627:74]
    node _T_1096 = bits(raiseExceptionVec, 4, 4) @[CSR.scala 627:92]
    node _T_1097 = mux(_T_1096, UInt<3>("h04"), _T_1095) @[CSR.scala 627:74]
    node _T_1098 = bits(raiseExceptionVec, 6, 6) @[CSR.scala 627:92]
    node _T_1099 = mux(_T_1098, UInt<3>("h06"), _T_1097) @[CSR.scala 627:74]
    node _T_1100 = bits(raiseExceptionVec, 8, 8) @[CSR.scala 627:92]
    node _T_1101 = mux(_T_1100, UInt<4>("h08"), _T_1099) @[CSR.scala 627:74]
    node _T_1102 = bits(raiseExceptionVec, 9, 9) @[CSR.scala 627:92]
    node _T_1103 = mux(_T_1102, UInt<4>("h09"), _T_1101) @[CSR.scala 627:74]
    node _T_1104 = bits(raiseExceptionVec, 11, 11) @[CSR.scala 627:92]
    node _T_1105 = mux(_T_1104, UInt<4>("h0b"), _T_1103) @[CSR.scala 627:74]
    node _T_1106 = bits(raiseExceptionVec, 0, 0) @[CSR.scala 627:92]
    node _T_1107 = mux(_T_1106, UInt<1>("h00"), _T_1105) @[CSR.scala 627:74]
    node _T_1108 = bits(raiseExceptionVec, 2, 2) @[CSR.scala 627:92]
    node _T_1109 = mux(_T_1108, UInt<2>("h02"), _T_1107) @[CSR.scala 627:74]
    node _T_1110 = bits(raiseExceptionVec, 1, 1) @[CSR.scala 627:92]
    node _T_1111 = mux(_T_1110, UInt<1>("h01"), _T_1109) @[CSR.scala 627:74]
    node _T_1112 = bits(raiseExceptionVec, 12, 12) @[CSR.scala 627:92]
    node _T_1113 = mux(_T_1112, UInt<4>("h0c"), _T_1111) @[CSR.scala 627:74]
    node _T_1114 = bits(raiseExceptionVec, 3, 3) @[CSR.scala 627:92]
    node exceptionNO = mux(_T_1114, UInt<2>("h03"), _T_1113) @[CSR.scala 627:74]
    io.wenFix <= raiseException @[CSR.scala 628:13]
    node _T_1115 = shl(raiseIntr, 63) @[CSR.scala 630:28]
    node _T_1116 = mux(raiseIntr, intrNO, exceptionNO) @[CSR.scala 630:46]
    node causeNO = or(_T_1115, _T_1116) @[CSR.scala 630:41]
    node _T_1117 = mux(raiseIntr, causeNO, UInt<1>("h00")) @[CSR.scala 631:19]
    io.intrNO <= _T_1117 @[CSR.scala 631:13]
    node _T_1118 = or(raiseException, raiseIntr) @[CSR.scala 633:44]
    node raiseExceptionIntr = and(_T_1118, io.instrValid) @[CSR.scala 633:58]
    wire retTarget : UInt<39> @[CSR.scala 634:23]
    wire trapTarget : UInt<39> @[CSR.scala 635:24]
    node _T_1119 = eq(io.in.bits.func, UInt<1>("h00")) @[CSR.scala 636:39]
    node _T_1120 = and(io.in.valid, _T_1119) @[CSR.scala 636:31]
    node _T_1121 = or(_T_1120, raiseExceptionIntr) @[CSR.scala 636:58]
    node _T_1122 = or(_T_1121, resetSatp) @[CSR.scala 636:80]
    io.redirect.valid <= _T_1122 @[CSR.scala 636:21]
    io.redirect.rtype <= UInt<1>("h00") @[CSR.scala 637:21]
    node _T_1123 = add(io.cfIn.pc, UInt<3>("h04")) @[CSR.scala 638:51]
    node _T_1124 = tail(_T_1123, 1) @[CSR.scala 638:51]
    node _T_1125 = mux(raiseExceptionIntr, trapTarget, retTarget) @[CSR.scala 638:61]
    node _T_1126 = mux(resetSatp, _T_1124, _T_1125) @[CSR.scala 638:28]
    io.redirect.target <= _T_1126 @[CSR.scala 638:22]
    node _T_1127 = cat(csrExceptionVec[1], csrExceptionVec[0]) @[CSR.scala 640:73]
    node _T_1128 = cat(csrExceptionVec[3], csrExceptionVec[2]) @[CSR.scala 640:73]
    node _T_1129 = cat(_T_1128, _T_1127) @[CSR.scala 640:73]
    node _T_1130 = cat(csrExceptionVec[5], csrExceptionVec[4]) @[CSR.scala 640:73]
    node _T_1131 = cat(csrExceptionVec[7], csrExceptionVec[6]) @[CSR.scala 640:73]
    node _T_1132 = cat(_T_1131, _T_1130) @[CSR.scala 640:73]
    node _T_1133 = cat(_T_1132, _T_1129) @[CSR.scala 640:73]
    node _T_1134 = cat(csrExceptionVec[9], csrExceptionVec[8]) @[CSR.scala 640:73]
    node _T_1135 = cat(csrExceptionVec[11], csrExceptionVec[10]) @[CSR.scala 640:73]
    node _T_1136 = cat(_T_1135, _T_1134) @[CSR.scala 640:73]
    node _T_1137 = cat(csrExceptionVec[13], csrExceptionVec[12]) @[CSR.scala 640:73]
    node _T_1138 = cat(csrExceptionVec[15], csrExceptionVec[14]) @[CSR.scala 640:73]
    node _T_1139 = cat(_T_1138, _T_1137) @[CSR.scala 640:73]
    node _T_1140 = cat(_T_1139, _T_1136) @[CSR.scala 640:73]
    node _T_1141 = cat(_T_1140, _T_1133) @[CSR.scala 640:73]
    node _T_1142 = cat(io.cfIn.exceptionVec[1], io.cfIn.exceptionVec[0]) @[CSR.scala 640:99]
    node _T_1143 = cat(io.cfIn.exceptionVec[3], io.cfIn.exceptionVec[2]) @[CSR.scala 640:99]
    node _T_1144 = cat(_T_1143, _T_1142) @[CSR.scala 640:99]
    node _T_1145 = cat(io.cfIn.exceptionVec[5], io.cfIn.exceptionVec[4]) @[CSR.scala 640:99]
    node _T_1146 = cat(io.cfIn.exceptionVec[7], io.cfIn.exceptionVec[6]) @[CSR.scala 640:99]
    node _T_1147 = cat(_T_1146, _T_1145) @[CSR.scala 640:99]
    node _T_1148 = cat(_T_1147, _T_1144) @[CSR.scala 640:99]
    node _T_1149 = cat(io.cfIn.exceptionVec[9], io.cfIn.exceptionVec[8]) @[CSR.scala 640:99]
    node _T_1150 = cat(io.cfIn.exceptionVec[11], io.cfIn.exceptionVec[10]) @[CSR.scala 640:99]
    node _T_1151 = cat(_T_1150, _T_1149) @[CSR.scala 640:99]
    node _T_1152 = cat(io.cfIn.exceptionVec[13], io.cfIn.exceptionVec[12]) @[CSR.scala 640:99]
    node _T_1153 = cat(io.cfIn.exceptionVec[15], io.cfIn.exceptionVec[14]) @[CSR.scala 640:99]
    node _T_1154 = cat(_T_1153, _T_1152) @[CSR.scala 640:99]
    node _T_1155 = cat(_T_1154, _T_1151) @[CSR.scala 640:99]
    node _T_1156 = cat(_T_1155, _T_1148) @[CSR.scala 640:99]
    reg _T_1157 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_1158 = add(_T_1157, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_1159 = tail(_T_1158, 1) @[GTimer.scala 25:12]
    _T_1157 <= _T_1159 @[GTimer.scala 25:7]
    wire _T_1160 : UInt<1>
    _T_1160 <= UInt<1>("h00")
    node _T_1161 = and(raiseExceptionIntr, _T_1160) @[Debug.scala 55:16]
    when _T_1161 : @[Debug.scala 55:31]
      node _T_1162 = asUInt(reset) @[Debug.scala 56:24]
      node _T_1163 = eq(_T_1162, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_1163 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CSR: ", _T_1157) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_1164 = asUInt(reset) @[Debug.scala 57:13]
      node _T_1165 = eq(_T_1164, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_1165 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "excin %b excgen %b", _T_1141, _T_1156) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_1166 = cat(io.cfIn.intrVec[2], io.cfIn.intrVec[1]) @[CSR.scala 641:109]
    node _T_1167 = cat(_T_1166, io.cfIn.intrVec[0]) @[CSR.scala 641:109]
    node _T_1168 = cat(io.cfIn.intrVec[5], io.cfIn.intrVec[4]) @[CSR.scala 641:109]
    node _T_1169 = cat(_T_1168, io.cfIn.intrVec[3]) @[CSR.scala 641:109]
    node _T_1170 = cat(_T_1169, _T_1167) @[CSR.scala 641:109]
    node _T_1171 = cat(io.cfIn.intrVec[8], io.cfIn.intrVec[7]) @[CSR.scala 641:109]
    node _T_1172 = cat(_T_1171, io.cfIn.intrVec[6]) @[CSR.scala 641:109]
    node _T_1173 = cat(io.cfIn.intrVec[11], io.cfIn.intrVec[10]) @[CSR.scala 641:109]
    node _T_1174 = cat(_T_1173, io.cfIn.intrVec[9]) @[CSR.scala 641:109]
    node _T_1175 = cat(_T_1174, _T_1172) @[CSR.scala 641:109]
    node _T_1176 = cat(_T_1175, _T_1170) @[CSR.scala 641:109]
    reg _T_1177 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_1178 = add(_T_1177, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_1179 = tail(_T_1178, 1) @[GTimer.scala 25:12]
    _T_1177 <= _T_1179 @[GTimer.scala 25:7]
    wire _T_1180 : UInt<1>
    _T_1180 <= UInt<1>("h00")
    node _T_1181 = and(raiseExceptionIntr, _T_1180) @[Debug.scala 55:16]
    when _T_1181 : @[Debug.scala 55:31]
      node _T_1182 = asUInt(reset) @[Debug.scala 56:24]
      node _T_1183 = eq(_T_1182, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_1183 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CSR: ", _T_1177) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_1184 = asUInt(reset) @[Debug.scala 57:13]
      node _T_1185 = eq(_T_1184, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_1185 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "int/exc: pc %x int (%d):%x exc: (%d):%x\n", io.cfIn.pc, intrNO, _T_1176, exceptionNO, raiseExceptionVec) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    reg _T_1186 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_1187 = add(_T_1186, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_1188 = tail(_T_1187, 1) @[GTimer.scala 25:12]
    _T_1186 <= _T_1188 @[GTimer.scala 25:7]
    reg _T_1189 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_1190 = add(_T_1189, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_1191 = tail(_T_1190, 1) @[GTimer.scala 25:12]
    _T_1189 <= _T_1191 @[GTimer.scala 25:7]
    wire _T_1192 : UInt<1>
    _T_1192 <= UInt<1>("h00")
    node _T_1193 = and(raiseExceptionIntr, _T_1192) @[Debug.scala 55:16]
    when _T_1193 : @[Debug.scala 55:31]
      node _T_1194 = asUInt(reset) @[Debug.scala 56:24]
      node _T_1195 = eq(_T_1194, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_1195 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CSR: ", _T_1189) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_1196 = asUInt(reset) @[Debug.scala 57:13]
      node _T_1197 = eq(_T_1196, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_1197 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[MST] time %d pc %x mstatus %x mideleg %x medeleg %x mode %x\n", _T_1186, io.cfIn.pc, mstatus, mideleg, medeleg, priviledgeMode) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    reg _T_1198 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_1199 = add(_T_1198, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_1200 = tail(_T_1199, 1) @[GTimer.scala 25:12]
    _T_1198 <= _T_1200 @[GTimer.scala 25:7]
    wire _T_1201 : UInt<1>
    _T_1201 <= UInt<1>("h00")
    node _T_1202 = and(io.redirect.valid, _T_1201) @[Debug.scala 55:16]
    when _T_1202 : @[Debug.scala 55:31]
      node _T_1203 = asUInt(reset) @[Debug.scala 56:24]
      node _T_1204 = eq(_T_1203, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_1204 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CSR: ", _T_1198) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_1205 = asUInt(reset) @[Debug.scala 57:13]
      node _T_1206 = eq(_T_1205, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_1206 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "redirect to %x\n", io.redirect.target) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    reg _T_1207 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_1208 = add(_T_1207, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_1209 = tail(_T_1208, 1) @[GTimer.scala 25:12]
    _T_1207 <= _T_1209 @[GTimer.scala 25:7]
    wire _T_1210 : UInt<1>
    _T_1210 <= UInt<1>("h00")
    node _T_1211 = and(resetSatp, _T_1210) @[Debug.scala 55:16]
    when _T_1211 : @[Debug.scala 55:31]
      node _T_1212 = asUInt(reset) @[Debug.scala 56:24]
      node _T_1213 = eq(_T_1212, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_1213 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CSR: ", _T_1207) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_1214 = asUInt(reset) @[Debug.scala 57:13]
      node _T_1215 = eq(_T_1214, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_1215 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "satp reset\n") @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node deleg = mux(raiseIntr, mideleg, medeleg) @[CSR.scala 648:18]
    node _T_1216 = bits(causeNO, 3, 0) @[CSR.scala 650:30]
    node _T_1217 = dshr(deleg, _T_1216) @[CSR.scala 650:22]
    node _T_1218 = bits(_T_1217, 0, 0) @[CSR.scala 650:22]
    node _T_1219 = lt(priviledgeMode, UInt<2>("h03")) @[CSR.scala 650:57]
    node delegS = and(_T_1218, _T_1219) @[CSR.scala 650:38]
    node _T_1220 = or(hasInstrPageFault, hasLoadPageFault) @[CSR.scala 651:37]
    node _T_1221 = or(_T_1220, hasStorePageFault) @[CSR.scala 651:57]
    node _T_1222 = or(_T_1221, hasLoadAddrMisaligned) @[CSR.scala 651:78]
    node _T_1223 = or(_T_1222, hasStoreAddrMisaligned) @[CSR.scala 651:103]
    node _T_1224 = eq(_T_1223, UInt<1>("h00")) @[CSR.scala 651:17]
    node tvalWen = or(_T_1224, raiseIntr) @[CSR.scala 651:130]
    node _T_1225 = or(isMret, isSret) @[CSR.scala 653:17]
    node _T_1226 = or(_T_1225, isUret) @[CSR.scala 653:27]
    ret <= _T_1226 @[CSR.scala 653:7]
    node _T_1227 = mux(delegS, stvec, mtvec) @[CSR.scala 654:20]
    node _T_1228 = bits(_T_1227, 38, 0) @[CSR.scala 654:42]
    trapTarget <= _T_1228 @[CSR.scala 654:14]
    retTarget is invalid @[CSR.scala 655:13]
    node _T_1229 = and(io.in.valid, isMret) @[CSR.scala 659:15]
    when _T_1229 : @[CSR.scala 659:26]
      wire _T_1230 : {sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}} @[CSR.scala 660:47]
      wire _T_1231 : UInt<64>
      _T_1231 <= mstatus
      node _T_1232 = bits(_T_1231, 0, 0) @[CSR.scala 660:47]
      _T_1230.ie.u <= _T_1232 @[CSR.scala 660:47]
      node _T_1233 = bits(_T_1231, 1, 1) @[CSR.scala 660:47]
      _T_1230.ie.s <= _T_1233 @[CSR.scala 660:47]
      node _T_1234 = bits(_T_1231, 2, 2) @[CSR.scala 660:47]
      _T_1230.ie.h <= _T_1234 @[CSR.scala 660:47]
      node _T_1235 = bits(_T_1231, 3, 3) @[CSR.scala 660:47]
      _T_1230.ie.m <= _T_1235 @[CSR.scala 660:47]
      node _T_1236 = bits(_T_1231, 4, 4) @[CSR.scala 660:47]
      _T_1230.pie.u <= _T_1236 @[CSR.scala 660:47]
      node _T_1237 = bits(_T_1231, 5, 5) @[CSR.scala 660:47]
      _T_1230.pie.s <= _T_1237 @[CSR.scala 660:47]
      node _T_1238 = bits(_T_1231, 6, 6) @[CSR.scala 660:47]
      _T_1230.pie.h <= _T_1238 @[CSR.scala 660:47]
      node _T_1239 = bits(_T_1231, 7, 7) @[CSR.scala 660:47]
      _T_1230.pie.m <= _T_1239 @[CSR.scala 660:47]
      node _T_1240 = bits(_T_1231, 8, 8) @[CSR.scala 660:47]
      _T_1230.spp <= _T_1240 @[CSR.scala 660:47]
      node _T_1241 = bits(_T_1231, 10, 9) @[CSR.scala 660:47]
      _T_1230.hpp <= _T_1241 @[CSR.scala 660:47]
      node _T_1242 = bits(_T_1231, 12, 11) @[CSR.scala 660:47]
      _T_1230.mpp <= _T_1242 @[CSR.scala 660:47]
      node _T_1243 = bits(_T_1231, 14, 13) @[CSR.scala 660:47]
      _T_1230.fs <= _T_1243 @[CSR.scala 660:47]
      node _T_1244 = bits(_T_1231, 16, 15) @[CSR.scala 660:47]
      _T_1230.xs <= _T_1244 @[CSR.scala 660:47]
      node _T_1245 = bits(_T_1231, 17, 17) @[CSR.scala 660:47]
      _T_1230.mprv <= _T_1245 @[CSR.scala 660:47]
      node _T_1246 = bits(_T_1231, 18, 18) @[CSR.scala 660:47]
      _T_1230.sum <= _T_1246 @[CSR.scala 660:47]
      node _T_1247 = bits(_T_1231, 19, 19) @[CSR.scala 660:47]
      _T_1230.mxr <= _T_1247 @[CSR.scala 660:47]
      node _T_1248 = bits(_T_1231, 20, 20) @[CSR.scala 660:47]
      _T_1230.tvm <= _T_1248 @[CSR.scala 660:47]
      node _T_1249 = bits(_T_1231, 21, 21) @[CSR.scala 660:47]
      _T_1230.tw <= _T_1249 @[CSR.scala 660:47]
      node _T_1250 = bits(_T_1231, 22, 22) @[CSR.scala 660:47]
      _T_1230.tsr <= _T_1250 @[CSR.scala 660:47]
      node _T_1251 = bits(_T_1231, 31, 23) @[CSR.scala 660:47]
      _T_1230.pad0 <= _T_1251 @[CSR.scala 660:47]
      node _T_1252 = bits(_T_1231, 33, 32) @[CSR.scala 660:47]
      _T_1230.uxl <= _T_1252 @[CSR.scala 660:47]
      node _T_1253 = bits(_T_1231, 35, 34) @[CSR.scala 660:47]
      _T_1230.sxl <= _T_1253 @[CSR.scala 660:47]
      node _T_1254 = bits(_T_1231, 62, 36) @[CSR.scala 660:47]
      _T_1230.pad1 <= _T_1254 @[CSR.scala 660:47]
      node _T_1255 = bits(_T_1231, 63, 63) @[CSR.scala 660:47]
      _T_1230.sd <= _T_1255 @[CSR.scala 660:47]
      wire _T_1256 : {sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}}
      _T_1256.ie.u <= _T_1230.ie.u
      _T_1256.ie.s <= _T_1230.ie.s
      _T_1256.ie.h <= _T_1230.ie.h
      _T_1256.ie.m <= _T_1230.ie.m
      _T_1256.pie.u <= _T_1230.pie.u
      _T_1256.pie.s <= _T_1230.pie.s
      _T_1256.pie.h <= _T_1230.pie.h
      _T_1256.pie.m <= _T_1230.pie.m
      _T_1256.spp <= _T_1230.spp
      _T_1256.hpp <= _T_1230.hpp
      _T_1256.mpp <= _T_1230.mpp
      _T_1256.fs <= _T_1230.fs
      _T_1256.xs <= _T_1230.xs
      _T_1256.mprv <= _T_1230.mprv
      _T_1256.sum <= _T_1230.sum
      _T_1256.mxr <= _T_1230.mxr
      _T_1256.tvm <= _T_1230.tvm
      _T_1256.tw <= _T_1230.tw
      _T_1256.tsr <= _T_1230.tsr
      _T_1256.pad0 <= _T_1230.pad0
      _T_1256.uxl <= _T_1230.uxl
      _T_1256.sxl <= _T_1230.sxl
      _T_1256.pad1 <= _T_1230.pad1
      _T_1256.sd <= _T_1230.sd
      wire _T_1257 : {sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}} @[CSR.scala 661:47]
      wire _T_1258 : UInt<64>
      _T_1258 <= mstatus
      node _T_1259 = bits(_T_1258, 0, 0) @[CSR.scala 661:47]
      _T_1257.ie.u <= _T_1259 @[CSR.scala 661:47]
      node _T_1260 = bits(_T_1258, 1, 1) @[CSR.scala 661:47]
      _T_1257.ie.s <= _T_1260 @[CSR.scala 661:47]
      node _T_1261 = bits(_T_1258, 2, 2) @[CSR.scala 661:47]
      _T_1257.ie.h <= _T_1261 @[CSR.scala 661:47]
      node _T_1262 = bits(_T_1258, 3, 3) @[CSR.scala 661:47]
      _T_1257.ie.m <= _T_1262 @[CSR.scala 661:47]
      node _T_1263 = bits(_T_1258, 4, 4) @[CSR.scala 661:47]
      _T_1257.pie.u <= _T_1263 @[CSR.scala 661:47]
      node _T_1264 = bits(_T_1258, 5, 5) @[CSR.scala 661:47]
      _T_1257.pie.s <= _T_1264 @[CSR.scala 661:47]
      node _T_1265 = bits(_T_1258, 6, 6) @[CSR.scala 661:47]
      _T_1257.pie.h <= _T_1265 @[CSR.scala 661:47]
      node _T_1266 = bits(_T_1258, 7, 7) @[CSR.scala 661:47]
      _T_1257.pie.m <= _T_1266 @[CSR.scala 661:47]
      node _T_1267 = bits(_T_1258, 8, 8) @[CSR.scala 661:47]
      _T_1257.spp <= _T_1267 @[CSR.scala 661:47]
      node _T_1268 = bits(_T_1258, 10, 9) @[CSR.scala 661:47]
      _T_1257.hpp <= _T_1268 @[CSR.scala 661:47]
      node _T_1269 = bits(_T_1258, 12, 11) @[CSR.scala 661:47]
      _T_1257.mpp <= _T_1269 @[CSR.scala 661:47]
      node _T_1270 = bits(_T_1258, 14, 13) @[CSR.scala 661:47]
      _T_1257.fs <= _T_1270 @[CSR.scala 661:47]
      node _T_1271 = bits(_T_1258, 16, 15) @[CSR.scala 661:47]
      _T_1257.xs <= _T_1271 @[CSR.scala 661:47]
      node _T_1272 = bits(_T_1258, 17, 17) @[CSR.scala 661:47]
      _T_1257.mprv <= _T_1272 @[CSR.scala 661:47]
      node _T_1273 = bits(_T_1258, 18, 18) @[CSR.scala 661:47]
      _T_1257.sum <= _T_1273 @[CSR.scala 661:47]
      node _T_1274 = bits(_T_1258, 19, 19) @[CSR.scala 661:47]
      _T_1257.mxr <= _T_1274 @[CSR.scala 661:47]
      node _T_1275 = bits(_T_1258, 20, 20) @[CSR.scala 661:47]
      _T_1257.tvm <= _T_1275 @[CSR.scala 661:47]
      node _T_1276 = bits(_T_1258, 21, 21) @[CSR.scala 661:47]
      _T_1257.tw <= _T_1276 @[CSR.scala 661:47]
      node _T_1277 = bits(_T_1258, 22, 22) @[CSR.scala 661:47]
      _T_1257.tsr <= _T_1277 @[CSR.scala 661:47]
      node _T_1278 = bits(_T_1258, 31, 23) @[CSR.scala 661:47]
      _T_1257.pad0 <= _T_1278 @[CSR.scala 661:47]
      node _T_1279 = bits(_T_1258, 33, 32) @[CSR.scala 661:47]
      _T_1257.uxl <= _T_1279 @[CSR.scala 661:47]
      node _T_1280 = bits(_T_1258, 35, 34) @[CSR.scala 661:47]
      _T_1257.sxl <= _T_1280 @[CSR.scala 661:47]
      node _T_1281 = bits(_T_1258, 62, 36) @[CSR.scala 661:47]
      _T_1257.pad1 <= _T_1281 @[CSR.scala 661:47]
      node _T_1282 = bits(_T_1258, 63, 63) @[CSR.scala 661:47]
      _T_1257.sd <= _T_1282 @[CSR.scala 661:47]
      wire _T_1283 : {sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}}
      _T_1283.ie.u <= _T_1257.ie.u
      _T_1283.ie.s <= _T_1257.ie.s
      _T_1283.ie.h <= _T_1257.ie.h
      _T_1283.ie.m <= _T_1257.ie.m
      _T_1283.pie.u <= _T_1257.pie.u
      _T_1283.pie.s <= _T_1257.pie.s
      _T_1283.pie.h <= _T_1257.pie.h
      _T_1283.pie.m <= _T_1257.pie.m
      _T_1283.spp <= _T_1257.spp
      _T_1283.hpp <= _T_1257.hpp
      _T_1283.mpp <= _T_1257.mpp
      _T_1283.fs <= _T_1257.fs
      _T_1283.xs <= _T_1257.xs
      _T_1283.mprv <= _T_1257.mprv
      _T_1283.sum <= _T_1257.sum
      _T_1283.mxr <= _T_1257.mxr
      _T_1283.tvm <= _T_1257.tvm
      _T_1283.tw <= _T_1257.tw
      _T_1283.tsr <= _T_1257.tsr
      _T_1283.pad0 <= _T_1257.pad0
      _T_1283.uxl <= _T_1257.uxl
      _T_1283.sxl <= _T_1257.sxl
      _T_1283.pad1 <= _T_1257.pad1
      _T_1283.sd <= _T_1257.sd
      _T_1283.ie.m <= _T_1256.pie.m @[CSR.scala 663:21]
      priviledgeMode <= _T_1256.mpp @[CSR.scala 664:20]
      _T_1283.pie.m <= UInt<1>("h01") @[CSR.scala 665:22]
      _T_1283.mpp <= UInt<1>("h00") @[CSR.scala 666:20]
      node _T_1284 = cat(_T_1283.ie.h, _T_1283.ie.s) @[CSR.scala 667:27]
      node _T_1285 = cat(_T_1284, _T_1283.ie.u) @[CSR.scala 667:27]
      node _T_1286 = cat(_T_1283.pie.s, _T_1283.pie.u) @[CSR.scala 667:27]
      node _T_1287 = cat(_T_1286, _T_1283.ie.m) @[CSR.scala 667:27]
      node _T_1288 = cat(_T_1287, _T_1285) @[CSR.scala 667:27]
      node _T_1289 = cat(_T_1283.spp, _T_1283.pie.m) @[CSR.scala 667:27]
      node _T_1290 = cat(_T_1289, _T_1283.pie.h) @[CSR.scala 667:27]
      node _T_1291 = cat(_T_1283.fs, _T_1283.mpp) @[CSR.scala 667:27]
      node _T_1292 = cat(_T_1291, _T_1283.hpp) @[CSR.scala 667:27]
      node _T_1293 = cat(_T_1292, _T_1290) @[CSR.scala 667:27]
      node _T_1294 = cat(_T_1293, _T_1288) @[CSR.scala 667:27]
      node _T_1295 = cat(_T_1283.sum, _T_1283.mprv) @[CSR.scala 667:27]
      node _T_1296 = cat(_T_1295, _T_1283.xs) @[CSR.scala 667:27]
      node _T_1297 = cat(_T_1283.tw, _T_1283.tvm) @[CSR.scala 667:27]
      node _T_1298 = cat(_T_1297, _T_1283.mxr) @[CSR.scala 667:27]
      node _T_1299 = cat(_T_1298, _T_1296) @[CSR.scala 667:27]
      node _T_1300 = cat(_T_1283.uxl, _T_1283.pad0) @[CSR.scala 667:27]
      node _T_1301 = cat(_T_1300, _T_1283.tsr) @[CSR.scala 667:27]
      node _T_1302 = cat(_T_1283.sd, _T_1283.pad1) @[CSR.scala 667:27]
      node _T_1303 = cat(_T_1302, _T_1283.sxl) @[CSR.scala 667:27]
      node _T_1304 = cat(_T_1303, _T_1301) @[CSR.scala 667:27]
      node _T_1305 = cat(_T_1304, _T_1299) @[CSR.scala 667:27]
      node _T_1306 = cat(_T_1305, _T_1294) @[CSR.scala 667:27]
      mstatus <= _T_1306 @[CSR.scala 667:13]
      lr <= UInt<1>("h00") @[CSR.scala 668:8]
      node _T_1307 = bits(mepc, 38, 0) @[CSR.scala 669:22]
      retTarget <= _T_1307 @[CSR.scala 669:15]
      skip @[CSR.scala 659:26]
    node _T_1308 = and(io.in.valid, isSret) @[CSR.scala 672:15]
    when _T_1308 : @[CSR.scala 672:26]
      wire _T_1309 : {sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}} @[CSR.scala 673:47]
      wire _T_1310 : UInt<64>
      _T_1310 <= mstatus
      node _T_1311 = bits(_T_1310, 0, 0) @[CSR.scala 673:47]
      _T_1309.ie.u <= _T_1311 @[CSR.scala 673:47]
      node _T_1312 = bits(_T_1310, 1, 1) @[CSR.scala 673:47]
      _T_1309.ie.s <= _T_1312 @[CSR.scala 673:47]
      node _T_1313 = bits(_T_1310, 2, 2) @[CSR.scala 673:47]
      _T_1309.ie.h <= _T_1313 @[CSR.scala 673:47]
      node _T_1314 = bits(_T_1310, 3, 3) @[CSR.scala 673:47]
      _T_1309.ie.m <= _T_1314 @[CSR.scala 673:47]
      node _T_1315 = bits(_T_1310, 4, 4) @[CSR.scala 673:47]
      _T_1309.pie.u <= _T_1315 @[CSR.scala 673:47]
      node _T_1316 = bits(_T_1310, 5, 5) @[CSR.scala 673:47]
      _T_1309.pie.s <= _T_1316 @[CSR.scala 673:47]
      node _T_1317 = bits(_T_1310, 6, 6) @[CSR.scala 673:47]
      _T_1309.pie.h <= _T_1317 @[CSR.scala 673:47]
      node _T_1318 = bits(_T_1310, 7, 7) @[CSR.scala 673:47]
      _T_1309.pie.m <= _T_1318 @[CSR.scala 673:47]
      node _T_1319 = bits(_T_1310, 8, 8) @[CSR.scala 673:47]
      _T_1309.spp <= _T_1319 @[CSR.scala 673:47]
      node _T_1320 = bits(_T_1310, 10, 9) @[CSR.scala 673:47]
      _T_1309.hpp <= _T_1320 @[CSR.scala 673:47]
      node _T_1321 = bits(_T_1310, 12, 11) @[CSR.scala 673:47]
      _T_1309.mpp <= _T_1321 @[CSR.scala 673:47]
      node _T_1322 = bits(_T_1310, 14, 13) @[CSR.scala 673:47]
      _T_1309.fs <= _T_1322 @[CSR.scala 673:47]
      node _T_1323 = bits(_T_1310, 16, 15) @[CSR.scala 673:47]
      _T_1309.xs <= _T_1323 @[CSR.scala 673:47]
      node _T_1324 = bits(_T_1310, 17, 17) @[CSR.scala 673:47]
      _T_1309.mprv <= _T_1324 @[CSR.scala 673:47]
      node _T_1325 = bits(_T_1310, 18, 18) @[CSR.scala 673:47]
      _T_1309.sum <= _T_1325 @[CSR.scala 673:47]
      node _T_1326 = bits(_T_1310, 19, 19) @[CSR.scala 673:47]
      _T_1309.mxr <= _T_1326 @[CSR.scala 673:47]
      node _T_1327 = bits(_T_1310, 20, 20) @[CSR.scala 673:47]
      _T_1309.tvm <= _T_1327 @[CSR.scala 673:47]
      node _T_1328 = bits(_T_1310, 21, 21) @[CSR.scala 673:47]
      _T_1309.tw <= _T_1328 @[CSR.scala 673:47]
      node _T_1329 = bits(_T_1310, 22, 22) @[CSR.scala 673:47]
      _T_1309.tsr <= _T_1329 @[CSR.scala 673:47]
      node _T_1330 = bits(_T_1310, 31, 23) @[CSR.scala 673:47]
      _T_1309.pad0 <= _T_1330 @[CSR.scala 673:47]
      node _T_1331 = bits(_T_1310, 33, 32) @[CSR.scala 673:47]
      _T_1309.uxl <= _T_1331 @[CSR.scala 673:47]
      node _T_1332 = bits(_T_1310, 35, 34) @[CSR.scala 673:47]
      _T_1309.sxl <= _T_1332 @[CSR.scala 673:47]
      node _T_1333 = bits(_T_1310, 62, 36) @[CSR.scala 673:47]
      _T_1309.pad1 <= _T_1333 @[CSR.scala 673:47]
      node _T_1334 = bits(_T_1310, 63, 63) @[CSR.scala 673:47]
      _T_1309.sd <= _T_1334 @[CSR.scala 673:47]
      wire _T_1335 : {sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}}
      _T_1335.ie.u <= _T_1309.ie.u
      _T_1335.ie.s <= _T_1309.ie.s
      _T_1335.ie.h <= _T_1309.ie.h
      _T_1335.ie.m <= _T_1309.ie.m
      _T_1335.pie.u <= _T_1309.pie.u
      _T_1335.pie.s <= _T_1309.pie.s
      _T_1335.pie.h <= _T_1309.pie.h
      _T_1335.pie.m <= _T_1309.pie.m
      _T_1335.spp <= _T_1309.spp
      _T_1335.hpp <= _T_1309.hpp
      _T_1335.mpp <= _T_1309.mpp
      _T_1335.fs <= _T_1309.fs
      _T_1335.xs <= _T_1309.xs
      _T_1335.mprv <= _T_1309.mprv
      _T_1335.sum <= _T_1309.sum
      _T_1335.mxr <= _T_1309.mxr
      _T_1335.tvm <= _T_1309.tvm
      _T_1335.tw <= _T_1309.tw
      _T_1335.tsr <= _T_1309.tsr
      _T_1335.pad0 <= _T_1309.pad0
      _T_1335.uxl <= _T_1309.uxl
      _T_1335.sxl <= _T_1309.sxl
      _T_1335.pad1 <= _T_1309.pad1
      _T_1335.sd <= _T_1309.sd
      wire _T_1336 : {sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}} @[CSR.scala 674:47]
      wire _T_1337 : UInt<64>
      _T_1337 <= mstatus
      node _T_1338 = bits(_T_1337, 0, 0) @[CSR.scala 674:47]
      _T_1336.ie.u <= _T_1338 @[CSR.scala 674:47]
      node _T_1339 = bits(_T_1337, 1, 1) @[CSR.scala 674:47]
      _T_1336.ie.s <= _T_1339 @[CSR.scala 674:47]
      node _T_1340 = bits(_T_1337, 2, 2) @[CSR.scala 674:47]
      _T_1336.ie.h <= _T_1340 @[CSR.scala 674:47]
      node _T_1341 = bits(_T_1337, 3, 3) @[CSR.scala 674:47]
      _T_1336.ie.m <= _T_1341 @[CSR.scala 674:47]
      node _T_1342 = bits(_T_1337, 4, 4) @[CSR.scala 674:47]
      _T_1336.pie.u <= _T_1342 @[CSR.scala 674:47]
      node _T_1343 = bits(_T_1337, 5, 5) @[CSR.scala 674:47]
      _T_1336.pie.s <= _T_1343 @[CSR.scala 674:47]
      node _T_1344 = bits(_T_1337, 6, 6) @[CSR.scala 674:47]
      _T_1336.pie.h <= _T_1344 @[CSR.scala 674:47]
      node _T_1345 = bits(_T_1337, 7, 7) @[CSR.scala 674:47]
      _T_1336.pie.m <= _T_1345 @[CSR.scala 674:47]
      node _T_1346 = bits(_T_1337, 8, 8) @[CSR.scala 674:47]
      _T_1336.spp <= _T_1346 @[CSR.scala 674:47]
      node _T_1347 = bits(_T_1337, 10, 9) @[CSR.scala 674:47]
      _T_1336.hpp <= _T_1347 @[CSR.scala 674:47]
      node _T_1348 = bits(_T_1337, 12, 11) @[CSR.scala 674:47]
      _T_1336.mpp <= _T_1348 @[CSR.scala 674:47]
      node _T_1349 = bits(_T_1337, 14, 13) @[CSR.scala 674:47]
      _T_1336.fs <= _T_1349 @[CSR.scala 674:47]
      node _T_1350 = bits(_T_1337, 16, 15) @[CSR.scala 674:47]
      _T_1336.xs <= _T_1350 @[CSR.scala 674:47]
      node _T_1351 = bits(_T_1337, 17, 17) @[CSR.scala 674:47]
      _T_1336.mprv <= _T_1351 @[CSR.scala 674:47]
      node _T_1352 = bits(_T_1337, 18, 18) @[CSR.scala 674:47]
      _T_1336.sum <= _T_1352 @[CSR.scala 674:47]
      node _T_1353 = bits(_T_1337, 19, 19) @[CSR.scala 674:47]
      _T_1336.mxr <= _T_1353 @[CSR.scala 674:47]
      node _T_1354 = bits(_T_1337, 20, 20) @[CSR.scala 674:47]
      _T_1336.tvm <= _T_1354 @[CSR.scala 674:47]
      node _T_1355 = bits(_T_1337, 21, 21) @[CSR.scala 674:47]
      _T_1336.tw <= _T_1355 @[CSR.scala 674:47]
      node _T_1356 = bits(_T_1337, 22, 22) @[CSR.scala 674:47]
      _T_1336.tsr <= _T_1356 @[CSR.scala 674:47]
      node _T_1357 = bits(_T_1337, 31, 23) @[CSR.scala 674:47]
      _T_1336.pad0 <= _T_1357 @[CSR.scala 674:47]
      node _T_1358 = bits(_T_1337, 33, 32) @[CSR.scala 674:47]
      _T_1336.uxl <= _T_1358 @[CSR.scala 674:47]
      node _T_1359 = bits(_T_1337, 35, 34) @[CSR.scala 674:47]
      _T_1336.sxl <= _T_1359 @[CSR.scala 674:47]
      node _T_1360 = bits(_T_1337, 62, 36) @[CSR.scala 674:47]
      _T_1336.pad1 <= _T_1360 @[CSR.scala 674:47]
      node _T_1361 = bits(_T_1337, 63, 63) @[CSR.scala 674:47]
      _T_1336.sd <= _T_1361 @[CSR.scala 674:47]
      wire _T_1362 : {sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}}
      _T_1362.ie.u <= _T_1336.ie.u
      _T_1362.ie.s <= _T_1336.ie.s
      _T_1362.ie.h <= _T_1336.ie.h
      _T_1362.ie.m <= _T_1336.ie.m
      _T_1362.pie.u <= _T_1336.pie.u
      _T_1362.pie.s <= _T_1336.pie.s
      _T_1362.pie.h <= _T_1336.pie.h
      _T_1362.pie.m <= _T_1336.pie.m
      _T_1362.spp <= _T_1336.spp
      _T_1362.hpp <= _T_1336.hpp
      _T_1362.mpp <= _T_1336.mpp
      _T_1362.fs <= _T_1336.fs
      _T_1362.xs <= _T_1336.xs
      _T_1362.mprv <= _T_1336.mprv
      _T_1362.sum <= _T_1336.sum
      _T_1362.mxr <= _T_1336.mxr
      _T_1362.tvm <= _T_1336.tvm
      _T_1362.tw <= _T_1336.tw
      _T_1362.tsr <= _T_1336.tsr
      _T_1362.pad0 <= _T_1336.pad0
      _T_1362.uxl <= _T_1336.uxl
      _T_1362.sxl <= _T_1336.sxl
      _T_1362.pad1 <= _T_1336.pad1
      _T_1362.sd <= _T_1336.sd
      _T_1362.ie.s <= _T_1335.pie.s @[CSR.scala 676:21]
      node _T_1363 = cat(UInt<1>("h00"), _T_1335.spp) @[Cat.scala 29:58]
      priviledgeMode <= _T_1363 @[CSR.scala 677:20]
      _T_1362.pie.s <= UInt<1>("h01") @[CSR.scala 678:22]
      _T_1362.spp <= UInt<1>("h00") @[CSR.scala 679:20]
      node _T_1364 = cat(_T_1362.ie.h, _T_1362.ie.s) @[CSR.scala 680:27]
      node _T_1365 = cat(_T_1364, _T_1362.ie.u) @[CSR.scala 680:27]
      node _T_1366 = cat(_T_1362.pie.s, _T_1362.pie.u) @[CSR.scala 680:27]
      node _T_1367 = cat(_T_1366, _T_1362.ie.m) @[CSR.scala 680:27]
      node _T_1368 = cat(_T_1367, _T_1365) @[CSR.scala 680:27]
      node _T_1369 = cat(_T_1362.spp, _T_1362.pie.m) @[CSR.scala 680:27]
      node _T_1370 = cat(_T_1369, _T_1362.pie.h) @[CSR.scala 680:27]
      node _T_1371 = cat(_T_1362.fs, _T_1362.mpp) @[CSR.scala 680:27]
      node _T_1372 = cat(_T_1371, _T_1362.hpp) @[CSR.scala 680:27]
      node _T_1373 = cat(_T_1372, _T_1370) @[CSR.scala 680:27]
      node _T_1374 = cat(_T_1373, _T_1368) @[CSR.scala 680:27]
      node _T_1375 = cat(_T_1362.sum, _T_1362.mprv) @[CSR.scala 680:27]
      node _T_1376 = cat(_T_1375, _T_1362.xs) @[CSR.scala 680:27]
      node _T_1377 = cat(_T_1362.tw, _T_1362.tvm) @[CSR.scala 680:27]
      node _T_1378 = cat(_T_1377, _T_1362.mxr) @[CSR.scala 680:27]
      node _T_1379 = cat(_T_1378, _T_1376) @[CSR.scala 680:27]
      node _T_1380 = cat(_T_1362.uxl, _T_1362.pad0) @[CSR.scala 680:27]
      node _T_1381 = cat(_T_1380, _T_1362.tsr) @[CSR.scala 680:27]
      node _T_1382 = cat(_T_1362.sd, _T_1362.pad1) @[CSR.scala 680:27]
      node _T_1383 = cat(_T_1382, _T_1362.sxl) @[CSR.scala 680:27]
      node _T_1384 = cat(_T_1383, _T_1381) @[CSR.scala 680:27]
      node _T_1385 = cat(_T_1384, _T_1379) @[CSR.scala 680:27]
      node _T_1386 = cat(_T_1385, _T_1374) @[CSR.scala 680:27]
      mstatus <= _T_1386 @[CSR.scala 680:13]
      lr <= UInt<1>("h00") @[CSR.scala 681:8]
      node _T_1387 = bits(sepc, 38, 0) @[CSR.scala 682:22]
      retTarget <= _T_1387 @[CSR.scala 682:15]
      skip @[CSR.scala 672:26]
    node _T_1388 = and(io.in.valid, isUret) @[CSR.scala 685:15]
    when _T_1388 : @[CSR.scala 685:26]
      wire _T_1389 : {sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}} @[CSR.scala 686:47]
      wire _T_1390 : UInt<64>
      _T_1390 <= mstatus
      node _T_1391 = bits(_T_1390, 0, 0) @[CSR.scala 686:47]
      _T_1389.ie.u <= _T_1391 @[CSR.scala 686:47]
      node _T_1392 = bits(_T_1390, 1, 1) @[CSR.scala 686:47]
      _T_1389.ie.s <= _T_1392 @[CSR.scala 686:47]
      node _T_1393 = bits(_T_1390, 2, 2) @[CSR.scala 686:47]
      _T_1389.ie.h <= _T_1393 @[CSR.scala 686:47]
      node _T_1394 = bits(_T_1390, 3, 3) @[CSR.scala 686:47]
      _T_1389.ie.m <= _T_1394 @[CSR.scala 686:47]
      node _T_1395 = bits(_T_1390, 4, 4) @[CSR.scala 686:47]
      _T_1389.pie.u <= _T_1395 @[CSR.scala 686:47]
      node _T_1396 = bits(_T_1390, 5, 5) @[CSR.scala 686:47]
      _T_1389.pie.s <= _T_1396 @[CSR.scala 686:47]
      node _T_1397 = bits(_T_1390, 6, 6) @[CSR.scala 686:47]
      _T_1389.pie.h <= _T_1397 @[CSR.scala 686:47]
      node _T_1398 = bits(_T_1390, 7, 7) @[CSR.scala 686:47]
      _T_1389.pie.m <= _T_1398 @[CSR.scala 686:47]
      node _T_1399 = bits(_T_1390, 8, 8) @[CSR.scala 686:47]
      _T_1389.spp <= _T_1399 @[CSR.scala 686:47]
      node _T_1400 = bits(_T_1390, 10, 9) @[CSR.scala 686:47]
      _T_1389.hpp <= _T_1400 @[CSR.scala 686:47]
      node _T_1401 = bits(_T_1390, 12, 11) @[CSR.scala 686:47]
      _T_1389.mpp <= _T_1401 @[CSR.scala 686:47]
      node _T_1402 = bits(_T_1390, 14, 13) @[CSR.scala 686:47]
      _T_1389.fs <= _T_1402 @[CSR.scala 686:47]
      node _T_1403 = bits(_T_1390, 16, 15) @[CSR.scala 686:47]
      _T_1389.xs <= _T_1403 @[CSR.scala 686:47]
      node _T_1404 = bits(_T_1390, 17, 17) @[CSR.scala 686:47]
      _T_1389.mprv <= _T_1404 @[CSR.scala 686:47]
      node _T_1405 = bits(_T_1390, 18, 18) @[CSR.scala 686:47]
      _T_1389.sum <= _T_1405 @[CSR.scala 686:47]
      node _T_1406 = bits(_T_1390, 19, 19) @[CSR.scala 686:47]
      _T_1389.mxr <= _T_1406 @[CSR.scala 686:47]
      node _T_1407 = bits(_T_1390, 20, 20) @[CSR.scala 686:47]
      _T_1389.tvm <= _T_1407 @[CSR.scala 686:47]
      node _T_1408 = bits(_T_1390, 21, 21) @[CSR.scala 686:47]
      _T_1389.tw <= _T_1408 @[CSR.scala 686:47]
      node _T_1409 = bits(_T_1390, 22, 22) @[CSR.scala 686:47]
      _T_1389.tsr <= _T_1409 @[CSR.scala 686:47]
      node _T_1410 = bits(_T_1390, 31, 23) @[CSR.scala 686:47]
      _T_1389.pad0 <= _T_1410 @[CSR.scala 686:47]
      node _T_1411 = bits(_T_1390, 33, 32) @[CSR.scala 686:47]
      _T_1389.uxl <= _T_1411 @[CSR.scala 686:47]
      node _T_1412 = bits(_T_1390, 35, 34) @[CSR.scala 686:47]
      _T_1389.sxl <= _T_1412 @[CSR.scala 686:47]
      node _T_1413 = bits(_T_1390, 62, 36) @[CSR.scala 686:47]
      _T_1389.pad1 <= _T_1413 @[CSR.scala 686:47]
      node _T_1414 = bits(_T_1390, 63, 63) @[CSR.scala 686:47]
      _T_1389.sd <= _T_1414 @[CSR.scala 686:47]
      wire _T_1415 : {sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}}
      _T_1415.ie.u <= _T_1389.ie.u
      _T_1415.ie.s <= _T_1389.ie.s
      _T_1415.ie.h <= _T_1389.ie.h
      _T_1415.ie.m <= _T_1389.ie.m
      _T_1415.pie.u <= _T_1389.pie.u
      _T_1415.pie.s <= _T_1389.pie.s
      _T_1415.pie.h <= _T_1389.pie.h
      _T_1415.pie.m <= _T_1389.pie.m
      _T_1415.spp <= _T_1389.spp
      _T_1415.hpp <= _T_1389.hpp
      _T_1415.mpp <= _T_1389.mpp
      _T_1415.fs <= _T_1389.fs
      _T_1415.xs <= _T_1389.xs
      _T_1415.mprv <= _T_1389.mprv
      _T_1415.sum <= _T_1389.sum
      _T_1415.mxr <= _T_1389.mxr
      _T_1415.tvm <= _T_1389.tvm
      _T_1415.tw <= _T_1389.tw
      _T_1415.tsr <= _T_1389.tsr
      _T_1415.pad0 <= _T_1389.pad0
      _T_1415.uxl <= _T_1389.uxl
      _T_1415.sxl <= _T_1389.sxl
      _T_1415.pad1 <= _T_1389.pad1
      _T_1415.sd <= _T_1389.sd
      wire _T_1416 : {sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}} @[CSR.scala 687:47]
      wire _T_1417 : UInt<64>
      _T_1417 <= mstatus
      node _T_1418 = bits(_T_1417, 0, 0) @[CSR.scala 687:47]
      _T_1416.ie.u <= _T_1418 @[CSR.scala 687:47]
      node _T_1419 = bits(_T_1417, 1, 1) @[CSR.scala 687:47]
      _T_1416.ie.s <= _T_1419 @[CSR.scala 687:47]
      node _T_1420 = bits(_T_1417, 2, 2) @[CSR.scala 687:47]
      _T_1416.ie.h <= _T_1420 @[CSR.scala 687:47]
      node _T_1421 = bits(_T_1417, 3, 3) @[CSR.scala 687:47]
      _T_1416.ie.m <= _T_1421 @[CSR.scala 687:47]
      node _T_1422 = bits(_T_1417, 4, 4) @[CSR.scala 687:47]
      _T_1416.pie.u <= _T_1422 @[CSR.scala 687:47]
      node _T_1423 = bits(_T_1417, 5, 5) @[CSR.scala 687:47]
      _T_1416.pie.s <= _T_1423 @[CSR.scala 687:47]
      node _T_1424 = bits(_T_1417, 6, 6) @[CSR.scala 687:47]
      _T_1416.pie.h <= _T_1424 @[CSR.scala 687:47]
      node _T_1425 = bits(_T_1417, 7, 7) @[CSR.scala 687:47]
      _T_1416.pie.m <= _T_1425 @[CSR.scala 687:47]
      node _T_1426 = bits(_T_1417, 8, 8) @[CSR.scala 687:47]
      _T_1416.spp <= _T_1426 @[CSR.scala 687:47]
      node _T_1427 = bits(_T_1417, 10, 9) @[CSR.scala 687:47]
      _T_1416.hpp <= _T_1427 @[CSR.scala 687:47]
      node _T_1428 = bits(_T_1417, 12, 11) @[CSR.scala 687:47]
      _T_1416.mpp <= _T_1428 @[CSR.scala 687:47]
      node _T_1429 = bits(_T_1417, 14, 13) @[CSR.scala 687:47]
      _T_1416.fs <= _T_1429 @[CSR.scala 687:47]
      node _T_1430 = bits(_T_1417, 16, 15) @[CSR.scala 687:47]
      _T_1416.xs <= _T_1430 @[CSR.scala 687:47]
      node _T_1431 = bits(_T_1417, 17, 17) @[CSR.scala 687:47]
      _T_1416.mprv <= _T_1431 @[CSR.scala 687:47]
      node _T_1432 = bits(_T_1417, 18, 18) @[CSR.scala 687:47]
      _T_1416.sum <= _T_1432 @[CSR.scala 687:47]
      node _T_1433 = bits(_T_1417, 19, 19) @[CSR.scala 687:47]
      _T_1416.mxr <= _T_1433 @[CSR.scala 687:47]
      node _T_1434 = bits(_T_1417, 20, 20) @[CSR.scala 687:47]
      _T_1416.tvm <= _T_1434 @[CSR.scala 687:47]
      node _T_1435 = bits(_T_1417, 21, 21) @[CSR.scala 687:47]
      _T_1416.tw <= _T_1435 @[CSR.scala 687:47]
      node _T_1436 = bits(_T_1417, 22, 22) @[CSR.scala 687:47]
      _T_1416.tsr <= _T_1436 @[CSR.scala 687:47]
      node _T_1437 = bits(_T_1417, 31, 23) @[CSR.scala 687:47]
      _T_1416.pad0 <= _T_1437 @[CSR.scala 687:47]
      node _T_1438 = bits(_T_1417, 33, 32) @[CSR.scala 687:47]
      _T_1416.uxl <= _T_1438 @[CSR.scala 687:47]
      node _T_1439 = bits(_T_1417, 35, 34) @[CSR.scala 687:47]
      _T_1416.sxl <= _T_1439 @[CSR.scala 687:47]
      node _T_1440 = bits(_T_1417, 62, 36) @[CSR.scala 687:47]
      _T_1416.pad1 <= _T_1440 @[CSR.scala 687:47]
      node _T_1441 = bits(_T_1417, 63, 63) @[CSR.scala 687:47]
      _T_1416.sd <= _T_1441 @[CSR.scala 687:47]
      wire _T_1442 : {sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}}
      _T_1442.ie.u <= _T_1416.ie.u
      _T_1442.ie.s <= _T_1416.ie.s
      _T_1442.ie.h <= _T_1416.ie.h
      _T_1442.ie.m <= _T_1416.ie.m
      _T_1442.pie.u <= _T_1416.pie.u
      _T_1442.pie.s <= _T_1416.pie.s
      _T_1442.pie.h <= _T_1416.pie.h
      _T_1442.pie.m <= _T_1416.pie.m
      _T_1442.spp <= _T_1416.spp
      _T_1442.hpp <= _T_1416.hpp
      _T_1442.mpp <= _T_1416.mpp
      _T_1442.fs <= _T_1416.fs
      _T_1442.xs <= _T_1416.xs
      _T_1442.mprv <= _T_1416.mprv
      _T_1442.sum <= _T_1416.sum
      _T_1442.mxr <= _T_1416.mxr
      _T_1442.tvm <= _T_1416.tvm
      _T_1442.tw <= _T_1416.tw
      _T_1442.tsr <= _T_1416.tsr
      _T_1442.pad0 <= _T_1416.pad0
      _T_1442.uxl <= _T_1416.uxl
      _T_1442.sxl <= _T_1416.sxl
      _T_1442.pad1 <= _T_1416.pad1
      _T_1442.sd <= _T_1416.sd
      _T_1442.ie.u <= _T_1415.pie.u @[CSR.scala 689:21]
      priviledgeMode <= UInt<1>("h00") @[CSR.scala 690:20]
      _T_1442.pie.u <= UInt<1>("h01") @[CSR.scala 691:22]
      node _T_1443 = cat(_T_1442.ie.h, _T_1442.ie.s) @[CSR.scala 692:27]
      node _T_1444 = cat(_T_1443, _T_1442.ie.u) @[CSR.scala 692:27]
      node _T_1445 = cat(_T_1442.pie.s, _T_1442.pie.u) @[CSR.scala 692:27]
      node _T_1446 = cat(_T_1445, _T_1442.ie.m) @[CSR.scala 692:27]
      node _T_1447 = cat(_T_1446, _T_1444) @[CSR.scala 692:27]
      node _T_1448 = cat(_T_1442.spp, _T_1442.pie.m) @[CSR.scala 692:27]
      node _T_1449 = cat(_T_1448, _T_1442.pie.h) @[CSR.scala 692:27]
      node _T_1450 = cat(_T_1442.fs, _T_1442.mpp) @[CSR.scala 692:27]
      node _T_1451 = cat(_T_1450, _T_1442.hpp) @[CSR.scala 692:27]
      node _T_1452 = cat(_T_1451, _T_1449) @[CSR.scala 692:27]
      node _T_1453 = cat(_T_1452, _T_1447) @[CSR.scala 692:27]
      node _T_1454 = cat(_T_1442.sum, _T_1442.mprv) @[CSR.scala 692:27]
      node _T_1455 = cat(_T_1454, _T_1442.xs) @[CSR.scala 692:27]
      node _T_1456 = cat(_T_1442.tw, _T_1442.tvm) @[CSR.scala 692:27]
      node _T_1457 = cat(_T_1456, _T_1442.mxr) @[CSR.scala 692:27]
      node _T_1458 = cat(_T_1457, _T_1455) @[CSR.scala 692:27]
      node _T_1459 = cat(_T_1442.uxl, _T_1442.pad0) @[CSR.scala 692:27]
      node _T_1460 = cat(_T_1459, _T_1442.tsr) @[CSR.scala 692:27]
      node _T_1461 = cat(_T_1442.sd, _T_1442.pad1) @[CSR.scala 692:27]
      node _T_1462 = cat(_T_1461, _T_1442.sxl) @[CSR.scala 692:27]
      node _T_1463 = cat(_T_1462, _T_1460) @[CSR.scala 692:27]
      node _T_1464 = cat(_T_1463, _T_1458) @[CSR.scala 692:27]
      node _T_1465 = cat(_T_1464, _T_1453) @[CSR.scala 692:27]
      mstatus <= _T_1465 @[CSR.scala 692:13]
      node _T_1466 = bits(uepc, 38, 0) @[CSR.scala 693:22]
      retTarget <= _T_1466 @[CSR.scala 693:15]
      skip @[CSR.scala 685:26]
    when raiseExceptionIntr : @[CSR.scala 696:29]
      wire _T_1467 : {sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}} @[CSR.scala 697:47]
      wire _T_1468 : UInt<64>
      _T_1468 <= mstatus
      node _T_1469 = bits(_T_1468, 0, 0) @[CSR.scala 697:47]
      _T_1467.ie.u <= _T_1469 @[CSR.scala 697:47]
      node _T_1470 = bits(_T_1468, 1, 1) @[CSR.scala 697:47]
      _T_1467.ie.s <= _T_1470 @[CSR.scala 697:47]
      node _T_1471 = bits(_T_1468, 2, 2) @[CSR.scala 697:47]
      _T_1467.ie.h <= _T_1471 @[CSR.scala 697:47]
      node _T_1472 = bits(_T_1468, 3, 3) @[CSR.scala 697:47]
      _T_1467.ie.m <= _T_1472 @[CSR.scala 697:47]
      node _T_1473 = bits(_T_1468, 4, 4) @[CSR.scala 697:47]
      _T_1467.pie.u <= _T_1473 @[CSR.scala 697:47]
      node _T_1474 = bits(_T_1468, 5, 5) @[CSR.scala 697:47]
      _T_1467.pie.s <= _T_1474 @[CSR.scala 697:47]
      node _T_1475 = bits(_T_1468, 6, 6) @[CSR.scala 697:47]
      _T_1467.pie.h <= _T_1475 @[CSR.scala 697:47]
      node _T_1476 = bits(_T_1468, 7, 7) @[CSR.scala 697:47]
      _T_1467.pie.m <= _T_1476 @[CSR.scala 697:47]
      node _T_1477 = bits(_T_1468, 8, 8) @[CSR.scala 697:47]
      _T_1467.spp <= _T_1477 @[CSR.scala 697:47]
      node _T_1478 = bits(_T_1468, 10, 9) @[CSR.scala 697:47]
      _T_1467.hpp <= _T_1478 @[CSR.scala 697:47]
      node _T_1479 = bits(_T_1468, 12, 11) @[CSR.scala 697:47]
      _T_1467.mpp <= _T_1479 @[CSR.scala 697:47]
      node _T_1480 = bits(_T_1468, 14, 13) @[CSR.scala 697:47]
      _T_1467.fs <= _T_1480 @[CSR.scala 697:47]
      node _T_1481 = bits(_T_1468, 16, 15) @[CSR.scala 697:47]
      _T_1467.xs <= _T_1481 @[CSR.scala 697:47]
      node _T_1482 = bits(_T_1468, 17, 17) @[CSR.scala 697:47]
      _T_1467.mprv <= _T_1482 @[CSR.scala 697:47]
      node _T_1483 = bits(_T_1468, 18, 18) @[CSR.scala 697:47]
      _T_1467.sum <= _T_1483 @[CSR.scala 697:47]
      node _T_1484 = bits(_T_1468, 19, 19) @[CSR.scala 697:47]
      _T_1467.mxr <= _T_1484 @[CSR.scala 697:47]
      node _T_1485 = bits(_T_1468, 20, 20) @[CSR.scala 697:47]
      _T_1467.tvm <= _T_1485 @[CSR.scala 697:47]
      node _T_1486 = bits(_T_1468, 21, 21) @[CSR.scala 697:47]
      _T_1467.tw <= _T_1486 @[CSR.scala 697:47]
      node _T_1487 = bits(_T_1468, 22, 22) @[CSR.scala 697:47]
      _T_1467.tsr <= _T_1487 @[CSR.scala 697:47]
      node _T_1488 = bits(_T_1468, 31, 23) @[CSR.scala 697:47]
      _T_1467.pad0 <= _T_1488 @[CSR.scala 697:47]
      node _T_1489 = bits(_T_1468, 33, 32) @[CSR.scala 697:47]
      _T_1467.uxl <= _T_1489 @[CSR.scala 697:47]
      node _T_1490 = bits(_T_1468, 35, 34) @[CSR.scala 697:47]
      _T_1467.sxl <= _T_1490 @[CSR.scala 697:47]
      node _T_1491 = bits(_T_1468, 62, 36) @[CSR.scala 697:47]
      _T_1467.pad1 <= _T_1491 @[CSR.scala 697:47]
      node _T_1492 = bits(_T_1468, 63, 63) @[CSR.scala 697:47]
      _T_1467.sd <= _T_1492 @[CSR.scala 697:47]
      wire _T_1493 : {sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}}
      _T_1493.ie.u <= _T_1467.ie.u
      _T_1493.ie.s <= _T_1467.ie.s
      _T_1493.ie.h <= _T_1467.ie.h
      _T_1493.ie.m <= _T_1467.ie.m
      _T_1493.pie.u <= _T_1467.pie.u
      _T_1493.pie.s <= _T_1467.pie.s
      _T_1493.pie.h <= _T_1467.pie.h
      _T_1493.pie.m <= _T_1467.pie.m
      _T_1493.spp <= _T_1467.spp
      _T_1493.hpp <= _T_1467.hpp
      _T_1493.mpp <= _T_1467.mpp
      _T_1493.fs <= _T_1467.fs
      _T_1493.xs <= _T_1467.xs
      _T_1493.mprv <= _T_1467.mprv
      _T_1493.sum <= _T_1467.sum
      _T_1493.mxr <= _T_1467.mxr
      _T_1493.tvm <= _T_1467.tvm
      _T_1493.tw <= _T_1467.tw
      _T_1493.tsr <= _T_1467.tsr
      _T_1493.pad0 <= _T_1467.pad0
      _T_1493.uxl <= _T_1467.uxl
      _T_1493.sxl <= _T_1467.sxl
      _T_1493.pad1 <= _T_1467.pad1
      _T_1493.sd <= _T_1467.sd
      wire _T_1494 : {sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}} @[CSR.scala 698:47]
      wire _T_1495 : UInt<64>
      _T_1495 <= mstatus
      node _T_1496 = bits(_T_1495, 0, 0) @[CSR.scala 698:47]
      _T_1494.ie.u <= _T_1496 @[CSR.scala 698:47]
      node _T_1497 = bits(_T_1495, 1, 1) @[CSR.scala 698:47]
      _T_1494.ie.s <= _T_1497 @[CSR.scala 698:47]
      node _T_1498 = bits(_T_1495, 2, 2) @[CSR.scala 698:47]
      _T_1494.ie.h <= _T_1498 @[CSR.scala 698:47]
      node _T_1499 = bits(_T_1495, 3, 3) @[CSR.scala 698:47]
      _T_1494.ie.m <= _T_1499 @[CSR.scala 698:47]
      node _T_1500 = bits(_T_1495, 4, 4) @[CSR.scala 698:47]
      _T_1494.pie.u <= _T_1500 @[CSR.scala 698:47]
      node _T_1501 = bits(_T_1495, 5, 5) @[CSR.scala 698:47]
      _T_1494.pie.s <= _T_1501 @[CSR.scala 698:47]
      node _T_1502 = bits(_T_1495, 6, 6) @[CSR.scala 698:47]
      _T_1494.pie.h <= _T_1502 @[CSR.scala 698:47]
      node _T_1503 = bits(_T_1495, 7, 7) @[CSR.scala 698:47]
      _T_1494.pie.m <= _T_1503 @[CSR.scala 698:47]
      node _T_1504 = bits(_T_1495, 8, 8) @[CSR.scala 698:47]
      _T_1494.spp <= _T_1504 @[CSR.scala 698:47]
      node _T_1505 = bits(_T_1495, 10, 9) @[CSR.scala 698:47]
      _T_1494.hpp <= _T_1505 @[CSR.scala 698:47]
      node _T_1506 = bits(_T_1495, 12, 11) @[CSR.scala 698:47]
      _T_1494.mpp <= _T_1506 @[CSR.scala 698:47]
      node _T_1507 = bits(_T_1495, 14, 13) @[CSR.scala 698:47]
      _T_1494.fs <= _T_1507 @[CSR.scala 698:47]
      node _T_1508 = bits(_T_1495, 16, 15) @[CSR.scala 698:47]
      _T_1494.xs <= _T_1508 @[CSR.scala 698:47]
      node _T_1509 = bits(_T_1495, 17, 17) @[CSR.scala 698:47]
      _T_1494.mprv <= _T_1509 @[CSR.scala 698:47]
      node _T_1510 = bits(_T_1495, 18, 18) @[CSR.scala 698:47]
      _T_1494.sum <= _T_1510 @[CSR.scala 698:47]
      node _T_1511 = bits(_T_1495, 19, 19) @[CSR.scala 698:47]
      _T_1494.mxr <= _T_1511 @[CSR.scala 698:47]
      node _T_1512 = bits(_T_1495, 20, 20) @[CSR.scala 698:47]
      _T_1494.tvm <= _T_1512 @[CSR.scala 698:47]
      node _T_1513 = bits(_T_1495, 21, 21) @[CSR.scala 698:47]
      _T_1494.tw <= _T_1513 @[CSR.scala 698:47]
      node _T_1514 = bits(_T_1495, 22, 22) @[CSR.scala 698:47]
      _T_1494.tsr <= _T_1514 @[CSR.scala 698:47]
      node _T_1515 = bits(_T_1495, 31, 23) @[CSR.scala 698:47]
      _T_1494.pad0 <= _T_1515 @[CSR.scala 698:47]
      node _T_1516 = bits(_T_1495, 33, 32) @[CSR.scala 698:47]
      _T_1494.uxl <= _T_1516 @[CSR.scala 698:47]
      node _T_1517 = bits(_T_1495, 35, 34) @[CSR.scala 698:47]
      _T_1494.sxl <= _T_1517 @[CSR.scala 698:47]
      node _T_1518 = bits(_T_1495, 62, 36) @[CSR.scala 698:47]
      _T_1494.pad1 <= _T_1518 @[CSR.scala 698:47]
      node _T_1519 = bits(_T_1495, 63, 63) @[CSR.scala 698:47]
      _T_1494.sd <= _T_1519 @[CSR.scala 698:47]
      wire _T_1520 : {sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : {m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}}
      _T_1520.ie.u <= _T_1494.ie.u
      _T_1520.ie.s <= _T_1494.ie.s
      _T_1520.ie.h <= _T_1494.ie.h
      _T_1520.ie.m <= _T_1494.ie.m
      _T_1520.pie.u <= _T_1494.pie.u
      _T_1520.pie.s <= _T_1494.pie.s
      _T_1520.pie.h <= _T_1494.pie.h
      _T_1520.pie.m <= _T_1494.pie.m
      _T_1520.spp <= _T_1494.spp
      _T_1520.hpp <= _T_1494.hpp
      _T_1520.mpp <= _T_1494.mpp
      _T_1520.fs <= _T_1494.fs
      _T_1520.xs <= _T_1494.xs
      _T_1520.mprv <= _T_1494.mprv
      _T_1520.sum <= _T_1494.sum
      _T_1520.mxr <= _T_1494.mxr
      _T_1520.tvm <= _T_1494.tvm
      _T_1520.tw <= _T_1494.tw
      _T_1520.tsr <= _T_1494.tsr
      _T_1520.pad0 <= _T_1494.pad0
      _T_1520.uxl <= _T_1494.uxl
      _T_1520.sxl <= _T_1494.sxl
      _T_1520.pad1 <= _T_1494.pad1
      _T_1520.sd <= _T_1494.sd
      when delegS : @[CSR.scala 700:19]
        scause <= causeNO @[CSR.scala 701:14]
        node _T_1521 = bits(io.cfIn.pc, 38, 38) @[BitUtils.scala 39:20]
        node _T_1522 = bits(_T_1521, 0, 0) @[Bitwise.scala 72:15]
        node _T_1523 = mux(_T_1522, UInt<25>("h01ffffff"), UInt<25>("h00")) @[Bitwise.scala 72:12]
        node _T_1524 = cat(_T_1523, io.cfIn.pc) @[Cat.scala 29:58]
        sepc <= _T_1524 @[CSR.scala 702:12]
        _T_1520.spp <= priviledgeMode @[CSR.scala 703:22]
        _T_1520.pie.s <= _T_1493.ie.s @[CSR.scala 704:24]
        _T_1520.ie.s <= UInt<1>("h00") @[CSR.scala 705:23]
        priviledgeMode <= UInt<1>("h01") @[CSR.scala 706:22]
        when tvalWen : @[CSR.scala 707:20]
          stval <= UInt<1>("h00") @[CSR.scala 707:27]
          skip @[CSR.scala 707:20]
        skip @[CSR.scala 700:19]
      else : @[CSR.scala 710:17]
        mcause <= causeNO @[CSR.scala 711:14]
        node _T_1525 = bits(io.cfIn.pc, 38, 38) @[BitUtils.scala 39:20]
        node _T_1526 = bits(_T_1525, 0, 0) @[Bitwise.scala 72:15]
        node _T_1527 = mux(_T_1526, UInt<25>("h01ffffff"), UInt<25>("h00")) @[Bitwise.scala 72:12]
        node _T_1528 = cat(_T_1527, io.cfIn.pc) @[Cat.scala 29:58]
        mepc <= _T_1528 @[CSR.scala 712:12]
        _T_1520.mpp <= priviledgeMode @[CSR.scala 713:22]
        _T_1520.pie.m <= _T_1493.ie.m @[CSR.scala 714:24]
        _T_1520.ie.m <= UInt<1>("h00") @[CSR.scala 715:23]
        priviledgeMode <= UInt<2>("h03") @[CSR.scala 716:22]
        when tvalWen : @[CSR.scala 717:20]
          mtval <= UInt<1>("h00") @[CSR.scala 717:27]
          skip @[CSR.scala 717:20]
        skip @[CSR.scala 710:17]
      node _T_1529 = cat(_T_1520.ie.h, _T_1520.ie.s) @[CSR.scala 727:27]
      node _T_1530 = cat(_T_1529, _T_1520.ie.u) @[CSR.scala 727:27]
      node _T_1531 = cat(_T_1520.pie.s, _T_1520.pie.u) @[CSR.scala 727:27]
      node _T_1532 = cat(_T_1531, _T_1520.ie.m) @[CSR.scala 727:27]
      node _T_1533 = cat(_T_1532, _T_1530) @[CSR.scala 727:27]
      node _T_1534 = cat(_T_1520.spp, _T_1520.pie.m) @[CSR.scala 727:27]
      node _T_1535 = cat(_T_1534, _T_1520.pie.h) @[CSR.scala 727:27]
      node _T_1536 = cat(_T_1520.fs, _T_1520.mpp) @[CSR.scala 727:27]
      node _T_1537 = cat(_T_1536, _T_1520.hpp) @[CSR.scala 727:27]
      node _T_1538 = cat(_T_1537, _T_1535) @[CSR.scala 727:27]
      node _T_1539 = cat(_T_1538, _T_1533) @[CSR.scala 727:27]
      node _T_1540 = cat(_T_1520.sum, _T_1520.mprv) @[CSR.scala 727:27]
      node _T_1541 = cat(_T_1540, _T_1520.xs) @[CSR.scala 727:27]
      node _T_1542 = cat(_T_1520.tw, _T_1520.tvm) @[CSR.scala 727:27]
      node _T_1543 = cat(_T_1542, _T_1520.mxr) @[CSR.scala 727:27]
      node _T_1544 = cat(_T_1543, _T_1541) @[CSR.scala 727:27]
      node _T_1545 = cat(_T_1520.uxl, _T_1520.pad0) @[CSR.scala 727:27]
      node _T_1546 = cat(_T_1545, _T_1520.tsr) @[CSR.scala 727:27]
      node _T_1547 = cat(_T_1520.sd, _T_1520.pad1) @[CSR.scala 727:27]
      node _T_1548 = cat(_T_1547, _T_1520.sxl) @[CSR.scala 727:27]
      node _T_1549 = cat(_T_1548, _T_1546) @[CSR.scala 727:27]
      node _T_1550 = cat(_T_1549, _T_1544) @[CSR.scala 727:27]
      node _T_1551 = cat(_T_1550, _T_1539) @[CSR.scala 727:27]
      mstatus <= _T_1551 @[CSR.scala 727:13]
      skip @[CSR.scala 696:29]
    io.in.ready <= UInt<1>("h01") @[CSR.scala 730:15]
    io.out.valid <= io.in.valid @[CSR.scala 731:16]
    wire perfCntCond_0 : UInt<1>
    perfCntCond_0 <= UInt<1>("h00")
    wire perfCntCond_1 : UInt<1>
    perfCntCond_1 <= UInt<1>("h00")
    wire perfCntCond_2 : UInt<1>
    perfCntCond_2 <= UInt<1>("h00")
    wire perfCntCond_3 : UInt<1>
    perfCntCond_3 <= UInt<1>("h00")
    wire perfCntCond_4 : UInt<1>
    perfCntCond_4 <= UInt<1>("h00")
    wire perfCntCond_5 : UInt<1>
    perfCntCond_5 <= UInt<1>("h00")
    wire perfCntCond_6 : UInt<1>
    perfCntCond_6 <= UInt<1>("h00")
    wire perfCntCond_7 : UInt<1>
    perfCntCond_7 <= UInt<1>("h00")
    wire perfCntCond_8 : UInt<1>
    perfCntCond_8 <= UInt<1>("h00")
    wire perfCntCond_9 : UInt<1>
    perfCntCond_9 <= UInt<1>("h00")
    wire perfCntCond_10 : UInt<1>
    perfCntCond_10 <= UInt<1>("h00")
    wire perfCntCond_11 : UInt<1>
    perfCntCond_11 <= UInt<1>("h00")
    wire perfCntCond_12 : UInt<1>
    perfCntCond_12 <= UInt<1>("h00")
    wire perfCntCond_13 : UInt<1>
    perfCntCond_13 <= UInt<1>("h00")
    wire perfCntCond_14 : UInt<1>
    perfCntCond_14 <= UInt<1>("h00")
    wire perfCntCond_15 : UInt<1>
    perfCntCond_15 <= UInt<1>("h00")
    wire perfCntCond_16 : UInt<1>
    perfCntCond_16 <= UInt<1>("h00")
    wire perfCntCond_17 : UInt<1>
    perfCntCond_17 <= UInt<1>("h00")
    wire perfCntCond_18 : UInt<1>
    perfCntCond_18 <= UInt<1>("h00")
    wire perfCntCond_19 : UInt<1>
    perfCntCond_19 <= UInt<1>("h00")
    wire perfCntCond_20 : UInt<1>
    perfCntCond_20 <= UInt<1>("h00")
    wire perfCntCond_21 : UInt<1>
    perfCntCond_21 <= UInt<1>("h00")
    wire perfCntCond_22 : UInt<1>
    perfCntCond_22 <= UInt<1>("h00")
    wire perfCntCond_23 : UInt<1>
    perfCntCond_23 <= UInt<1>("h00")
    wire perfCntCond_24 : UInt<1>
    perfCntCond_24 <= UInt<1>("h00")
    wire perfCntCond_25 : UInt<1>
    perfCntCond_25 <= UInt<1>("h00")
    wire perfCntCond_26 : UInt<1>
    perfCntCond_26 <= UInt<1>("h00")
    wire perfCntCond_27 : UInt<1>
    perfCntCond_27 <= UInt<1>("h00")
    wire perfCntCond_28 : UInt<1>
    perfCntCond_28 <= UInt<1>("h00")
    wire perfCntCond_29 : UInt<1>
    perfCntCond_29 <= UInt<1>("h00")
    wire perfCntCond_30 : UInt<1>
    perfCntCond_30 <= UInt<1>("h00")
    wire perfCntCond_31 : UInt<1>
    perfCntCond_31 <= UInt<1>("h00")
    wire perfCntCond_32 : UInt<1>
    perfCntCond_32 <= UInt<1>("h00")
    wire perfCntCond_33 : UInt<1>
    perfCntCond_33 <= UInt<1>("h00")
    wire perfCntCond_34 : UInt<1>
    perfCntCond_34 <= UInt<1>("h00")
    wire perfCntCond_35 : UInt<1>
    perfCntCond_35 <= UInt<1>("h00")
    wire perfCntCond_36 : UInt<1>
    perfCntCond_36 <= UInt<1>("h00")
    wire perfCntCond_37 : UInt<1>
    perfCntCond_37 <= UInt<1>("h00")
    wire perfCntCond_38 : UInt<1>
    perfCntCond_38 <= UInt<1>("h00")
    wire perfCntCond_39 : UInt<1>
    perfCntCond_39 <= UInt<1>("h00")
    wire perfCntCond_40 : UInt<1>
    perfCntCond_40 <= UInt<1>("h00")
    wire perfCntCond_41 : UInt<1>
    perfCntCond_41 <= UInt<1>("h00")
    wire perfCntCond_42 : UInt<1>
    perfCntCond_42 <= UInt<1>("h00")
    wire perfCntCond_43 : UInt<1>
    perfCntCond_43 <= UInt<1>("h00")
    wire perfCntCond_44 : UInt<1>
    perfCntCond_44 <= UInt<1>("h00")
    wire perfCntCond_45 : UInt<1>
    perfCntCond_45 <= UInt<1>("h00")
    wire perfCntCond_46 : UInt<1>
    perfCntCond_46 <= UInt<1>("h00")
    wire perfCntCond_47 : UInt<1>
    perfCntCond_47 <= UInt<1>("h00")
    wire perfCntCond_48 : UInt<1>
    perfCntCond_48 <= UInt<1>("h00")
    wire perfCntCond_49 : UInt<1>
    perfCntCond_49 <= UInt<1>("h00")
    wire perfCntCond_50 : UInt<1>
    perfCntCond_50 <= UInt<1>("h00")
    wire perfCntCond_51 : UInt<1>
    perfCntCond_51 <= UInt<1>("h00")
    wire perfCntCond_52 : UInt<1>
    perfCntCond_52 <= UInt<1>("h00")
    wire perfCntCond_53 : UInt<1>
    perfCntCond_53 <= UInt<1>("h00")
    wire perfCntCond_54 : UInt<1>
    perfCntCond_54 <= UInt<1>("h00")
    wire perfCntCond_55 : UInt<1>
    perfCntCond_55 <= UInt<1>("h00")
    wire perfCntCond_56 : UInt<1>
    perfCntCond_56 <= UInt<1>("h00")
    wire perfCntCond_57 : UInt<1>
    perfCntCond_57 <= UInt<1>("h00")
    wire perfCntCond_58 : UInt<1>
    perfCntCond_58 <= UInt<1>("h00")
    wire perfCntCond_59 : UInt<1>
    perfCntCond_59 <= UInt<1>("h00")
    wire perfCntCond_60 : UInt<1>
    perfCntCond_60 <= UInt<1>("h00")
    wire perfCntCond_61 : UInt<1>
    perfCntCond_61 <= UInt<1>("h00")
    wire perfCntCond_62 : UInt<1>
    perfCntCond_62 <= UInt<1>("h00")
    wire perfCntCond_63 : UInt<1>
    perfCntCond_63 <= UInt<1>("h00")
    wire perfCntCond_64 : UInt<1>
    perfCntCond_64 <= UInt<1>("h00")
    wire perfCntCond_65 : UInt<1>
    perfCntCond_65 <= UInt<1>("h00")
    wire perfCntCond_66 : UInt<1>
    perfCntCond_66 <= UInt<1>("h00")
    wire perfCntCond_67 : UInt<1>
    perfCntCond_67 <= UInt<1>("h00")
    wire perfCntCond_68 : UInt<1>
    perfCntCond_68 <= UInt<1>("h00")
    wire perfCntCond_69 : UInt<1>
    perfCntCond_69 <= UInt<1>("h00")
    wire perfCntCond_70 : UInt<1>
    perfCntCond_70 <= UInt<1>("h00")
    wire perfCntCond_71 : UInt<1>
    perfCntCond_71 <= UInt<1>("h00")
    wire perfCntCond_72 : UInt<1>
    perfCntCond_72 <= UInt<1>("h00")
    wire perfCntCond_73 : UInt<1>
    perfCntCond_73 <= UInt<1>("h00")
    wire perfCntCond_74 : UInt<1>
    perfCntCond_74 <= UInt<1>("h00")
    wire perfCntCond_75 : UInt<1>
    perfCntCond_75 <= UInt<1>("h00")
    wire perfCntCond_76 : UInt<1>
    perfCntCond_76 <= UInt<1>("h00")
    wire perfCntCond_77 : UInt<1>
    perfCntCond_77 <= UInt<1>("h00")
    wire perfCntCond_78 : UInt<1>
    perfCntCond_78 <= UInt<1>("h00")
    wire perfCntCond_79 : UInt<1>
    perfCntCond_79 <= UInt<1>("h00")
    wire perfCntCond_80 : UInt<1>
    perfCntCond_80 <= UInt<1>("h00")
    wire perfCntCond_81 : UInt<1>
    perfCntCond_81 <= UInt<1>("h00")
    wire perfCntCond_82 : UInt<1>
    perfCntCond_82 <= UInt<1>("h00")
    wire perfCntCond_83 : UInt<1>
    perfCntCond_83 <= UInt<1>("h00")
    wire perfCntCond_84 : UInt<1>
    perfCntCond_84 <= UInt<1>("h00")
    wire perfCntCond_85 : UInt<1>
    perfCntCond_85 <= UInt<1>("h00")
    wire perfCntCond_86 : UInt<1>
    perfCntCond_86 <= UInt<1>("h00")
    wire perfCntCond_87 : UInt<1>
    perfCntCond_87 <= UInt<1>("h00")
    wire perfCntCond_88 : UInt<1>
    perfCntCond_88 <= UInt<1>("h00")
    wire perfCntCond_89 : UInt<1>
    perfCntCond_89 <= UInt<1>("h00")
    wire perfCntCond_90 : UInt<1>
    perfCntCond_90 <= UInt<1>("h00")
    wire perfCntCond_91 : UInt<1>
    perfCntCond_91 <= UInt<1>("h00")
    wire perfCntCond_92 : UInt<1>
    perfCntCond_92 <= UInt<1>("h00")
    wire perfCntCond_93 : UInt<1>
    perfCntCond_93 <= UInt<1>("h00")
    wire perfCntCond_94 : UInt<1>
    perfCntCond_94 <= UInt<1>("h00")
    wire perfCntCond_95 : UInt<1>
    perfCntCond_95 <= UInt<1>("h00")
    wire perfCntCond_96 : UInt<1>
    perfCntCond_96 <= UInt<1>("h00")
    wire perfCntCond_97 : UInt<1>
    perfCntCond_97 <= UInt<1>("h00")
    wire perfCntCond_98 : UInt<1>
    perfCntCond_98 <= UInt<1>("h00")
    wire perfCntCond_99 : UInt<1>
    perfCntCond_99 <= UInt<1>("h00")
    wire perfCntCond_100 : UInt<1>
    perfCntCond_100 <= UInt<1>("h00")
    wire perfCntCond_101 : UInt<1>
    perfCntCond_101 <= UInt<1>("h00")
    wire perfCntCond_102 : UInt<1>
    perfCntCond_102 <= UInt<1>("h00")
    wire perfCntCond_103 : UInt<1>
    perfCntCond_103 <= UInt<1>("h00")
    wire perfCntCond_104 : UInt<1>
    perfCntCond_104 <= UInt<1>("h00")
    wire perfCntCond_105 : UInt<1>
    perfCntCond_105 <= UInt<1>("h00")
    wire perfCntCond_106 : UInt<1>
    perfCntCond_106 <= UInt<1>("h00")
    wire perfCntCond_107 : UInt<1>
    perfCntCond_107 <= UInt<1>("h00")
    wire perfCntCond_108 : UInt<1>
    perfCntCond_108 <= UInt<1>("h00")
    wire perfCntCond_109 : UInt<1>
    perfCntCond_109 <= UInt<1>("h00")
    wire perfCntCond_110 : UInt<1>
    perfCntCond_110 <= UInt<1>("h00")
    wire perfCntCond_111 : UInt<1>
    perfCntCond_111 <= UInt<1>("h00")
    wire perfCntCond_112 : UInt<1>
    perfCntCond_112 <= UInt<1>("h00")
    wire perfCntCond_113 : UInt<1>
    perfCntCond_113 <= UInt<1>("h00")
    wire perfCntCond_114 : UInt<1>
    perfCntCond_114 <= UInt<1>("h00")
    wire perfCntCond_115 : UInt<1>
    perfCntCond_115 <= UInt<1>("h00")
    wire perfCntCond_116 : UInt<1>
    perfCntCond_116 <= UInt<1>("h00")
    wire perfCntCond_117 : UInt<1>
    perfCntCond_117 <= UInt<1>("h00")
    wire perfCntCond_118 : UInt<1>
    perfCntCond_118 <= UInt<1>("h00")
    wire perfCntCond_119 : UInt<1>
    perfCntCond_119 <= UInt<1>("h00")
    wire perfCntCond_120 : UInt<1>
    perfCntCond_120 <= UInt<1>("h00")
    wire perfCntCond_121 : UInt<1>
    perfCntCond_121 <= UInt<1>("h00")
    wire perfCntCond_122 : UInt<1>
    perfCntCond_122 <= UInt<1>("h00")
    wire perfCntCond_123 : UInt<1>
    perfCntCond_123 <= UInt<1>("h00")
    wire perfCntCond_124 : UInt<1>
    perfCntCond_124 <= UInt<1>("h00")
    wire perfCntCond_125 : UInt<1>
    perfCntCond_125 <= UInt<1>("h00")
    wire perfCntCond_126 : UInt<1>
    perfCntCond_126 <= UInt<1>("h00")
    wire perfCntCond_127 : UInt<1>
    perfCntCond_127 <= UInt<1>("h00")
    when perfCntCond_0 : @[CSR.scala 836:62]
      node _T_1552 = add(perfCnts_0, UInt<1>("h01")) @[CSR.scala 836:71]
      node _T_1553 = tail(_T_1552, 1) @[CSR.scala 836:71]
      perfCnts_0 <= _T_1553 @[CSR.scala 836:66]
      skip @[CSR.scala 836:62]
    when perfCntCond_1 : @[CSR.scala 836:62]
      node _T_1554 = add(perfCnts_1, UInt<1>("h01")) @[CSR.scala 836:71]
      node _T_1555 = tail(_T_1554, 1) @[CSR.scala 836:71]
      perfCnts_1 <= _T_1555 @[CSR.scala 836:66]
      skip @[CSR.scala 836:62]
    when perfCntCond_2 : @[CSR.scala 836:62]
      node _T_1556 = add(perfCnts_2, UInt<1>("h01")) @[CSR.scala 836:71]
      node _T_1557 = tail(_T_1556, 1) @[CSR.scala 836:71]
      perfCnts_2 <= _T_1557 @[CSR.scala 836:66]
      skip @[CSR.scala 836:62]
    wire pendingLS : UInt<5>
    pendingLS <= UInt<5>("h00")
    wire pendingSCmt : UInt<5>
    pendingSCmt <= UInt<5>("h00")
    wire pendingSReq : UInt<5>
    pendingSReq <= UInt<5>("h00")
    when perfCntCond_3 : @[CSR.scala 844:35]
      node _T_1558 = add(perfCnts_2, UInt<2>("h02")) @[CSR.scala 844:86]
      node _T_1559 = tail(_T_1558, 1) @[CSR.scala 844:86]
      perfCnts_2 <= _T_1559 @[CSR.scala 844:60]
      skip @[CSR.scala 844:35]
    wire _T_1560 : UInt<1>
    _T_1560 <= UInt<1>("h01")
    perfCntCond_24 <= UInt<1>("h00") @[CSR.scala 857:34]
    perfCntCond_28 <= UInt<1>("h00") @[CSR.scala 857:34]
    perfCntCond_50 <= UInt<1>("h00") @[CSR.scala 857:34]
    perfCntCond_31 <= UInt<1>("h00") @[CSR.scala 857:34]
    perfCntCond_14 <= UInt<1>("h00") @[CSR.scala 857:34]
    perfCntCond_17 <= UInt<1>("h00") @[CSR.scala 857:34]
    perfCntCond_13 <= UInt<1>("h00") @[CSR.scala 857:34]
    perfCntCond_12 <= UInt<1>("h00") @[CSR.scala 857:34]
    perfCntCond_32 <= UInt<1>("h00") @[CSR.scala 857:34]
    perfCntCond_22 <= UInt<1>("h00") @[CSR.scala 857:34]
    perfCntCond_23 <= UInt<1>("h00") @[CSR.scala 857:34]
    perfCntCond_5 <= UInt<1>("h00") @[CSR.scala 857:34]
    perfCntCond_21 <= UInt<1>("h00") @[CSR.scala 857:34]
    perfCntCond_6 <= UInt<1>("h00") @[CSR.scala 857:34]
    perfCntCond_7 <= UInt<1>("h00") @[CSR.scala 857:34]
    perfCntCond_3 <= UInt<1>("h00") @[CSR.scala 857:34]
    perfCntCond_19 <= UInt<1>("h00") @[CSR.scala 857:34]
    perfCntCond_4 <= UInt<1>("h00") @[CSR.scala 857:34]
    perfCntCond_18 <= UInt<1>("h00") @[CSR.scala 857:34]
    perfCntCond_26 <= UInt<1>("h00") @[CSR.scala 857:34]
    perfCntCond_8 <= UInt<1>("h00") @[CSR.scala 857:34]
    perfCntCond_51 <= UInt<1>("h00") @[CSR.scala 857:34]
    perfCntCond_29 <= UInt<1>("h00") @[CSR.scala 857:34]
    perfCntCond_52 <= UInt<1>("h00") @[CSR.scala 857:34]
    perfCntCond_25 <= UInt<1>("h00") @[CSR.scala 857:34]
    perfCntCond_53 <= UInt<1>("h00") @[CSR.scala 857:34]
    perfCntCond_20 <= UInt<1>("h00") @[CSR.scala 857:34]
    perfCntCond_10 <= UInt<1>("h00") @[CSR.scala 857:34]
    perfCntCond_16 <= UInt<1>("h00") @[CSR.scala 857:34]
    perfCntCond_15 <= UInt<1>("h00") @[CSR.scala 857:34]
    perfCntCond_49 <= UInt<1>("h00") @[CSR.scala 857:34]
    perfCntCond_27 <= UInt<1>("h00") @[CSR.scala 857:34]
    perfCntCond_9 <= UInt<1>("h00") @[CSR.scala 857:34]
    perfCntCond_30 <= UInt<1>("h00") @[CSR.scala 857:34]
    perfCntCond_11 <= UInt<1>("h00") @[CSR.scala 857:34]
    wire nutcoretrap : UInt<1>
    nutcoretrap <= UInt<1>("h00")
    
  module MOU : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {src1 : UInt<64>, src2 : UInt<64>, func : UInt<7>}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, flip cfIn : {instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>}, redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}}
    
    node _T = add(io.cfIn.pc, UInt<3>("h04")) @[MOU.scala 49:36]
    node _T_1 = tail(_T, 1) @[MOU.scala 49:36]
    io.redirect.target <= _T_1 @[MOU.scala 49:22]
    io.redirect.valid <= io.in.valid @[MOU.scala 50:21]
    io.redirect.rtype <= UInt<1>("h00") @[MOU.scala 51:21]
    node _T_2 = eq(io.in.bits.func, UInt<1>("h01")) @[MOU.scala 52:36]
    node flushICache = and(io.in.valid, _T_2) @[MOU.scala 52:27]
    reg _T_3 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_4 = add(_T_3, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_5 = tail(_T_4, 1) @[GTimer.scala 25:12]
    _T_3 <= _T_5 @[GTimer.scala 25:7]
    wire _T_6 : UInt<1>
    _T_6 <= UInt<1>("h00")
    node _T_7 = and(flushICache, _T_6) @[Debug.scala 55:16]
    when _T_7 : @[Debug.scala 55:31]
      node _T_8 = asUInt(reset) @[Debug.scala 56:24]
      node _T_9 = eq(_T_8, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_9 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] MOU: ", _T_3) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_10 = asUInt(reset) @[Debug.scala 57:13]
      node _T_11 = eq(_T_10, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_11 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "Flush I$ at %x\n", io.cfIn.pc) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_12 = eq(io.in.bits.func, UInt<2>("h02")) @[MOU.scala 56:33]
    node flushTLB = and(io.in.valid, _T_12) @[MOU.scala 56:24]
    reg _T_13 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_14 = add(_T_13, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_15 = tail(_T_14, 1) @[GTimer.scala 25:12]
    _T_13 <= _T_15 @[GTimer.scala 25:7]
    wire _T_16 : UInt<1>
    _T_16 <= UInt<1>("h00")
    node _T_17 = and(flushTLB, _T_16) @[Debug.scala 55:16]
    when _T_17 : @[Debug.scala 55:31]
      node _T_18 = asUInt(reset) @[Debug.scala 56:24]
      node _T_19 = eq(_T_18, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_19 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] MOU: ", _T_13) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_20 = asUInt(reset) @[Debug.scala 57:13]
      node _T_21 = eq(_T_20, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_21 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "Sfence.vma at %x\n", io.cfIn.pc) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    io.out.bits <= UInt<1>("h00") @[MOU.scala 60:15]
    io.in.ready <= UInt<1>("h01") @[MOU.scala 61:15]
    io.out.valid <= io.in.valid @[MOU.scala 62:16]
    
  module EXU : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {cf : {instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>}, ctrl : {src1Type : UInt<1>, src2Type : UInt<1>, fuType : UInt<3>, fuOpType : UInt<7>, rfSrc1 : UInt<5>, rfSrc2 : UInt<5>, rfWen : UInt<1>, rfDest : UInt<5>, isNutCoreTrap : UInt<1>, isSrc1Forward : UInt<1>, isSrc2Forward : UInt<1>, noSpecExec : UInt<1>, isBlocked : UInt<1>}, data : {src1 : UInt<64>, src2 : UInt<64>, imm : UInt<64>}}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {decode : {cf : {instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>}, ctrl : {src1Type : UInt<1>, src2Type : UInt<1>, fuType : UInt<3>, fuOpType : UInt<7>, rfSrc1 : UInt<5>, rfSrc2 : UInt<5>, rfWen : UInt<1>, rfDest : UInt<5>, isNutCoreTrap : UInt<1>, isSrc1Forward : UInt<1>, isSrc2Forward : UInt<1>, noSpecExec : UInt<1>, isBlocked : UInt<1>}, data : {src1 : UInt<64>, src2 : UInt<64>, imm : UInt<64>}}, isMMIO : UInt<1>, intrNO : UInt<64>, commits : UInt<64>[5]}}, flip flush : UInt<1>, dmem : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<39>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}, forward : {valid : UInt<1>, wb : {rfWen : UInt<1>, rfDest : UInt<5>, rfData : UInt<64>}, fuType : UInt<3>}, flip memMMU : {imem : {flip priviledgeMode : UInt<2>, flip status_sum : UInt<1>, flip status_mxr : UInt<1>, loadPF : UInt<1>, storePF : UInt<1>, addr : UInt<39>}, dmem : {flip priviledgeMode : UInt<2>, flip status_sum : UInt<1>, flip status_mxr : UInt<1>, loadPF : UInt<1>, storePF : UInt<1>, addr : UInt<39>}}}
    
    node src1 = bits(io.in.bits.data.src1, 63, 0) @[EXU.scala 37:34]
    node src2 = bits(io.in.bits.data.src2, 63, 0) @[EXU.scala 38:34]
    wire fuValids : UInt<1>[5] @[EXU.scala 42:22]
    node _T = eq(io.in.bits.ctrl.fuType, UInt<1>("h00")) @[EXU.scala 43:57]
    node _T_1 = and(_T, io.in.valid) @[EXU.scala 43:66]
    node _T_2 = eq(io.flush, UInt<1>("h00")) @[EXU.scala 43:84]
    node _T_3 = and(_T_1, _T_2) @[EXU.scala 43:81]
    fuValids[0] <= _T_3 @[EXU.scala 43:46]
    node _T_4 = eq(io.in.bits.ctrl.fuType, UInt<1>("h01")) @[EXU.scala 43:57]
    node _T_5 = and(_T_4, io.in.valid) @[EXU.scala 43:66]
    node _T_6 = eq(io.flush, UInt<1>("h00")) @[EXU.scala 43:84]
    node _T_7 = and(_T_5, _T_6) @[EXU.scala 43:81]
    fuValids[1] <= _T_7 @[EXU.scala 43:46]
    node _T_8 = eq(io.in.bits.ctrl.fuType, UInt<2>("h02")) @[EXU.scala 43:57]
    node _T_9 = and(_T_8, io.in.valid) @[EXU.scala 43:66]
    node _T_10 = eq(io.flush, UInt<1>("h00")) @[EXU.scala 43:84]
    node _T_11 = and(_T_9, _T_10) @[EXU.scala 43:81]
    fuValids[2] <= _T_11 @[EXU.scala 43:46]
    node _T_12 = eq(io.in.bits.ctrl.fuType, UInt<2>("h03")) @[EXU.scala 43:57]
    node _T_13 = and(_T_12, io.in.valid) @[EXU.scala 43:66]
    node _T_14 = eq(io.flush, UInt<1>("h00")) @[EXU.scala 43:84]
    node _T_15 = and(_T_13, _T_14) @[EXU.scala 43:81]
    fuValids[3] <= _T_15 @[EXU.scala 43:46]
    node _T_16 = eq(io.in.bits.ctrl.fuType, UInt<3>("h04")) @[EXU.scala 43:57]
    node _T_17 = and(_T_16, io.in.valid) @[EXU.scala 43:66]
    node _T_18 = eq(io.flush, UInt<1>("h00")) @[EXU.scala 43:84]
    node _T_19 = and(_T_17, _T_18) @[EXU.scala 43:81]
    fuValids[4] <= _T_19 @[EXU.scala 43:46]
    inst alu of ALU @[EXU.scala 45:19]
    alu.clock <= clock
    alu.reset <= reset
    alu.io.in.valid <= fuValids[UInt<1>("h00")] @[ALU.scala 79:16]
    alu.io.in.bits.src1 <= src1 @[ALU.scala 80:15]
    alu.io.in.bits.src2 <= src2 @[ALU.scala 81:15]
    alu.io.in.bits.func <= io.in.bits.ctrl.fuOpType @[ALU.scala 82:15]
    alu.io.cfIn.crossPageIPFFix <= io.in.bits.cf.crossPageIPFFix @[EXU.scala 47:15]
    alu.io.cfIn.isRVC <= io.in.bits.cf.isRVC @[EXU.scala 47:15]
    alu.io.cfIn.brIdx <= io.in.bits.cf.brIdx @[EXU.scala 47:15]
    alu.io.cfIn.intrVec[0] <= io.in.bits.cf.intrVec[0] @[EXU.scala 47:15]
    alu.io.cfIn.intrVec[1] <= io.in.bits.cf.intrVec[1] @[EXU.scala 47:15]
    alu.io.cfIn.intrVec[2] <= io.in.bits.cf.intrVec[2] @[EXU.scala 47:15]
    alu.io.cfIn.intrVec[3] <= io.in.bits.cf.intrVec[3] @[EXU.scala 47:15]
    alu.io.cfIn.intrVec[4] <= io.in.bits.cf.intrVec[4] @[EXU.scala 47:15]
    alu.io.cfIn.intrVec[5] <= io.in.bits.cf.intrVec[5] @[EXU.scala 47:15]
    alu.io.cfIn.intrVec[6] <= io.in.bits.cf.intrVec[6] @[EXU.scala 47:15]
    alu.io.cfIn.intrVec[7] <= io.in.bits.cf.intrVec[7] @[EXU.scala 47:15]
    alu.io.cfIn.intrVec[8] <= io.in.bits.cf.intrVec[8] @[EXU.scala 47:15]
    alu.io.cfIn.intrVec[9] <= io.in.bits.cf.intrVec[9] @[EXU.scala 47:15]
    alu.io.cfIn.intrVec[10] <= io.in.bits.cf.intrVec[10] @[EXU.scala 47:15]
    alu.io.cfIn.intrVec[11] <= io.in.bits.cf.intrVec[11] @[EXU.scala 47:15]
    alu.io.cfIn.exceptionVec[0] <= io.in.bits.cf.exceptionVec[0] @[EXU.scala 47:15]
    alu.io.cfIn.exceptionVec[1] <= io.in.bits.cf.exceptionVec[1] @[EXU.scala 47:15]
    alu.io.cfIn.exceptionVec[2] <= io.in.bits.cf.exceptionVec[2] @[EXU.scala 47:15]
    alu.io.cfIn.exceptionVec[3] <= io.in.bits.cf.exceptionVec[3] @[EXU.scala 47:15]
    alu.io.cfIn.exceptionVec[4] <= io.in.bits.cf.exceptionVec[4] @[EXU.scala 47:15]
    alu.io.cfIn.exceptionVec[5] <= io.in.bits.cf.exceptionVec[5] @[EXU.scala 47:15]
    alu.io.cfIn.exceptionVec[6] <= io.in.bits.cf.exceptionVec[6] @[EXU.scala 47:15]
    alu.io.cfIn.exceptionVec[7] <= io.in.bits.cf.exceptionVec[7] @[EXU.scala 47:15]
    alu.io.cfIn.exceptionVec[8] <= io.in.bits.cf.exceptionVec[8] @[EXU.scala 47:15]
    alu.io.cfIn.exceptionVec[9] <= io.in.bits.cf.exceptionVec[9] @[EXU.scala 47:15]
    alu.io.cfIn.exceptionVec[10] <= io.in.bits.cf.exceptionVec[10] @[EXU.scala 47:15]
    alu.io.cfIn.exceptionVec[11] <= io.in.bits.cf.exceptionVec[11] @[EXU.scala 47:15]
    alu.io.cfIn.exceptionVec[12] <= io.in.bits.cf.exceptionVec[12] @[EXU.scala 47:15]
    alu.io.cfIn.exceptionVec[13] <= io.in.bits.cf.exceptionVec[13] @[EXU.scala 47:15]
    alu.io.cfIn.exceptionVec[14] <= io.in.bits.cf.exceptionVec[14] @[EXU.scala 47:15]
    alu.io.cfIn.exceptionVec[15] <= io.in.bits.cf.exceptionVec[15] @[EXU.scala 47:15]
    alu.io.cfIn.redirect.valid <= io.in.bits.cf.redirect.valid @[EXU.scala 47:15]
    alu.io.cfIn.redirect.rtype <= io.in.bits.cf.redirect.rtype @[EXU.scala 47:15]
    alu.io.cfIn.redirect.target <= io.in.bits.cf.redirect.target @[EXU.scala 47:15]
    alu.io.cfIn.pnpc <= io.in.bits.cf.pnpc @[EXU.scala 47:15]
    alu.io.cfIn.pc <= io.in.bits.cf.pc @[EXU.scala 47:15]
    alu.io.cfIn.instr <= io.in.bits.cf.instr @[EXU.scala 47:15]
    alu.io.offset <= io.in.bits.data.imm @[EXU.scala 48:17]
    alu.io.out.ready <= UInt<1>("h01") @[EXU.scala 49:20]
    inst lsu of UnpipelinedLSU @[EXU.scala 53:19]
    lsu.clock <= clock
    lsu.reset <= reset
    wire lsuTlbPF : UInt<1>
    lsuTlbPF <= UInt<1>("h00")
    lsu.io.in.valid <= fuValids[UInt<1>("h01")] @[UnpipelinedLSU.scala 40:16]
    lsu.io.in.bits.src1 <= src1 @[UnpipelinedLSU.scala 41:15]
    lsu.io.in.bits.src2 <= io.in.bits.data.imm @[UnpipelinedLSU.scala 42:15]
    lsu.io.in.bits.func <= io.in.bits.ctrl.fuOpType @[UnpipelinedLSU.scala 43:15]
    lsuTlbPF <= lsu.io.dtlbPF @[UnpipelinedLSU.scala 44:12]
    lsu.io.wdata <= src2 @[EXU.scala 56:16]
    lsu.io.instr <= io.in.bits.cf.instr @[EXU.scala 57:16]
    node _T_20 = xor(io.in.bits.cf.pc, UInt<30>("h030000000")) @[NutCore.scala 86:11]
    node _T_21 = bits(_T_20, 31, 28) @[NutCore.scala 86:24]
    node _T_22 = eq(_T_21, UInt<1>("h00")) @[NutCore.scala 86:44]
    node _T_23 = xor(io.in.bits.cf.pc, UInt<31>("h040600000")) @[NutCore.scala 86:11]
    node _T_24 = bits(_T_23, 31, 24) @[NutCore.scala 86:24]
    node _T_25 = eq(_T_24, UInt<1>("h00")) @[NutCore.scala 86:44]
    node _T_26 = or(_T_22, _T_25) @[NutCore.scala 87:15]
    node _T_27 = and(_T_26, io.out.valid) @[EXU.scala 58:81]
    node _T_28 = or(lsu.io.isMMIO, _T_27) @[EXU.scala 58:39]
    io.out.bits.isMMIO <= _T_28 @[EXU.scala 58:22]
    lsu.io.dmem.resp.bits.rdata <= io.dmem.resp.bits.rdata @[EXU.scala 59:11]
    lsu.io.dmem.resp.bits.cmd <= io.dmem.resp.bits.cmd @[EXU.scala 59:11]
    lsu.io.dmem.resp.valid <= io.dmem.resp.valid @[EXU.scala 59:11]
    io.dmem.resp.ready <= lsu.io.dmem.resp.ready @[EXU.scala 59:11]
    io.dmem.req.bits.wdata <= lsu.io.dmem.req.bits.wdata @[EXU.scala 59:11]
    io.dmem.req.bits.wmask <= lsu.io.dmem.req.bits.wmask @[EXU.scala 59:11]
    io.dmem.req.bits.cmd <= lsu.io.dmem.req.bits.cmd @[EXU.scala 59:11]
    io.dmem.req.bits.size <= lsu.io.dmem.req.bits.size @[EXU.scala 59:11]
    io.dmem.req.bits.addr <= lsu.io.dmem.req.bits.addr @[EXU.scala 59:11]
    io.dmem.req.valid <= lsu.io.dmem.req.valid @[EXU.scala 59:11]
    lsu.io.dmem.req.ready <= io.dmem.req.ready @[EXU.scala 59:11]
    lsu.io.out.ready <= UInt<1>("h01") @[EXU.scala 60:20]
    inst mdu of MDU @[EXU.scala 62:19]
    mdu.clock <= clock
    mdu.reset <= reset
    mdu.io.in.valid <= fuValids[UInt<2>("h02")] @[MDU.scala 140:16]
    mdu.io.in.bits.src1 <= src1 @[MDU.scala 141:15]
    mdu.io.in.bits.src2 <= src2 @[MDU.scala 142:15]
    mdu.io.in.bits.func <= io.in.bits.ctrl.fuOpType @[MDU.scala 143:15]
    mdu.io.out.ready <= UInt<1>("h01") @[EXU.scala 64:20]
    inst csr of CSR @[EXU.scala 67:19]
    csr.clock <= clock
    csr.reset <= reset
    csr.io.in.valid <= fuValids[UInt<2>("h03")] @[CSR.scala 196:16]
    csr.io.in.bits.src1 <= src1 @[CSR.scala 197:15]
    csr.io.in.bits.src2 <= src2 @[CSR.scala 198:15]
    csr.io.in.bits.func <= io.in.bits.ctrl.fuOpType @[CSR.scala 199:15]
    csr.io.cfIn.crossPageIPFFix <= io.in.bits.cf.crossPageIPFFix @[EXU.scala 69:15]
    csr.io.cfIn.isRVC <= io.in.bits.cf.isRVC @[EXU.scala 69:15]
    csr.io.cfIn.brIdx <= io.in.bits.cf.brIdx @[EXU.scala 69:15]
    csr.io.cfIn.intrVec[0] <= io.in.bits.cf.intrVec[0] @[EXU.scala 69:15]
    csr.io.cfIn.intrVec[1] <= io.in.bits.cf.intrVec[1] @[EXU.scala 69:15]
    csr.io.cfIn.intrVec[2] <= io.in.bits.cf.intrVec[2] @[EXU.scala 69:15]
    csr.io.cfIn.intrVec[3] <= io.in.bits.cf.intrVec[3] @[EXU.scala 69:15]
    csr.io.cfIn.intrVec[4] <= io.in.bits.cf.intrVec[4] @[EXU.scala 69:15]
    csr.io.cfIn.intrVec[5] <= io.in.bits.cf.intrVec[5] @[EXU.scala 69:15]
    csr.io.cfIn.intrVec[6] <= io.in.bits.cf.intrVec[6] @[EXU.scala 69:15]
    csr.io.cfIn.intrVec[7] <= io.in.bits.cf.intrVec[7] @[EXU.scala 69:15]
    csr.io.cfIn.intrVec[8] <= io.in.bits.cf.intrVec[8] @[EXU.scala 69:15]
    csr.io.cfIn.intrVec[9] <= io.in.bits.cf.intrVec[9] @[EXU.scala 69:15]
    csr.io.cfIn.intrVec[10] <= io.in.bits.cf.intrVec[10] @[EXU.scala 69:15]
    csr.io.cfIn.intrVec[11] <= io.in.bits.cf.intrVec[11] @[EXU.scala 69:15]
    csr.io.cfIn.exceptionVec[0] <= io.in.bits.cf.exceptionVec[0] @[EXU.scala 69:15]
    csr.io.cfIn.exceptionVec[1] <= io.in.bits.cf.exceptionVec[1] @[EXU.scala 69:15]
    csr.io.cfIn.exceptionVec[2] <= io.in.bits.cf.exceptionVec[2] @[EXU.scala 69:15]
    csr.io.cfIn.exceptionVec[3] <= io.in.bits.cf.exceptionVec[3] @[EXU.scala 69:15]
    csr.io.cfIn.exceptionVec[4] <= io.in.bits.cf.exceptionVec[4] @[EXU.scala 69:15]
    csr.io.cfIn.exceptionVec[5] <= io.in.bits.cf.exceptionVec[5] @[EXU.scala 69:15]
    csr.io.cfIn.exceptionVec[6] <= io.in.bits.cf.exceptionVec[6] @[EXU.scala 69:15]
    csr.io.cfIn.exceptionVec[7] <= io.in.bits.cf.exceptionVec[7] @[EXU.scala 69:15]
    csr.io.cfIn.exceptionVec[8] <= io.in.bits.cf.exceptionVec[8] @[EXU.scala 69:15]
    csr.io.cfIn.exceptionVec[9] <= io.in.bits.cf.exceptionVec[9] @[EXU.scala 69:15]
    csr.io.cfIn.exceptionVec[10] <= io.in.bits.cf.exceptionVec[10] @[EXU.scala 69:15]
    csr.io.cfIn.exceptionVec[11] <= io.in.bits.cf.exceptionVec[11] @[EXU.scala 69:15]
    csr.io.cfIn.exceptionVec[12] <= io.in.bits.cf.exceptionVec[12] @[EXU.scala 69:15]
    csr.io.cfIn.exceptionVec[13] <= io.in.bits.cf.exceptionVec[13] @[EXU.scala 69:15]
    csr.io.cfIn.exceptionVec[14] <= io.in.bits.cf.exceptionVec[14] @[EXU.scala 69:15]
    csr.io.cfIn.exceptionVec[15] <= io.in.bits.cf.exceptionVec[15] @[EXU.scala 69:15]
    csr.io.cfIn.redirect.valid <= io.in.bits.cf.redirect.valid @[EXU.scala 69:15]
    csr.io.cfIn.redirect.rtype <= io.in.bits.cf.redirect.rtype @[EXU.scala 69:15]
    csr.io.cfIn.redirect.target <= io.in.bits.cf.redirect.target @[EXU.scala 69:15]
    csr.io.cfIn.pnpc <= io.in.bits.cf.pnpc @[EXU.scala 69:15]
    csr.io.cfIn.pc <= io.in.bits.cf.pc @[EXU.scala 69:15]
    csr.io.cfIn.instr <= io.in.bits.cf.instr @[EXU.scala 69:15]
    csr.io.cfIn.exceptionVec[4] <= lsu.io.loadAddrMisaligned @[EXU.scala 70:48]
    csr.io.cfIn.exceptionVec[6] <= lsu.io.storeAddrMisaligned @[EXU.scala 71:49]
    node _T_29 = eq(io.flush, UInt<1>("h00")) @[EXU.scala 72:39]
    node _T_30 = and(io.in.valid, _T_29) @[EXU.scala 72:36]
    csr.io.instrValid <= _T_30 @[EXU.scala 72:21]
    csr.io.isBackendException <= UInt<1>("h00") @[EXU.scala 73:29]
    io.out.bits.intrNO <= csr.io.intrNO @[EXU.scala 74:22]
    csr.io.isBackendException <= UInt<1>("h00") @[EXU.scala 75:29]
    csr.io.out.ready <= UInt<1>("h01") @[EXU.scala 76:20]
    csr.io.imemMMU.addr <= io.memMMU.imem.addr @[EXU.scala 78:18]
    csr.io.imemMMU.storePF <= io.memMMU.imem.storePF @[EXU.scala 78:18]
    csr.io.imemMMU.loadPF <= io.memMMU.imem.loadPF @[EXU.scala 78:18]
    io.memMMU.imem.status_mxr <= csr.io.imemMMU.status_mxr @[EXU.scala 78:18]
    io.memMMU.imem.status_sum <= csr.io.imemMMU.status_sum @[EXU.scala 78:18]
    io.memMMU.imem.priviledgeMode <= csr.io.imemMMU.priviledgeMode @[EXU.scala 78:18]
    csr.io.dmemMMU.addr <= io.memMMU.dmem.addr @[EXU.scala 79:18]
    csr.io.dmemMMU.storePF <= io.memMMU.dmem.storePF @[EXU.scala 79:18]
    csr.io.dmemMMU.loadPF <= io.memMMU.dmem.loadPF @[EXU.scala 79:18]
    io.memMMU.dmem.status_mxr <= csr.io.dmemMMU.status_mxr @[EXU.scala 79:18]
    io.memMMU.dmem.status_sum <= csr.io.dmemMMU.status_sum @[EXU.scala 79:18]
    io.memMMU.dmem.priviledgeMode <= csr.io.dmemMMU.priviledgeMode @[EXU.scala 79:18]
    inst mou of MOU @[EXU.scala 81:19]
    mou.clock <= clock
    mou.reset <= reset
    mou.io.in.valid <= fuValids[UInt<3>("h04")] @[MOU.scala 42:16]
    mou.io.in.bits.src1 <= src1 @[MOU.scala 43:15]
    mou.io.in.bits.src2 <= src2 @[MOU.scala 44:15]
    mou.io.in.bits.func <= io.in.bits.ctrl.fuOpType @[MOU.scala 45:15]
    mou.io.cfIn.crossPageIPFFix <= io.in.bits.cf.crossPageIPFFix @[EXU.scala 84:15]
    mou.io.cfIn.isRVC <= io.in.bits.cf.isRVC @[EXU.scala 84:15]
    mou.io.cfIn.brIdx <= io.in.bits.cf.brIdx @[EXU.scala 84:15]
    mou.io.cfIn.intrVec[0] <= io.in.bits.cf.intrVec[0] @[EXU.scala 84:15]
    mou.io.cfIn.intrVec[1] <= io.in.bits.cf.intrVec[1] @[EXU.scala 84:15]
    mou.io.cfIn.intrVec[2] <= io.in.bits.cf.intrVec[2] @[EXU.scala 84:15]
    mou.io.cfIn.intrVec[3] <= io.in.bits.cf.intrVec[3] @[EXU.scala 84:15]
    mou.io.cfIn.intrVec[4] <= io.in.bits.cf.intrVec[4] @[EXU.scala 84:15]
    mou.io.cfIn.intrVec[5] <= io.in.bits.cf.intrVec[5] @[EXU.scala 84:15]
    mou.io.cfIn.intrVec[6] <= io.in.bits.cf.intrVec[6] @[EXU.scala 84:15]
    mou.io.cfIn.intrVec[7] <= io.in.bits.cf.intrVec[7] @[EXU.scala 84:15]
    mou.io.cfIn.intrVec[8] <= io.in.bits.cf.intrVec[8] @[EXU.scala 84:15]
    mou.io.cfIn.intrVec[9] <= io.in.bits.cf.intrVec[9] @[EXU.scala 84:15]
    mou.io.cfIn.intrVec[10] <= io.in.bits.cf.intrVec[10] @[EXU.scala 84:15]
    mou.io.cfIn.intrVec[11] <= io.in.bits.cf.intrVec[11] @[EXU.scala 84:15]
    mou.io.cfIn.exceptionVec[0] <= io.in.bits.cf.exceptionVec[0] @[EXU.scala 84:15]
    mou.io.cfIn.exceptionVec[1] <= io.in.bits.cf.exceptionVec[1] @[EXU.scala 84:15]
    mou.io.cfIn.exceptionVec[2] <= io.in.bits.cf.exceptionVec[2] @[EXU.scala 84:15]
    mou.io.cfIn.exceptionVec[3] <= io.in.bits.cf.exceptionVec[3] @[EXU.scala 84:15]
    mou.io.cfIn.exceptionVec[4] <= io.in.bits.cf.exceptionVec[4] @[EXU.scala 84:15]
    mou.io.cfIn.exceptionVec[5] <= io.in.bits.cf.exceptionVec[5] @[EXU.scala 84:15]
    mou.io.cfIn.exceptionVec[6] <= io.in.bits.cf.exceptionVec[6] @[EXU.scala 84:15]
    mou.io.cfIn.exceptionVec[7] <= io.in.bits.cf.exceptionVec[7] @[EXU.scala 84:15]
    mou.io.cfIn.exceptionVec[8] <= io.in.bits.cf.exceptionVec[8] @[EXU.scala 84:15]
    mou.io.cfIn.exceptionVec[9] <= io.in.bits.cf.exceptionVec[9] @[EXU.scala 84:15]
    mou.io.cfIn.exceptionVec[10] <= io.in.bits.cf.exceptionVec[10] @[EXU.scala 84:15]
    mou.io.cfIn.exceptionVec[11] <= io.in.bits.cf.exceptionVec[11] @[EXU.scala 84:15]
    mou.io.cfIn.exceptionVec[12] <= io.in.bits.cf.exceptionVec[12] @[EXU.scala 84:15]
    mou.io.cfIn.exceptionVec[13] <= io.in.bits.cf.exceptionVec[13] @[EXU.scala 84:15]
    mou.io.cfIn.exceptionVec[14] <= io.in.bits.cf.exceptionVec[14] @[EXU.scala 84:15]
    mou.io.cfIn.exceptionVec[15] <= io.in.bits.cf.exceptionVec[15] @[EXU.scala 84:15]
    mou.io.cfIn.redirect.valid <= io.in.bits.cf.redirect.valid @[EXU.scala 84:15]
    mou.io.cfIn.redirect.rtype <= io.in.bits.cf.redirect.rtype @[EXU.scala 84:15]
    mou.io.cfIn.redirect.target <= io.in.bits.cf.redirect.target @[EXU.scala 84:15]
    mou.io.cfIn.pnpc <= io.in.bits.cf.pnpc @[EXU.scala 84:15]
    mou.io.cfIn.pc <= io.in.bits.cf.pc @[EXU.scala 84:15]
    mou.io.cfIn.instr <= io.in.bits.cf.instr @[EXU.scala 84:15]
    mou.io.out.ready <= UInt<1>("h01") @[EXU.scala 85:20]
    io.out.bits.decode.data.imm is invalid @[EXU.scala 87:22]
    io.out.bits.decode.data.src2 is invalid @[EXU.scala 87:22]
    io.out.bits.decode.data.src1 is invalid @[EXU.scala 87:22]
    io.out.bits.decode.ctrl.isBlocked is invalid @[EXU.scala 87:22]
    io.out.bits.decode.ctrl.noSpecExec is invalid @[EXU.scala 87:22]
    io.out.bits.decode.ctrl.isSrc2Forward is invalid @[EXU.scala 87:22]
    io.out.bits.decode.ctrl.isSrc1Forward is invalid @[EXU.scala 87:22]
    io.out.bits.decode.ctrl.isNutCoreTrap is invalid @[EXU.scala 87:22]
    io.out.bits.decode.ctrl.rfDest is invalid @[EXU.scala 87:22]
    io.out.bits.decode.ctrl.rfWen is invalid @[EXU.scala 87:22]
    io.out.bits.decode.ctrl.rfSrc2 is invalid @[EXU.scala 87:22]
    io.out.bits.decode.ctrl.rfSrc1 is invalid @[EXU.scala 87:22]
    io.out.bits.decode.ctrl.fuOpType is invalid @[EXU.scala 87:22]
    io.out.bits.decode.ctrl.fuType is invalid @[EXU.scala 87:22]
    io.out.bits.decode.ctrl.src2Type is invalid @[EXU.scala 87:22]
    io.out.bits.decode.ctrl.src1Type is invalid @[EXU.scala 87:22]
    io.out.bits.decode.cf.crossPageIPFFix is invalid @[EXU.scala 87:22]
    io.out.bits.decode.cf.isRVC is invalid @[EXU.scala 87:22]
    io.out.bits.decode.cf.brIdx is invalid @[EXU.scala 87:22]
    io.out.bits.decode.cf.intrVec[0] is invalid @[EXU.scala 87:22]
    io.out.bits.decode.cf.intrVec[1] is invalid @[EXU.scala 87:22]
    io.out.bits.decode.cf.intrVec[2] is invalid @[EXU.scala 87:22]
    io.out.bits.decode.cf.intrVec[3] is invalid @[EXU.scala 87:22]
    io.out.bits.decode.cf.intrVec[4] is invalid @[EXU.scala 87:22]
    io.out.bits.decode.cf.intrVec[5] is invalid @[EXU.scala 87:22]
    io.out.bits.decode.cf.intrVec[6] is invalid @[EXU.scala 87:22]
    io.out.bits.decode.cf.intrVec[7] is invalid @[EXU.scala 87:22]
    io.out.bits.decode.cf.intrVec[8] is invalid @[EXU.scala 87:22]
    io.out.bits.decode.cf.intrVec[9] is invalid @[EXU.scala 87:22]
    io.out.bits.decode.cf.intrVec[10] is invalid @[EXU.scala 87:22]
    io.out.bits.decode.cf.intrVec[11] is invalid @[EXU.scala 87:22]
    io.out.bits.decode.cf.exceptionVec[0] is invalid @[EXU.scala 87:22]
    io.out.bits.decode.cf.exceptionVec[1] is invalid @[EXU.scala 87:22]
    io.out.bits.decode.cf.exceptionVec[2] is invalid @[EXU.scala 87:22]
    io.out.bits.decode.cf.exceptionVec[3] is invalid @[EXU.scala 87:22]
    io.out.bits.decode.cf.exceptionVec[4] is invalid @[EXU.scala 87:22]
    io.out.bits.decode.cf.exceptionVec[5] is invalid @[EXU.scala 87:22]
    io.out.bits.decode.cf.exceptionVec[6] is invalid @[EXU.scala 87:22]
    io.out.bits.decode.cf.exceptionVec[7] is invalid @[EXU.scala 87:22]
    io.out.bits.decode.cf.exceptionVec[8] is invalid @[EXU.scala 87:22]
    io.out.bits.decode.cf.exceptionVec[9] is invalid @[EXU.scala 87:22]
    io.out.bits.decode.cf.exceptionVec[10] is invalid @[EXU.scala 87:22]
    io.out.bits.decode.cf.exceptionVec[11] is invalid @[EXU.scala 87:22]
    io.out.bits.decode.cf.exceptionVec[12] is invalid @[EXU.scala 87:22]
    io.out.bits.decode.cf.exceptionVec[13] is invalid @[EXU.scala 87:22]
    io.out.bits.decode.cf.exceptionVec[14] is invalid @[EXU.scala 87:22]
    io.out.bits.decode.cf.exceptionVec[15] is invalid @[EXU.scala 87:22]
    io.out.bits.decode.cf.redirect.valid is invalid @[EXU.scala 87:22]
    io.out.bits.decode.cf.redirect.rtype is invalid @[EXU.scala 87:22]
    io.out.bits.decode.cf.redirect.target is invalid @[EXU.scala 87:22]
    io.out.bits.decode.cf.pnpc is invalid @[EXU.scala 87:22]
    io.out.bits.decode.cf.pc is invalid @[EXU.scala 87:22]
    io.out.bits.decode.cf.instr is invalid @[EXU.scala 87:22]
    node _T_31 = eq(lsuTlbPF, UInt<1>("h00")) @[EXU.scala 89:28]
    node _T_32 = eq(lsu.io.loadAddrMisaligned, UInt<1>("h00")) @[EXU.scala 89:41]
    node _T_33 = and(_T_31, _T_32) @[EXU.scala 89:38]
    node _T_34 = eq(lsu.io.storeAddrMisaligned, UInt<1>("h00")) @[EXU.scala 89:71]
    node _T_35 = and(_T_33, _T_34) @[EXU.scala 89:68]
    node _T_36 = eq(fuValids[UInt<1>("h01")], UInt<1>("h00")) @[EXU.scala 89:102]
    node _T_37 = or(_T_35, _T_36) @[EXU.scala 89:99]
    node _T_38 = and(io.in.bits.ctrl.rfWen, _T_37) @[EXU.scala 89:24]
    node _T_39 = and(csr.io.wenFix, fuValids[UInt<2>("h03")]) @[EXU.scala 89:144]
    node _T_40 = eq(_T_39, UInt<1>("h00")) @[EXU.scala 89:128]
    node _T_41 = and(_T_38, _T_40) @[EXU.scala 89:125]
    io.out.bits.decode.ctrl.rfWen <= _T_41 @[EXU.scala 89:13]
    io.out.bits.decode.ctrl.rfDest <= io.in.bits.ctrl.rfDest @[EXU.scala 90:14]
    io.out.bits.decode.ctrl.fuType <= io.in.bits.ctrl.fuType @[EXU.scala 91:14]
    io.out.bits.decode.cf.pc <= io.in.bits.cf.pc @[EXU.scala 93:28]
    io.out.bits.decode.cf.instr <= io.in.bits.cf.instr @[EXU.scala 94:31]
    node _T_42 = mux(csr.io.redirect.valid, csr.io.redirect, alu.io.redirect) @[EXU.scala 97:10]
    node _T_43 = mux(mou.io.redirect.valid, mou.io.redirect, _T_42) @[EXU.scala 96:8]
    io.out.bits.decode.cf.redirect.valid <= _T_43.valid @[EXU.scala 95:34]
    io.out.bits.decode.cf.redirect.rtype <= _T_43.rtype @[EXU.scala 95:34]
    io.out.bits.decode.cf.redirect.target <= _T_43.target @[EXU.scala 95:34]
    node _T_44 = or(mou.io.redirect.valid, csr.io.redirect.valid) @[EXU.scala 99:31]
    node _T_45 = or(_T_44, alu.io.redirect.valid) @[EXU.scala 99:56]
    reg _T_46 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_47 = add(_T_46, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_48 = tail(_T_47, 1) @[GTimer.scala 25:12]
    _T_46 <= _T_48 @[GTimer.scala 25:7]
    wire _T_49 : UInt<1>
    _T_49 <= UInt<1>("h00")
    node _T_50 = and(_T_45, _T_49) @[Debug.scala 55:16]
    when _T_50 : @[Debug.scala 55:31]
      node _T_51 = asUInt(reset) @[Debug.scala 56:24]
      node _T_52 = eq(_T_51, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_52 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] EXU: ", _T_46) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_53 = asUInt(reset) @[Debug.scala 57:13]
      node _T_54 = eq(_T_53, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_54 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[REDIRECT] mou %x csr %x alu %x \n", mou.io.redirect.valid, csr.io.redirect.valid, alu.io.redirect.valid) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_55 = or(mou.io.redirect.valid, csr.io.redirect.valid) @[EXU.scala 100:31]
    node _T_56 = or(_T_55, alu.io.redirect.valid) @[EXU.scala 100:56]
    reg _T_57 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_58 = add(_T_57, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_59 = tail(_T_58, 1) @[GTimer.scala 25:12]
    _T_57 <= _T_59 @[GTimer.scala 25:7]
    wire _T_60 : UInt<1>
    _T_60 <= UInt<1>("h00")
    node _T_61 = and(_T_56, _T_60) @[Debug.scala 55:16]
    when _T_61 : @[Debug.scala 55:31]
      node _T_62 = asUInt(reset) @[Debug.scala 56:24]
      node _T_63 = eq(_T_62, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_63 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] EXU: ", _T_57) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_64 = asUInt(reset) @[Debug.scala 57:13]
      node _T_65 = eq(_T_64, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_65 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[REDIRECT] flush: %d mou %x csr %x alu %x\n", io.flush, mou.io.redirect.target, csr.io.redirect.target, alu.io.redirect.target) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_66 = eq(UInt<1>("h01"), io.in.bits.ctrl.fuType) @[Mux.scala 80:60]
    node _T_67 = mux(_T_66, lsu.io.out.valid, UInt<1>("h01")) @[Mux.scala 80:57]
    node _T_68 = eq(UInt<2>("h02"), io.in.bits.ctrl.fuType) @[Mux.scala 80:60]
    node _T_69 = mux(_T_68, mdu.io.out.valid, _T_67) @[Mux.scala 80:57]
    node _T_70 = and(io.in.valid, _T_69) @[EXU.scala 103:31]
    io.out.valid <= _T_70 @[EXU.scala 103:16]
    io.out.bits.commits[UInt<1>("h00")] <= alu.io.out.bits @[EXU.scala 108:35]
    io.out.bits.commits[UInt<1>("h01")] <= lsu.io.out.bits @[EXU.scala 109:35]
    io.out.bits.commits[UInt<2>("h03")] <= csr.io.out.bits @[EXU.scala 110:35]
    io.out.bits.commits[UInt<2>("h02")] <= mdu.io.out.bits @[EXU.scala 111:35]
    io.out.bits.commits[UInt<3>("h04")] <= UInt<1>("h00") @[EXU.scala 112:35]
    node _T_71 = eq(io.in.valid, UInt<1>("h00")) @[EXU.scala 114:18]
    node _T_72 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_73 = or(_T_71, _T_72) @[EXU.scala 114:31]
    io.in.ready <= _T_73 @[EXU.scala 114:15]
    io.forward.valid <= io.in.valid @[EXU.scala 116:20]
    io.forward.wb.rfWen <= io.in.bits.ctrl.rfWen @[EXU.scala 117:23]
    io.forward.wb.rfDest <= io.in.bits.ctrl.rfDest @[EXU.scala 118:24]
    node _T_74 = and(alu.io.out.ready, alu.io.out.valid) @[Decoupled.scala 40:37]
    node _T_75 = mux(_T_74, alu.io.out.bits, lsu.io.out.bits) @[EXU.scala 119:30]
    io.forward.wb.rfData <= _T_75 @[EXU.scala 119:24]
    io.forward.fuType <= io.in.bits.ctrl.fuType @[EXU.scala 120:21]
    node isBru = bits(io.in.bits.ctrl.fuOpType, 4, 4) @[ALU.scala 61:31]
    node _T_76 = and(alu.io.out.ready, alu.io.out.valid) @[Decoupled.scala 40:37]
    node _T_77 = eq(isBru, UInt<1>("h00")) @[EXU.scala 123:46]
    node _T_78 = and(_T_76, _T_77) @[EXU.scala 123:43]
    node _T_79 = and(alu.io.out.ready, alu.io.out.valid) @[Decoupled.scala 40:37]
    node _T_80 = and(_T_79, isBru) @[EXU.scala 124:43]
    node _T_81 = and(lsu.io.out.ready, lsu.io.out.valid) @[Decoupled.scala 40:37]
    node _T_82 = and(mdu.io.out.ready, mdu.io.out.valid) @[Decoupled.scala 40:37]
    node _T_83 = and(csr.io.out.ready, csr.io.out.valid) @[Decoupled.scala 40:37]
    
  module WBU : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {decode : {cf : {instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>}, ctrl : {src1Type : UInt<1>, src2Type : UInt<1>, fuType : UInt<3>, fuOpType : UInt<7>, rfSrc1 : UInt<5>, rfSrc2 : UInt<5>, rfWen : UInt<1>, rfDest : UInt<5>, isNutCoreTrap : UInt<1>, isSrc1Forward : UInt<1>, isSrc2Forward : UInt<1>, noSpecExec : UInt<1>, isBlocked : UInt<1>}, data : {src1 : UInt<64>, src2 : UInt<64>, imm : UInt<64>}}, isMMIO : UInt<1>, intrNO : UInt<64>, commits : UInt<64>[5]}}, wb : {rfWen : UInt<1>, rfDest : UInt<5>, rfData : UInt<64>}, redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}}
    
    node _T = and(io.in.bits.decode.ctrl.rfWen, io.in.valid) @[WBU.scala 31:47]
    io.wb.rfWen <= _T @[WBU.scala 31:15]
    io.wb.rfDest <= io.in.bits.decode.ctrl.rfDest @[WBU.scala 32:16]
    io.wb.rfData <= io.in.bits.commits[io.in.bits.decode.ctrl.fuType] @[WBU.scala 33:16]
    io.in.ready <= UInt<1>("h01") @[WBU.scala 35:15]
    io.redirect.valid <= io.in.bits.decode.cf.redirect.valid @[WBU.scala 37:15]
    io.redirect.rtype <= io.in.bits.decode.cf.redirect.rtype @[WBU.scala 37:15]
    io.redirect.target <= io.in.bits.decode.cf.redirect.target @[WBU.scala 37:15]
    node _T_1 = and(io.in.bits.decode.cf.redirect.valid, io.in.valid) @[WBU.scala 38:60]
    io.redirect.valid <= _T_1 @[WBU.scala 38:21]
    reg _T_2 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_3 = add(_T_2, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_4 = tail(_T_3, 1) @[GTimer.scala 25:12]
    _T_2 <= _T_4 @[GTimer.scala 25:7]
    wire _T_5 : UInt<1>
    _T_5 <= UInt<1>("h00")
    node _T_6 = and(io.in.valid, _T_5) @[Debug.scala 55:16]
    when _T_6 : @[Debug.scala 55:31]
      node _T_7 = asUInt(reset) @[Debug.scala 56:24]
      node _T_8 = eq(_T_7, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_8 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] WBU: ", _T_2) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_9 = asUInt(reset) @[Debug.scala 57:13]
      node _T_10 = eq(_T_9, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_10 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[COMMIT] pc = 0x%x inst %x wen %x wdst %x wdata %x mmio %x intrNO %x\n", io.in.bits.decode.cf.pc, io.in.bits.decode.cf.instr, io.wb.rfWen, io.wb.rfDest, io.wb.rfData, io.in.bits.isMMIO, io.in.bits.intrNO) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    wire falseWire : UInt<1>
    falseWire <= UInt<1>("h00")
    
  module Backend_inorder : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {cf : {instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>}, ctrl : {src1Type : UInt<1>, src2Type : UInt<1>, fuType : UInt<3>, fuOpType : UInt<7>, rfSrc1 : UInt<5>, rfSrc2 : UInt<5>, rfWen : UInt<1>, rfDest : UInt<5>, isNutCoreTrap : UInt<1>, isSrc1Forward : UInt<1>, isSrc2Forward : UInt<1>, noSpecExec : UInt<1>, isBlocked : UInt<1>}, data : {src1 : UInt<64>, src2 : UInt<64>, imm : UInt<64>}}}[2], flip flush : UInt<2>, dmem : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<39>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}, flip memMMU : {imem : {flip priviledgeMode : UInt<2>, flip status_sum : UInt<1>, flip status_mxr : UInt<1>, loadPF : UInt<1>, storePF : UInt<1>, addr : UInt<39>}, dmem : {flip priviledgeMode : UInt<2>, flip status_sum : UInt<1>, flip status_mxr : UInt<1>, loadPF : UInt<1>, storePF : UInt<1>, addr : UInt<39>}}, redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}}
    
    inst isu of ISU @[Backend.scala 675:20]
    isu.clock <= clock
    isu.reset <= reset
    inst exu of EXU @[Backend.scala 676:20]
    exu.clock <= clock
    exu.reset <= reset
    inst wbu of WBU @[Backend.scala 677:20]
    wbu.clock <= clock
    wbu.reset <= reset
    node _T = and(exu.io.out.ready, exu.io.out.valid) @[Decoupled.scala 40:37]
    node _T_1 = bits(io.flush, 0, 0) @[Backend.scala 679:69]
    reg _T_2 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Pipeline.scala 24:24]
    when _T : @[Pipeline.scala 25:25]
      _T_2 <= UInt<1>("h00") @[Pipeline.scala 25:33]
      skip @[Pipeline.scala 25:25]
    node _T_3 = and(isu.io.out.valid, exu.io.in.ready) @[Pipeline.scala 26:22]
    when _T_3 : @[Pipeline.scala 26:38]
      _T_2 <= UInt<1>("h01") @[Pipeline.scala 26:46]
      skip @[Pipeline.scala 26:38]
    when _T_1 : @[Pipeline.scala 27:20]
      _T_2 <= UInt<1>("h00") @[Pipeline.scala 27:28]
      skip @[Pipeline.scala 27:20]
    isu.io.out.ready <= exu.io.in.ready @[Pipeline.scala 29:16]
    node _T_4 = and(isu.io.out.valid, exu.io.in.ready) @[Pipeline.scala 30:51]
    reg _T_5 : {cf : {instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>}, ctrl : {src1Type : UInt<1>, src2Type : UInt<1>, fuType : UInt<3>, fuOpType : UInt<7>, rfSrc1 : UInt<5>, rfSrc2 : UInt<5>, rfWen : UInt<1>, rfDest : UInt<5>, isNutCoreTrap : UInt<1>, isSrc1Forward : UInt<1>, isSrc2Forward : UInt<1>, noSpecExec : UInt<1>, isBlocked : UInt<1>}, data : {src1 : UInt<64>, src2 : UInt<64>, imm : UInt<64>}}, clock @[Reg.scala 15:16]
    when _T_4 : @[Reg.scala 16:19]
      _T_5.data.imm <= isu.io.out.bits.data.imm @[Reg.scala 16:23]
      _T_5.data.src2 <= isu.io.out.bits.data.src2 @[Reg.scala 16:23]
      _T_5.data.src1 <= isu.io.out.bits.data.src1 @[Reg.scala 16:23]
      _T_5.ctrl.isBlocked <= isu.io.out.bits.ctrl.isBlocked @[Reg.scala 16:23]
      _T_5.ctrl.noSpecExec <= isu.io.out.bits.ctrl.noSpecExec @[Reg.scala 16:23]
      _T_5.ctrl.isSrc2Forward <= isu.io.out.bits.ctrl.isSrc2Forward @[Reg.scala 16:23]
      _T_5.ctrl.isSrc1Forward <= isu.io.out.bits.ctrl.isSrc1Forward @[Reg.scala 16:23]
      _T_5.ctrl.isNutCoreTrap <= isu.io.out.bits.ctrl.isNutCoreTrap @[Reg.scala 16:23]
      _T_5.ctrl.rfDest <= isu.io.out.bits.ctrl.rfDest @[Reg.scala 16:23]
      _T_5.ctrl.rfWen <= isu.io.out.bits.ctrl.rfWen @[Reg.scala 16:23]
      _T_5.ctrl.rfSrc2 <= isu.io.out.bits.ctrl.rfSrc2 @[Reg.scala 16:23]
      _T_5.ctrl.rfSrc1 <= isu.io.out.bits.ctrl.rfSrc1 @[Reg.scala 16:23]
      _T_5.ctrl.fuOpType <= isu.io.out.bits.ctrl.fuOpType @[Reg.scala 16:23]
      _T_5.ctrl.fuType <= isu.io.out.bits.ctrl.fuType @[Reg.scala 16:23]
      _T_5.ctrl.src2Type <= isu.io.out.bits.ctrl.src2Type @[Reg.scala 16:23]
      _T_5.ctrl.src1Type <= isu.io.out.bits.ctrl.src1Type @[Reg.scala 16:23]
      _T_5.cf.crossPageIPFFix <= isu.io.out.bits.cf.crossPageIPFFix @[Reg.scala 16:23]
      _T_5.cf.isRVC <= isu.io.out.bits.cf.isRVC @[Reg.scala 16:23]
      _T_5.cf.brIdx <= isu.io.out.bits.cf.brIdx @[Reg.scala 16:23]
      _T_5.cf.intrVec[0] <= isu.io.out.bits.cf.intrVec[0] @[Reg.scala 16:23]
      _T_5.cf.intrVec[1] <= isu.io.out.bits.cf.intrVec[1] @[Reg.scala 16:23]
      _T_5.cf.intrVec[2] <= isu.io.out.bits.cf.intrVec[2] @[Reg.scala 16:23]
      _T_5.cf.intrVec[3] <= isu.io.out.bits.cf.intrVec[3] @[Reg.scala 16:23]
      _T_5.cf.intrVec[4] <= isu.io.out.bits.cf.intrVec[4] @[Reg.scala 16:23]
      _T_5.cf.intrVec[5] <= isu.io.out.bits.cf.intrVec[5] @[Reg.scala 16:23]
      _T_5.cf.intrVec[6] <= isu.io.out.bits.cf.intrVec[6] @[Reg.scala 16:23]
      _T_5.cf.intrVec[7] <= isu.io.out.bits.cf.intrVec[7] @[Reg.scala 16:23]
      _T_5.cf.intrVec[8] <= isu.io.out.bits.cf.intrVec[8] @[Reg.scala 16:23]
      _T_5.cf.intrVec[9] <= isu.io.out.bits.cf.intrVec[9] @[Reg.scala 16:23]
      _T_5.cf.intrVec[10] <= isu.io.out.bits.cf.intrVec[10] @[Reg.scala 16:23]
      _T_5.cf.intrVec[11] <= isu.io.out.bits.cf.intrVec[11] @[Reg.scala 16:23]
      _T_5.cf.exceptionVec[0] <= isu.io.out.bits.cf.exceptionVec[0] @[Reg.scala 16:23]
      _T_5.cf.exceptionVec[1] <= isu.io.out.bits.cf.exceptionVec[1] @[Reg.scala 16:23]
      _T_5.cf.exceptionVec[2] <= isu.io.out.bits.cf.exceptionVec[2] @[Reg.scala 16:23]
      _T_5.cf.exceptionVec[3] <= isu.io.out.bits.cf.exceptionVec[3] @[Reg.scala 16:23]
      _T_5.cf.exceptionVec[4] <= isu.io.out.bits.cf.exceptionVec[4] @[Reg.scala 16:23]
      _T_5.cf.exceptionVec[5] <= isu.io.out.bits.cf.exceptionVec[5] @[Reg.scala 16:23]
      _T_5.cf.exceptionVec[6] <= isu.io.out.bits.cf.exceptionVec[6] @[Reg.scala 16:23]
      _T_5.cf.exceptionVec[7] <= isu.io.out.bits.cf.exceptionVec[7] @[Reg.scala 16:23]
      _T_5.cf.exceptionVec[8] <= isu.io.out.bits.cf.exceptionVec[8] @[Reg.scala 16:23]
      _T_5.cf.exceptionVec[9] <= isu.io.out.bits.cf.exceptionVec[9] @[Reg.scala 16:23]
      _T_5.cf.exceptionVec[10] <= isu.io.out.bits.cf.exceptionVec[10] @[Reg.scala 16:23]
      _T_5.cf.exceptionVec[11] <= isu.io.out.bits.cf.exceptionVec[11] @[Reg.scala 16:23]
      _T_5.cf.exceptionVec[12] <= isu.io.out.bits.cf.exceptionVec[12] @[Reg.scala 16:23]
      _T_5.cf.exceptionVec[13] <= isu.io.out.bits.cf.exceptionVec[13] @[Reg.scala 16:23]
      _T_5.cf.exceptionVec[14] <= isu.io.out.bits.cf.exceptionVec[14] @[Reg.scala 16:23]
      _T_5.cf.exceptionVec[15] <= isu.io.out.bits.cf.exceptionVec[15] @[Reg.scala 16:23]
      _T_5.cf.redirect.valid <= isu.io.out.bits.cf.redirect.valid @[Reg.scala 16:23]
      _T_5.cf.redirect.rtype <= isu.io.out.bits.cf.redirect.rtype @[Reg.scala 16:23]
      _T_5.cf.redirect.target <= isu.io.out.bits.cf.redirect.target @[Reg.scala 16:23]
      _T_5.cf.pnpc <= isu.io.out.bits.cf.pnpc @[Reg.scala 16:23]
      _T_5.cf.pc <= isu.io.out.bits.cf.pc @[Reg.scala 16:23]
      _T_5.cf.instr <= isu.io.out.bits.cf.instr @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    exu.io.in.bits.data.imm <= _T_5.data.imm @[Pipeline.scala 30:16]
    exu.io.in.bits.data.src2 <= _T_5.data.src2 @[Pipeline.scala 30:16]
    exu.io.in.bits.data.src1 <= _T_5.data.src1 @[Pipeline.scala 30:16]
    exu.io.in.bits.ctrl.isBlocked <= _T_5.ctrl.isBlocked @[Pipeline.scala 30:16]
    exu.io.in.bits.ctrl.noSpecExec <= _T_5.ctrl.noSpecExec @[Pipeline.scala 30:16]
    exu.io.in.bits.ctrl.isSrc2Forward <= _T_5.ctrl.isSrc2Forward @[Pipeline.scala 30:16]
    exu.io.in.bits.ctrl.isSrc1Forward <= _T_5.ctrl.isSrc1Forward @[Pipeline.scala 30:16]
    exu.io.in.bits.ctrl.isNutCoreTrap <= _T_5.ctrl.isNutCoreTrap @[Pipeline.scala 30:16]
    exu.io.in.bits.ctrl.rfDest <= _T_5.ctrl.rfDest @[Pipeline.scala 30:16]
    exu.io.in.bits.ctrl.rfWen <= _T_5.ctrl.rfWen @[Pipeline.scala 30:16]
    exu.io.in.bits.ctrl.rfSrc2 <= _T_5.ctrl.rfSrc2 @[Pipeline.scala 30:16]
    exu.io.in.bits.ctrl.rfSrc1 <= _T_5.ctrl.rfSrc1 @[Pipeline.scala 30:16]
    exu.io.in.bits.ctrl.fuOpType <= _T_5.ctrl.fuOpType @[Pipeline.scala 30:16]
    exu.io.in.bits.ctrl.fuType <= _T_5.ctrl.fuType @[Pipeline.scala 30:16]
    exu.io.in.bits.ctrl.src2Type <= _T_5.ctrl.src2Type @[Pipeline.scala 30:16]
    exu.io.in.bits.ctrl.src1Type <= _T_5.ctrl.src1Type @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.crossPageIPFFix <= _T_5.cf.crossPageIPFFix @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.isRVC <= _T_5.cf.isRVC @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.brIdx <= _T_5.cf.brIdx @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.intrVec[0] <= _T_5.cf.intrVec[0] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.intrVec[1] <= _T_5.cf.intrVec[1] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.intrVec[2] <= _T_5.cf.intrVec[2] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.intrVec[3] <= _T_5.cf.intrVec[3] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.intrVec[4] <= _T_5.cf.intrVec[4] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.intrVec[5] <= _T_5.cf.intrVec[5] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.intrVec[6] <= _T_5.cf.intrVec[6] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.intrVec[7] <= _T_5.cf.intrVec[7] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.intrVec[8] <= _T_5.cf.intrVec[8] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.intrVec[9] <= _T_5.cf.intrVec[9] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.intrVec[10] <= _T_5.cf.intrVec[10] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.intrVec[11] <= _T_5.cf.intrVec[11] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.exceptionVec[0] <= _T_5.cf.exceptionVec[0] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.exceptionVec[1] <= _T_5.cf.exceptionVec[1] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.exceptionVec[2] <= _T_5.cf.exceptionVec[2] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.exceptionVec[3] <= _T_5.cf.exceptionVec[3] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.exceptionVec[4] <= _T_5.cf.exceptionVec[4] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.exceptionVec[5] <= _T_5.cf.exceptionVec[5] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.exceptionVec[6] <= _T_5.cf.exceptionVec[6] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.exceptionVec[7] <= _T_5.cf.exceptionVec[7] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.exceptionVec[8] <= _T_5.cf.exceptionVec[8] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.exceptionVec[9] <= _T_5.cf.exceptionVec[9] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.exceptionVec[10] <= _T_5.cf.exceptionVec[10] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.exceptionVec[11] <= _T_5.cf.exceptionVec[11] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.exceptionVec[12] <= _T_5.cf.exceptionVec[12] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.exceptionVec[13] <= _T_5.cf.exceptionVec[13] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.exceptionVec[14] <= _T_5.cf.exceptionVec[14] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.exceptionVec[15] <= _T_5.cf.exceptionVec[15] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.redirect.valid <= _T_5.cf.redirect.valid @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.redirect.rtype <= _T_5.cf.redirect.rtype @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.redirect.target <= _T_5.cf.redirect.target @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.pnpc <= _T_5.cf.pnpc @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.pc <= _T_5.cf.pc @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.instr <= _T_5.cf.instr @[Pipeline.scala 30:16]
    exu.io.in.valid <= _T_2 @[Pipeline.scala 31:17]
    node _T_6 = bits(io.flush, 1, 1) @[Backend.scala 680:58]
    reg _T_7 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Pipeline.scala 24:24]
    when UInt<1>("h01") : @[Pipeline.scala 25:25]
      _T_7 <= UInt<1>("h00") @[Pipeline.scala 25:33]
      skip @[Pipeline.scala 25:25]
    node _T_8 = and(exu.io.out.valid, wbu.io.in.ready) @[Pipeline.scala 26:22]
    when _T_8 : @[Pipeline.scala 26:38]
      _T_7 <= UInt<1>("h01") @[Pipeline.scala 26:46]
      skip @[Pipeline.scala 26:38]
    when _T_6 : @[Pipeline.scala 27:20]
      _T_7 <= UInt<1>("h00") @[Pipeline.scala 27:28]
      skip @[Pipeline.scala 27:20]
    exu.io.out.ready <= wbu.io.in.ready @[Pipeline.scala 29:16]
    node _T_9 = and(exu.io.out.valid, wbu.io.in.ready) @[Pipeline.scala 30:51]
    reg _T_10 : {decode : {cf : {instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>}, ctrl : {src1Type : UInt<1>, src2Type : UInt<1>, fuType : UInt<3>, fuOpType : UInt<7>, rfSrc1 : UInt<5>, rfSrc2 : UInt<5>, rfWen : UInt<1>, rfDest : UInt<5>, isNutCoreTrap : UInt<1>, isSrc1Forward : UInt<1>, isSrc2Forward : UInt<1>, noSpecExec : UInt<1>, isBlocked : UInt<1>}, data : {src1 : UInt<64>, src2 : UInt<64>, imm : UInt<64>}}, isMMIO : UInt<1>, intrNO : UInt<64>, commits : UInt<64>[5]}, clock @[Reg.scala 15:16]
    when _T_9 : @[Reg.scala 16:19]
      _T_10.commits[0] <= exu.io.out.bits.commits[0] @[Reg.scala 16:23]
      _T_10.commits[1] <= exu.io.out.bits.commits[1] @[Reg.scala 16:23]
      _T_10.commits[2] <= exu.io.out.bits.commits[2] @[Reg.scala 16:23]
      _T_10.commits[3] <= exu.io.out.bits.commits[3] @[Reg.scala 16:23]
      _T_10.commits[4] <= exu.io.out.bits.commits[4] @[Reg.scala 16:23]
      _T_10.intrNO <= exu.io.out.bits.intrNO @[Reg.scala 16:23]
      _T_10.isMMIO <= exu.io.out.bits.isMMIO @[Reg.scala 16:23]
      _T_10.decode.data.imm <= exu.io.out.bits.decode.data.imm @[Reg.scala 16:23]
      _T_10.decode.data.src2 <= exu.io.out.bits.decode.data.src2 @[Reg.scala 16:23]
      _T_10.decode.data.src1 <= exu.io.out.bits.decode.data.src1 @[Reg.scala 16:23]
      _T_10.decode.ctrl.isBlocked <= exu.io.out.bits.decode.ctrl.isBlocked @[Reg.scala 16:23]
      _T_10.decode.ctrl.noSpecExec <= exu.io.out.bits.decode.ctrl.noSpecExec @[Reg.scala 16:23]
      _T_10.decode.ctrl.isSrc2Forward <= exu.io.out.bits.decode.ctrl.isSrc2Forward @[Reg.scala 16:23]
      _T_10.decode.ctrl.isSrc1Forward <= exu.io.out.bits.decode.ctrl.isSrc1Forward @[Reg.scala 16:23]
      _T_10.decode.ctrl.isNutCoreTrap <= exu.io.out.bits.decode.ctrl.isNutCoreTrap @[Reg.scala 16:23]
      _T_10.decode.ctrl.rfDest <= exu.io.out.bits.decode.ctrl.rfDest @[Reg.scala 16:23]
      _T_10.decode.ctrl.rfWen <= exu.io.out.bits.decode.ctrl.rfWen @[Reg.scala 16:23]
      _T_10.decode.ctrl.rfSrc2 <= exu.io.out.bits.decode.ctrl.rfSrc2 @[Reg.scala 16:23]
      _T_10.decode.ctrl.rfSrc1 <= exu.io.out.bits.decode.ctrl.rfSrc1 @[Reg.scala 16:23]
      _T_10.decode.ctrl.fuOpType <= exu.io.out.bits.decode.ctrl.fuOpType @[Reg.scala 16:23]
      _T_10.decode.ctrl.fuType <= exu.io.out.bits.decode.ctrl.fuType @[Reg.scala 16:23]
      _T_10.decode.ctrl.src2Type <= exu.io.out.bits.decode.ctrl.src2Type @[Reg.scala 16:23]
      _T_10.decode.ctrl.src1Type <= exu.io.out.bits.decode.ctrl.src1Type @[Reg.scala 16:23]
      _T_10.decode.cf.crossPageIPFFix <= exu.io.out.bits.decode.cf.crossPageIPFFix @[Reg.scala 16:23]
      _T_10.decode.cf.isRVC <= exu.io.out.bits.decode.cf.isRVC @[Reg.scala 16:23]
      _T_10.decode.cf.brIdx <= exu.io.out.bits.decode.cf.brIdx @[Reg.scala 16:23]
      _T_10.decode.cf.intrVec[0] <= exu.io.out.bits.decode.cf.intrVec[0] @[Reg.scala 16:23]
      _T_10.decode.cf.intrVec[1] <= exu.io.out.bits.decode.cf.intrVec[1] @[Reg.scala 16:23]
      _T_10.decode.cf.intrVec[2] <= exu.io.out.bits.decode.cf.intrVec[2] @[Reg.scala 16:23]
      _T_10.decode.cf.intrVec[3] <= exu.io.out.bits.decode.cf.intrVec[3] @[Reg.scala 16:23]
      _T_10.decode.cf.intrVec[4] <= exu.io.out.bits.decode.cf.intrVec[4] @[Reg.scala 16:23]
      _T_10.decode.cf.intrVec[5] <= exu.io.out.bits.decode.cf.intrVec[5] @[Reg.scala 16:23]
      _T_10.decode.cf.intrVec[6] <= exu.io.out.bits.decode.cf.intrVec[6] @[Reg.scala 16:23]
      _T_10.decode.cf.intrVec[7] <= exu.io.out.bits.decode.cf.intrVec[7] @[Reg.scala 16:23]
      _T_10.decode.cf.intrVec[8] <= exu.io.out.bits.decode.cf.intrVec[8] @[Reg.scala 16:23]
      _T_10.decode.cf.intrVec[9] <= exu.io.out.bits.decode.cf.intrVec[9] @[Reg.scala 16:23]
      _T_10.decode.cf.intrVec[10] <= exu.io.out.bits.decode.cf.intrVec[10] @[Reg.scala 16:23]
      _T_10.decode.cf.intrVec[11] <= exu.io.out.bits.decode.cf.intrVec[11] @[Reg.scala 16:23]
      _T_10.decode.cf.exceptionVec[0] <= exu.io.out.bits.decode.cf.exceptionVec[0] @[Reg.scala 16:23]
      _T_10.decode.cf.exceptionVec[1] <= exu.io.out.bits.decode.cf.exceptionVec[1] @[Reg.scala 16:23]
      _T_10.decode.cf.exceptionVec[2] <= exu.io.out.bits.decode.cf.exceptionVec[2] @[Reg.scala 16:23]
      _T_10.decode.cf.exceptionVec[3] <= exu.io.out.bits.decode.cf.exceptionVec[3] @[Reg.scala 16:23]
      _T_10.decode.cf.exceptionVec[4] <= exu.io.out.bits.decode.cf.exceptionVec[4] @[Reg.scala 16:23]
      _T_10.decode.cf.exceptionVec[5] <= exu.io.out.bits.decode.cf.exceptionVec[5] @[Reg.scala 16:23]
      _T_10.decode.cf.exceptionVec[6] <= exu.io.out.bits.decode.cf.exceptionVec[6] @[Reg.scala 16:23]
      _T_10.decode.cf.exceptionVec[7] <= exu.io.out.bits.decode.cf.exceptionVec[7] @[Reg.scala 16:23]
      _T_10.decode.cf.exceptionVec[8] <= exu.io.out.bits.decode.cf.exceptionVec[8] @[Reg.scala 16:23]
      _T_10.decode.cf.exceptionVec[9] <= exu.io.out.bits.decode.cf.exceptionVec[9] @[Reg.scala 16:23]
      _T_10.decode.cf.exceptionVec[10] <= exu.io.out.bits.decode.cf.exceptionVec[10] @[Reg.scala 16:23]
      _T_10.decode.cf.exceptionVec[11] <= exu.io.out.bits.decode.cf.exceptionVec[11] @[Reg.scala 16:23]
      _T_10.decode.cf.exceptionVec[12] <= exu.io.out.bits.decode.cf.exceptionVec[12] @[Reg.scala 16:23]
      _T_10.decode.cf.exceptionVec[13] <= exu.io.out.bits.decode.cf.exceptionVec[13] @[Reg.scala 16:23]
      _T_10.decode.cf.exceptionVec[14] <= exu.io.out.bits.decode.cf.exceptionVec[14] @[Reg.scala 16:23]
      _T_10.decode.cf.exceptionVec[15] <= exu.io.out.bits.decode.cf.exceptionVec[15] @[Reg.scala 16:23]
      _T_10.decode.cf.redirect.valid <= exu.io.out.bits.decode.cf.redirect.valid @[Reg.scala 16:23]
      _T_10.decode.cf.redirect.rtype <= exu.io.out.bits.decode.cf.redirect.rtype @[Reg.scala 16:23]
      _T_10.decode.cf.redirect.target <= exu.io.out.bits.decode.cf.redirect.target @[Reg.scala 16:23]
      _T_10.decode.cf.pnpc <= exu.io.out.bits.decode.cf.pnpc @[Reg.scala 16:23]
      _T_10.decode.cf.pc <= exu.io.out.bits.decode.cf.pc @[Reg.scala 16:23]
      _T_10.decode.cf.instr <= exu.io.out.bits.decode.cf.instr @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    wbu.io.in.bits.commits[0] <= _T_10.commits[0] @[Pipeline.scala 30:16]
    wbu.io.in.bits.commits[1] <= _T_10.commits[1] @[Pipeline.scala 30:16]
    wbu.io.in.bits.commits[2] <= _T_10.commits[2] @[Pipeline.scala 30:16]
    wbu.io.in.bits.commits[3] <= _T_10.commits[3] @[Pipeline.scala 30:16]
    wbu.io.in.bits.commits[4] <= _T_10.commits[4] @[Pipeline.scala 30:16]
    wbu.io.in.bits.intrNO <= _T_10.intrNO @[Pipeline.scala 30:16]
    wbu.io.in.bits.isMMIO <= _T_10.isMMIO @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.data.imm <= _T_10.decode.data.imm @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.data.src2 <= _T_10.decode.data.src2 @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.data.src1 <= _T_10.decode.data.src1 @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.ctrl.isBlocked <= _T_10.decode.ctrl.isBlocked @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.ctrl.noSpecExec <= _T_10.decode.ctrl.noSpecExec @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.ctrl.isSrc2Forward <= _T_10.decode.ctrl.isSrc2Forward @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.ctrl.isSrc1Forward <= _T_10.decode.ctrl.isSrc1Forward @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.ctrl.isNutCoreTrap <= _T_10.decode.ctrl.isNutCoreTrap @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.ctrl.rfDest <= _T_10.decode.ctrl.rfDest @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.ctrl.rfWen <= _T_10.decode.ctrl.rfWen @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.ctrl.rfSrc2 <= _T_10.decode.ctrl.rfSrc2 @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.ctrl.rfSrc1 <= _T_10.decode.ctrl.rfSrc1 @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.ctrl.fuOpType <= _T_10.decode.ctrl.fuOpType @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.ctrl.fuType <= _T_10.decode.ctrl.fuType @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.ctrl.src2Type <= _T_10.decode.ctrl.src2Type @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.ctrl.src1Type <= _T_10.decode.ctrl.src1Type @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.crossPageIPFFix <= _T_10.decode.cf.crossPageIPFFix @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.isRVC <= _T_10.decode.cf.isRVC @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.brIdx <= _T_10.decode.cf.brIdx @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.intrVec[0] <= _T_10.decode.cf.intrVec[0] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.intrVec[1] <= _T_10.decode.cf.intrVec[1] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.intrVec[2] <= _T_10.decode.cf.intrVec[2] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.intrVec[3] <= _T_10.decode.cf.intrVec[3] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.intrVec[4] <= _T_10.decode.cf.intrVec[4] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.intrVec[5] <= _T_10.decode.cf.intrVec[5] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.intrVec[6] <= _T_10.decode.cf.intrVec[6] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.intrVec[7] <= _T_10.decode.cf.intrVec[7] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.intrVec[8] <= _T_10.decode.cf.intrVec[8] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.intrVec[9] <= _T_10.decode.cf.intrVec[9] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.intrVec[10] <= _T_10.decode.cf.intrVec[10] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.intrVec[11] <= _T_10.decode.cf.intrVec[11] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.exceptionVec[0] <= _T_10.decode.cf.exceptionVec[0] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.exceptionVec[1] <= _T_10.decode.cf.exceptionVec[1] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.exceptionVec[2] <= _T_10.decode.cf.exceptionVec[2] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.exceptionVec[3] <= _T_10.decode.cf.exceptionVec[3] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.exceptionVec[4] <= _T_10.decode.cf.exceptionVec[4] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.exceptionVec[5] <= _T_10.decode.cf.exceptionVec[5] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.exceptionVec[6] <= _T_10.decode.cf.exceptionVec[6] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.exceptionVec[7] <= _T_10.decode.cf.exceptionVec[7] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.exceptionVec[8] <= _T_10.decode.cf.exceptionVec[8] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.exceptionVec[9] <= _T_10.decode.cf.exceptionVec[9] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.exceptionVec[10] <= _T_10.decode.cf.exceptionVec[10] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.exceptionVec[11] <= _T_10.decode.cf.exceptionVec[11] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.exceptionVec[12] <= _T_10.decode.cf.exceptionVec[12] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.exceptionVec[13] <= _T_10.decode.cf.exceptionVec[13] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.exceptionVec[14] <= _T_10.decode.cf.exceptionVec[14] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.exceptionVec[15] <= _T_10.decode.cf.exceptionVec[15] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.redirect.valid <= _T_10.decode.cf.redirect.valid @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.redirect.rtype <= _T_10.decode.cf.redirect.rtype @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.redirect.target <= _T_10.decode.cf.redirect.target @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.pnpc <= _T_10.decode.cf.pnpc @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.pc <= _T_10.decode.cf.pc @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.instr <= _T_10.decode.cf.instr @[Pipeline.scala 30:16]
    wbu.io.in.valid <= _T_7 @[Pipeline.scala 31:17]
    isu.io.in[0].bits.data.imm <= io.in[0].bits.data.imm @[Backend.scala 682:13]
    isu.io.in[0].bits.data.src2 <= io.in[0].bits.data.src2 @[Backend.scala 682:13]
    isu.io.in[0].bits.data.src1 <= io.in[0].bits.data.src1 @[Backend.scala 682:13]
    isu.io.in[0].bits.ctrl.isBlocked <= io.in[0].bits.ctrl.isBlocked @[Backend.scala 682:13]
    isu.io.in[0].bits.ctrl.noSpecExec <= io.in[0].bits.ctrl.noSpecExec @[Backend.scala 682:13]
    isu.io.in[0].bits.ctrl.isSrc2Forward <= io.in[0].bits.ctrl.isSrc2Forward @[Backend.scala 682:13]
    isu.io.in[0].bits.ctrl.isSrc1Forward <= io.in[0].bits.ctrl.isSrc1Forward @[Backend.scala 682:13]
    isu.io.in[0].bits.ctrl.isNutCoreTrap <= io.in[0].bits.ctrl.isNutCoreTrap @[Backend.scala 682:13]
    isu.io.in[0].bits.ctrl.rfDest <= io.in[0].bits.ctrl.rfDest @[Backend.scala 682:13]
    isu.io.in[0].bits.ctrl.rfWen <= io.in[0].bits.ctrl.rfWen @[Backend.scala 682:13]
    isu.io.in[0].bits.ctrl.rfSrc2 <= io.in[0].bits.ctrl.rfSrc2 @[Backend.scala 682:13]
    isu.io.in[0].bits.ctrl.rfSrc1 <= io.in[0].bits.ctrl.rfSrc1 @[Backend.scala 682:13]
    isu.io.in[0].bits.ctrl.fuOpType <= io.in[0].bits.ctrl.fuOpType @[Backend.scala 682:13]
    isu.io.in[0].bits.ctrl.fuType <= io.in[0].bits.ctrl.fuType @[Backend.scala 682:13]
    isu.io.in[0].bits.ctrl.src2Type <= io.in[0].bits.ctrl.src2Type @[Backend.scala 682:13]
    isu.io.in[0].bits.ctrl.src1Type <= io.in[0].bits.ctrl.src1Type @[Backend.scala 682:13]
    isu.io.in[0].bits.cf.crossPageIPFFix <= io.in[0].bits.cf.crossPageIPFFix @[Backend.scala 682:13]
    isu.io.in[0].bits.cf.isRVC <= io.in[0].bits.cf.isRVC @[Backend.scala 682:13]
    isu.io.in[0].bits.cf.brIdx <= io.in[0].bits.cf.brIdx @[Backend.scala 682:13]
    isu.io.in[0].bits.cf.intrVec[0] <= io.in[0].bits.cf.intrVec[0] @[Backend.scala 682:13]
    isu.io.in[0].bits.cf.intrVec[1] <= io.in[0].bits.cf.intrVec[1] @[Backend.scala 682:13]
    isu.io.in[0].bits.cf.intrVec[2] <= io.in[0].bits.cf.intrVec[2] @[Backend.scala 682:13]
    isu.io.in[0].bits.cf.intrVec[3] <= io.in[0].bits.cf.intrVec[3] @[Backend.scala 682:13]
    isu.io.in[0].bits.cf.intrVec[4] <= io.in[0].bits.cf.intrVec[4] @[Backend.scala 682:13]
    isu.io.in[0].bits.cf.intrVec[5] <= io.in[0].bits.cf.intrVec[5] @[Backend.scala 682:13]
    isu.io.in[0].bits.cf.intrVec[6] <= io.in[0].bits.cf.intrVec[6] @[Backend.scala 682:13]
    isu.io.in[0].bits.cf.intrVec[7] <= io.in[0].bits.cf.intrVec[7] @[Backend.scala 682:13]
    isu.io.in[0].bits.cf.intrVec[8] <= io.in[0].bits.cf.intrVec[8] @[Backend.scala 682:13]
    isu.io.in[0].bits.cf.intrVec[9] <= io.in[0].bits.cf.intrVec[9] @[Backend.scala 682:13]
    isu.io.in[0].bits.cf.intrVec[10] <= io.in[0].bits.cf.intrVec[10] @[Backend.scala 682:13]
    isu.io.in[0].bits.cf.intrVec[11] <= io.in[0].bits.cf.intrVec[11] @[Backend.scala 682:13]
    isu.io.in[0].bits.cf.exceptionVec[0] <= io.in[0].bits.cf.exceptionVec[0] @[Backend.scala 682:13]
    isu.io.in[0].bits.cf.exceptionVec[1] <= io.in[0].bits.cf.exceptionVec[1] @[Backend.scala 682:13]
    isu.io.in[0].bits.cf.exceptionVec[2] <= io.in[0].bits.cf.exceptionVec[2] @[Backend.scala 682:13]
    isu.io.in[0].bits.cf.exceptionVec[3] <= io.in[0].bits.cf.exceptionVec[3] @[Backend.scala 682:13]
    isu.io.in[0].bits.cf.exceptionVec[4] <= io.in[0].bits.cf.exceptionVec[4] @[Backend.scala 682:13]
    isu.io.in[0].bits.cf.exceptionVec[5] <= io.in[0].bits.cf.exceptionVec[5] @[Backend.scala 682:13]
    isu.io.in[0].bits.cf.exceptionVec[6] <= io.in[0].bits.cf.exceptionVec[6] @[Backend.scala 682:13]
    isu.io.in[0].bits.cf.exceptionVec[7] <= io.in[0].bits.cf.exceptionVec[7] @[Backend.scala 682:13]
    isu.io.in[0].bits.cf.exceptionVec[8] <= io.in[0].bits.cf.exceptionVec[8] @[Backend.scala 682:13]
    isu.io.in[0].bits.cf.exceptionVec[9] <= io.in[0].bits.cf.exceptionVec[9] @[Backend.scala 682:13]
    isu.io.in[0].bits.cf.exceptionVec[10] <= io.in[0].bits.cf.exceptionVec[10] @[Backend.scala 682:13]
    isu.io.in[0].bits.cf.exceptionVec[11] <= io.in[0].bits.cf.exceptionVec[11] @[Backend.scala 682:13]
    isu.io.in[0].bits.cf.exceptionVec[12] <= io.in[0].bits.cf.exceptionVec[12] @[Backend.scala 682:13]
    isu.io.in[0].bits.cf.exceptionVec[13] <= io.in[0].bits.cf.exceptionVec[13] @[Backend.scala 682:13]
    isu.io.in[0].bits.cf.exceptionVec[14] <= io.in[0].bits.cf.exceptionVec[14] @[Backend.scala 682:13]
    isu.io.in[0].bits.cf.exceptionVec[15] <= io.in[0].bits.cf.exceptionVec[15] @[Backend.scala 682:13]
    isu.io.in[0].bits.cf.redirect.valid <= io.in[0].bits.cf.redirect.valid @[Backend.scala 682:13]
    isu.io.in[0].bits.cf.redirect.rtype <= io.in[0].bits.cf.redirect.rtype @[Backend.scala 682:13]
    isu.io.in[0].bits.cf.redirect.target <= io.in[0].bits.cf.redirect.target @[Backend.scala 682:13]
    isu.io.in[0].bits.cf.pnpc <= io.in[0].bits.cf.pnpc @[Backend.scala 682:13]
    isu.io.in[0].bits.cf.pc <= io.in[0].bits.cf.pc @[Backend.scala 682:13]
    isu.io.in[0].bits.cf.instr <= io.in[0].bits.cf.instr @[Backend.scala 682:13]
    isu.io.in[0].valid <= io.in[0].valid @[Backend.scala 682:13]
    io.in[0].ready <= isu.io.in[0].ready @[Backend.scala 682:13]
    isu.io.in[1].bits.data.imm <= io.in[1].bits.data.imm @[Backend.scala 682:13]
    isu.io.in[1].bits.data.src2 <= io.in[1].bits.data.src2 @[Backend.scala 682:13]
    isu.io.in[1].bits.data.src1 <= io.in[1].bits.data.src1 @[Backend.scala 682:13]
    isu.io.in[1].bits.ctrl.isBlocked <= io.in[1].bits.ctrl.isBlocked @[Backend.scala 682:13]
    isu.io.in[1].bits.ctrl.noSpecExec <= io.in[1].bits.ctrl.noSpecExec @[Backend.scala 682:13]
    isu.io.in[1].bits.ctrl.isSrc2Forward <= io.in[1].bits.ctrl.isSrc2Forward @[Backend.scala 682:13]
    isu.io.in[1].bits.ctrl.isSrc1Forward <= io.in[1].bits.ctrl.isSrc1Forward @[Backend.scala 682:13]
    isu.io.in[1].bits.ctrl.isNutCoreTrap <= io.in[1].bits.ctrl.isNutCoreTrap @[Backend.scala 682:13]
    isu.io.in[1].bits.ctrl.rfDest <= io.in[1].bits.ctrl.rfDest @[Backend.scala 682:13]
    isu.io.in[1].bits.ctrl.rfWen <= io.in[1].bits.ctrl.rfWen @[Backend.scala 682:13]
    isu.io.in[1].bits.ctrl.rfSrc2 <= io.in[1].bits.ctrl.rfSrc2 @[Backend.scala 682:13]
    isu.io.in[1].bits.ctrl.rfSrc1 <= io.in[1].bits.ctrl.rfSrc1 @[Backend.scala 682:13]
    isu.io.in[1].bits.ctrl.fuOpType <= io.in[1].bits.ctrl.fuOpType @[Backend.scala 682:13]
    isu.io.in[1].bits.ctrl.fuType <= io.in[1].bits.ctrl.fuType @[Backend.scala 682:13]
    isu.io.in[1].bits.ctrl.src2Type <= io.in[1].bits.ctrl.src2Type @[Backend.scala 682:13]
    isu.io.in[1].bits.ctrl.src1Type <= io.in[1].bits.ctrl.src1Type @[Backend.scala 682:13]
    isu.io.in[1].bits.cf.crossPageIPFFix <= io.in[1].bits.cf.crossPageIPFFix @[Backend.scala 682:13]
    isu.io.in[1].bits.cf.isRVC <= io.in[1].bits.cf.isRVC @[Backend.scala 682:13]
    isu.io.in[1].bits.cf.brIdx <= io.in[1].bits.cf.brIdx @[Backend.scala 682:13]
    isu.io.in[1].bits.cf.intrVec[0] <= io.in[1].bits.cf.intrVec[0] @[Backend.scala 682:13]
    isu.io.in[1].bits.cf.intrVec[1] <= io.in[1].bits.cf.intrVec[1] @[Backend.scala 682:13]
    isu.io.in[1].bits.cf.intrVec[2] <= io.in[1].bits.cf.intrVec[2] @[Backend.scala 682:13]
    isu.io.in[1].bits.cf.intrVec[3] <= io.in[1].bits.cf.intrVec[3] @[Backend.scala 682:13]
    isu.io.in[1].bits.cf.intrVec[4] <= io.in[1].bits.cf.intrVec[4] @[Backend.scala 682:13]
    isu.io.in[1].bits.cf.intrVec[5] <= io.in[1].bits.cf.intrVec[5] @[Backend.scala 682:13]
    isu.io.in[1].bits.cf.intrVec[6] <= io.in[1].bits.cf.intrVec[6] @[Backend.scala 682:13]
    isu.io.in[1].bits.cf.intrVec[7] <= io.in[1].bits.cf.intrVec[7] @[Backend.scala 682:13]
    isu.io.in[1].bits.cf.intrVec[8] <= io.in[1].bits.cf.intrVec[8] @[Backend.scala 682:13]
    isu.io.in[1].bits.cf.intrVec[9] <= io.in[1].bits.cf.intrVec[9] @[Backend.scala 682:13]
    isu.io.in[1].bits.cf.intrVec[10] <= io.in[1].bits.cf.intrVec[10] @[Backend.scala 682:13]
    isu.io.in[1].bits.cf.intrVec[11] <= io.in[1].bits.cf.intrVec[11] @[Backend.scala 682:13]
    isu.io.in[1].bits.cf.exceptionVec[0] <= io.in[1].bits.cf.exceptionVec[0] @[Backend.scala 682:13]
    isu.io.in[1].bits.cf.exceptionVec[1] <= io.in[1].bits.cf.exceptionVec[1] @[Backend.scala 682:13]
    isu.io.in[1].bits.cf.exceptionVec[2] <= io.in[1].bits.cf.exceptionVec[2] @[Backend.scala 682:13]
    isu.io.in[1].bits.cf.exceptionVec[3] <= io.in[1].bits.cf.exceptionVec[3] @[Backend.scala 682:13]
    isu.io.in[1].bits.cf.exceptionVec[4] <= io.in[1].bits.cf.exceptionVec[4] @[Backend.scala 682:13]
    isu.io.in[1].bits.cf.exceptionVec[5] <= io.in[1].bits.cf.exceptionVec[5] @[Backend.scala 682:13]
    isu.io.in[1].bits.cf.exceptionVec[6] <= io.in[1].bits.cf.exceptionVec[6] @[Backend.scala 682:13]
    isu.io.in[1].bits.cf.exceptionVec[7] <= io.in[1].bits.cf.exceptionVec[7] @[Backend.scala 682:13]
    isu.io.in[1].bits.cf.exceptionVec[8] <= io.in[1].bits.cf.exceptionVec[8] @[Backend.scala 682:13]
    isu.io.in[1].bits.cf.exceptionVec[9] <= io.in[1].bits.cf.exceptionVec[9] @[Backend.scala 682:13]
    isu.io.in[1].bits.cf.exceptionVec[10] <= io.in[1].bits.cf.exceptionVec[10] @[Backend.scala 682:13]
    isu.io.in[1].bits.cf.exceptionVec[11] <= io.in[1].bits.cf.exceptionVec[11] @[Backend.scala 682:13]
    isu.io.in[1].bits.cf.exceptionVec[12] <= io.in[1].bits.cf.exceptionVec[12] @[Backend.scala 682:13]
    isu.io.in[1].bits.cf.exceptionVec[13] <= io.in[1].bits.cf.exceptionVec[13] @[Backend.scala 682:13]
    isu.io.in[1].bits.cf.exceptionVec[14] <= io.in[1].bits.cf.exceptionVec[14] @[Backend.scala 682:13]
    isu.io.in[1].bits.cf.exceptionVec[15] <= io.in[1].bits.cf.exceptionVec[15] @[Backend.scala 682:13]
    isu.io.in[1].bits.cf.redirect.valid <= io.in[1].bits.cf.redirect.valid @[Backend.scala 682:13]
    isu.io.in[1].bits.cf.redirect.rtype <= io.in[1].bits.cf.redirect.rtype @[Backend.scala 682:13]
    isu.io.in[1].bits.cf.redirect.target <= io.in[1].bits.cf.redirect.target @[Backend.scala 682:13]
    isu.io.in[1].bits.cf.pnpc <= io.in[1].bits.cf.pnpc @[Backend.scala 682:13]
    isu.io.in[1].bits.cf.pc <= io.in[1].bits.cf.pc @[Backend.scala 682:13]
    isu.io.in[1].bits.cf.instr <= io.in[1].bits.cf.instr @[Backend.scala 682:13]
    isu.io.in[1].valid <= io.in[1].valid @[Backend.scala 682:13]
    io.in[1].ready <= isu.io.in[1].ready @[Backend.scala 682:13]
    node _T_11 = bits(io.flush, 0, 0) @[Backend.scala 684:27]
    isu.io.flush <= _T_11 @[Backend.scala 684:16]
    node _T_12 = bits(io.flush, 1, 1) @[Backend.scala 685:27]
    exu.io.flush <= _T_12 @[Backend.scala 685:16]
    isu.io.wb.rfData <= wbu.io.wb.rfData @[Backend.scala 687:13]
    isu.io.wb.rfDest <= wbu.io.wb.rfDest @[Backend.scala 687:13]
    isu.io.wb.rfWen <= wbu.io.wb.rfWen @[Backend.scala 687:13]
    io.redirect.valid <= wbu.io.redirect.valid @[Backend.scala 688:15]
    io.redirect.rtype <= wbu.io.redirect.rtype @[Backend.scala 688:15]
    io.redirect.target <= wbu.io.redirect.target @[Backend.scala 688:15]
    isu.io.forward.fuType <= exu.io.forward.fuType @[Backend.scala 690:18]
    isu.io.forward.wb.rfData <= exu.io.forward.wb.rfData @[Backend.scala 690:18]
    isu.io.forward.wb.rfDest <= exu.io.forward.wb.rfDest @[Backend.scala 690:18]
    isu.io.forward.wb.rfWen <= exu.io.forward.wb.rfWen @[Backend.scala 690:18]
    isu.io.forward.valid <= exu.io.forward.valid @[Backend.scala 690:18]
    exu.io.memMMU.imem.addr <= io.memMMU.imem.addr @[Backend.scala 692:18]
    exu.io.memMMU.imem.storePF <= io.memMMU.imem.storePF @[Backend.scala 692:18]
    exu.io.memMMU.imem.loadPF <= io.memMMU.imem.loadPF @[Backend.scala 692:18]
    io.memMMU.imem.status_mxr <= exu.io.memMMU.imem.status_mxr @[Backend.scala 692:18]
    io.memMMU.imem.status_sum <= exu.io.memMMU.imem.status_sum @[Backend.scala 692:18]
    io.memMMU.imem.priviledgeMode <= exu.io.memMMU.imem.priviledgeMode @[Backend.scala 692:18]
    exu.io.memMMU.dmem.addr <= io.memMMU.dmem.addr @[Backend.scala 693:18]
    exu.io.memMMU.dmem.storePF <= io.memMMU.dmem.storePF @[Backend.scala 693:18]
    exu.io.memMMU.dmem.loadPF <= io.memMMU.dmem.loadPF @[Backend.scala 693:18]
    io.memMMU.dmem.status_mxr <= exu.io.memMMU.dmem.status_mxr @[Backend.scala 693:18]
    io.memMMU.dmem.status_sum <= exu.io.memMMU.dmem.status_sum @[Backend.scala 693:18]
    io.memMMU.dmem.priviledgeMode <= exu.io.memMMU.dmem.priviledgeMode @[Backend.scala 693:18]
    exu.io.dmem.resp.bits.rdata <= io.dmem.resp.bits.rdata @[Backend.scala 694:11]
    exu.io.dmem.resp.bits.cmd <= io.dmem.resp.bits.cmd @[Backend.scala 694:11]
    exu.io.dmem.resp.valid <= io.dmem.resp.valid @[Backend.scala 694:11]
    io.dmem.resp.ready <= exu.io.dmem.resp.ready @[Backend.scala 694:11]
    io.dmem.req.bits.wdata <= exu.io.dmem.req.bits.wdata @[Backend.scala 694:11]
    io.dmem.req.bits.wmask <= exu.io.dmem.req.bits.wmask @[Backend.scala 694:11]
    io.dmem.req.bits.cmd <= exu.io.dmem.req.bits.cmd @[Backend.scala 694:11]
    io.dmem.req.bits.size <= exu.io.dmem.req.bits.size @[Backend.scala 694:11]
    io.dmem.req.bits.addr <= exu.io.dmem.req.bits.addr @[Backend.scala 694:11]
    io.dmem.req.valid <= exu.io.dmem.req.valid @[Backend.scala 694:11]
    exu.io.dmem.req.ready <= io.dmem.req.ready @[Backend.scala 694:11]
    
  module LockingArbiter : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}[2], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, chosen : UInt<1>}
    
    wire choice : UInt
    choice <= UInt<1>("h01")
    io.chosen <= choice @[Arbiter.scala 40:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 41:16]
    io.out.bits.wdata <= io.in[io.chosen].bits.wdata @[Arbiter.scala 42:15]
    io.out.bits.wmask <= io.in[io.chosen].bits.wmask @[Arbiter.scala 42:15]
    io.out.bits.cmd <= io.in[io.chosen].bits.cmd @[Arbiter.scala 42:15]
    io.out.bits.size <= io.in[io.chosen].bits.size @[Arbiter.scala 42:15]
    io.out.bits.addr <= io.in[io.chosen].bits.addr @[Arbiter.scala 42:15]
    reg value : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Counter.scala 29:33]
    reg _T : UInt, clock @[Arbiter.scala 46:22]
    node _T_1 = neq(value, UInt<1>("h00")) @[Arbiter.scala 47:34]
    node _T_2 = bits(io.out.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_3 = bits(io.out.bits.cmd, 1, 1) @[SimpleBus.scala 75:22]
    node _T_4 = and(_T_2, _T_3) @[Crossbar.scala 100:62]
    node _T_5 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_6 = and(_T_5, _T_4) @[Arbiter.scala 50:25]
    when _T_6 : @[Arbiter.scala 50:39]
      _T <= io.chosen @[Arbiter.scala 51:15]
      node _T_7 = eq(value, UInt<3>("h07")) @[Counter.scala 38:24]
      node _T_8 = add(value, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_9 = tail(_T_8, 1) @[Counter.scala 39:22]
      value <= _T_9 @[Counter.scala 39:13]
      skip @[Arbiter.scala 50:39]
    when _T_1 : @[Arbiter.scala 55:19]
      io.chosen <= _T @[Arbiter.scala 55:31]
      skip @[Arbiter.scala 55:19]
    node _T_10 = eq(io.in[0].valid, UInt<1>("h00")) @[Arbiter.scala 31:78]
    node _T_11 = eq(_T, UInt<1>("h00")) @[Arbiter.scala 57:39]
    node _T_12 = mux(_T_1, _T_11, UInt<1>("h01")) @[Arbiter.scala 57:22]
    node _T_13 = and(_T_12, io.out.ready) @[Arbiter.scala 57:56]
    io.in[0].ready <= _T_13 @[Arbiter.scala 57:16]
    node _T_14 = eq(_T, UInt<1>("h01")) @[Arbiter.scala 57:39]
    node _T_15 = mux(_T_1, _T_14, _T_10) @[Arbiter.scala 57:22]
    node _T_16 = and(_T_15, io.out.ready) @[Arbiter.scala 57:56]
    io.in[1].ready <= _T_16 @[Arbiter.scala 57:16]
    when io.in[0].valid : @[Arbiter.scala 88:27]
      choice <= UInt<1>("h00") @[Arbiter.scala 88:36]
      skip @[Arbiter.scala 88:27]
    
  module SimpleBusCrossbarNto1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}[2], out : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}}
    
    reg state : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Crossbar.scala 98:22]
    inst inputArb of LockingArbiter @[Crossbar.scala 101:24]
    inputArb.clock <= clock
    inputArb.reset <= reset
    inputArb.io.in[0].bits.wdata <= io.in[0].req.bits.wdata @[Crossbar.scala 102:68]
    inputArb.io.in[0].bits.wmask <= io.in[0].req.bits.wmask @[Crossbar.scala 102:68]
    inputArb.io.in[0].bits.cmd <= io.in[0].req.bits.cmd @[Crossbar.scala 102:68]
    inputArb.io.in[0].bits.size <= io.in[0].req.bits.size @[Crossbar.scala 102:68]
    inputArb.io.in[0].bits.addr <= io.in[0].req.bits.addr @[Crossbar.scala 102:68]
    inputArb.io.in[0].valid <= io.in[0].req.valid @[Crossbar.scala 102:68]
    io.in[0].req.ready <= inputArb.io.in[0].ready @[Crossbar.scala 102:68]
    inputArb.io.in[1].bits.wdata <= io.in[1].req.bits.wdata @[Crossbar.scala 102:68]
    inputArb.io.in[1].bits.wmask <= io.in[1].req.bits.wmask @[Crossbar.scala 102:68]
    inputArb.io.in[1].bits.cmd <= io.in[1].req.bits.cmd @[Crossbar.scala 102:68]
    inputArb.io.in[1].bits.size <= io.in[1].req.bits.size @[Crossbar.scala 102:68]
    inputArb.io.in[1].bits.addr <= io.in[1].req.bits.addr @[Crossbar.scala 102:68]
    inputArb.io.in[1].valid <= io.in[1].req.valid @[Crossbar.scala 102:68]
    io.in[1].req.ready <= inputArb.io.in[1].ready @[Crossbar.scala 102:68]
    node _T = bits(inputArb.io.out.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_1 = eq(_T, UInt<1>("h00")) @[SimpleBus.scala 73:18]
    node _T_2 = bits(inputArb.io.out.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SimpleBus.scala 73:29]
    node _T_4 = and(_T_1, _T_3) @[SimpleBus.scala 73:26]
    node _T_5 = eq(_T_4, UInt<1>("h00")) @[Crossbar.scala 104:29]
    node _T_6 = and(inputArb.io.out.valid, _T_5) @[Crossbar.scala 104:26]
    node _T_7 = bits(inputArb.io.out.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_8 = eq(_T_7, UInt<1>("h00")) @[Crossbar.scala 104:55]
    node _T_9 = and(_T_6, _T_8) @[Crossbar.scala 104:52]
    node _T_10 = eq(_T_9, UInt<1>("h00")) @[Crossbar.scala 104:10]
    node _T_11 = asUInt(reset) @[Crossbar.scala 104:9]
    node _T_12 = or(_T_10, _T_11) @[Crossbar.scala 104:9]
    node _T_13 = eq(_T_12, UInt<1>("h00")) @[Crossbar.scala 104:9]
    when _T_13 : @[Crossbar.scala 104:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at Crossbar.scala:104 assert(!(thisReq.valid && !thisReq.bits.isRead() && !thisReq.bits.isWrite()))\n") @[Crossbar.scala 104:9]
      stop(clock, UInt<1>(1), 1) @[Crossbar.scala 104:9]
      skip @[Crossbar.scala 104:9]
    reg inflightSrc : UInt<1>, clock @[Crossbar.scala 105:24]
    io.out.req.bits.wdata <= inputArb.io.out.bits.wdata @[Crossbar.scala 107:19]
    io.out.req.bits.wmask <= inputArb.io.out.bits.wmask @[Crossbar.scala 107:19]
    io.out.req.bits.cmd <= inputArb.io.out.bits.cmd @[Crossbar.scala 107:19]
    io.out.req.bits.size <= inputArb.io.out.bits.size @[Crossbar.scala 107:19]
    io.out.req.bits.addr <= inputArb.io.out.bits.addr @[Crossbar.scala 107:19]
    node _T_14 = eq(state, UInt<2>("h00")) @[Crossbar.scala 109:47]
    node _T_15 = and(inputArb.io.out.valid, _T_14) @[Crossbar.scala 109:37]
    io.out.req.valid <= _T_15 @[Crossbar.scala 109:20]
    node _T_16 = eq(state, UInt<2>("h00")) @[Crossbar.scala 110:47]
    node _T_17 = and(io.out.req.ready, _T_16) @[Crossbar.scala 110:37]
    inputArb.io.out.ready <= _T_17 @[Crossbar.scala 110:17]
    io.in[0].resp.bits.rdata <= io.out.resp.bits.rdata @[Crossbar.scala 112:25]
    io.in[0].resp.bits.cmd <= io.out.resp.bits.cmd @[Crossbar.scala 112:25]
    io.in[1].resp.bits.rdata <= io.out.resp.bits.rdata @[Crossbar.scala 112:25]
    io.in[1].resp.bits.cmd <= io.out.resp.bits.cmd @[Crossbar.scala 112:25]
    io.in[0].resp.valid <= UInt<1>("h00") @[Crossbar.scala 113:26]
    io.in[1].resp.valid <= UInt<1>("h00") @[Crossbar.scala 113:26]
    io.in[inflightSrc].resp.valid <= io.out.resp.valid @[Crossbar.scala 115:13]
    io.out.resp.ready <= io.in[inflightSrc].resp.ready @[Crossbar.scala 116:13]
    node _T_18 = eq(UInt<2>("h00"), state) @[Conditional.scala 37:30]
    when _T_18 : @[Conditional.scala 40:58]
      node _T_19 = and(inputArb.io.out.ready, inputArb.io.out.valid) @[Decoupled.scala 40:37]
      when _T_19 : @[Crossbar.scala 121:29]
        inflightSrc <= inputArb.io.chosen @[Crossbar.scala 122:21]
        node _T_20 = bits(inputArb.io.out.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
        node _T_21 = eq(_T_20, UInt<1>("h00")) @[SimpleBus.scala 73:18]
        node _T_22 = bits(inputArb.io.out.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
        node _T_23 = eq(_T_22, UInt<1>("h00")) @[SimpleBus.scala 73:29]
        node _T_24 = and(_T_21, _T_23) @[SimpleBus.scala 73:26]
        when _T_24 : @[Crossbar.scala 123:38]
          state <= UInt<2>("h01") @[Crossbar.scala 123:46]
          skip @[Crossbar.scala 123:38]
        else : @[Crossbar.scala 124:80]
          node _T_25 = eq(inputArb.io.out.bits.cmd, UInt<3>("h07")) @[SimpleBus.scala 78:27]
          node _T_26 = eq(inputArb.io.out.bits.cmd, UInt<1>("h01")) @[SimpleBus.scala 77:29]
          node _T_27 = or(_T_25, _T_26) @[Crossbar.scala 124:47]
          when _T_27 : @[Crossbar.scala 124:80]
            state <= UInt<2>("h02") @[Crossbar.scala 124:88]
            skip @[Crossbar.scala 124:80]
        skip @[Crossbar.scala 121:29]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_28 = eq(UInt<2>("h01"), state) @[Conditional.scala 37:30]
      when _T_28 : @[Conditional.scala 39:67]
        node _T_29 = and(io.out.resp.ready, io.out.resp.valid) @[Decoupled.scala 40:37]
        node _T_30 = eq(io.out.resp.bits.cmd, UInt<3>("h06")) @[SimpleBus.scala 91:26]
        node _T_31 = and(_T_29, _T_30) @[Crossbar.scala 127:48]
        when _T_31 : @[Crossbar.scala 127:82]
          state <= UInt<2>("h00") @[Crossbar.scala 127:90]
          skip @[Crossbar.scala 127:82]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_32 = eq(UInt<2>("h02"), state) @[Conditional.scala 37:30]
        when _T_32 : @[Conditional.scala 39:67]
          node _T_33 = and(io.out.resp.ready, io.out.resp.valid) @[Decoupled.scala 40:37]
          when _T_33 : @[Crossbar.scala 128:50]
            state <= UInt<2>("h00") @[Crossbar.scala 128:58]
            skip @[Crossbar.scala 128:50]
          skip @[Conditional.scala 39:67]
    
  module LockingArbiter_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}[4], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, chosen : UInt<2>}
    
    wire choice : UInt
    choice <= UInt<2>("h03")
    io.chosen <= choice @[Arbiter.scala 40:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 41:16]
    io.out.bits.wdata <= io.in[io.chosen].bits.wdata @[Arbiter.scala 42:15]
    io.out.bits.wmask <= io.in[io.chosen].bits.wmask @[Arbiter.scala 42:15]
    io.out.bits.cmd <= io.in[io.chosen].bits.cmd @[Arbiter.scala 42:15]
    io.out.bits.size <= io.in[io.chosen].bits.size @[Arbiter.scala 42:15]
    io.out.bits.addr <= io.in[io.chosen].bits.addr @[Arbiter.scala 42:15]
    reg value : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Counter.scala 29:33]
    reg _T : UInt, clock @[Arbiter.scala 46:22]
    node _T_1 = neq(value, UInt<1>("h00")) @[Arbiter.scala 47:34]
    node _T_2 = bits(io.out.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_3 = bits(io.out.bits.cmd, 1, 1) @[SimpleBus.scala 75:22]
    node _T_4 = and(_T_2, _T_3) @[Crossbar.scala 100:62]
    node _T_5 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_6 = and(_T_5, _T_4) @[Arbiter.scala 50:25]
    when _T_6 : @[Arbiter.scala 50:39]
      _T <= io.chosen @[Arbiter.scala 51:15]
      node _T_7 = eq(value, UInt<3>("h07")) @[Counter.scala 38:24]
      node _T_8 = add(value, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_9 = tail(_T_8, 1) @[Counter.scala 39:22]
      value <= _T_9 @[Counter.scala 39:13]
      skip @[Arbiter.scala 50:39]
    when _T_1 : @[Arbiter.scala 55:19]
      io.chosen <= _T @[Arbiter.scala 55:31]
      skip @[Arbiter.scala 55:19]
    node _T_10 = or(io.in[0].valid, io.in[1].valid) @[Arbiter.scala 31:68]
    node _T_11 = or(_T_10, io.in[2].valid) @[Arbiter.scala 31:68]
    node _T_12 = eq(io.in[0].valid, UInt<1>("h00")) @[Arbiter.scala 31:78]
    node _T_13 = eq(_T_10, UInt<1>("h00")) @[Arbiter.scala 31:78]
    node _T_14 = eq(_T_11, UInt<1>("h00")) @[Arbiter.scala 31:78]
    node _T_15 = eq(_T, UInt<1>("h00")) @[Arbiter.scala 57:39]
    node _T_16 = mux(_T_1, _T_15, UInt<1>("h01")) @[Arbiter.scala 57:22]
    node _T_17 = and(_T_16, io.out.ready) @[Arbiter.scala 57:56]
    io.in[0].ready <= _T_17 @[Arbiter.scala 57:16]
    node _T_18 = eq(_T, UInt<1>("h01")) @[Arbiter.scala 57:39]
    node _T_19 = mux(_T_1, _T_18, _T_12) @[Arbiter.scala 57:22]
    node _T_20 = and(_T_19, io.out.ready) @[Arbiter.scala 57:56]
    io.in[1].ready <= _T_20 @[Arbiter.scala 57:16]
    node _T_21 = eq(_T, UInt<2>("h02")) @[Arbiter.scala 57:39]
    node _T_22 = mux(_T_1, _T_21, _T_13) @[Arbiter.scala 57:22]
    node _T_23 = and(_T_22, io.out.ready) @[Arbiter.scala 57:56]
    io.in[2].ready <= _T_23 @[Arbiter.scala 57:16]
    node _T_24 = eq(_T, UInt<2>("h03")) @[Arbiter.scala 57:39]
    node _T_25 = mux(_T_1, _T_24, _T_14) @[Arbiter.scala 57:22]
    node _T_26 = and(_T_25, io.out.ready) @[Arbiter.scala 57:56]
    io.in[3].ready <= _T_26 @[Arbiter.scala 57:16]
    when io.in[2].valid : @[Arbiter.scala 88:27]
      choice <= UInt<2>("h02") @[Arbiter.scala 88:36]
      skip @[Arbiter.scala 88:27]
    when io.in[1].valid : @[Arbiter.scala 88:27]
      choice <= UInt<1>("h01") @[Arbiter.scala 88:36]
      skip @[Arbiter.scala 88:27]
    when io.in[0].valid : @[Arbiter.scala 88:27]
      choice <= UInt<1>("h00") @[Arbiter.scala 88:36]
      skip @[Arbiter.scala 88:27]
    
  module SimpleBusCrossbarNto1_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}[4], out : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}}
    
    reg state : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Crossbar.scala 98:22]
    inst inputArb of LockingArbiter_1 @[Crossbar.scala 101:24]
    inputArb.clock <= clock
    inputArb.reset <= reset
    inputArb.io.in[0].bits.wdata <= io.in[0].req.bits.wdata @[Crossbar.scala 102:68]
    inputArb.io.in[0].bits.wmask <= io.in[0].req.bits.wmask @[Crossbar.scala 102:68]
    inputArb.io.in[0].bits.cmd <= io.in[0].req.bits.cmd @[Crossbar.scala 102:68]
    inputArb.io.in[0].bits.size <= io.in[0].req.bits.size @[Crossbar.scala 102:68]
    inputArb.io.in[0].bits.addr <= io.in[0].req.bits.addr @[Crossbar.scala 102:68]
    inputArb.io.in[0].valid <= io.in[0].req.valid @[Crossbar.scala 102:68]
    io.in[0].req.ready <= inputArb.io.in[0].ready @[Crossbar.scala 102:68]
    inputArb.io.in[1].bits.wdata <= io.in[1].req.bits.wdata @[Crossbar.scala 102:68]
    inputArb.io.in[1].bits.wmask <= io.in[1].req.bits.wmask @[Crossbar.scala 102:68]
    inputArb.io.in[1].bits.cmd <= io.in[1].req.bits.cmd @[Crossbar.scala 102:68]
    inputArb.io.in[1].bits.size <= io.in[1].req.bits.size @[Crossbar.scala 102:68]
    inputArb.io.in[1].bits.addr <= io.in[1].req.bits.addr @[Crossbar.scala 102:68]
    inputArb.io.in[1].valid <= io.in[1].req.valid @[Crossbar.scala 102:68]
    io.in[1].req.ready <= inputArb.io.in[1].ready @[Crossbar.scala 102:68]
    inputArb.io.in[2].bits.wdata <= io.in[2].req.bits.wdata @[Crossbar.scala 102:68]
    inputArb.io.in[2].bits.wmask <= io.in[2].req.bits.wmask @[Crossbar.scala 102:68]
    inputArb.io.in[2].bits.cmd <= io.in[2].req.bits.cmd @[Crossbar.scala 102:68]
    inputArb.io.in[2].bits.size <= io.in[2].req.bits.size @[Crossbar.scala 102:68]
    inputArb.io.in[2].bits.addr <= io.in[2].req.bits.addr @[Crossbar.scala 102:68]
    inputArb.io.in[2].valid <= io.in[2].req.valid @[Crossbar.scala 102:68]
    io.in[2].req.ready <= inputArb.io.in[2].ready @[Crossbar.scala 102:68]
    inputArb.io.in[3].bits.wdata <= io.in[3].req.bits.wdata @[Crossbar.scala 102:68]
    inputArb.io.in[3].bits.wmask <= io.in[3].req.bits.wmask @[Crossbar.scala 102:68]
    inputArb.io.in[3].bits.cmd <= io.in[3].req.bits.cmd @[Crossbar.scala 102:68]
    inputArb.io.in[3].bits.size <= io.in[3].req.bits.size @[Crossbar.scala 102:68]
    inputArb.io.in[3].bits.addr <= io.in[3].req.bits.addr @[Crossbar.scala 102:68]
    inputArb.io.in[3].valid <= io.in[3].req.valid @[Crossbar.scala 102:68]
    io.in[3].req.ready <= inputArb.io.in[3].ready @[Crossbar.scala 102:68]
    node _T = bits(inputArb.io.out.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_1 = eq(_T, UInt<1>("h00")) @[SimpleBus.scala 73:18]
    node _T_2 = bits(inputArb.io.out.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SimpleBus.scala 73:29]
    node _T_4 = and(_T_1, _T_3) @[SimpleBus.scala 73:26]
    node _T_5 = eq(_T_4, UInt<1>("h00")) @[Crossbar.scala 104:29]
    node _T_6 = and(inputArb.io.out.valid, _T_5) @[Crossbar.scala 104:26]
    node _T_7 = bits(inputArb.io.out.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_8 = eq(_T_7, UInt<1>("h00")) @[Crossbar.scala 104:55]
    node _T_9 = and(_T_6, _T_8) @[Crossbar.scala 104:52]
    node _T_10 = eq(_T_9, UInt<1>("h00")) @[Crossbar.scala 104:10]
    node _T_11 = asUInt(reset) @[Crossbar.scala 104:9]
    node _T_12 = or(_T_10, _T_11) @[Crossbar.scala 104:9]
    node _T_13 = eq(_T_12, UInt<1>("h00")) @[Crossbar.scala 104:9]
    when _T_13 : @[Crossbar.scala 104:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at Crossbar.scala:104 assert(!(thisReq.valid && !thisReq.bits.isRead() && !thisReq.bits.isWrite()))\n") @[Crossbar.scala 104:9]
      stop(clock, UInt<1>(1), 1) @[Crossbar.scala 104:9]
      skip @[Crossbar.scala 104:9]
    reg inflightSrc : UInt<2>, clock @[Crossbar.scala 105:24]
    io.out.req.bits.wdata <= inputArb.io.out.bits.wdata @[Crossbar.scala 107:19]
    io.out.req.bits.wmask <= inputArb.io.out.bits.wmask @[Crossbar.scala 107:19]
    io.out.req.bits.cmd <= inputArb.io.out.bits.cmd @[Crossbar.scala 107:19]
    io.out.req.bits.size <= inputArb.io.out.bits.size @[Crossbar.scala 107:19]
    io.out.req.bits.addr <= inputArb.io.out.bits.addr @[Crossbar.scala 107:19]
    node _T_14 = eq(state, UInt<2>("h00")) @[Crossbar.scala 109:47]
    node _T_15 = and(inputArb.io.out.valid, _T_14) @[Crossbar.scala 109:37]
    io.out.req.valid <= _T_15 @[Crossbar.scala 109:20]
    node _T_16 = eq(state, UInt<2>("h00")) @[Crossbar.scala 110:47]
    node _T_17 = and(io.out.req.ready, _T_16) @[Crossbar.scala 110:37]
    inputArb.io.out.ready <= _T_17 @[Crossbar.scala 110:17]
    io.in[0].resp.bits.rdata <= io.out.resp.bits.rdata @[Crossbar.scala 112:25]
    io.in[0].resp.bits.cmd <= io.out.resp.bits.cmd @[Crossbar.scala 112:25]
    io.in[1].resp.bits.rdata <= io.out.resp.bits.rdata @[Crossbar.scala 112:25]
    io.in[1].resp.bits.cmd <= io.out.resp.bits.cmd @[Crossbar.scala 112:25]
    io.in[2].resp.bits.rdata <= io.out.resp.bits.rdata @[Crossbar.scala 112:25]
    io.in[2].resp.bits.cmd <= io.out.resp.bits.cmd @[Crossbar.scala 112:25]
    io.in[3].resp.bits.rdata <= io.out.resp.bits.rdata @[Crossbar.scala 112:25]
    io.in[3].resp.bits.cmd <= io.out.resp.bits.cmd @[Crossbar.scala 112:25]
    io.in[0].resp.valid <= UInt<1>("h00") @[Crossbar.scala 113:26]
    io.in[1].resp.valid <= UInt<1>("h00") @[Crossbar.scala 113:26]
    io.in[2].resp.valid <= UInt<1>("h00") @[Crossbar.scala 113:26]
    io.in[3].resp.valid <= UInt<1>("h00") @[Crossbar.scala 113:26]
    io.in[inflightSrc].resp.valid <= io.out.resp.valid @[Crossbar.scala 115:13]
    io.out.resp.ready <= io.in[inflightSrc].resp.ready @[Crossbar.scala 116:13]
    node _T_18 = eq(UInt<2>("h00"), state) @[Conditional.scala 37:30]
    when _T_18 : @[Conditional.scala 40:58]
      node _T_19 = and(inputArb.io.out.ready, inputArb.io.out.valid) @[Decoupled.scala 40:37]
      when _T_19 : @[Crossbar.scala 121:29]
        inflightSrc <= inputArb.io.chosen @[Crossbar.scala 122:21]
        node _T_20 = bits(inputArb.io.out.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
        node _T_21 = eq(_T_20, UInt<1>("h00")) @[SimpleBus.scala 73:18]
        node _T_22 = bits(inputArb.io.out.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
        node _T_23 = eq(_T_22, UInt<1>("h00")) @[SimpleBus.scala 73:29]
        node _T_24 = and(_T_21, _T_23) @[SimpleBus.scala 73:26]
        when _T_24 : @[Crossbar.scala 123:38]
          state <= UInt<2>("h01") @[Crossbar.scala 123:46]
          skip @[Crossbar.scala 123:38]
        else : @[Crossbar.scala 124:80]
          node _T_25 = eq(inputArb.io.out.bits.cmd, UInt<3>("h07")) @[SimpleBus.scala 78:27]
          node _T_26 = eq(inputArb.io.out.bits.cmd, UInt<1>("h01")) @[SimpleBus.scala 77:29]
          node _T_27 = or(_T_25, _T_26) @[Crossbar.scala 124:47]
          when _T_27 : @[Crossbar.scala 124:80]
            state <= UInt<2>("h02") @[Crossbar.scala 124:88]
            skip @[Crossbar.scala 124:80]
        skip @[Crossbar.scala 121:29]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_28 = eq(UInt<2>("h01"), state) @[Conditional.scala 37:30]
      when _T_28 : @[Conditional.scala 39:67]
        node _T_29 = and(io.out.resp.ready, io.out.resp.valid) @[Decoupled.scala 40:37]
        node _T_30 = eq(io.out.resp.bits.cmd, UInt<3>("h06")) @[SimpleBus.scala 91:26]
        node _T_31 = and(_T_29, _T_30) @[Crossbar.scala 127:48]
        when _T_31 : @[Crossbar.scala 127:82]
          state <= UInt<2>("h00") @[Crossbar.scala 127:90]
          skip @[Crossbar.scala 127:82]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_32 = eq(UInt<2>("h02"), state) @[Conditional.scala 37:30]
        when _T_32 : @[Conditional.scala 39:67]
          node _T_33 = and(io.out.resp.ready, io.out.resp.valid) @[Decoupled.scala 40:37]
          when _T_33 : @[Crossbar.scala 128:50]
            state <= UInt<2>("h00") @[Crossbar.scala 128:58]
            skip @[Crossbar.scala 128:50]
          skip @[Conditional.scala 39:67]
    
  module EmbeddedTLBExec : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<39>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<87>}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<87>}}, flip md : UInt<121>[4], mdWrite : {wen : UInt<1>, windex : UInt<1>, waymask : UInt<4>, wdata : UInt<121>}, flip mdReady : UInt<1>, mem : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}, flip flush : UInt<1>, flip satp : UInt<64>, pf : {flip priviledgeMode : UInt<2>, flip status_sum : UInt<1>, flip status_mxr : UInt<1>, loadPF : UInt<1>, storePF : UInt<1>, addr : UInt<39>}, ipf : UInt<1>, isFinish : UInt<1>}
    
    wire _T : {vpn : UInt<27>, off : UInt<12>} @[EmbeddedTLB.scala 193:30]
    wire _T_1 : UInt<39>
    _T_1 <= io.in.bits.addr
    node _T_2 = bits(_T_1, 11, 0) @[EmbeddedTLB.scala 193:30]
    _T.off <= _T_2 @[EmbeddedTLB.scala 193:30]
    node _T_3 = bits(_T_1, 38, 12) @[EmbeddedTLB.scala 193:30]
    _T.vpn <= _T_3 @[EmbeddedTLB.scala 193:30]
    wire vpn : {vpn2 : UInt<9>, vpn1 : UInt<9>, vpn0 : UInt<9>} @[EmbeddedTLB.scala 193:54]
    wire _T_4 : UInt<27>
    _T_4 <= _T.vpn
    node _T_5 = bits(_T_4, 8, 0) @[EmbeddedTLB.scala 193:54]
    vpn.vpn0 <= _T_5 @[EmbeddedTLB.scala 193:54]
    node _T_6 = bits(_T_4, 17, 9) @[EmbeddedTLB.scala 193:54]
    vpn.vpn1 <= _T_6 @[EmbeddedTLB.scala 193:54]
    node _T_7 = bits(_T_4, 26, 18) @[EmbeddedTLB.scala 193:54]
    vpn.vpn2 <= _T_7 @[EmbeddedTLB.scala 193:54]
    wire satp : {mode : UInt<4>, asid : UInt<16>, res : UInt<24>, ppn : UInt<20>} @[EmbeddedTLB.scala 195:30]
    wire _T_8 : UInt<64>
    _T_8 <= io.satp
    node _T_9 = bits(_T_8, 19, 0) @[EmbeddedTLB.scala 195:30]
    satp.ppn <= _T_9 @[EmbeddedTLB.scala 195:30]
    node _T_10 = bits(_T_8, 43, 20) @[EmbeddedTLB.scala 195:30]
    satp.res <= _T_10 @[EmbeddedTLB.scala 195:30]
    node _T_11 = bits(_T_8, 59, 44) @[EmbeddedTLB.scala 195:30]
    satp.asid <= _T_11 @[EmbeddedTLB.scala 195:30]
    node _T_12 = bits(_T_8, 63, 60) @[EmbeddedTLB.scala 195:30]
    satp.mode <= _T_12 @[EmbeddedTLB.scala 195:30]
    io.pf.loadPF <= UInt<1>("h00") @[EmbeddedTLB.scala 199:13]
    io.pf.storePF <= UInt<1>("h00") @[EmbeddedTLB.scala 200:14]
    io.pf.addr <= io.in.bits.addr @[EmbeddedTLB.scala 201:11]
    wire _T_13 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 204:46]
    wire _T_14 : UInt<121>
    _T_14 <= io.md[0]
    node _T_15 = bits(_T_14, 31, 0) @[EmbeddedTLB.scala 204:46]
    _T_13.pteaddr <= _T_15 @[EmbeddedTLB.scala 204:46]
    node _T_16 = bits(_T_14, 51, 32) @[EmbeddedTLB.scala 204:46]
    _T_13.ppn <= _T_16 @[EmbeddedTLB.scala 204:46]
    node _T_17 = bits(_T_14, 59, 52) @[EmbeddedTLB.scala 204:46]
    _T_13.flag <= _T_17 @[EmbeddedTLB.scala 204:46]
    node _T_18 = bits(_T_14, 77, 60) @[EmbeddedTLB.scala 204:46]
    _T_13.mask <= _T_18 @[EmbeddedTLB.scala 204:46]
    node _T_19 = bits(_T_14, 93, 78) @[EmbeddedTLB.scala 204:46]
    _T_13.asid <= _T_19 @[EmbeddedTLB.scala 204:46]
    node _T_20 = bits(_T_14, 120, 94) @[EmbeddedTLB.scala 204:46]
    _T_13.vpn <= _T_20 @[EmbeddedTLB.scala 204:46]
    wire _T_21 : {d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>} @[EmbeddedTLB.scala 204:71]
    wire _T_22 : UInt<8>
    _T_22 <= _T_13.flag
    node _T_23 = bits(_T_22, 0, 0) @[EmbeddedTLB.scala 204:71]
    _T_21.v <= _T_23 @[EmbeddedTLB.scala 204:71]
    node _T_24 = bits(_T_22, 1, 1) @[EmbeddedTLB.scala 204:71]
    _T_21.r <= _T_24 @[EmbeddedTLB.scala 204:71]
    node _T_25 = bits(_T_22, 2, 2) @[EmbeddedTLB.scala 204:71]
    _T_21.w <= _T_25 @[EmbeddedTLB.scala 204:71]
    node _T_26 = bits(_T_22, 3, 3) @[EmbeddedTLB.scala 204:71]
    _T_21.x <= _T_26 @[EmbeddedTLB.scala 204:71]
    node _T_27 = bits(_T_22, 4, 4) @[EmbeddedTLB.scala 204:71]
    _T_21.u <= _T_27 @[EmbeddedTLB.scala 204:71]
    node _T_28 = bits(_T_22, 5, 5) @[EmbeddedTLB.scala 204:71]
    _T_21.g <= _T_28 @[EmbeddedTLB.scala 204:71]
    node _T_29 = bits(_T_22, 6, 6) @[EmbeddedTLB.scala 204:71]
    _T_21.a <= _T_29 @[EmbeddedTLB.scala 204:71]
    node _T_30 = bits(_T_22, 7, 7) @[EmbeddedTLB.scala 204:71]
    _T_21.d <= _T_30 @[EmbeddedTLB.scala 204:71]
    wire _T_31 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 204:100]
    wire _T_32 : UInt<121>
    _T_32 <= io.md[0]
    node _T_33 = bits(_T_32, 31, 0) @[EmbeddedTLB.scala 204:100]
    _T_31.pteaddr <= _T_33 @[EmbeddedTLB.scala 204:100]
    node _T_34 = bits(_T_32, 51, 32) @[EmbeddedTLB.scala 204:100]
    _T_31.ppn <= _T_34 @[EmbeddedTLB.scala 204:100]
    node _T_35 = bits(_T_32, 59, 52) @[EmbeddedTLB.scala 204:100]
    _T_31.flag <= _T_35 @[EmbeddedTLB.scala 204:100]
    node _T_36 = bits(_T_32, 77, 60) @[EmbeddedTLB.scala 204:100]
    _T_31.mask <= _T_36 @[EmbeddedTLB.scala 204:100]
    node _T_37 = bits(_T_32, 93, 78) @[EmbeddedTLB.scala 204:100]
    _T_31.asid <= _T_37 @[EmbeddedTLB.scala 204:100]
    node _T_38 = bits(_T_32, 120, 94) @[EmbeddedTLB.scala 204:100]
    _T_31.vpn <= _T_38 @[EmbeddedTLB.scala 204:100]
    node _T_39 = eq(_T_31.asid, satp.asid) @[EmbeddedTLB.scala 204:117]
    node _T_40 = and(_T_21.v, _T_39) @[EmbeddedTLB.scala 204:86]
    wire _T_41 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 204:152]
    wire _T_42 : UInt<121>
    _T_42 <= io.md[0]
    node _T_43 = bits(_T_42, 31, 0) @[EmbeddedTLB.scala 204:152]
    _T_41.pteaddr <= _T_43 @[EmbeddedTLB.scala 204:152]
    node _T_44 = bits(_T_42, 51, 32) @[EmbeddedTLB.scala 204:152]
    _T_41.ppn <= _T_44 @[EmbeddedTLB.scala 204:152]
    node _T_45 = bits(_T_42, 59, 52) @[EmbeddedTLB.scala 204:152]
    _T_41.flag <= _T_45 @[EmbeddedTLB.scala 204:152]
    node _T_46 = bits(_T_42, 77, 60) @[EmbeddedTLB.scala 204:152]
    _T_41.mask <= _T_46 @[EmbeddedTLB.scala 204:152]
    node _T_47 = bits(_T_42, 93, 78) @[EmbeddedTLB.scala 204:152]
    _T_41.asid <= _T_47 @[EmbeddedTLB.scala 204:152]
    node _T_48 = bits(_T_42, 120, 94) @[EmbeddedTLB.scala 204:152]
    _T_41.vpn <= _T_48 @[EmbeddedTLB.scala 204:152]
    wire _T_49 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 204:180]
    wire _T_50 : UInt<121>
    _T_50 <= io.md[0]
    node _T_51 = bits(_T_50, 31, 0) @[EmbeddedTLB.scala 204:180]
    _T_49.pteaddr <= _T_51 @[EmbeddedTLB.scala 204:180]
    node _T_52 = bits(_T_50, 51, 32) @[EmbeddedTLB.scala 204:180]
    _T_49.ppn <= _T_52 @[EmbeddedTLB.scala 204:180]
    node _T_53 = bits(_T_50, 59, 52) @[EmbeddedTLB.scala 204:180]
    _T_49.flag <= _T_53 @[EmbeddedTLB.scala 204:180]
    node _T_54 = bits(_T_50, 77, 60) @[EmbeddedTLB.scala 204:180]
    _T_49.mask <= _T_54 @[EmbeddedTLB.scala 204:180]
    node _T_55 = bits(_T_50, 93, 78) @[EmbeddedTLB.scala 204:180]
    _T_49.asid <= _T_55 @[EmbeddedTLB.scala 204:180]
    node _T_56 = bits(_T_50, 120, 94) @[EmbeddedTLB.scala 204:180]
    _T_49.vpn <= _T_56 @[EmbeddedTLB.scala 204:180]
    node _T_57 = cat(vpn.vpn2, vpn.vpn1) @[EmbeddedTLB.scala 204:201]
    node _T_58 = cat(_T_57, vpn.vpn0) @[EmbeddedTLB.scala 204:201]
    node _T_59 = cat(UInt<9>("h01ff"), _T_41.mask) @[Cat.scala 29:58]
    node _T_60 = and(_T_59, _T_49.vpn) @[TLB.scala 131:37]
    node _T_61 = cat(UInt<9>("h01ff"), _T_41.mask) @[Cat.scala 29:58]
    node _T_62 = and(_T_61, _T_58) @[TLB.scala 131:84]
    node _T_63 = eq(_T_60, _T_62) @[TLB.scala 131:48]
    node _T_64 = and(_T_40, _T_63) @[EmbeddedTLB.scala 204:132]
    wire _T_65 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 204:46]
    wire _T_66 : UInt<121>
    _T_66 <= io.md[1]
    node _T_67 = bits(_T_66, 31, 0) @[EmbeddedTLB.scala 204:46]
    _T_65.pteaddr <= _T_67 @[EmbeddedTLB.scala 204:46]
    node _T_68 = bits(_T_66, 51, 32) @[EmbeddedTLB.scala 204:46]
    _T_65.ppn <= _T_68 @[EmbeddedTLB.scala 204:46]
    node _T_69 = bits(_T_66, 59, 52) @[EmbeddedTLB.scala 204:46]
    _T_65.flag <= _T_69 @[EmbeddedTLB.scala 204:46]
    node _T_70 = bits(_T_66, 77, 60) @[EmbeddedTLB.scala 204:46]
    _T_65.mask <= _T_70 @[EmbeddedTLB.scala 204:46]
    node _T_71 = bits(_T_66, 93, 78) @[EmbeddedTLB.scala 204:46]
    _T_65.asid <= _T_71 @[EmbeddedTLB.scala 204:46]
    node _T_72 = bits(_T_66, 120, 94) @[EmbeddedTLB.scala 204:46]
    _T_65.vpn <= _T_72 @[EmbeddedTLB.scala 204:46]
    wire _T_73 : {d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>} @[EmbeddedTLB.scala 204:71]
    wire _T_74 : UInt<8>
    _T_74 <= _T_65.flag
    node _T_75 = bits(_T_74, 0, 0) @[EmbeddedTLB.scala 204:71]
    _T_73.v <= _T_75 @[EmbeddedTLB.scala 204:71]
    node _T_76 = bits(_T_74, 1, 1) @[EmbeddedTLB.scala 204:71]
    _T_73.r <= _T_76 @[EmbeddedTLB.scala 204:71]
    node _T_77 = bits(_T_74, 2, 2) @[EmbeddedTLB.scala 204:71]
    _T_73.w <= _T_77 @[EmbeddedTLB.scala 204:71]
    node _T_78 = bits(_T_74, 3, 3) @[EmbeddedTLB.scala 204:71]
    _T_73.x <= _T_78 @[EmbeddedTLB.scala 204:71]
    node _T_79 = bits(_T_74, 4, 4) @[EmbeddedTLB.scala 204:71]
    _T_73.u <= _T_79 @[EmbeddedTLB.scala 204:71]
    node _T_80 = bits(_T_74, 5, 5) @[EmbeddedTLB.scala 204:71]
    _T_73.g <= _T_80 @[EmbeddedTLB.scala 204:71]
    node _T_81 = bits(_T_74, 6, 6) @[EmbeddedTLB.scala 204:71]
    _T_73.a <= _T_81 @[EmbeddedTLB.scala 204:71]
    node _T_82 = bits(_T_74, 7, 7) @[EmbeddedTLB.scala 204:71]
    _T_73.d <= _T_82 @[EmbeddedTLB.scala 204:71]
    wire _T_83 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 204:100]
    wire _T_84 : UInt<121>
    _T_84 <= io.md[1]
    node _T_85 = bits(_T_84, 31, 0) @[EmbeddedTLB.scala 204:100]
    _T_83.pteaddr <= _T_85 @[EmbeddedTLB.scala 204:100]
    node _T_86 = bits(_T_84, 51, 32) @[EmbeddedTLB.scala 204:100]
    _T_83.ppn <= _T_86 @[EmbeddedTLB.scala 204:100]
    node _T_87 = bits(_T_84, 59, 52) @[EmbeddedTLB.scala 204:100]
    _T_83.flag <= _T_87 @[EmbeddedTLB.scala 204:100]
    node _T_88 = bits(_T_84, 77, 60) @[EmbeddedTLB.scala 204:100]
    _T_83.mask <= _T_88 @[EmbeddedTLB.scala 204:100]
    node _T_89 = bits(_T_84, 93, 78) @[EmbeddedTLB.scala 204:100]
    _T_83.asid <= _T_89 @[EmbeddedTLB.scala 204:100]
    node _T_90 = bits(_T_84, 120, 94) @[EmbeddedTLB.scala 204:100]
    _T_83.vpn <= _T_90 @[EmbeddedTLB.scala 204:100]
    node _T_91 = eq(_T_83.asid, satp.asid) @[EmbeddedTLB.scala 204:117]
    node _T_92 = and(_T_73.v, _T_91) @[EmbeddedTLB.scala 204:86]
    wire _T_93 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 204:152]
    wire _T_94 : UInt<121>
    _T_94 <= io.md[1]
    node _T_95 = bits(_T_94, 31, 0) @[EmbeddedTLB.scala 204:152]
    _T_93.pteaddr <= _T_95 @[EmbeddedTLB.scala 204:152]
    node _T_96 = bits(_T_94, 51, 32) @[EmbeddedTLB.scala 204:152]
    _T_93.ppn <= _T_96 @[EmbeddedTLB.scala 204:152]
    node _T_97 = bits(_T_94, 59, 52) @[EmbeddedTLB.scala 204:152]
    _T_93.flag <= _T_97 @[EmbeddedTLB.scala 204:152]
    node _T_98 = bits(_T_94, 77, 60) @[EmbeddedTLB.scala 204:152]
    _T_93.mask <= _T_98 @[EmbeddedTLB.scala 204:152]
    node _T_99 = bits(_T_94, 93, 78) @[EmbeddedTLB.scala 204:152]
    _T_93.asid <= _T_99 @[EmbeddedTLB.scala 204:152]
    node _T_100 = bits(_T_94, 120, 94) @[EmbeddedTLB.scala 204:152]
    _T_93.vpn <= _T_100 @[EmbeddedTLB.scala 204:152]
    wire _T_101 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 204:180]
    wire _T_102 : UInt<121>
    _T_102 <= io.md[1]
    node _T_103 = bits(_T_102, 31, 0) @[EmbeddedTLB.scala 204:180]
    _T_101.pteaddr <= _T_103 @[EmbeddedTLB.scala 204:180]
    node _T_104 = bits(_T_102, 51, 32) @[EmbeddedTLB.scala 204:180]
    _T_101.ppn <= _T_104 @[EmbeddedTLB.scala 204:180]
    node _T_105 = bits(_T_102, 59, 52) @[EmbeddedTLB.scala 204:180]
    _T_101.flag <= _T_105 @[EmbeddedTLB.scala 204:180]
    node _T_106 = bits(_T_102, 77, 60) @[EmbeddedTLB.scala 204:180]
    _T_101.mask <= _T_106 @[EmbeddedTLB.scala 204:180]
    node _T_107 = bits(_T_102, 93, 78) @[EmbeddedTLB.scala 204:180]
    _T_101.asid <= _T_107 @[EmbeddedTLB.scala 204:180]
    node _T_108 = bits(_T_102, 120, 94) @[EmbeddedTLB.scala 204:180]
    _T_101.vpn <= _T_108 @[EmbeddedTLB.scala 204:180]
    node _T_109 = cat(vpn.vpn2, vpn.vpn1) @[EmbeddedTLB.scala 204:201]
    node _T_110 = cat(_T_109, vpn.vpn0) @[EmbeddedTLB.scala 204:201]
    node _T_111 = cat(UInt<9>("h01ff"), _T_93.mask) @[Cat.scala 29:58]
    node _T_112 = and(_T_111, _T_101.vpn) @[TLB.scala 131:37]
    node _T_113 = cat(UInt<9>("h01ff"), _T_93.mask) @[Cat.scala 29:58]
    node _T_114 = and(_T_113, _T_110) @[TLB.scala 131:84]
    node _T_115 = eq(_T_112, _T_114) @[TLB.scala 131:48]
    node _T_116 = and(_T_92, _T_115) @[EmbeddedTLB.scala 204:132]
    wire _T_117 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 204:46]
    wire _T_118 : UInt<121>
    _T_118 <= io.md[2]
    node _T_119 = bits(_T_118, 31, 0) @[EmbeddedTLB.scala 204:46]
    _T_117.pteaddr <= _T_119 @[EmbeddedTLB.scala 204:46]
    node _T_120 = bits(_T_118, 51, 32) @[EmbeddedTLB.scala 204:46]
    _T_117.ppn <= _T_120 @[EmbeddedTLB.scala 204:46]
    node _T_121 = bits(_T_118, 59, 52) @[EmbeddedTLB.scala 204:46]
    _T_117.flag <= _T_121 @[EmbeddedTLB.scala 204:46]
    node _T_122 = bits(_T_118, 77, 60) @[EmbeddedTLB.scala 204:46]
    _T_117.mask <= _T_122 @[EmbeddedTLB.scala 204:46]
    node _T_123 = bits(_T_118, 93, 78) @[EmbeddedTLB.scala 204:46]
    _T_117.asid <= _T_123 @[EmbeddedTLB.scala 204:46]
    node _T_124 = bits(_T_118, 120, 94) @[EmbeddedTLB.scala 204:46]
    _T_117.vpn <= _T_124 @[EmbeddedTLB.scala 204:46]
    wire _T_125 : {d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>} @[EmbeddedTLB.scala 204:71]
    wire _T_126 : UInt<8>
    _T_126 <= _T_117.flag
    node _T_127 = bits(_T_126, 0, 0) @[EmbeddedTLB.scala 204:71]
    _T_125.v <= _T_127 @[EmbeddedTLB.scala 204:71]
    node _T_128 = bits(_T_126, 1, 1) @[EmbeddedTLB.scala 204:71]
    _T_125.r <= _T_128 @[EmbeddedTLB.scala 204:71]
    node _T_129 = bits(_T_126, 2, 2) @[EmbeddedTLB.scala 204:71]
    _T_125.w <= _T_129 @[EmbeddedTLB.scala 204:71]
    node _T_130 = bits(_T_126, 3, 3) @[EmbeddedTLB.scala 204:71]
    _T_125.x <= _T_130 @[EmbeddedTLB.scala 204:71]
    node _T_131 = bits(_T_126, 4, 4) @[EmbeddedTLB.scala 204:71]
    _T_125.u <= _T_131 @[EmbeddedTLB.scala 204:71]
    node _T_132 = bits(_T_126, 5, 5) @[EmbeddedTLB.scala 204:71]
    _T_125.g <= _T_132 @[EmbeddedTLB.scala 204:71]
    node _T_133 = bits(_T_126, 6, 6) @[EmbeddedTLB.scala 204:71]
    _T_125.a <= _T_133 @[EmbeddedTLB.scala 204:71]
    node _T_134 = bits(_T_126, 7, 7) @[EmbeddedTLB.scala 204:71]
    _T_125.d <= _T_134 @[EmbeddedTLB.scala 204:71]
    wire _T_135 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 204:100]
    wire _T_136 : UInt<121>
    _T_136 <= io.md[2]
    node _T_137 = bits(_T_136, 31, 0) @[EmbeddedTLB.scala 204:100]
    _T_135.pteaddr <= _T_137 @[EmbeddedTLB.scala 204:100]
    node _T_138 = bits(_T_136, 51, 32) @[EmbeddedTLB.scala 204:100]
    _T_135.ppn <= _T_138 @[EmbeddedTLB.scala 204:100]
    node _T_139 = bits(_T_136, 59, 52) @[EmbeddedTLB.scala 204:100]
    _T_135.flag <= _T_139 @[EmbeddedTLB.scala 204:100]
    node _T_140 = bits(_T_136, 77, 60) @[EmbeddedTLB.scala 204:100]
    _T_135.mask <= _T_140 @[EmbeddedTLB.scala 204:100]
    node _T_141 = bits(_T_136, 93, 78) @[EmbeddedTLB.scala 204:100]
    _T_135.asid <= _T_141 @[EmbeddedTLB.scala 204:100]
    node _T_142 = bits(_T_136, 120, 94) @[EmbeddedTLB.scala 204:100]
    _T_135.vpn <= _T_142 @[EmbeddedTLB.scala 204:100]
    node _T_143 = eq(_T_135.asid, satp.asid) @[EmbeddedTLB.scala 204:117]
    node _T_144 = and(_T_125.v, _T_143) @[EmbeddedTLB.scala 204:86]
    wire _T_145 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 204:152]
    wire _T_146 : UInt<121>
    _T_146 <= io.md[2]
    node _T_147 = bits(_T_146, 31, 0) @[EmbeddedTLB.scala 204:152]
    _T_145.pteaddr <= _T_147 @[EmbeddedTLB.scala 204:152]
    node _T_148 = bits(_T_146, 51, 32) @[EmbeddedTLB.scala 204:152]
    _T_145.ppn <= _T_148 @[EmbeddedTLB.scala 204:152]
    node _T_149 = bits(_T_146, 59, 52) @[EmbeddedTLB.scala 204:152]
    _T_145.flag <= _T_149 @[EmbeddedTLB.scala 204:152]
    node _T_150 = bits(_T_146, 77, 60) @[EmbeddedTLB.scala 204:152]
    _T_145.mask <= _T_150 @[EmbeddedTLB.scala 204:152]
    node _T_151 = bits(_T_146, 93, 78) @[EmbeddedTLB.scala 204:152]
    _T_145.asid <= _T_151 @[EmbeddedTLB.scala 204:152]
    node _T_152 = bits(_T_146, 120, 94) @[EmbeddedTLB.scala 204:152]
    _T_145.vpn <= _T_152 @[EmbeddedTLB.scala 204:152]
    wire _T_153 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 204:180]
    wire _T_154 : UInt<121>
    _T_154 <= io.md[2]
    node _T_155 = bits(_T_154, 31, 0) @[EmbeddedTLB.scala 204:180]
    _T_153.pteaddr <= _T_155 @[EmbeddedTLB.scala 204:180]
    node _T_156 = bits(_T_154, 51, 32) @[EmbeddedTLB.scala 204:180]
    _T_153.ppn <= _T_156 @[EmbeddedTLB.scala 204:180]
    node _T_157 = bits(_T_154, 59, 52) @[EmbeddedTLB.scala 204:180]
    _T_153.flag <= _T_157 @[EmbeddedTLB.scala 204:180]
    node _T_158 = bits(_T_154, 77, 60) @[EmbeddedTLB.scala 204:180]
    _T_153.mask <= _T_158 @[EmbeddedTLB.scala 204:180]
    node _T_159 = bits(_T_154, 93, 78) @[EmbeddedTLB.scala 204:180]
    _T_153.asid <= _T_159 @[EmbeddedTLB.scala 204:180]
    node _T_160 = bits(_T_154, 120, 94) @[EmbeddedTLB.scala 204:180]
    _T_153.vpn <= _T_160 @[EmbeddedTLB.scala 204:180]
    node _T_161 = cat(vpn.vpn2, vpn.vpn1) @[EmbeddedTLB.scala 204:201]
    node _T_162 = cat(_T_161, vpn.vpn0) @[EmbeddedTLB.scala 204:201]
    node _T_163 = cat(UInt<9>("h01ff"), _T_145.mask) @[Cat.scala 29:58]
    node _T_164 = and(_T_163, _T_153.vpn) @[TLB.scala 131:37]
    node _T_165 = cat(UInt<9>("h01ff"), _T_145.mask) @[Cat.scala 29:58]
    node _T_166 = and(_T_165, _T_162) @[TLB.scala 131:84]
    node _T_167 = eq(_T_164, _T_166) @[TLB.scala 131:48]
    node _T_168 = and(_T_144, _T_167) @[EmbeddedTLB.scala 204:132]
    wire _T_169 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 204:46]
    wire _T_170 : UInt<121>
    _T_170 <= io.md[3]
    node _T_171 = bits(_T_170, 31, 0) @[EmbeddedTLB.scala 204:46]
    _T_169.pteaddr <= _T_171 @[EmbeddedTLB.scala 204:46]
    node _T_172 = bits(_T_170, 51, 32) @[EmbeddedTLB.scala 204:46]
    _T_169.ppn <= _T_172 @[EmbeddedTLB.scala 204:46]
    node _T_173 = bits(_T_170, 59, 52) @[EmbeddedTLB.scala 204:46]
    _T_169.flag <= _T_173 @[EmbeddedTLB.scala 204:46]
    node _T_174 = bits(_T_170, 77, 60) @[EmbeddedTLB.scala 204:46]
    _T_169.mask <= _T_174 @[EmbeddedTLB.scala 204:46]
    node _T_175 = bits(_T_170, 93, 78) @[EmbeddedTLB.scala 204:46]
    _T_169.asid <= _T_175 @[EmbeddedTLB.scala 204:46]
    node _T_176 = bits(_T_170, 120, 94) @[EmbeddedTLB.scala 204:46]
    _T_169.vpn <= _T_176 @[EmbeddedTLB.scala 204:46]
    wire _T_177 : {d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>} @[EmbeddedTLB.scala 204:71]
    wire _T_178 : UInt<8>
    _T_178 <= _T_169.flag
    node _T_179 = bits(_T_178, 0, 0) @[EmbeddedTLB.scala 204:71]
    _T_177.v <= _T_179 @[EmbeddedTLB.scala 204:71]
    node _T_180 = bits(_T_178, 1, 1) @[EmbeddedTLB.scala 204:71]
    _T_177.r <= _T_180 @[EmbeddedTLB.scala 204:71]
    node _T_181 = bits(_T_178, 2, 2) @[EmbeddedTLB.scala 204:71]
    _T_177.w <= _T_181 @[EmbeddedTLB.scala 204:71]
    node _T_182 = bits(_T_178, 3, 3) @[EmbeddedTLB.scala 204:71]
    _T_177.x <= _T_182 @[EmbeddedTLB.scala 204:71]
    node _T_183 = bits(_T_178, 4, 4) @[EmbeddedTLB.scala 204:71]
    _T_177.u <= _T_183 @[EmbeddedTLB.scala 204:71]
    node _T_184 = bits(_T_178, 5, 5) @[EmbeddedTLB.scala 204:71]
    _T_177.g <= _T_184 @[EmbeddedTLB.scala 204:71]
    node _T_185 = bits(_T_178, 6, 6) @[EmbeddedTLB.scala 204:71]
    _T_177.a <= _T_185 @[EmbeddedTLB.scala 204:71]
    node _T_186 = bits(_T_178, 7, 7) @[EmbeddedTLB.scala 204:71]
    _T_177.d <= _T_186 @[EmbeddedTLB.scala 204:71]
    wire _T_187 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 204:100]
    wire _T_188 : UInt<121>
    _T_188 <= io.md[3]
    node _T_189 = bits(_T_188, 31, 0) @[EmbeddedTLB.scala 204:100]
    _T_187.pteaddr <= _T_189 @[EmbeddedTLB.scala 204:100]
    node _T_190 = bits(_T_188, 51, 32) @[EmbeddedTLB.scala 204:100]
    _T_187.ppn <= _T_190 @[EmbeddedTLB.scala 204:100]
    node _T_191 = bits(_T_188, 59, 52) @[EmbeddedTLB.scala 204:100]
    _T_187.flag <= _T_191 @[EmbeddedTLB.scala 204:100]
    node _T_192 = bits(_T_188, 77, 60) @[EmbeddedTLB.scala 204:100]
    _T_187.mask <= _T_192 @[EmbeddedTLB.scala 204:100]
    node _T_193 = bits(_T_188, 93, 78) @[EmbeddedTLB.scala 204:100]
    _T_187.asid <= _T_193 @[EmbeddedTLB.scala 204:100]
    node _T_194 = bits(_T_188, 120, 94) @[EmbeddedTLB.scala 204:100]
    _T_187.vpn <= _T_194 @[EmbeddedTLB.scala 204:100]
    node _T_195 = eq(_T_187.asid, satp.asid) @[EmbeddedTLB.scala 204:117]
    node _T_196 = and(_T_177.v, _T_195) @[EmbeddedTLB.scala 204:86]
    wire _T_197 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 204:152]
    wire _T_198 : UInt<121>
    _T_198 <= io.md[3]
    node _T_199 = bits(_T_198, 31, 0) @[EmbeddedTLB.scala 204:152]
    _T_197.pteaddr <= _T_199 @[EmbeddedTLB.scala 204:152]
    node _T_200 = bits(_T_198, 51, 32) @[EmbeddedTLB.scala 204:152]
    _T_197.ppn <= _T_200 @[EmbeddedTLB.scala 204:152]
    node _T_201 = bits(_T_198, 59, 52) @[EmbeddedTLB.scala 204:152]
    _T_197.flag <= _T_201 @[EmbeddedTLB.scala 204:152]
    node _T_202 = bits(_T_198, 77, 60) @[EmbeddedTLB.scala 204:152]
    _T_197.mask <= _T_202 @[EmbeddedTLB.scala 204:152]
    node _T_203 = bits(_T_198, 93, 78) @[EmbeddedTLB.scala 204:152]
    _T_197.asid <= _T_203 @[EmbeddedTLB.scala 204:152]
    node _T_204 = bits(_T_198, 120, 94) @[EmbeddedTLB.scala 204:152]
    _T_197.vpn <= _T_204 @[EmbeddedTLB.scala 204:152]
    wire _T_205 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 204:180]
    wire _T_206 : UInt<121>
    _T_206 <= io.md[3]
    node _T_207 = bits(_T_206, 31, 0) @[EmbeddedTLB.scala 204:180]
    _T_205.pteaddr <= _T_207 @[EmbeddedTLB.scala 204:180]
    node _T_208 = bits(_T_206, 51, 32) @[EmbeddedTLB.scala 204:180]
    _T_205.ppn <= _T_208 @[EmbeddedTLB.scala 204:180]
    node _T_209 = bits(_T_206, 59, 52) @[EmbeddedTLB.scala 204:180]
    _T_205.flag <= _T_209 @[EmbeddedTLB.scala 204:180]
    node _T_210 = bits(_T_206, 77, 60) @[EmbeddedTLB.scala 204:180]
    _T_205.mask <= _T_210 @[EmbeddedTLB.scala 204:180]
    node _T_211 = bits(_T_206, 93, 78) @[EmbeddedTLB.scala 204:180]
    _T_205.asid <= _T_211 @[EmbeddedTLB.scala 204:180]
    node _T_212 = bits(_T_206, 120, 94) @[EmbeddedTLB.scala 204:180]
    _T_205.vpn <= _T_212 @[EmbeddedTLB.scala 204:180]
    node _T_213 = cat(vpn.vpn2, vpn.vpn1) @[EmbeddedTLB.scala 204:201]
    node _T_214 = cat(_T_213, vpn.vpn0) @[EmbeddedTLB.scala 204:201]
    node _T_215 = cat(UInt<9>("h01ff"), _T_197.mask) @[Cat.scala 29:58]
    node _T_216 = and(_T_215, _T_205.vpn) @[TLB.scala 131:37]
    node _T_217 = cat(UInt<9>("h01ff"), _T_197.mask) @[Cat.scala 29:58]
    node _T_218 = and(_T_217, _T_214) @[TLB.scala 131:84]
    node _T_219 = eq(_T_216, _T_218) @[TLB.scala 131:48]
    node _T_220 = and(_T_196, _T_219) @[EmbeddedTLB.scala 204:132]
    wire _T_221 : UInt<1>[4] @[EmbeddedTLB.scala 204:23]
    _T_221[0] <= _T_64 @[EmbeddedTLB.scala 204:23]
    _T_221[1] <= _T_116 @[EmbeddedTLB.scala 204:23]
    _T_221[2] <= _T_168 @[EmbeddedTLB.scala 204:23]
    _T_221[3] <= _T_220 @[EmbeddedTLB.scala 204:23]
    node _T_222 = cat(_T_221[1], _T_221[0]) @[EmbeddedTLB.scala 204:211]
    node _T_223 = cat(_T_221[3], _T_221[2]) @[EmbeddedTLB.scala 204:211]
    node hitVec = cat(_T_223, _T_222) @[EmbeddedTLB.scala 204:211]
    node _T_224 = orr(hitVec) @[EmbeddedTLB.scala 205:35]
    node hit = and(io.in.valid, _T_224) @[EmbeddedTLB.scala 205:25]
    node _T_225 = orr(hitVec) @[EmbeddedTLB.scala 206:37]
    node _T_226 = eq(_T_225, UInt<1>("h00")) @[EmbeddedTLB.scala 206:29]
    node miss = and(io.in.valid, _T_226) @[EmbeddedTLB.scala 206:26]
    reg _T_227 : UInt<64>, clock with : (reset => (reset, UInt<64>("h01234567887654321"))) @[LFSR64.scala 25:23]
    node _T_228 = bits(_T_227, 0, 0) @[LFSR64.scala 26:19]
    node _T_229 = bits(_T_227, 1, 1) @[LFSR64.scala 26:29]
    node _T_230 = xor(_T_228, _T_229) @[LFSR64.scala 26:23]
    node _T_231 = bits(_T_227, 3, 3) @[LFSR64.scala 26:39]
    node _T_232 = xor(_T_230, _T_231) @[LFSR64.scala 26:33]
    node _T_233 = bits(_T_227, 4, 4) @[LFSR64.scala 26:49]
    node _T_234 = xor(_T_232, _T_233) @[LFSR64.scala 26:43]
    when UInt<1>("h01") : @[LFSR64.scala 27:22]
      node _T_235 = eq(_T_227, UInt<1>("h00")) @[LFSR64.scala 28:24]
      node _T_236 = bits(_T_227, 63, 1) @[LFSR64.scala 28:51]
      node _T_237 = cat(_T_234, _T_236) @[Cat.scala 29:58]
      node _T_238 = mux(_T_235, UInt<1>("h01"), _T_237) @[LFSR64.scala 28:18]
      _T_227 <= _T_238 @[LFSR64.scala 28:12]
      skip @[LFSR64.scala 27:22]
    node _T_239 = bits(_T_227, 1, 0) @[EmbeddedTLB.scala 208:53]
    node victimWaymask = dshl(UInt<1>("h01"), _T_239) @[EmbeddedTLB.scala 208:42]
    node waymask = mux(hit, hitVec, victimWaymask) @[EmbeddedTLB.scala 209:20]
    wire loadPF : UInt<1>
    loadPF <= UInt<1>("h00")
    wire storePF : UInt<1>
    storePF <= UInt<1>("h00")
    node _T_240 = bits(waymask, 0, 0) @[Mux.scala 29:36]
    node _T_241 = bits(waymask, 1, 1) @[Mux.scala 29:36]
    node _T_242 = bits(waymask, 2, 2) @[Mux.scala 29:36]
    node _T_243 = bits(waymask, 3, 3) @[Mux.scala 29:36]
    node _T_244 = mux(_T_240, io.md[0], UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_245 = mux(_T_241, io.md[1], UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_246 = mux(_T_242, io.md[2], UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_247 = mux(_T_243, io.md[3], UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_248 = or(_T_244, _T_245) @[Mux.scala 27:72]
    node _T_249 = or(_T_248, _T_246) @[Mux.scala 27:72]
    node _T_250 = or(_T_249, _T_247) @[Mux.scala 27:72]
    wire _T_251 : UInt<121> @[Mux.scala 27:72]
    _T_251 <= _T_250 @[Mux.scala 27:72]
    wire _T_252 : {meta : UInt<69>, data : UInt<52>} @[EmbeddedTLB.scala 215:44]
    wire _T_253 : UInt<121>
    _T_253 <= _T_251
    node _T_254 = bits(_T_253, 51, 0) @[EmbeddedTLB.scala 215:44]
    _T_252.data <= _T_254 @[EmbeddedTLB.scala 215:44]
    node _T_255 = bits(_T_253, 120, 52) @[EmbeddedTLB.scala 215:44]
    _T_252.meta <= _T_255 @[EmbeddedTLB.scala 215:44]
    wire hitMeta : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>} @[EmbeddedTLB.scala 215:70]
    wire _T_256 : UInt<69>
    _T_256 <= _T_252.meta
    node _T_257 = bits(_T_256, 7, 0) @[EmbeddedTLB.scala 215:70]
    hitMeta.flag <= _T_257 @[EmbeddedTLB.scala 215:70]
    node _T_258 = bits(_T_256, 25, 8) @[EmbeddedTLB.scala 215:70]
    hitMeta.mask <= _T_258 @[EmbeddedTLB.scala 215:70]
    node _T_259 = bits(_T_256, 41, 26) @[EmbeddedTLB.scala 215:70]
    hitMeta.asid <= _T_259 @[EmbeddedTLB.scala 215:70]
    node _T_260 = bits(_T_256, 68, 42) @[EmbeddedTLB.scala 215:70]
    hitMeta.vpn <= _T_260 @[EmbeddedTLB.scala 215:70]
    node _T_261 = bits(waymask, 0, 0) @[Mux.scala 29:36]
    node _T_262 = bits(waymask, 1, 1) @[Mux.scala 29:36]
    node _T_263 = bits(waymask, 2, 2) @[Mux.scala 29:36]
    node _T_264 = bits(waymask, 3, 3) @[Mux.scala 29:36]
    node _T_265 = mux(_T_261, io.md[0], UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_266 = mux(_T_262, io.md[1], UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_267 = mux(_T_263, io.md[2], UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_268 = mux(_T_264, io.md[3], UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_269 = or(_T_265, _T_266) @[Mux.scala 27:72]
    node _T_270 = or(_T_269, _T_267) @[Mux.scala 27:72]
    node _T_271 = or(_T_270, _T_268) @[Mux.scala 27:72]
    wire _T_272 : UInt<121> @[Mux.scala 27:72]
    _T_272 <= _T_271 @[Mux.scala 27:72]
    wire _T_273 : {meta : UInt<69>, data : UInt<52>} @[EmbeddedTLB.scala 216:44]
    wire _T_274 : UInt<121>
    _T_274 <= _T_272
    node _T_275 = bits(_T_274, 51, 0) @[EmbeddedTLB.scala 216:44]
    _T_273.data <= _T_275 @[EmbeddedTLB.scala 216:44]
    node _T_276 = bits(_T_274, 120, 52) @[EmbeddedTLB.scala 216:44]
    _T_273.meta <= _T_276 @[EmbeddedTLB.scala 216:44]
    wire hitData : {ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 216:70]
    wire _T_277 : UInt<52>
    _T_277 <= _T_273.data
    node _T_278 = bits(_T_277, 31, 0) @[EmbeddedTLB.scala 216:70]
    hitData.pteaddr <= _T_278 @[EmbeddedTLB.scala 216:70]
    node _T_279 = bits(_T_277, 51, 32) @[EmbeddedTLB.scala 216:70]
    hitData.ppn <= _T_279 @[EmbeddedTLB.scala 216:70]
    wire hitFlag : {d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>} @[EmbeddedTLB.scala 217:38]
    wire _T_280 : UInt<8>
    _T_280 <= hitMeta.flag
    node _T_281 = bits(_T_280, 0, 0) @[EmbeddedTLB.scala 217:38]
    hitFlag.v <= _T_281 @[EmbeddedTLB.scala 217:38]
    node _T_282 = bits(_T_280, 1, 1) @[EmbeddedTLB.scala 217:38]
    hitFlag.r <= _T_282 @[EmbeddedTLB.scala 217:38]
    node _T_283 = bits(_T_280, 2, 2) @[EmbeddedTLB.scala 217:38]
    hitFlag.w <= _T_283 @[EmbeddedTLB.scala 217:38]
    node _T_284 = bits(_T_280, 3, 3) @[EmbeddedTLB.scala 217:38]
    hitFlag.x <= _T_284 @[EmbeddedTLB.scala 217:38]
    node _T_285 = bits(_T_280, 4, 4) @[EmbeddedTLB.scala 217:38]
    hitFlag.u <= _T_285 @[EmbeddedTLB.scala 217:38]
    node _T_286 = bits(_T_280, 5, 5) @[EmbeddedTLB.scala 217:38]
    hitFlag.g <= _T_286 @[EmbeddedTLB.scala 217:38]
    node _T_287 = bits(_T_280, 6, 6) @[EmbeddedTLB.scala 217:38]
    hitFlag.a <= _T_287 @[EmbeddedTLB.scala 217:38]
    node _T_288 = bits(_T_280, 7, 7) @[EmbeddedTLB.scala 217:38]
    hitFlag.d <= _T_288 @[EmbeddedTLB.scala 217:38]
    wire hitinstrPF : UInt<1>
    hitinstrPF <= UInt<1>("h00")
    node _T_289 = eq(hitFlag.a, UInt<1>("h00")) @[EmbeddedTLB.scala 221:23]
    node _T_290 = eq(hitFlag.d, UInt<1>("h00")) @[EmbeddedTLB.scala 221:37]
    node _T_291 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_292 = and(_T_290, _T_291) @[EmbeddedTLB.scala 221:48]
    node _T_293 = or(_T_289, _T_292) @[EmbeddedTLB.scala 221:34]
    node _T_294 = and(hit, _T_293) @[EmbeddedTLB.scala 221:19]
    node _T_295 = eq(hitinstrPF, UInt<1>("h00")) @[EmbeddedTLB.scala 221:69]
    node _T_296 = and(_T_294, _T_295) @[EmbeddedTLB.scala 221:66]
    node _T_297 = or(loadPF, storePF) @[EmbeddedTLB.scala 221:93]
    node _T_298 = or(io.pf.loadPF, io.pf.storePF) @[Bundle.scala 129:23]
    node _T_299 = or(_T_297, _T_298) @[EmbeddedTLB.scala 221:104]
    node _T_300 = eq(_T_299, UInt<1>("h00")) @[EmbeddedTLB.scala 221:84]
    node hitWB = and(_T_296, _T_300) @[EmbeddedTLB.scala 221:81]
    node _T_301 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_302 = cat(_T_301, UInt<1>("h01")) @[Cat.scala 29:58]
    node _T_303 = cat(_T_302, UInt<6>("h00")) @[Cat.scala 29:58]
    node _T_304 = cat(hitFlag.r, hitFlag.v) @[EmbeddedTLB.scala 222:79]
    node _T_305 = cat(hitFlag.x, hitFlag.w) @[EmbeddedTLB.scala 222:79]
    node _T_306 = cat(_T_305, _T_304) @[EmbeddedTLB.scala 222:79]
    node _T_307 = cat(hitFlag.g, hitFlag.u) @[EmbeddedTLB.scala 222:79]
    node _T_308 = cat(hitFlag.d, hitFlag.a) @[EmbeddedTLB.scala 222:79]
    node _T_309 = cat(_T_308, _T_307) @[EmbeddedTLB.scala 222:79]
    node _T_310 = cat(_T_309, _T_306) @[EmbeddedTLB.scala 222:79]
    node hitRefillFlag = or(_T_303, _T_310) @[EmbeddedTLB.scala 222:69]
    node _T_311 = cat(UInt<2>("h00"), hitRefillFlag) @[Cat.scala 29:58]
    node _T_312 = cat(UInt<10>("h00"), hitData.ppn) @[Cat.scala 29:58]
    node _T_313 = cat(_T_312, _T_311) @[Cat.scala 29:58]
    reg hitWBStore : UInt<40>, clock @[Reg.scala 15:16]
    when hitWB : @[Reg.scala 16:19]
      hitWBStore <= _T_313 @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _T_314 = eq(io.pf.priviledgeMode, UInt<1>("h00")) @[EmbeddedTLB.scala 226:62]
    node _T_315 = eq(hitFlag.u, UInt<1>("h00")) @[EmbeddedTLB.scala 226:75]
    node _T_316 = and(_T_314, _T_315) @[EmbeddedTLB.scala 226:72]
    node _T_317 = eq(_T_316, UInt<1>("h00")) @[EmbeddedTLB.scala 226:42]
    node _T_318 = and(hit, _T_317) @[EmbeddedTLB.scala 226:39]
    node _T_319 = eq(io.pf.priviledgeMode, UInt<1>("h01")) @[EmbeddedTLB.scala 226:110]
    node _T_320 = and(_T_319, hitFlag.u) @[EmbeddedTLB.scala 226:120]
    node _T_321 = eq(io.pf.status_sum, UInt<1>("h00")) @[EmbeddedTLB.scala 226:137]
    node _T_322 = or(_T_321, UInt<1>("h01")) @[EmbeddedTLB.scala 226:152]
    node _T_323 = and(_T_320, _T_322) @[EmbeddedTLB.scala 226:133]
    node _T_324 = eq(_T_323, UInt<1>("h00")) @[EmbeddedTLB.scala 226:90]
    node hitCheck = and(_T_318, _T_324) @[EmbeddedTLB.scala 226:87]
    node hitExec = and(hitCheck, hitFlag.x) @[EmbeddedTLB.scala 227:26]
    node _T_325 = and(io.pf.status_mxr, hitFlag.x) @[EmbeddedTLB.scala 228:57]
    node _T_326 = or(hitFlag.r, _T_325) @[EmbeddedTLB.scala 228:40]
    node hitLoad = and(hitCheck, _T_326) @[EmbeddedTLB.scala 228:26]
    node hitStore = and(hitCheck, hitFlag.w) @[EmbeddedTLB.scala 229:27]
    wire isAMO : UInt<1>
    isAMO <= UInt<1>("h00")
    reg _T_327 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EmbeddedTLB.scala 236:26]
    _T_327 <= loadPF @[EmbeddedTLB.scala 236:26]
    io.pf.loadPF <= _T_327 @[EmbeddedTLB.scala 236:16]
    reg _T_328 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EmbeddedTLB.scala 237:27]
    _T_328 <= storePF @[EmbeddedTLB.scala 237:27]
    io.pf.storePF <= _T_328 @[EmbeddedTLB.scala 237:17]
    node _T_329 = eq(hitExec, UInt<1>("h00")) @[EmbeddedTLB.scala 239:42]
    node _T_330 = and(_T_329, hit) @[EmbeddedTLB.scala 239:52]
    hitinstrPF <= _T_330 @[EmbeddedTLB.scala 239:39]
    reg state : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[EmbeddedTLB.scala 247:22]
    reg level : UInt<2>, clock with : (reset => (reset, UInt<2>("h03"))) @[EmbeddedTLB.scala 248:22]
    reg memRespStore : UInt<64>, clock @[EmbeddedTLB.scala 250:25]
    wire missMask : UInt<18>
    missMask <= UInt<18>("h03ffff")
    reg missMaskStore : UInt<18>, clock @[EmbeddedTLB.scala 252:26]
    wire missMetaRefill : UInt<1>
    missMetaRefill <= UInt<1>("h00")
    wire missRefillFlag : UInt<8>
    missRefillFlag <= UInt<8>("h00")
    wire memRdata : {reserved : UInt<34>, ppn : UInt<20>, rsw : UInt<2>, flag : {d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>}} @[EmbeddedTLB.scala 255:49]
    wire _T_331 : UInt<64>
    _T_331 <= io.mem.resp.bits.rdata
    node _T_332 = bits(_T_331, 0, 0) @[EmbeddedTLB.scala 255:49]
    memRdata.flag.v <= _T_332 @[EmbeddedTLB.scala 255:49]
    node _T_333 = bits(_T_331, 1, 1) @[EmbeddedTLB.scala 255:49]
    memRdata.flag.r <= _T_333 @[EmbeddedTLB.scala 255:49]
    node _T_334 = bits(_T_331, 2, 2) @[EmbeddedTLB.scala 255:49]
    memRdata.flag.w <= _T_334 @[EmbeddedTLB.scala 255:49]
    node _T_335 = bits(_T_331, 3, 3) @[EmbeddedTLB.scala 255:49]
    memRdata.flag.x <= _T_335 @[EmbeddedTLB.scala 255:49]
    node _T_336 = bits(_T_331, 4, 4) @[EmbeddedTLB.scala 255:49]
    memRdata.flag.u <= _T_336 @[EmbeddedTLB.scala 255:49]
    node _T_337 = bits(_T_331, 5, 5) @[EmbeddedTLB.scala 255:49]
    memRdata.flag.g <= _T_337 @[EmbeddedTLB.scala 255:49]
    node _T_338 = bits(_T_331, 6, 6) @[EmbeddedTLB.scala 255:49]
    memRdata.flag.a <= _T_338 @[EmbeddedTLB.scala 255:49]
    node _T_339 = bits(_T_331, 7, 7) @[EmbeddedTLB.scala 255:49]
    memRdata.flag.d <= _T_339 @[EmbeddedTLB.scala 255:49]
    node _T_340 = bits(_T_331, 9, 8) @[EmbeddedTLB.scala 255:49]
    memRdata.rsw <= _T_340 @[EmbeddedTLB.scala 255:49]
    node _T_341 = bits(_T_331, 29, 10) @[EmbeddedTLB.scala 255:49]
    memRdata.ppn <= _T_341 @[EmbeddedTLB.scala 255:49]
    node _T_342 = bits(_T_331, 63, 30) @[EmbeddedTLB.scala 255:49]
    memRdata.reserved <= _T_342 @[EmbeddedTLB.scala 255:49]
    reg raddr : UInt<32>, clock @[EmbeddedTLB.scala 256:18]
    node _T_343 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    reg alreadyOutFire : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Reg.scala 27:20]
    when _T_343 : @[Reg.scala 28:19]
      alreadyOutFire <= UInt<1>("h01") @[Reg.scala 28:23]
      skip @[Reg.scala 28:19]
    reg needFlush : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EmbeddedTLB.scala 260:26]
    node isFlush = or(needFlush, io.flush) @[EmbeddedTLB.scala 262:27]
    node _T_344 = neq(state, UInt<3>("h00")) @[EmbeddedTLB.scala 263:27]
    node _T_345 = and(io.flush, _T_344) @[EmbeddedTLB.scala 263:17]
    when _T_345 : @[EmbeddedTLB.scala 263:40]
      needFlush <= UInt<1>("h01") @[EmbeddedTLB.scala 263:52]
      skip @[EmbeddedTLB.scala 263:40]
    node _T_346 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_347 = and(_T_346, needFlush) @[EmbeddedTLB.scala 264:23]
    when _T_347 : @[EmbeddedTLB.scala 264:37]
      needFlush <= UInt<1>("h00") @[EmbeddedTLB.scala 264:49]
      skip @[EmbeddedTLB.scala 264:37]
    reg missIPF : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EmbeddedTLB.scala 266:24]
    node _T_348 = eq(UInt<3>("h00"), state) @[Conditional.scala 37:30]
    when _T_348 : @[Conditional.scala 40:58]
      node _T_349 = eq(io.flush, UInt<1>("h00")) @[EmbeddedTLB.scala 271:13]
      node _T_350 = and(_T_349, hitWB) @[EmbeddedTLB.scala 271:22]
      when _T_350 : @[EmbeddedTLB.scala 271:32]
        state <= UInt<3>("h03") @[EmbeddedTLB.scala 272:15]
        needFlush <= UInt<1>("h00") @[EmbeddedTLB.scala 273:19]
        alreadyOutFire <= UInt<1>("h00") @[EmbeddedTLB.scala 274:24]
        skip @[EmbeddedTLB.scala 271:32]
      else : @[EmbeddedTLB.scala 275:37]
        node _T_351 = eq(io.flush, UInt<1>("h00")) @[EmbeddedTLB.scala 275:27]
        node _T_352 = and(miss, _T_351) @[EmbeddedTLB.scala 275:24]
        when _T_352 : @[EmbeddedTLB.scala 275:37]
          state <= UInt<3>("h01") @[EmbeddedTLB.scala 276:15]
          node _T_353 = cat(satp.ppn, vpn.vpn2) @[Cat.scala 29:58]
          node _T_354 = cat(_T_353, UInt<3>("h00")) @[Cat.scala 29:58]
          raddr <= _T_354 @[EmbeddedTLB.scala 277:15]
          level <= UInt<2>("h03") @[EmbeddedTLB.scala 278:15]
          needFlush <= UInt<1>("h00") @[EmbeddedTLB.scala 279:19]
          alreadyOutFire <= UInt<1>("h00") @[EmbeddedTLB.scala 280:24]
          skip @[EmbeddedTLB.scala 275:37]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_355 = eq(UInt<3>("h01"), state) @[Conditional.scala 37:30]
      when _T_355 : @[Conditional.scala 39:67]
        when isFlush : @[EmbeddedTLB.scala 285:22]
          state <= UInt<3>("h00") @[EmbeddedTLB.scala 286:15]
          needFlush <= UInt<1>("h00") @[EmbeddedTLB.scala 287:19]
          skip @[EmbeddedTLB.scala 285:22]
        else : @[EmbeddedTLB.scala 288:38]
          node _T_356 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
          when _T_356 : @[EmbeddedTLB.scala 288:38]
            state <= UInt<3>("h02") @[EmbeddedTLB.scala 288:46]
            skip @[EmbeddedTLB.scala 288:38]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_357 = eq(UInt<3>("h02"), state) @[Conditional.scala 37:30]
        when _T_357 : @[Conditional.scala 39:67]
          wire _T_358 : {d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>} @[EmbeddedTLB.scala 292:44]
          node _T_359 = cat(memRdata.flag.r, memRdata.flag.v) @[EmbeddedTLB.scala 292:44]
          node _T_360 = cat(memRdata.flag.x, memRdata.flag.w) @[EmbeddedTLB.scala 292:44]
          node _T_361 = cat(_T_360, _T_359) @[EmbeddedTLB.scala 292:44]
          node _T_362 = cat(memRdata.flag.g, memRdata.flag.u) @[EmbeddedTLB.scala 292:44]
          node _T_363 = cat(memRdata.flag.d, memRdata.flag.a) @[EmbeddedTLB.scala 292:44]
          node _T_364 = cat(_T_363, _T_362) @[EmbeddedTLB.scala 292:44]
          node _T_365 = cat(_T_364, _T_361) @[EmbeddedTLB.scala 292:44]
          wire _T_366 : UInt<8>
          _T_366 <= _T_365
          node _T_367 = bits(_T_366, 0, 0) @[EmbeddedTLB.scala 292:44]
          _T_358.v <= _T_367 @[EmbeddedTLB.scala 292:44]
          node _T_368 = bits(_T_366, 1, 1) @[EmbeddedTLB.scala 292:44]
          _T_358.r <= _T_368 @[EmbeddedTLB.scala 292:44]
          node _T_369 = bits(_T_366, 2, 2) @[EmbeddedTLB.scala 292:44]
          _T_358.w <= _T_369 @[EmbeddedTLB.scala 292:44]
          node _T_370 = bits(_T_366, 3, 3) @[EmbeddedTLB.scala 292:44]
          _T_358.x <= _T_370 @[EmbeddedTLB.scala 292:44]
          node _T_371 = bits(_T_366, 4, 4) @[EmbeddedTLB.scala 292:44]
          _T_358.u <= _T_371 @[EmbeddedTLB.scala 292:44]
          node _T_372 = bits(_T_366, 5, 5) @[EmbeddedTLB.scala 292:44]
          _T_358.g <= _T_372 @[EmbeddedTLB.scala 292:44]
          node _T_373 = bits(_T_366, 6, 6) @[EmbeddedTLB.scala 292:44]
          _T_358.a <= _T_373 @[EmbeddedTLB.scala 292:44]
          node _T_374 = bits(_T_366, 7, 7) @[EmbeddedTLB.scala 292:44]
          _T_358.d <= _T_374 @[EmbeddedTLB.scala 292:44]
          node _T_375 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
          when _T_375 : @[EmbeddedTLB.scala 293:33]
            when isFlush : @[EmbeddedTLB.scala 294:24]
              state <= UInt<3>("h00") @[EmbeddedTLB.scala 295:17]
              needFlush <= UInt<1>("h00") @[EmbeddedTLB.scala 296:21]
              skip @[EmbeddedTLB.scala 294:24]
            else : @[EmbeddedTLB.scala 297:82]
              node _T_376 = or(_T_358.r, _T_358.x) @[EmbeddedTLB.scala 297:34]
              node _T_377 = eq(_T_376, UInt<1>("h00")) @[EmbeddedTLB.scala 297:21]
              node _T_378 = eq(level, UInt<2>("h03")) @[EmbeddedTLB.scala 297:58]
              node _T_379 = eq(level, UInt<2>("h02")) @[EmbeddedTLB.scala 297:73]
              node _T_380 = or(_T_378, _T_379) @[EmbeddedTLB.scala 297:65]
              node _T_381 = and(_T_377, _T_380) @[EmbeddedTLB.scala 297:49]
              when _T_381 : @[EmbeddedTLB.scala 297:82]
                node _T_382 = eq(_T_358.v, UInt<1>("h00")) @[EmbeddedTLB.scala 298:16]
                node _T_383 = eq(_T_358.r, UInt<1>("h00")) @[EmbeddedTLB.scala 298:32]
                node _T_384 = and(_T_383, _T_358.w) @[EmbeddedTLB.scala 298:44]
                node _T_385 = or(_T_382, _T_384) @[EmbeddedTLB.scala 298:28]
                when _T_385 : @[EmbeddedTLB.scala 298:60]
                  state <= UInt<3>("h04") @[EmbeddedTLB.scala 299:43]
                  missIPF <= UInt<1>("h01") @[EmbeddedTLB.scala 300:45]
                  reg _T_386 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
                  node _T_387 = add(_T_386, UInt<1>("h01")) @[GTimer.scala 25:12]
                  node _T_388 = tail(_T_387, 1) @[GTimer.scala 25:12]
                  _T_386 <= _T_388 @[GTimer.scala 25:7]
                  wire _T_389 : UInt<1>
                  _T_389 <= UInt<1>("h00")
                  node _T_390 = and(UInt<1>("h01"), _T_389) @[Debug.scala 55:16]
                  when _T_390 : @[Debug.scala 55:31]
                    node _T_391 = asUInt(reset) @[Debug.scala 56:24]
                    node _T_392 = eq(_T_391, UInt<1>("h00")) @[Debug.scala 56:24]
                    when _T_392 : @[Debug.scala 56:24]
                      printf(clock, UInt<1>(1), "[%d] EmbeddedTLBExec: ", _T_386) @[Debug.scala 56:24]
                      skip @[Debug.scala 56:24]
                    node _T_393 = asUInt(reset) @[Debug.scala 57:13]
                    node _T_394 = eq(_T_393, UInt<1>("h00")) @[Debug.scala 57:13]
                    when _T_394 : @[Debug.scala 57:13]
                      printf(clock, UInt<1>(1), "tlbException!!! ") @[Debug.scala 57:13]
                      skip @[Debug.scala 57:13]
                    skip @[Debug.scala 55:31]
                  reg _T_395 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
                  node _T_396 = add(_T_395, UInt<1>("h01")) @[GTimer.scala 25:12]
                  node _T_397 = tail(_T_396, 1) @[GTimer.scala 25:12]
                  _T_395 <= _T_397 @[GTimer.scala 25:7]
                  wire _T_398 : UInt<1>
                  _T_398 <= UInt<1>("h00")
                  node _T_399 = and(UInt<1>("h01"), _T_398) @[Debug.scala 55:16]
                  when _T_399 : @[Debug.scala 55:31]
                    node _T_400 = asUInt(reset) @[Debug.scala 57:13]
                    node _T_401 = eq(_T_400, UInt<1>("h00")) @[Debug.scala 57:13]
                    when _T_401 : @[Debug.scala 57:13]
                      printf(clock, UInt<1>(1), " req:addr = 0x%x, cmd = %d, size = %d, wmask = 0x%x, wdata = 0x%x  Memreq:DecoupledIO(ready -> %d, valid -> %d, bits -> addr = 0x%x, cmd = %d, size = %d, wmask = 0x%x, wdata = 0x%x)  MemResp:DecoupledIO(ready -> %d, valid -> %d, bits -> rdata = %x, cmd = %d)", io.in.bits.addr, io.in.bits.cmd, io.in.bits.size, io.in.bits.wmask, io.in.bits.wdata, io.mem.req.ready, io.mem.req.valid, io.mem.req.bits.addr, io.mem.req.bits.cmd, io.mem.req.bits.size, io.mem.req.bits.wmask, io.mem.req.bits.wdata, io.mem.resp.ready, io.mem.resp.valid, io.mem.resp.bits.rdata, io.mem.resp.bits.cmd) @[Debug.scala 57:13]
                      skip @[Debug.scala 57:13]
                    skip @[Debug.scala 55:31]
                  reg _T_402 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
                  node _T_403 = add(_T_402, UInt<1>("h01")) @[GTimer.scala 25:12]
                  node _T_404 = tail(_T_403, 1) @[GTimer.scala 25:12]
                  _T_402 <= _T_404 @[GTimer.scala 25:7]
                  wire _T_405 : UInt<1>
                  _T_405 <= UInt<1>("h00")
                  node _T_406 = and(UInt<1>("h01"), _T_405) @[Debug.scala 55:16]
                  when _T_406 : @[Debug.scala 55:31]
                    node _T_407 = asUInt(reset) @[Debug.scala 57:13]
                    node _T_408 = eq(_T_407, UInt<1>("h00")) @[Debug.scala 57:13]
                    when _T_408 : @[Debug.scala 57:13]
                      printf(clock, UInt<1>(1), " level:%d", level) @[Debug.scala 57:13]
                      skip @[Debug.scala 57:13]
                    skip @[Debug.scala 55:31]
                  reg _T_409 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
                  node _T_410 = add(_T_409, UInt<1>("h01")) @[GTimer.scala 25:12]
                  node _T_411 = tail(_T_410, 1) @[GTimer.scala 25:12]
                  _T_409 <= _T_411 @[GTimer.scala 25:7]
                  wire _T_412 : UInt<1>
                  _T_412 <= UInt<1>("h00")
                  node _T_413 = and(UInt<1>("h01"), _T_412) @[Debug.scala 55:16]
                  when _T_413 : @[Debug.scala 55:31]
                    node _T_414 = asUInt(reset) @[Debug.scala 57:13]
                    node _T_415 = eq(_T_414, UInt<1>("h00")) @[Debug.scala 57:13]
                    when _T_415 : @[Debug.scala 57:13]
                      printf(clock, UInt<1>(1), "\n") @[Debug.scala 57:13]
                      skip @[Debug.scala 57:13]
                    skip @[Debug.scala 55:31]
                  skip @[EmbeddedTLB.scala 298:60]
                else : @[EmbeddedTLB.scala 309:23]
                  state <= UInt<3>("h01") @[EmbeddedTLB.scala 310:19]
                  node _T_416 = eq(level, UInt<2>("h03")) @[EmbeddedTLB.scala 311:57]
                  node _T_417 = mux(_T_416, vpn.vpn1, vpn.vpn0) @[EmbeddedTLB.scala 311:50]
                  node _T_418 = cat(memRdata.ppn, _T_417) @[Cat.scala 29:58]
                  node _T_419 = cat(_T_418, UInt<3>("h00")) @[Cat.scala 29:58]
                  raddr <= _T_419 @[EmbeddedTLB.scala 311:19]
                  skip @[EmbeddedTLB.scala 309:23]
                skip @[EmbeddedTLB.scala 297:82]
              else : @[EmbeddedTLB.scala 313:36]
                node _T_420 = neq(level, UInt<1>("h00")) @[EmbeddedTLB.scala 313:27]
                when _T_420 : @[EmbeddedTLB.scala 313:36]
                  node _T_421 = eq(io.pf.priviledgeMode, UInt<1>("h00")) @[EmbeddedTLB.scala 314:61]
                  node _T_422 = eq(_T_358.u, UInt<1>("h00")) @[EmbeddedTLB.scala 314:74]
                  node _T_423 = and(_T_421, _T_422) @[EmbeddedTLB.scala 314:71]
                  node _T_424 = eq(_T_423, UInt<1>("h00")) @[EmbeddedTLB.scala 314:41]
                  node _T_425 = and(_T_358.v, _T_424) @[EmbeddedTLB.scala 314:38]
                  node _T_426 = eq(io.pf.priviledgeMode, UInt<1>("h01")) @[EmbeddedTLB.scala 314:110]
                  node _T_427 = and(_T_426, _T_358.u) @[EmbeddedTLB.scala 314:120]
                  node _T_428 = eq(io.pf.status_sum, UInt<1>("h00")) @[EmbeddedTLB.scala 314:138]
                  node _T_429 = or(_T_428, UInt<1>("h01")) @[EmbeddedTLB.scala 314:153]
                  node _T_430 = and(_T_427, _T_429) @[EmbeddedTLB.scala 314:134]
                  node _T_431 = eq(_T_430, UInt<1>("h00")) @[EmbeddedTLB.scala 314:90]
                  node _T_432 = and(_T_425, _T_431) @[EmbeddedTLB.scala 314:87]
                  node _T_433 = and(_T_432, _T_358.x) @[EmbeddedTLB.scala 315:36]
                  node _T_434 = and(io.pf.status_mxr, _T_358.x) @[EmbeddedTLB.scala 316:68]
                  node _T_435 = or(_T_358.r, _T_434) @[EmbeddedTLB.scala 316:51]
                  node _T_436 = and(_T_432, _T_435) @[EmbeddedTLB.scala 316:36]
                  node _T_437 = and(_T_432, _T_358.w) @[EmbeddedTLB.scala 317:37]
                  node _T_438 = eq(_T_358.a, UInt<1>("h00")) @[EmbeddedTLB.scala 318:60]
                  node _T_439 = eq(_T_358.d, UInt<1>("h00")) @[EmbeddedTLB.scala 318:76]
                  node _T_440 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
                  node _T_441 = and(_T_439, _T_440) @[EmbeddedTLB.scala 318:88]
                  node _T_442 = or(_T_438, _T_441) @[EmbeddedTLB.scala 318:72]
                  node _T_443 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
                  node _T_444 = cat(UInt<1>("h01"), UInt<6>("h00")) @[Cat.scala 29:58]
                  node _T_445 = cat(UInt<56>("h00"), _T_443) @[Cat.scala 29:58]
                  node _T_446 = cat(_T_445, _T_444) @[Cat.scala 29:58]
                  node _T_447 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
                  node _T_448 = cat(_T_447, UInt<1>("h01")) @[Cat.scala 29:58]
                  node _T_449 = cat(_T_448, UInt<6>("h00")) @[Cat.scala 29:58]
                  node _T_450 = cat(_T_358.r, _T_358.v) @[EmbeddedTLB.scala 320:79]
                  node _T_451 = cat(_T_358.x, _T_358.w) @[EmbeddedTLB.scala 320:79]
                  node _T_452 = cat(_T_451, _T_450) @[EmbeddedTLB.scala 320:79]
                  node _T_453 = cat(_T_358.g, _T_358.u) @[EmbeddedTLB.scala 320:79]
                  node _T_454 = cat(_T_358.d, _T_358.a) @[EmbeddedTLB.scala 320:79]
                  node _T_455 = cat(_T_454, _T_453) @[EmbeddedTLB.scala 320:79]
                  node _T_456 = cat(_T_455, _T_452) @[EmbeddedTLB.scala 320:79]
                  node _T_457 = or(_T_449, _T_456) @[EmbeddedTLB.scala 320:68]
                  missRefillFlag <= _T_457 @[EmbeddedTLB.scala 320:26]
                  node _T_458 = or(io.mem.resp.bits.rdata, _T_446) @[EmbeddedTLB.scala 321:50]
                  memRespStore <= _T_458 @[EmbeddedTLB.scala 321:24]
                  node _T_459 = eq(_T_433, UInt<1>("h00")) @[EmbeddedTLB.scala 323:19]
                  when _T_459 : @[EmbeddedTLB.scala 323:30]
                    missIPF <= UInt<1>("h01") @[EmbeddedTLB.scala 323:40]
                    state <= UInt<3>("h04") @[EmbeddedTLB.scala 323:58]
                    skip @[EmbeddedTLB.scala 323:30]
                  else : @[EmbeddedTLB.scala 324:24]
                    node _T_460 = mux(_T_442, UInt<3>("h03"), UInt<3>("h04")) @[EmbeddedTLB.scala 325:27]
                    state <= _T_460 @[EmbeddedTLB.scala 325:21]
                    missMetaRefill <= UInt<1>("h01") @[EmbeddedTLB.scala 326:30]
                    skip @[EmbeddedTLB.scala 324:24]
                  node _T_461 = eq(level, UInt<2>("h03")) @[EmbeddedTLB.scala 339:32]
                  node _T_462 = eq(level, UInt<2>("h02")) @[EmbeddedTLB.scala 339:65]
                  node _T_463 = mux(_T_462, UInt<18>("h03fe00"), UInt<18>("h03ffff")) @[EmbeddedTLB.scala 339:59]
                  node _T_464 = mux(_T_461, UInt<18>("h00"), _T_463) @[EmbeddedTLB.scala 339:26]
                  missMask <= _T_464 @[EmbeddedTLB.scala 339:20]
                  missMaskStore <= missMask @[EmbeddedTLB.scala 340:25]
                  skip @[EmbeddedTLB.scala 313:36]
            node _T_465 = sub(level, UInt<1>("h01")) @[EmbeddedTLB.scala 342:24]
            node _T_466 = tail(_T_465, 1) @[EmbeddedTLB.scala 342:24]
            level <= _T_466 @[EmbeddedTLB.scala 342:15]
            skip @[EmbeddedTLB.scala 293:33]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_467 = eq(UInt<3>("h03"), state) @[Conditional.scala 37:30]
          when _T_467 : @[Conditional.scala 39:67]
            when isFlush : @[EmbeddedTLB.scala 347:22]
              state <= UInt<3>("h00") @[EmbeddedTLB.scala 348:15]
              needFlush <= UInt<1>("h00") @[EmbeddedTLB.scala 349:19]
              skip @[EmbeddedTLB.scala 347:22]
            else : @[EmbeddedTLB.scala 350:38]
              node _T_468 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
              when _T_468 : @[EmbeddedTLB.scala 350:38]
                state <= UInt<3>("h04") @[EmbeddedTLB.scala 350:46]
                skip @[EmbeddedTLB.scala 350:38]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_469 = eq(UInt<3>("h04"), state) @[Conditional.scala 37:30]
            when _T_469 : @[Conditional.scala 39:67]
              node _T_470 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
              node _T_471 = or(_T_470, io.flush) @[EmbeddedTLB.scala 353:44]
              node _T_472 = or(_T_471, alreadyOutFire) @[EmbeddedTLB.scala 353:55]
              when _T_472 : @[EmbeddedTLB.scala 353:73]
                state <= UInt<3>("h00") @[EmbeddedTLB.scala 354:13]
                missIPF <= UInt<1>("h00") @[EmbeddedTLB.scala 355:15]
                alreadyOutFire <= UInt<1>("h00") @[EmbeddedTLB.scala 356:22]
                skip @[EmbeddedTLB.scala 353:73]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_473 = eq(UInt<3>("h05"), state) @[Conditional.scala 37:30]
              when _T_473 : @[Conditional.scala 39:67]
                state <= UInt<3>("h00") @[EmbeddedTLB.scala 360:13]
                skip @[Conditional.scala 39:67]
    node _T_474 = eq(state, UInt<3>("h03")) @[EmbeddedTLB.scala 365:23]
    node cmd = mux(_T_474, UInt<1>("h01"), UInt<1>("h00")) @[EmbeddedTLB.scala 365:16]
    node _T_475 = mux(hitWB, hitData.pteaddr, raddr) @[EmbeddedTLB.scala 366:35]
    node _T_476 = mux(hitWB, hitWBStore, memRespStore) @[EmbeddedTLB.scala 366:138]
    io.mem.req.bits.addr <= _T_475 @[SimpleBus.scala 64:15]
    io.mem.req.bits.cmd <= cmd @[SimpleBus.scala 65:14]
    io.mem.req.bits.size <= UInt<2>("h03") @[SimpleBus.scala 66:15]
    io.mem.req.bits.wdata <= _T_476 @[SimpleBus.scala 67:16]
    io.mem.req.bits.wmask <= UInt<8>("h0ff") @[SimpleBus.scala 68:16]
    node _T_477 = eq(state, UInt<3>("h01")) @[EmbeddedTLB.scala 367:31]
    node _T_478 = eq(state, UInt<3>("h03")) @[EmbeddedTLB.scala 367:57]
    node _T_479 = or(_T_477, _T_478) @[EmbeddedTLB.scala 367:48]
    node _T_480 = eq(isFlush, UInt<1>("h00")) @[EmbeddedTLB.scala 367:77]
    node _T_481 = and(_T_479, _T_480) @[EmbeddedTLB.scala 367:74]
    io.mem.req.valid <= _T_481 @[EmbeddedTLB.scala 367:20]
    io.mem.resp.ready <= UInt<1>("h01") @[EmbeddedTLB.scala 368:21]
    node _T_482 = eq(isFlush, UInt<1>("h00")) @[EmbeddedTLB.scala 371:53]
    node _T_483 = and(missMetaRefill, _T_482) @[EmbeddedTLB.scala 371:50]
    node _T_484 = eq(state, UInt<3>("h00")) @[EmbeddedTLB.scala 371:82]
    node _T_485 = and(hitWB, _T_484) @[EmbeddedTLB.scala 371:73]
    node _T_486 = eq(isFlush, UInt<1>("h00")) @[EmbeddedTLB.scala 371:96]
    node _T_487 = and(_T_485, _T_486) @[EmbeddedTLB.scala 371:93]
    node _T_488 = or(_T_483, _T_487) @[EmbeddedTLB.scala 371:63]
    reg _T_489 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EmbeddedTLB.scala 371:33]
    _T_489 <= _T_488 @[EmbeddedTLB.scala 371:33]
    wire _T_490 : {tag : UInt<26>, index : UInt<1>, off : UInt<12>} @[TLB.scala 200:19]
    wire _T_491 : UInt<39>
    _T_491 <= io.in.bits.addr
    node _T_492 = bits(_T_491, 11, 0) @[TLB.scala 200:19]
    _T_490.off <= _T_492 @[TLB.scala 200:19]
    node _T_493 = bits(_T_491, 12, 12) @[TLB.scala 200:19]
    _T_490.index <= _T_493 @[TLB.scala 200:19]
    node _T_494 = bits(_T_491, 38, 13) @[TLB.scala 200:19]
    _T_490.tag <= _T_494 @[TLB.scala 200:19]
    reg _T_495 : UInt, clock @[EmbeddedTLB.scala 372:21]
    _T_495 <= _T_490.index @[EmbeddedTLB.scala 372:21]
    reg _T_496 : UInt, clock @[EmbeddedTLB.scala 372:60]
    _T_496 <= waymask @[EmbeddedTLB.scala 372:60]
    node _T_497 = cat(vpn.vpn2, vpn.vpn1) @[EmbeddedTLB.scala 372:89]
    node _T_498 = cat(_T_497, vpn.vpn0) @[EmbeddedTLB.scala 372:89]
    reg _T_499 : UInt, clock @[EmbeddedTLB.scala 372:84]
    _T_499 <= _T_498 @[EmbeddedTLB.scala 372:84]
    node _T_500 = mux(hitWB, hitMeta.asid, satp.asid) @[EmbeddedTLB.scala 373:23]
    reg _T_501 : UInt, clock @[EmbeddedTLB.scala 373:19]
    _T_501 <= _T_500 @[EmbeddedTLB.scala 373:19]
    node _T_502 = mux(hitWB, hitMeta.mask, missMask) @[EmbeddedTLB.scala 373:76]
    reg _T_503 : UInt, clock @[EmbeddedTLB.scala 373:72]
    _T_503 <= _T_502 @[EmbeddedTLB.scala 373:72]
    node _T_504 = mux(hitWB, hitRefillFlag, missRefillFlag) @[EmbeddedTLB.scala 374:23]
    reg _T_505 : UInt, clock @[EmbeddedTLB.scala 374:19]
    _T_505 <= _T_504 @[EmbeddedTLB.scala 374:19]
    node _T_506 = mux(hitWB, hitData.ppn, memRdata.ppn) @[EmbeddedTLB.scala 374:81]
    reg _T_507 : UInt, clock @[EmbeddedTLB.scala 374:77]
    _T_507 <= _T_506 @[EmbeddedTLB.scala 374:77]
    node _T_508 = mux(hitWB, hitData.pteaddr, raddr) @[EmbeddedTLB.scala 375:27]
    reg _T_509 : UInt, clock @[EmbeddedTLB.scala 375:22]
    _T_509 <= _T_508 @[EmbeddedTLB.scala 375:22]
    io.mdWrite.wen <= _T_489 @[TLB.scala 214:14]
    io.mdWrite.windex <= _T_495 @[TLB.scala 215:17]
    io.mdWrite.waymask <= _T_496 @[TLB.scala 216:18]
    node _T_510 = cat(_T_505, _T_507) @[Cat.scala 29:58]
    node _T_511 = cat(_T_510, _T_509) @[Cat.scala 29:58]
    node _T_512 = cat(_T_499, _T_501) @[Cat.scala 29:58]
    node _T_513 = cat(_T_512, _T_503) @[Cat.scala 29:58]
    node _T_514 = cat(_T_513, _T_511) @[Cat.scala 29:58]
    io.mdWrite.wdata <= _T_514 @[TLB.scala 217:16]
    io.out.bits.user <= io.in.bits.user @[EmbeddedTLB.scala 378:15]
    io.out.bits.wdata <= io.in.bits.wdata @[EmbeddedTLB.scala 378:15]
    io.out.bits.wmask <= io.in.bits.wmask @[EmbeddedTLB.scala 378:15]
    io.out.bits.cmd <= io.in.bits.cmd @[EmbeddedTLB.scala 378:15]
    io.out.bits.size <= io.in.bits.size @[EmbeddedTLB.scala 378:15]
    io.out.bits.addr <= io.in.bits.addr @[EmbeddedTLB.scala 378:15]
    node _T_515 = bits(io.in.bits.addr, 31, 0) @[EmbeddedTLB.scala 379:63]
    node _T_516 = cat(hitData.ppn, UInt<12>("h00")) @[Cat.scala 29:58]
    node _T_517 = mux(UInt<1>("h01"), UInt<2>("h03"), UInt<2>("h00")) @[Bitwise.scala 72:12]
    node _T_518 = cat(_T_517, hitMeta.mask) @[Cat.scala 29:58]
    node _T_519 = cat(_T_518, UInt<12>("h00")) @[Cat.scala 29:58]
    node _T_520 = and(_T_516, _T_519) @[BitUtils.scala 32:13]
    node _T_521 = not(_T_519) @[BitUtils.scala 32:38]
    node _T_522 = and(_T_515, _T_521) @[BitUtils.scala 32:36]
    node _T_523 = or(_T_520, _T_522) @[BitUtils.scala 32:25]
    wire _T_524 : {reserved : UInt<34>, ppn : UInt<20>, rsw : UInt<2>, flag : {d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>}} @[EmbeddedTLB.scala 379:122]
    wire _T_525 : UInt<64>
    _T_525 <= memRespStore
    node _T_526 = bits(_T_525, 0, 0) @[EmbeddedTLB.scala 379:122]
    _T_524.flag.v <= _T_526 @[EmbeddedTLB.scala 379:122]
    node _T_527 = bits(_T_525, 1, 1) @[EmbeddedTLB.scala 379:122]
    _T_524.flag.r <= _T_527 @[EmbeddedTLB.scala 379:122]
    node _T_528 = bits(_T_525, 2, 2) @[EmbeddedTLB.scala 379:122]
    _T_524.flag.w <= _T_528 @[EmbeddedTLB.scala 379:122]
    node _T_529 = bits(_T_525, 3, 3) @[EmbeddedTLB.scala 379:122]
    _T_524.flag.x <= _T_529 @[EmbeddedTLB.scala 379:122]
    node _T_530 = bits(_T_525, 4, 4) @[EmbeddedTLB.scala 379:122]
    _T_524.flag.u <= _T_530 @[EmbeddedTLB.scala 379:122]
    node _T_531 = bits(_T_525, 5, 5) @[EmbeddedTLB.scala 379:122]
    _T_524.flag.g <= _T_531 @[EmbeddedTLB.scala 379:122]
    node _T_532 = bits(_T_525, 6, 6) @[EmbeddedTLB.scala 379:122]
    _T_524.flag.a <= _T_532 @[EmbeddedTLB.scala 379:122]
    node _T_533 = bits(_T_525, 7, 7) @[EmbeddedTLB.scala 379:122]
    _T_524.flag.d <= _T_533 @[EmbeddedTLB.scala 379:122]
    node _T_534 = bits(_T_525, 9, 8) @[EmbeddedTLB.scala 379:122]
    _T_524.rsw <= _T_534 @[EmbeddedTLB.scala 379:122]
    node _T_535 = bits(_T_525, 29, 10) @[EmbeddedTLB.scala 379:122]
    _T_524.ppn <= _T_535 @[EmbeddedTLB.scala 379:122]
    node _T_536 = bits(_T_525, 63, 30) @[EmbeddedTLB.scala 379:122]
    _T_524.reserved <= _T_536 @[EmbeddedTLB.scala 379:122]
    node _T_537 = bits(io.in.bits.addr, 31, 0) @[EmbeddedTLB.scala 379:147]
    node _T_538 = cat(_T_524.ppn, UInt<12>("h00")) @[Cat.scala 29:58]
    node _T_539 = mux(UInt<1>("h01"), UInt<2>("h03"), UInt<2>("h00")) @[Bitwise.scala 72:12]
    node _T_540 = cat(_T_539, missMaskStore) @[Cat.scala 29:58]
    node _T_541 = cat(_T_540, UInt<12>("h00")) @[Cat.scala 29:58]
    node _T_542 = and(_T_538, _T_541) @[BitUtils.scala 32:13]
    node _T_543 = not(_T_541) @[BitUtils.scala 32:38]
    node _T_544 = and(_T_537, _T_543) @[BitUtils.scala 32:36]
    node _T_545 = or(_T_542, _T_544) @[BitUtils.scala 32:25]
    node _T_546 = mux(hit, _T_523, _T_545) @[EmbeddedTLB.scala 379:26]
    io.out.bits.addr <= _T_546 @[EmbeddedTLB.scala 379:20]
    node _T_547 = eq(hitWB, UInt<1>("h00")) @[EmbeddedTLB.scala 380:45]
    node _T_548 = and(hit, _T_547) @[EmbeddedTLB.scala 380:42]
    node _T_549 = or(io.pf.loadPF, io.pf.storePF) @[Bundle.scala 129:23]
    node _T_550 = or(_T_549, loadPF) @[EmbeddedTLB.scala 380:68]
    node _T_551 = or(_T_550, storePF) @[EmbeddedTLB.scala 380:78]
    node _T_552 = eq(_T_551, UInt<1>("h00")) @[EmbeddedTLB.scala 380:53]
    node _T_553 = eq(state, UInt<3>("h04")) @[EmbeddedTLB.scala 380:97]
    node _T_554 = mux(_T_548, _T_552, _T_553) @[EmbeddedTLB.scala 380:37]
    node _T_555 = and(io.in.valid, _T_554) @[EmbeddedTLB.scala 380:31]
    io.out.valid <= _T_555 @[EmbeddedTLB.scala 380:16]
    node _T_556 = eq(state, UInt<3>("h00")) @[EmbeddedTLB.scala 382:41]
    node _T_557 = and(io.out.ready, _T_556) @[EmbeddedTLB.scala 382:31]
    node _T_558 = eq(miss, UInt<1>("h00")) @[EmbeddedTLB.scala 382:56]
    node _T_559 = and(_T_557, _T_558) @[EmbeddedTLB.scala 382:53]
    node _T_560 = eq(hitWB, UInt<1>("h00")) @[EmbeddedTLB.scala 382:65]
    node _T_561 = and(_T_559, _T_560) @[EmbeddedTLB.scala 382:62]
    node _T_562 = and(_T_561, io.mdReady) @[EmbeddedTLB.scala 382:72]
    node _T_563 = or(io.pf.loadPF, io.pf.storePF) @[Bundle.scala 129:23]
    node _T_564 = eq(_T_563, UInt<1>("h00")) @[EmbeddedTLB.scala 382:90]
    node _T_565 = eq(loadPF, UInt<1>("h00")) @[EmbeddedTLB.scala 382:107]
    node _T_566 = and(_T_564, _T_565) @[EmbeddedTLB.scala 382:104]
    node _T_567 = eq(storePF, UInt<1>("h00")) @[EmbeddedTLB.scala 382:118]
    node _T_568 = and(_T_566, _T_567) @[EmbeddedTLB.scala 382:115]
    node _T_569 = and(_T_562, _T_568) @[EmbeddedTLB.scala 382:86]
    io.in.ready <= _T_569 @[EmbeddedTLB.scala 382:15]
    node _T_570 = mux(hit, hitinstrPF, missIPF) @[EmbeddedTLB.scala 384:16]
    io.ipf <= _T_570 @[EmbeddedTLB.scala 384:10]
    node _T_571 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_572 = or(io.pf.loadPF, io.pf.storePF) @[Bundle.scala 129:23]
    node _T_573 = or(_T_571, _T_572) @[EmbeddedTLB.scala 385:32]
    io.isFinish <= _T_573 @[EmbeddedTLB.scala 385:15]
    reg _T_574 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_575 = add(_T_574, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_576 = tail(_T_575, 1) @[GTimer.scala 25:12]
    _T_574 <= _T_576 @[GTimer.scala 25:7]
    wire _T_577 : UInt<1>
    _T_577 <= UInt<1>("h00")
    node _T_578 = and(UInt<1>("h01"), _T_577) @[Debug.scala 55:16]
    when _T_578 : @[Debug.scala 55:31]
      node _T_579 = asUInt(reset) @[Debug.scala 56:24]
      node _T_580 = eq(_T_579, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_580 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] EmbeddedTLBExec: ", _T_574) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_581 = asUInt(reset) @[Debug.scala 57:13]
      node _T_582 = eq(_T_581, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_582 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "In(%d, %d) Out(%d, %d) InAddr:%x OutAddr:%x cmd:%d \n", io.in.valid, io.in.ready, io.out.valid, io.out.ready, io.in.bits.addr, io.out.bits.addr, io.in.bits.cmd) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    reg _T_583 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_584 = add(_T_583, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_585 = tail(_T_584, 1) @[GTimer.scala 25:12]
    _T_583 <= _T_585 @[GTimer.scala 25:7]
    wire _T_586 : UInt<1>
    _T_586 <= UInt<1>("h00")
    node _T_587 = and(UInt<1>("h01"), _T_586) @[Debug.scala 55:16]
    when _T_587 : @[Debug.scala 55:31]
      node _T_588 = asUInt(reset) @[Debug.scala 56:24]
      node _T_589 = eq(_T_588, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_589 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] EmbeddedTLBExec: ", _T_583) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_590 = asUInt(reset) @[Debug.scala 57:13]
      node _T_591 = eq(_T_590, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_591 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "isAMO:%d io.Flush:%d needFlush:%d alreadyOutFire:%d isFinish:%d\n", isAMO, io.flush, needFlush, alreadyOutFire, io.isFinish) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_592 = cat(hitFlag.r, hitFlag.v) @[EmbeddedTLB.scala 389:171]
    node _T_593 = cat(hitFlag.x, hitFlag.w) @[EmbeddedTLB.scala 389:171]
    node _T_594 = cat(_T_593, _T_592) @[EmbeddedTLB.scala 389:171]
    node _T_595 = cat(hitFlag.g, hitFlag.u) @[EmbeddedTLB.scala 389:171]
    node _T_596 = cat(hitFlag.d, hitFlag.a) @[EmbeddedTLB.scala 389:171]
    node _T_597 = cat(_T_596, _T_595) @[EmbeddedTLB.scala 389:171]
    node _T_598 = cat(_T_597, _T_594) @[EmbeddedTLB.scala 389:171]
    reg _T_599 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_600 = add(_T_599, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_601 = tail(_T_600, 1) @[GTimer.scala 25:12]
    _T_599 <= _T_601 @[GTimer.scala 25:7]
    wire _T_602 : UInt<1>
    _T_602 <= UInt<1>("h00")
    node _T_603 = and(UInt<1>("h01"), _T_602) @[Debug.scala 55:16]
    when _T_603 : @[Debug.scala 55:31]
      node _T_604 = asUInt(reset) @[Debug.scala 56:24]
      node _T_605 = eq(_T_604, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_605 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] EmbeddedTLBExec: ", _T_599) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_606 = asUInt(reset) @[Debug.scala 57:13]
      node _T_607 = eq(_T_606, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_607 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "hit:%d hitWB:%d hitVPN:%x hitFlag:%x hitPPN:%x hitRefillFlag:%x hitWBStore:%x hitCheck:%d hitExec:%d hitLoad:%d hitStore:%d\n", hit, hitWB, hitMeta.vpn, _T_598, hitData.ppn, hitRefillFlag, hitWBStore, hitCheck, hitExec, hitLoad, hitStore) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_608 = cat(memRdata.flag.r, memRdata.flag.v) @[EmbeddedTLB.scala 390:145]
    node _T_609 = cat(memRdata.flag.u, memRdata.flag.x) @[EmbeddedTLB.scala 390:145]
    node _T_610 = cat(_T_609, memRdata.flag.w) @[EmbeddedTLB.scala 390:145]
    node _T_611 = cat(_T_610, _T_608) @[EmbeddedTLB.scala 390:145]
    node _T_612 = cat(memRdata.flag.d, memRdata.flag.a) @[EmbeddedTLB.scala 390:145]
    node _T_613 = cat(_T_612, memRdata.flag.g) @[EmbeddedTLB.scala 390:145]
    node _T_614 = cat(memRdata.reserved, memRdata.ppn) @[EmbeddedTLB.scala 390:145]
    node _T_615 = cat(_T_614, memRdata.rsw) @[EmbeddedTLB.scala 390:145]
    node _T_616 = cat(_T_615, _T_613) @[EmbeddedTLB.scala 390:145]
    node _T_617 = cat(_T_616, _T_611) @[EmbeddedTLB.scala 390:145]
    reg _T_618 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_619 = add(_T_618, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_620 = tail(_T_619, 1) @[GTimer.scala 25:12]
    _T_618 <= _T_620 @[GTimer.scala 25:7]
    wire _T_621 : UInt<1>
    _T_621 <= UInt<1>("h00")
    node _T_622 = and(UInt<1>("h01"), _T_621) @[Debug.scala 55:16]
    when _T_622 : @[Debug.scala 55:31]
      node _T_623 = asUInt(reset) @[Debug.scala 56:24]
      node _T_624 = eq(_T_623, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_624 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] EmbeddedTLBExec: ", _T_618) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_625 = asUInt(reset) @[Debug.scala 57:13]
      node _T_626 = eq(_T_625, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_626 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "miss:%d state:%d level:%d raddr:%x memRdata:%x missMask:%x missRefillFlag:%x missMetaRefill:%d\n", miss, state, level, raddr, _T_617, missMask, missRefillFlag, missMetaRefill) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    wire _T_627 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 391:96]
    wire _T_628 : UInt<121>
    _T_628 <= io.md[0]
    node _T_629 = bits(_T_628, 31, 0) @[EmbeddedTLB.scala 391:96]
    _T_627.pteaddr <= _T_629 @[EmbeddedTLB.scala 391:96]
    node _T_630 = bits(_T_628, 51, 32) @[EmbeddedTLB.scala 391:96]
    _T_627.ppn <= _T_630 @[EmbeddedTLB.scala 391:96]
    node _T_631 = bits(_T_628, 59, 52) @[EmbeddedTLB.scala 391:96]
    _T_627.flag <= _T_631 @[EmbeddedTLB.scala 391:96]
    node _T_632 = bits(_T_628, 77, 60) @[EmbeddedTLB.scala 391:96]
    _T_627.mask <= _T_632 @[EmbeddedTLB.scala 391:96]
    node _T_633 = bits(_T_628, 93, 78) @[EmbeddedTLB.scala 391:96]
    _T_627.asid <= _T_633 @[EmbeddedTLB.scala 391:96]
    node _T_634 = bits(_T_628, 120, 94) @[EmbeddedTLB.scala 391:96]
    _T_627.vpn <= _T_634 @[EmbeddedTLB.scala 391:96]
    wire _T_635 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 391:127]
    wire _T_636 : UInt<121>
    _T_636 <= io.md[0]
    node _T_637 = bits(_T_636, 31, 0) @[EmbeddedTLB.scala 391:127]
    _T_635.pteaddr <= _T_637 @[EmbeddedTLB.scala 391:127]
    node _T_638 = bits(_T_636, 51, 32) @[EmbeddedTLB.scala 391:127]
    _T_635.ppn <= _T_638 @[EmbeddedTLB.scala 391:127]
    node _T_639 = bits(_T_636, 59, 52) @[EmbeddedTLB.scala 391:127]
    _T_635.flag <= _T_639 @[EmbeddedTLB.scala 391:127]
    node _T_640 = bits(_T_636, 77, 60) @[EmbeddedTLB.scala 391:127]
    _T_635.mask <= _T_640 @[EmbeddedTLB.scala 391:127]
    node _T_641 = bits(_T_636, 93, 78) @[EmbeddedTLB.scala 391:127]
    _T_635.asid <= _T_641 @[EmbeddedTLB.scala 391:127]
    node _T_642 = bits(_T_636, 120, 94) @[EmbeddedTLB.scala 391:127]
    _T_635.vpn <= _T_642 @[EmbeddedTLB.scala 391:127]
    wire _T_643 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 391:159]
    wire _T_644 : UInt<121>
    _T_644 <= io.md[0]
    node _T_645 = bits(_T_644, 31, 0) @[EmbeddedTLB.scala 391:159]
    _T_643.pteaddr <= _T_645 @[EmbeddedTLB.scala 391:159]
    node _T_646 = bits(_T_644, 51, 32) @[EmbeddedTLB.scala 391:159]
    _T_643.ppn <= _T_646 @[EmbeddedTLB.scala 391:159]
    node _T_647 = bits(_T_644, 59, 52) @[EmbeddedTLB.scala 391:159]
    _T_643.flag <= _T_647 @[EmbeddedTLB.scala 391:159]
    node _T_648 = bits(_T_644, 77, 60) @[EmbeddedTLB.scala 391:159]
    _T_643.mask <= _T_648 @[EmbeddedTLB.scala 391:159]
    node _T_649 = bits(_T_644, 93, 78) @[EmbeddedTLB.scala 391:159]
    _T_643.asid <= _T_649 @[EmbeddedTLB.scala 391:159]
    node _T_650 = bits(_T_644, 120, 94) @[EmbeddedTLB.scala 391:159]
    _T_643.vpn <= _T_650 @[EmbeddedTLB.scala 391:159]
    wire _T_651 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 391:190]
    wire _T_652 : UInt<121>
    _T_652 <= io.md[1]
    node _T_653 = bits(_T_652, 31, 0) @[EmbeddedTLB.scala 391:190]
    _T_651.pteaddr <= _T_653 @[EmbeddedTLB.scala 391:190]
    node _T_654 = bits(_T_652, 51, 32) @[EmbeddedTLB.scala 391:190]
    _T_651.ppn <= _T_654 @[EmbeddedTLB.scala 391:190]
    node _T_655 = bits(_T_652, 59, 52) @[EmbeddedTLB.scala 391:190]
    _T_651.flag <= _T_655 @[EmbeddedTLB.scala 391:190]
    node _T_656 = bits(_T_652, 77, 60) @[EmbeddedTLB.scala 391:190]
    _T_651.mask <= _T_656 @[EmbeddedTLB.scala 391:190]
    node _T_657 = bits(_T_652, 93, 78) @[EmbeddedTLB.scala 391:190]
    _T_651.asid <= _T_657 @[EmbeddedTLB.scala 391:190]
    node _T_658 = bits(_T_652, 120, 94) @[EmbeddedTLB.scala 391:190]
    _T_651.vpn <= _T_658 @[EmbeddedTLB.scala 391:190]
    wire _T_659 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 391:221]
    wire _T_660 : UInt<121>
    _T_660 <= io.md[1]
    node _T_661 = bits(_T_660, 31, 0) @[EmbeddedTLB.scala 391:221]
    _T_659.pteaddr <= _T_661 @[EmbeddedTLB.scala 391:221]
    node _T_662 = bits(_T_660, 51, 32) @[EmbeddedTLB.scala 391:221]
    _T_659.ppn <= _T_662 @[EmbeddedTLB.scala 391:221]
    node _T_663 = bits(_T_660, 59, 52) @[EmbeddedTLB.scala 391:221]
    _T_659.flag <= _T_663 @[EmbeddedTLB.scala 391:221]
    node _T_664 = bits(_T_660, 77, 60) @[EmbeddedTLB.scala 391:221]
    _T_659.mask <= _T_664 @[EmbeddedTLB.scala 391:221]
    node _T_665 = bits(_T_660, 93, 78) @[EmbeddedTLB.scala 391:221]
    _T_659.asid <= _T_665 @[EmbeddedTLB.scala 391:221]
    node _T_666 = bits(_T_660, 120, 94) @[EmbeddedTLB.scala 391:221]
    _T_659.vpn <= _T_666 @[EmbeddedTLB.scala 391:221]
    wire _T_667 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 391:253]
    wire _T_668 : UInt<121>
    _T_668 <= io.md[1]
    node _T_669 = bits(_T_668, 31, 0) @[EmbeddedTLB.scala 391:253]
    _T_667.pteaddr <= _T_669 @[EmbeddedTLB.scala 391:253]
    node _T_670 = bits(_T_668, 51, 32) @[EmbeddedTLB.scala 391:253]
    _T_667.ppn <= _T_670 @[EmbeddedTLB.scala 391:253]
    node _T_671 = bits(_T_668, 59, 52) @[EmbeddedTLB.scala 391:253]
    _T_667.flag <= _T_671 @[EmbeddedTLB.scala 391:253]
    node _T_672 = bits(_T_668, 77, 60) @[EmbeddedTLB.scala 391:253]
    _T_667.mask <= _T_672 @[EmbeddedTLB.scala 391:253]
    node _T_673 = bits(_T_668, 93, 78) @[EmbeddedTLB.scala 391:253]
    _T_667.asid <= _T_673 @[EmbeddedTLB.scala 391:253]
    node _T_674 = bits(_T_668, 120, 94) @[EmbeddedTLB.scala 391:253]
    _T_667.vpn <= _T_674 @[EmbeddedTLB.scala 391:253]
    wire _T_675 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 391:284]
    wire _T_676 : UInt<121>
    _T_676 <= io.md[2]
    node _T_677 = bits(_T_676, 31, 0) @[EmbeddedTLB.scala 391:284]
    _T_675.pteaddr <= _T_677 @[EmbeddedTLB.scala 391:284]
    node _T_678 = bits(_T_676, 51, 32) @[EmbeddedTLB.scala 391:284]
    _T_675.ppn <= _T_678 @[EmbeddedTLB.scala 391:284]
    node _T_679 = bits(_T_676, 59, 52) @[EmbeddedTLB.scala 391:284]
    _T_675.flag <= _T_679 @[EmbeddedTLB.scala 391:284]
    node _T_680 = bits(_T_676, 77, 60) @[EmbeddedTLB.scala 391:284]
    _T_675.mask <= _T_680 @[EmbeddedTLB.scala 391:284]
    node _T_681 = bits(_T_676, 93, 78) @[EmbeddedTLB.scala 391:284]
    _T_675.asid <= _T_681 @[EmbeddedTLB.scala 391:284]
    node _T_682 = bits(_T_676, 120, 94) @[EmbeddedTLB.scala 391:284]
    _T_675.vpn <= _T_682 @[EmbeddedTLB.scala 391:284]
    wire _T_683 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 391:315]
    wire _T_684 : UInt<121>
    _T_684 <= io.md[2]
    node _T_685 = bits(_T_684, 31, 0) @[EmbeddedTLB.scala 391:315]
    _T_683.pteaddr <= _T_685 @[EmbeddedTLB.scala 391:315]
    node _T_686 = bits(_T_684, 51, 32) @[EmbeddedTLB.scala 391:315]
    _T_683.ppn <= _T_686 @[EmbeddedTLB.scala 391:315]
    node _T_687 = bits(_T_684, 59, 52) @[EmbeddedTLB.scala 391:315]
    _T_683.flag <= _T_687 @[EmbeddedTLB.scala 391:315]
    node _T_688 = bits(_T_684, 77, 60) @[EmbeddedTLB.scala 391:315]
    _T_683.mask <= _T_688 @[EmbeddedTLB.scala 391:315]
    node _T_689 = bits(_T_684, 93, 78) @[EmbeddedTLB.scala 391:315]
    _T_683.asid <= _T_689 @[EmbeddedTLB.scala 391:315]
    node _T_690 = bits(_T_684, 120, 94) @[EmbeddedTLB.scala 391:315]
    _T_683.vpn <= _T_690 @[EmbeddedTLB.scala 391:315]
    wire _T_691 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 391:347]
    wire _T_692 : UInt<121>
    _T_692 <= io.md[2]
    node _T_693 = bits(_T_692, 31, 0) @[EmbeddedTLB.scala 391:347]
    _T_691.pteaddr <= _T_693 @[EmbeddedTLB.scala 391:347]
    node _T_694 = bits(_T_692, 51, 32) @[EmbeddedTLB.scala 391:347]
    _T_691.ppn <= _T_694 @[EmbeddedTLB.scala 391:347]
    node _T_695 = bits(_T_692, 59, 52) @[EmbeddedTLB.scala 391:347]
    _T_691.flag <= _T_695 @[EmbeddedTLB.scala 391:347]
    node _T_696 = bits(_T_692, 77, 60) @[EmbeddedTLB.scala 391:347]
    _T_691.mask <= _T_696 @[EmbeddedTLB.scala 391:347]
    node _T_697 = bits(_T_692, 93, 78) @[EmbeddedTLB.scala 391:347]
    _T_691.asid <= _T_697 @[EmbeddedTLB.scala 391:347]
    node _T_698 = bits(_T_692, 120, 94) @[EmbeddedTLB.scala 391:347]
    _T_691.vpn <= _T_698 @[EmbeddedTLB.scala 391:347]
    wire _T_699 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 391:378]
    wire _T_700 : UInt<121>
    _T_700 <= io.md[3]
    node _T_701 = bits(_T_700, 31, 0) @[EmbeddedTLB.scala 391:378]
    _T_699.pteaddr <= _T_701 @[EmbeddedTLB.scala 391:378]
    node _T_702 = bits(_T_700, 51, 32) @[EmbeddedTLB.scala 391:378]
    _T_699.ppn <= _T_702 @[EmbeddedTLB.scala 391:378]
    node _T_703 = bits(_T_700, 59, 52) @[EmbeddedTLB.scala 391:378]
    _T_699.flag <= _T_703 @[EmbeddedTLB.scala 391:378]
    node _T_704 = bits(_T_700, 77, 60) @[EmbeddedTLB.scala 391:378]
    _T_699.mask <= _T_704 @[EmbeddedTLB.scala 391:378]
    node _T_705 = bits(_T_700, 93, 78) @[EmbeddedTLB.scala 391:378]
    _T_699.asid <= _T_705 @[EmbeddedTLB.scala 391:378]
    node _T_706 = bits(_T_700, 120, 94) @[EmbeddedTLB.scala 391:378]
    _T_699.vpn <= _T_706 @[EmbeddedTLB.scala 391:378]
    wire _T_707 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 391:409]
    wire _T_708 : UInt<121>
    _T_708 <= io.md[3]
    node _T_709 = bits(_T_708, 31, 0) @[EmbeddedTLB.scala 391:409]
    _T_707.pteaddr <= _T_709 @[EmbeddedTLB.scala 391:409]
    node _T_710 = bits(_T_708, 51, 32) @[EmbeddedTLB.scala 391:409]
    _T_707.ppn <= _T_710 @[EmbeddedTLB.scala 391:409]
    node _T_711 = bits(_T_708, 59, 52) @[EmbeddedTLB.scala 391:409]
    _T_707.flag <= _T_711 @[EmbeddedTLB.scala 391:409]
    node _T_712 = bits(_T_708, 77, 60) @[EmbeddedTLB.scala 391:409]
    _T_707.mask <= _T_712 @[EmbeddedTLB.scala 391:409]
    node _T_713 = bits(_T_708, 93, 78) @[EmbeddedTLB.scala 391:409]
    _T_707.asid <= _T_713 @[EmbeddedTLB.scala 391:409]
    node _T_714 = bits(_T_708, 120, 94) @[EmbeddedTLB.scala 391:409]
    _T_707.vpn <= _T_714 @[EmbeddedTLB.scala 391:409]
    wire _T_715 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 391:441]
    wire _T_716 : UInt<121>
    _T_716 <= io.md[3]
    node _T_717 = bits(_T_716, 31, 0) @[EmbeddedTLB.scala 391:441]
    _T_715.pteaddr <= _T_717 @[EmbeddedTLB.scala 391:441]
    node _T_718 = bits(_T_716, 51, 32) @[EmbeddedTLB.scala 391:441]
    _T_715.ppn <= _T_718 @[EmbeddedTLB.scala 391:441]
    node _T_719 = bits(_T_716, 59, 52) @[EmbeddedTLB.scala 391:441]
    _T_715.flag <= _T_719 @[EmbeddedTLB.scala 391:441]
    node _T_720 = bits(_T_716, 77, 60) @[EmbeddedTLB.scala 391:441]
    _T_715.mask <= _T_720 @[EmbeddedTLB.scala 391:441]
    node _T_721 = bits(_T_716, 93, 78) @[EmbeddedTLB.scala 391:441]
    _T_715.asid <= _T_721 @[EmbeddedTLB.scala 391:441]
    node _T_722 = bits(_T_716, 120, 94) @[EmbeddedTLB.scala 391:441]
    _T_715.vpn <= _T_722 @[EmbeddedTLB.scala 391:441]
    reg _T_723 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_724 = add(_T_723, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_725 = tail(_T_724, 1) @[GTimer.scala 25:12]
    _T_723 <= _T_725 @[GTimer.scala 25:7]
    wire _T_726 : UInt<1>
    _T_726 <= UInt<1>("h00")
    node _T_727 = and(UInt<1>("h01"), _T_726) @[Debug.scala 55:16]
    when _T_727 : @[Debug.scala 55:31]
      node _T_728 = asUInt(reset) @[Debug.scala 56:24]
      node _T_729 = eq(_T_728, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_729 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] EmbeddedTLBExec: ", _T_723) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_730 = asUInt(reset) @[Debug.scala 57:13]
      node _T_731 = eq(_T_730, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_731 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "meta/data: (0)%x|%b|%x (1)%x|%b|%x (2)%x|%b|%x (3)%x|%b|%x rread:%d\n", _T_627.vpn, _T_635.flag, _T_643.ppn, _T_651.vpn, _T_659.flag, _T_667.ppn, _T_675.vpn, _T_683.flag, _T_691.ppn, _T_699.vpn, _T_707.flag, _T_715.ppn, io.mdReady) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    wire _T_732 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 392:183]
    wire _T_733 : UInt<121>
    _T_733 <= io.mdWrite.wdata
    node _T_734 = bits(_T_733, 31, 0) @[EmbeddedTLB.scala 392:183]
    _T_732.pteaddr <= _T_734 @[EmbeddedTLB.scala 392:183]
    node _T_735 = bits(_T_733, 51, 32) @[EmbeddedTLB.scala 392:183]
    _T_732.ppn <= _T_735 @[EmbeddedTLB.scala 392:183]
    node _T_736 = bits(_T_733, 59, 52) @[EmbeddedTLB.scala 392:183]
    _T_732.flag <= _T_736 @[EmbeddedTLB.scala 392:183]
    node _T_737 = bits(_T_733, 77, 60) @[EmbeddedTLB.scala 392:183]
    _T_732.mask <= _T_737 @[EmbeddedTLB.scala 392:183]
    node _T_738 = bits(_T_733, 93, 78) @[EmbeddedTLB.scala 392:183]
    _T_732.asid <= _T_738 @[EmbeddedTLB.scala 392:183]
    node _T_739 = bits(_T_733, 120, 94) @[EmbeddedTLB.scala 392:183]
    _T_732.vpn <= _T_739 @[EmbeddedTLB.scala 392:183]
    wire _T_740 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 392:225]
    wire _T_741 : UInt<121>
    _T_741 <= io.mdWrite.wdata
    node _T_742 = bits(_T_741, 31, 0) @[EmbeddedTLB.scala 392:225]
    _T_740.pteaddr <= _T_742 @[EmbeddedTLB.scala 392:225]
    node _T_743 = bits(_T_741, 51, 32) @[EmbeddedTLB.scala 392:225]
    _T_740.ppn <= _T_743 @[EmbeddedTLB.scala 392:225]
    node _T_744 = bits(_T_741, 59, 52) @[EmbeddedTLB.scala 392:225]
    _T_740.flag <= _T_744 @[EmbeddedTLB.scala 392:225]
    node _T_745 = bits(_T_741, 77, 60) @[EmbeddedTLB.scala 392:225]
    _T_740.mask <= _T_745 @[EmbeddedTLB.scala 392:225]
    node _T_746 = bits(_T_741, 93, 78) @[EmbeddedTLB.scala 392:225]
    _T_740.asid <= _T_746 @[EmbeddedTLB.scala 392:225]
    node _T_747 = bits(_T_741, 120, 94) @[EmbeddedTLB.scala 392:225]
    _T_740.vpn <= _T_747 @[EmbeddedTLB.scala 392:225]
    wire _T_748 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 392:268]
    wire _T_749 : UInt<121>
    _T_749 <= io.mdWrite.wdata
    node _T_750 = bits(_T_749, 31, 0) @[EmbeddedTLB.scala 392:268]
    _T_748.pteaddr <= _T_750 @[EmbeddedTLB.scala 392:268]
    node _T_751 = bits(_T_749, 51, 32) @[EmbeddedTLB.scala 392:268]
    _T_748.ppn <= _T_751 @[EmbeddedTLB.scala 392:268]
    node _T_752 = bits(_T_749, 59, 52) @[EmbeddedTLB.scala 392:268]
    _T_748.flag <= _T_752 @[EmbeddedTLB.scala 392:268]
    node _T_753 = bits(_T_749, 77, 60) @[EmbeddedTLB.scala 392:268]
    _T_748.mask <= _T_753 @[EmbeddedTLB.scala 392:268]
    node _T_754 = bits(_T_749, 93, 78) @[EmbeddedTLB.scala 392:268]
    _T_748.asid <= _T_754 @[EmbeddedTLB.scala 392:268]
    node _T_755 = bits(_T_749, 120, 94) @[EmbeddedTLB.scala 392:268]
    _T_748.vpn <= _T_755 @[EmbeddedTLB.scala 392:268]
    wire _T_756 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 392:311]
    wire _T_757 : UInt<121>
    _T_757 <= io.mdWrite.wdata
    node _T_758 = bits(_T_757, 31, 0) @[EmbeddedTLB.scala 392:311]
    _T_756.pteaddr <= _T_758 @[EmbeddedTLB.scala 392:311]
    node _T_759 = bits(_T_757, 51, 32) @[EmbeddedTLB.scala 392:311]
    _T_756.ppn <= _T_759 @[EmbeddedTLB.scala 392:311]
    node _T_760 = bits(_T_757, 59, 52) @[EmbeddedTLB.scala 392:311]
    _T_756.flag <= _T_760 @[EmbeddedTLB.scala 392:311]
    node _T_761 = bits(_T_757, 77, 60) @[EmbeddedTLB.scala 392:311]
    _T_756.mask <= _T_761 @[EmbeddedTLB.scala 392:311]
    node _T_762 = bits(_T_757, 93, 78) @[EmbeddedTLB.scala 392:311]
    _T_756.asid <= _T_762 @[EmbeddedTLB.scala 392:311]
    node _T_763 = bits(_T_757, 120, 94) @[EmbeddedTLB.scala 392:311]
    _T_756.vpn <= _T_763 @[EmbeddedTLB.scala 392:311]
    wire _T_764 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 392:354]
    wire _T_765 : UInt<121>
    _T_765 <= io.mdWrite.wdata
    node _T_766 = bits(_T_765, 31, 0) @[EmbeddedTLB.scala 392:354]
    _T_764.pteaddr <= _T_766 @[EmbeddedTLB.scala 392:354]
    node _T_767 = bits(_T_765, 51, 32) @[EmbeddedTLB.scala 392:354]
    _T_764.ppn <= _T_767 @[EmbeddedTLB.scala 392:354]
    node _T_768 = bits(_T_765, 59, 52) @[EmbeddedTLB.scala 392:354]
    _T_764.flag <= _T_768 @[EmbeddedTLB.scala 392:354]
    node _T_769 = bits(_T_765, 77, 60) @[EmbeddedTLB.scala 392:354]
    _T_764.mask <= _T_769 @[EmbeddedTLB.scala 392:354]
    node _T_770 = bits(_T_765, 93, 78) @[EmbeddedTLB.scala 392:354]
    _T_764.asid <= _T_770 @[EmbeddedTLB.scala 392:354]
    node _T_771 = bits(_T_765, 120, 94) @[EmbeddedTLB.scala 392:354]
    _T_764.vpn <= _T_771 @[EmbeddedTLB.scala 392:354]
    wire _T_772 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 392:397]
    wire _T_773 : UInt<121>
    _T_773 <= io.mdWrite.wdata
    node _T_774 = bits(_T_773, 31, 0) @[EmbeddedTLB.scala 392:397]
    _T_772.pteaddr <= _T_774 @[EmbeddedTLB.scala 392:397]
    node _T_775 = bits(_T_773, 51, 32) @[EmbeddedTLB.scala 392:397]
    _T_772.ppn <= _T_775 @[EmbeddedTLB.scala 392:397]
    node _T_776 = bits(_T_773, 59, 52) @[EmbeddedTLB.scala 392:397]
    _T_772.flag <= _T_776 @[EmbeddedTLB.scala 392:397]
    node _T_777 = bits(_T_773, 77, 60) @[EmbeddedTLB.scala 392:397]
    _T_772.mask <= _T_777 @[EmbeddedTLB.scala 392:397]
    node _T_778 = bits(_T_773, 93, 78) @[EmbeddedTLB.scala 392:397]
    _T_772.asid <= _T_778 @[EmbeddedTLB.scala 392:397]
    node _T_779 = bits(_T_773, 120, 94) @[EmbeddedTLB.scala 392:397]
    _T_772.vpn <= _T_779 @[EmbeddedTLB.scala 392:397]
    wire _T_780 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 392:439]
    wire _T_781 : UInt<121>
    _T_781 <= io.mdWrite.wdata
    node _T_782 = bits(_T_781, 31, 0) @[EmbeddedTLB.scala 392:439]
    _T_780.pteaddr <= _T_782 @[EmbeddedTLB.scala 392:439]
    node _T_783 = bits(_T_781, 51, 32) @[EmbeddedTLB.scala 392:439]
    _T_780.ppn <= _T_783 @[EmbeddedTLB.scala 392:439]
    node _T_784 = bits(_T_781, 59, 52) @[EmbeddedTLB.scala 392:439]
    _T_780.flag <= _T_784 @[EmbeddedTLB.scala 392:439]
    node _T_785 = bits(_T_781, 77, 60) @[EmbeddedTLB.scala 392:439]
    _T_780.mask <= _T_785 @[EmbeddedTLB.scala 392:439]
    node _T_786 = bits(_T_781, 93, 78) @[EmbeddedTLB.scala 392:439]
    _T_780.asid <= _T_786 @[EmbeddedTLB.scala 392:439]
    node _T_787 = bits(_T_781, 120, 94) @[EmbeddedTLB.scala 392:439]
    _T_780.vpn <= _T_787 @[EmbeddedTLB.scala 392:439]
    reg _T_788 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_789 = add(_T_788, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_790 = tail(_T_789, 1) @[GTimer.scala 25:12]
    _T_788 <= _T_790 @[GTimer.scala 25:7]
    wire _T_791 : UInt<1>
    _T_791 <= UInt<1>("h00")
    node _T_792 = and(UInt<1>("h01"), _T_791) @[Debug.scala 55:16]
    when _T_792 : @[Debug.scala 55:31]
      node _T_793 = asUInt(reset) @[Debug.scala 56:24]
      node _T_794 = eq(_T_793, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_794 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] EmbeddedTLBExec: ", _T_788) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_795 = asUInt(reset) @[Debug.scala 57:13]
      node _T_796 = eq(_T_795, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_796 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "md: wen:%d windex:%x waymask:%x vpn:%x asid:%x mask:%x flag:%x asid:%x ppn:%x pteaddr:%x\n", io.mdWrite.wen, io.mdWrite.windex, io.mdWrite.waymask, _T_732.vpn, _T_740.asid, _T_748.mask, _T_756.flag, _T_764.asid, _T_772.ppn, _T_780.pteaddr) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    reg _T_797 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_798 = add(_T_797, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_799 = tail(_T_798, 1) @[GTimer.scala 25:12]
    _T_797 <= _T_799 @[GTimer.scala 25:7]
    wire _T_800 : UInt<1>
    _T_800 <= UInt<1>("h00")
    node _T_801 = and(UInt<1>("h01"), _T_800) @[Debug.scala 55:16]
    when _T_801 : @[Debug.scala 55:31]
      node _T_802 = asUInt(reset) @[Debug.scala 56:24]
      node _T_803 = eq(_T_802, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_803 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] EmbeddedTLBExec: ", _T_797) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_804 = asUInt(reset) @[Debug.scala 57:13]
      node _T_805 = eq(_T_804, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_805 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "MemReq(%d, %d) MemResp(%d, %d) addr:%x cmd:%d rdata:%x cmd:%d\n", io.mem.req.valid, io.mem.req.ready, io.mem.resp.valid, io.mem.resp.ready, io.mem.req.bits.addr, io.mem.req.bits.cmd, io.mem.resp.bits.rdata, io.mem.resp.bits.cmd) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    reg _T_806 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_807 = add(_T_806, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_808 = tail(_T_807, 1) @[GTimer.scala 25:12]
    _T_806 <= _T_808 @[GTimer.scala 25:7]
    wire _T_809 : UInt<1>
    _T_809 <= UInt<1>("h00")
    node _T_810 = and(UInt<1>("h01"), _T_809) @[Debug.scala 55:16]
    when _T_810 : @[Debug.scala 55:31]
      node _T_811 = asUInt(reset) @[Debug.scala 56:24]
      node _T_812 = eq(_T_811, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_812 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] EmbeddedTLBExec: ", _T_806) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_813 = asUInt(reset) @[Debug.scala 57:13]
      node _T_814 = eq(_T_813, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_814 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "io.ipf:%d hitinstrPF:%d missIPF:%d pf.loadPF:%d pf.storePF:%d loadPF:%d storePF:%d\n", io.ipf, hitinstrPF, missIPF, io.pf.loadPF, io.pf.storePF, loadPF, storePF) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    
  module EmbeddedTLBEmpty : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<87>}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<87>}}}
    
    io.out.bits.user <= io.in.bits.user @[EmbeddedTLB.scala 403:10]
    io.out.bits.wdata <= io.in.bits.wdata @[EmbeddedTLB.scala 403:10]
    io.out.bits.wmask <= io.in.bits.wmask @[EmbeddedTLB.scala 403:10]
    io.out.bits.cmd <= io.in.bits.cmd @[EmbeddedTLB.scala 403:10]
    io.out.bits.size <= io.in.bits.size @[EmbeddedTLB.scala 403:10]
    io.out.bits.addr <= io.in.bits.addr @[EmbeddedTLB.scala 403:10]
    io.out.valid <= io.in.valid @[EmbeddedTLB.scala 403:10]
    io.in.ready <= io.out.ready @[EmbeddedTLB.scala 403:10]
    
  module EmbeddedTLBMD : 
    input clock : Clock
    input reset : Reset
    output io : {tlbmd : UInt<121>[4], flip write : {wen : UInt<1>, windex : UInt<1>, waymask : UInt<4>, wdata : UInt<121>}, flip rindex : UInt<1>, ready : UInt<1>}
    
    cmem tlbmd : UInt<121>[4][1] @[EmbeddedTLB.scala 38:18]
    infer mport _T = tlbmd[UInt<1>("h00")], clock @[EmbeddedTLB.scala 39:20]
    io.tlbmd[0] <= _T[0] @[EmbeddedTLB.scala 39:12]
    io.tlbmd[1] <= _T[1] @[EmbeddedTLB.scala 39:12]
    io.tlbmd[2] <= _T[2] @[EmbeddedTLB.scala 39:12]
    io.tlbmd[3] <= _T[3] @[EmbeddedTLB.scala 39:12]
    reg resetState : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[EmbeddedTLB.scala 42:27]
    wire resetFinish : UInt<1>
    resetFinish <= UInt<1>("h00")
    when resetState : @[Counter.scala 67:17]
      resetFinish <= UInt<1>("h01") @[Counter.scala 67:24]
      skip @[Counter.scala 67:17]
    when resetFinish : @[EmbeddedTLB.scala 44:22]
      resetState <= UInt<1>("h00") @[EmbeddedTLB.scala 44:35]
      skip @[EmbeddedTLB.scala 44:22]
    node wen = mux(resetState, UInt<1>("h01"), io.write.wen) @[EmbeddedTLB.scala 51:16]
    node setIdx = mux(resetState, UInt<1>("h00"), io.write.windex) @[EmbeddedTLB.scala 52:19]
    node _T_1 = mux(UInt<1>("h01"), UInt<4>("h0f"), UInt<4>("h00")) @[Bitwise.scala 72:12]
    node waymask = mux(resetState, _T_1, io.write.waymask) @[EmbeddedTLB.scala 53:20]
    node dataword = mux(resetState, UInt<1>("h00"), io.write.wdata) @[EmbeddedTLB.scala 54:21]
    wire wdata : UInt<121>[4] @[EmbeddedTLB.scala 55:22]
    wdata[0] <= dataword @[EmbeddedTLB.scala 55:22]
    wdata[1] <= dataword @[EmbeddedTLB.scala 55:22]
    wdata[2] <= dataword @[EmbeddedTLB.scala 55:22]
    wdata[3] <= dataword @[EmbeddedTLB.scala 55:22]
    when wen : @[EmbeddedTLB.scala 57:14]
      node _T_2 = bits(waymask, 0, 0) @[EmbeddedTLB.scala 57:51]
      node _T_3 = bits(waymask, 1, 1) @[EmbeddedTLB.scala 57:51]
      node _T_4 = bits(waymask, 2, 2) @[EmbeddedTLB.scala 57:51]
      node _T_5 = bits(waymask, 3, 3) @[EmbeddedTLB.scala 57:51]
      write mport _T_6 = tlbmd[UInt<1>("h00")], clock
      when _T_2 :
        _T_6[0] <= wdata[0]
        skip
      when _T_3 :
        _T_6[1] <= wdata[1]
        skip
      when _T_4 :
        _T_6[2] <= wdata[2]
        skip
      when _T_5 :
        _T_6[3] <= wdata[3]
        skip
      skip @[EmbeddedTLB.scala 57:14]
    node _T_7 = eq(resetState, UInt<1>("h00")) @[EmbeddedTLB.scala 59:15]
    io.ready <= _T_7 @[EmbeddedTLB.scala 59:12]
    
  module EmbeddedTLB : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<39>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<87>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>, user : UInt<87>}}}, out : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<87>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>, user : UInt<87>}}}, mem : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}, flip flush : UInt<1>, csrMMU : {flip priviledgeMode : UInt<2>, flip status_sum : UInt<1>, flip status_mxr : UInt<1>, loadPF : UInt<1>, storePF : UInt<1>, addr : UInt<39>}, flip cacheEmpty : UInt<1>, ipf : UInt<1>}
    
    wire satp : UInt<64>
    satp <= UInt<64>("h00")
    inst tlbExec of EmbeddedTLBExec @[EmbeddedTLB.scala 80:23]
    tlbExec.clock <= clock
    tlbExec.reset <= reset
    inst tlbEmpty of EmbeddedTLBEmpty @[EmbeddedTLB.scala 81:24]
    tlbEmpty.clock <= clock
    tlbEmpty.reset <= reset
    inst mdTLB of EmbeddedTLBMD @[EmbeddedTLB.scala 82:21]
    mdTLB.clock <= clock
    mdTLB.reset <= reset
    wire mdUpdate : UInt<1> @[EmbeddedTLB.scala 83:22]
    tlbExec.io.flush <= io.flush @[EmbeddedTLB.scala 85:20]
    tlbExec.io.satp <= satp @[EmbeddedTLB.scala 86:19]
    tlbExec.io.mem.resp.bits.rdata <= io.mem.resp.bits.rdata @[EmbeddedTLB.scala 87:18]
    tlbExec.io.mem.resp.bits.cmd <= io.mem.resp.bits.cmd @[EmbeddedTLB.scala 87:18]
    tlbExec.io.mem.resp.valid <= io.mem.resp.valid @[EmbeddedTLB.scala 87:18]
    io.mem.resp.ready <= tlbExec.io.mem.resp.ready @[EmbeddedTLB.scala 87:18]
    io.mem.req.bits.wdata <= tlbExec.io.mem.req.bits.wdata @[EmbeddedTLB.scala 87:18]
    io.mem.req.bits.wmask <= tlbExec.io.mem.req.bits.wmask @[EmbeddedTLB.scala 87:18]
    io.mem.req.bits.cmd <= tlbExec.io.mem.req.bits.cmd @[EmbeddedTLB.scala 87:18]
    io.mem.req.bits.size <= tlbExec.io.mem.req.bits.size @[EmbeddedTLB.scala 87:18]
    io.mem.req.bits.addr <= tlbExec.io.mem.req.bits.addr @[EmbeddedTLB.scala 87:18]
    io.mem.req.valid <= tlbExec.io.mem.req.valid @[EmbeddedTLB.scala 87:18]
    tlbExec.io.mem.req.ready <= io.mem.req.ready @[EmbeddedTLB.scala 87:18]
    io.csrMMU.addr <= tlbExec.io.pf.addr @[EmbeddedTLB.scala 88:17]
    io.csrMMU.storePF <= tlbExec.io.pf.storePF @[EmbeddedTLB.scala 88:17]
    io.csrMMU.loadPF <= tlbExec.io.pf.loadPF @[EmbeddedTLB.scala 88:17]
    tlbExec.io.pf.status_mxr <= io.csrMMU.status_mxr @[EmbeddedTLB.scala 88:17]
    tlbExec.io.pf.status_sum <= io.csrMMU.status_sum @[EmbeddedTLB.scala 88:17]
    tlbExec.io.pf.priviledgeMode <= io.csrMMU.priviledgeMode @[EmbeddedTLB.scala 88:17]
    reg _T : UInt<121>[4], clock @[Reg.scala 15:16]
    when mdUpdate : @[Reg.scala 16:19]
      _T[0] <= mdTLB.io.tlbmd[0] @[Reg.scala 16:23]
      _T[1] <= mdTLB.io.tlbmd[1] @[Reg.scala 16:23]
      _T[2] <= mdTLB.io.tlbmd[2] @[Reg.scala 16:23]
      _T[3] <= mdTLB.io.tlbmd[3] @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    tlbExec.io.md[0] <= _T[0] @[EmbeddedTLB.scala 89:17]
    tlbExec.io.md[1] <= _T[1] @[EmbeddedTLB.scala 89:17]
    tlbExec.io.md[2] <= _T[2] @[EmbeddedTLB.scala 89:17]
    tlbExec.io.md[3] <= _T[3] @[EmbeddedTLB.scala 89:17]
    tlbExec.io.mdReady <= mdTLB.io.ready @[EmbeddedTLB.scala 90:22]
    wire _T_1 : {tag : UInt<26>, index : UInt<1>, off : UInt<12>} @[TLB.scala 200:19]
    wire _T_2 : UInt<39>
    _T_2 <= io.in.req.bits.addr
    node _T_3 = bits(_T_2, 11, 0) @[TLB.scala 200:19]
    _T_1.off <= _T_3 @[TLB.scala 200:19]
    node _T_4 = bits(_T_2, 12, 12) @[TLB.scala 200:19]
    _T_1.index <= _T_4 @[TLB.scala 200:19]
    node _T_5 = bits(_T_2, 38, 13) @[TLB.scala 200:19]
    _T_1.tag <= _T_5 @[TLB.scala 200:19]
    mdTLB.io.rindex <= _T_1.index @[EmbeddedTLB.scala 91:19]
    mdTLB.io.write.wdata <= tlbExec.io.mdWrite.wdata @[EmbeddedTLB.scala 92:18]
    mdTLB.io.write.waymask <= tlbExec.io.mdWrite.waymask @[EmbeddedTLB.scala 92:18]
    mdTLB.io.write.windex <= tlbExec.io.mdWrite.windex @[EmbeddedTLB.scala 92:18]
    mdTLB.io.write.wen <= tlbExec.io.mdWrite.wen @[EmbeddedTLB.scala 92:18]
    io.ipf <= UInt<1>("h00") @[EmbeddedTLB.scala 94:10]
    wire flushTLB : UInt<1>
    flushTLB <= UInt<1>("h00")
    node _T_6 = asUInt(reset) @[EmbeddedTLB.scala 99:24]
    node _T_7 = or(_T_6, flushTLB) @[EmbeddedTLB.scala 99:31]
    mdTLB.reset <= _T_7 @[EmbeddedTLB.scala 99:15]
    wire _T_8 : {mode : UInt<4>, asid : UInt<16>, res : UInt<24>, ppn : UInt<20>} @[EmbeddedTLB.scala 102:31]
    wire _T_9 : UInt<64>
    _T_9 <= satp
    node _T_10 = bits(_T_9, 19, 0) @[EmbeddedTLB.scala 102:31]
    _T_8.ppn <= _T_10 @[EmbeddedTLB.scala 102:31]
    node _T_11 = bits(_T_9, 43, 20) @[EmbeddedTLB.scala 102:31]
    _T_8.res <= _T_11 @[EmbeddedTLB.scala 102:31]
    node _T_12 = bits(_T_9, 59, 44) @[EmbeddedTLB.scala 102:31]
    _T_8.asid <= _T_12 @[EmbeddedTLB.scala 102:31]
    node _T_13 = bits(_T_9, 63, 60) @[EmbeddedTLB.scala 102:31]
    _T_8.mode <= _T_13 @[EmbeddedTLB.scala 102:31]
    node _T_14 = eq(_T_8.mode, UInt<4>("h08")) @[EmbeddedTLB.scala 102:49]
    node _T_15 = lt(io.csrMMU.priviledgeMode, UInt<2>("h03")) @[EmbeddedTLB.scala 102:86]
    node vmEnable = and(_T_14, _T_15) @[EmbeddedTLB.scala 102:57]
    tlbEmpty.io.in.bits.user is invalid @[EmbeddedTLB.scala 117:18]
    tlbEmpty.io.in.bits.wdata is invalid @[EmbeddedTLB.scala 117:18]
    tlbEmpty.io.in.bits.wmask is invalid @[EmbeddedTLB.scala 117:18]
    tlbEmpty.io.in.bits.cmd is invalid @[EmbeddedTLB.scala 117:18]
    tlbEmpty.io.in.bits.size is invalid @[EmbeddedTLB.scala 117:18]
    tlbEmpty.io.in.bits.addr is invalid @[EmbeddedTLB.scala 117:18]
    tlbEmpty.io.in.valid is invalid @[EmbeddedTLB.scala 117:18]
    tlbEmpty.io.in.ready is invalid @[EmbeddedTLB.scala 117:18]
    tlbEmpty.io.out.ready is invalid @[EmbeddedTLB.scala 118:25]
    reg _T_16 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EmbeddedTLB.scala 105:24]
    when tlbExec.io.isFinish : @[EmbeddedTLB.scala 106:25]
      _T_16 <= UInt<1>("h00") @[EmbeddedTLB.scala 106:33]
      skip @[EmbeddedTLB.scala 106:25]
    node _T_17 = and(io.in.req.valid, tlbExec.io.in.ready) @[EmbeddedTLB.scala 107:22]
    node _T_18 = and(_T_17, vmEnable) @[EmbeddedTLB.scala 107:37]
    when _T_18 : @[EmbeddedTLB.scala 107:50]
      _T_16 <= UInt<1>("h01") @[EmbeddedTLB.scala 107:58]
      skip @[EmbeddedTLB.scala 107:50]
    when io.flush : @[EmbeddedTLB.scala 108:20]
      _T_16 <= UInt<1>("h00") @[EmbeddedTLB.scala 108:28]
      skip @[EmbeddedTLB.scala 108:20]
    io.in.req.ready <= tlbExec.io.in.ready @[EmbeddedTLB.scala 110:16]
    node _T_19 = and(io.in.req.valid, tlbExec.io.in.ready) @[EmbeddedTLB.scala 111:51]
    reg _T_20 : {addr : UInt<39>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<87>}, clock @[Reg.scala 15:16]
    when _T_19 : @[Reg.scala 16:19]
      _T_20.user <= io.in.req.bits.user @[Reg.scala 16:23]
      _T_20.wdata <= io.in.req.bits.wdata @[Reg.scala 16:23]
      _T_20.wmask <= io.in.req.bits.wmask @[Reg.scala 16:23]
      _T_20.cmd <= io.in.req.bits.cmd @[Reg.scala 16:23]
      _T_20.size <= io.in.req.bits.size @[Reg.scala 16:23]
      _T_20.addr <= io.in.req.bits.addr @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    tlbExec.io.in.bits.user <= _T_20.user @[EmbeddedTLB.scala 111:16]
    tlbExec.io.in.bits.wdata <= _T_20.wdata @[EmbeddedTLB.scala 111:16]
    tlbExec.io.in.bits.wmask <= _T_20.wmask @[EmbeddedTLB.scala 111:16]
    tlbExec.io.in.bits.cmd <= _T_20.cmd @[EmbeddedTLB.scala 111:16]
    tlbExec.io.in.bits.size <= _T_20.size @[EmbeddedTLB.scala 111:16]
    tlbExec.io.in.bits.addr <= _T_20.addr @[EmbeddedTLB.scala 111:16]
    tlbExec.io.in.valid <= _T_16 @[EmbeddedTLB.scala 112:17]
    node _T_21 = and(io.in.req.valid, tlbExec.io.in.ready) @[EmbeddedTLB.scala 114:26]
    mdUpdate <= _T_21 @[EmbeddedTLB.scala 114:12]
    node _T_22 = eq(vmEnable, UInt<1>("h00")) @[EmbeddedTLB.scala 123:8]
    when _T_22 : @[EmbeddedTLB.scala 123:19]
      tlbExec.io.out.ready <= UInt<1>("h01") @[EmbeddedTLB.scala 124:26]
      io.out.req.valid <= io.in.req.valid @[EmbeddedTLB.scala 126:22]
      io.in.req.ready <= io.out.req.ready @[EmbeddedTLB.scala 127:21]
      node _T_23 = bits(io.in.req.bits.addr, 31, 0) @[EmbeddedTLB.scala 128:48]
      io.out.req.bits.addr <= _T_23 @[EmbeddedTLB.scala 128:26]
      io.out.req.bits.size <= io.in.req.bits.size @[EmbeddedTLB.scala 129:26]
      io.out.req.bits.cmd <= io.in.req.bits.cmd @[EmbeddedTLB.scala 130:25]
      io.out.req.bits.wmask <= io.in.req.bits.wmask @[EmbeddedTLB.scala 131:27]
      io.out.req.bits.wdata <= io.in.req.bits.wdata @[EmbeddedTLB.scala 132:27]
      io.out.req.bits.user <= io.in.req.bits.user @[EmbeddedTLB.scala 133:32]
      skip @[EmbeddedTLB.scala 123:19]
    else : @[EmbeddedTLB.scala 134:15]
      io.out.req.bits.user <= tlbExec.io.out.bits.user @[EmbeddedTLB.scala 136:23]
      io.out.req.bits.wdata <= tlbExec.io.out.bits.wdata @[EmbeddedTLB.scala 136:23]
      io.out.req.bits.wmask <= tlbExec.io.out.bits.wmask @[EmbeddedTLB.scala 136:23]
      io.out.req.bits.cmd <= tlbExec.io.out.bits.cmd @[EmbeddedTLB.scala 136:23]
      io.out.req.bits.size <= tlbExec.io.out.bits.size @[EmbeddedTLB.scala 136:23]
      io.out.req.bits.addr <= tlbExec.io.out.bits.addr @[EmbeddedTLB.scala 136:23]
      io.out.req.valid <= tlbExec.io.out.valid @[EmbeddedTLB.scala 136:23]
      tlbExec.io.out.ready <= io.out.req.ready @[EmbeddedTLB.scala 136:23]
      skip @[EmbeddedTLB.scala 134:15]
    io.in.resp.bits.user <= io.out.resp.bits.user @[EmbeddedTLB.scala 138:15]
    io.in.resp.bits.rdata <= io.out.resp.bits.rdata @[EmbeddedTLB.scala 138:15]
    io.in.resp.bits.cmd <= io.out.resp.bits.cmd @[EmbeddedTLB.scala 138:15]
    io.in.resp.valid <= io.out.resp.valid @[EmbeddedTLB.scala 138:15]
    io.out.resp.ready <= io.in.resp.ready @[EmbeddedTLB.scala 138:15]
    node _T_24 = and(tlbExec.io.ipf, vmEnable) @[EmbeddedTLB.scala 152:26]
    when _T_24 : @[EmbeddedTLB.scala 152:39]
      node _T_25 = and(io.cacheEmpty, io.in.resp.ready) @[EmbeddedTLB.scala 153:45]
      tlbExec.io.out.ready <= _T_25 @[EmbeddedTLB.scala 153:28]
      io.out.req.valid <= UInt<1>("h00") @[EmbeddedTLB.scala 154:24]
      skip @[EmbeddedTLB.scala 152:39]
    node _T_26 = and(tlbExec.io.ipf, vmEnable) @[EmbeddedTLB.scala 157:26]
    node _T_27 = and(_T_26, io.cacheEmpty) @[EmbeddedTLB.scala 157:38]
    when _T_27 : @[EmbeddedTLB.scala 157:56]
      io.in.resp.valid <= UInt<1>("h01") @[EmbeddedTLB.scala 158:24]
      io.in.resp.bits.rdata <= UInt<1>("h00") @[EmbeddedTLB.scala 159:29]
      io.in.resp.bits.cmd <= UInt<3>("h06") @[EmbeddedTLB.scala 160:27]
      io.in.resp.bits.user <= tlbExec.io.in.bits.user @[EmbeddedTLB.scala 161:34]
      io.ipf <= tlbExec.io.ipf @[EmbeddedTLB.scala 162:14]
      skip @[EmbeddedTLB.scala 157:56]
    reg _T_28 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_29 = add(_T_28, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_30 = tail(_T_29, 1) @[GTimer.scala 25:12]
    _T_28 <= _T_30 @[GTimer.scala 25:7]
    wire _T_31 : UInt<1>
    _T_31 <= UInt<1>("h00")
    node _T_32 = and(UInt<1>("h01"), _T_31) @[Debug.scala 55:16]
    when _T_32 : @[Debug.scala 55:31]
      node _T_33 = asUInt(reset) @[Debug.scala 56:24]
      node _T_34 = eq(_T_33, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_34 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] EmbeddedTLB: ", _T_28) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_35 = asUInt(reset) @[Debug.scala 57:13]
      node _T_36 = eq(_T_35, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_36 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "InReq(%d, %d) InResp(%d, %d) OutReq(%d, %d) OutResp(%d, %d) vmEnable:%d mode:%d\n", io.in.req.valid, io.in.req.ready, io.in.resp.valid, io.in.resp.ready, io.out.req.valid, io.out.req.ready, io.out.resp.valid, io.out.resp.ready, vmEnable, io.csrMMU.priviledgeMode) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    reg _T_37 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_38 = add(_T_37, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_39 = tail(_T_38, 1) @[GTimer.scala 25:12]
    _T_37 <= _T_39 @[GTimer.scala 25:7]
    wire _T_40 : UInt<1>
    _T_40 <= UInt<1>("h00")
    node _T_41 = and(UInt<1>("h01"), _T_40) @[Debug.scala 55:16]
    when _T_41 : @[Debug.scala 55:31]
      node _T_42 = asUInt(reset) @[Debug.scala 56:24]
      node _T_43 = eq(_T_42, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_43 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] EmbeddedTLB: ", _T_37) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_44 = asUInt(reset) @[Debug.scala 57:13]
      node _T_45 = eq(_T_44, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_45 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "InReq: addr:%x cmd:%d wdata:%x OutReq: addr:%x cmd:%x wdata:%x\n", io.in.req.bits.addr, io.in.req.bits.cmd, io.in.req.bits.wdata, io.out.req.bits.addr, io.out.req.bits.cmd, io.out.req.bits.wdata) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    reg _T_46 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_47 = add(_T_46, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_48 = tail(_T_47, 1) @[GTimer.scala 25:12]
    _T_46 <= _T_48 @[GTimer.scala 25:7]
    wire _T_49 : UInt<1>
    _T_49 <= UInt<1>("h00")
    node _T_50 = and(UInt<1>("h01"), _T_49) @[Debug.scala 55:16]
    when _T_50 : @[Debug.scala 55:31]
      node _T_51 = asUInt(reset) @[Debug.scala 56:24]
      node _T_52 = eq(_T_51, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_52 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] EmbeddedTLB: ", _T_46) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_53 = asUInt(reset) @[Debug.scala 57:13]
      node _T_54 = eq(_T_53, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_54 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "OutResp: rdata:%x cmd:%x Inresp: rdata:%x cmd:%x\n", io.out.resp.bits.rdata, io.out.resp.bits.cmd, io.in.resp.bits.rdata, io.in.resp.bits.cmd) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    reg _T_55 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_56 = add(_T_55, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_57 = tail(_T_56, 1) @[GTimer.scala 25:12]
    _T_55 <= _T_57 @[GTimer.scala 25:7]
    wire _T_58 : UInt<1>
    _T_58 <= UInt<1>("h00")
    node _T_59 = and(UInt<1>("h01"), _T_58) @[Debug.scala 55:16]
    when _T_59 : @[Debug.scala 55:31]
      node _T_60 = asUInt(reset) @[Debug.scala 56:24]
      node _T_61 = eq(_T_60, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_61 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] EmbeddedTLB: ", _T_55) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_62 = asUInt(reset) @[Debug.scala 57:13]
      node _T_63 = eq(_T_62, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_63 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "satp:%x flush:%d cacheEmpty:%d instrPF:%d loadPF:%d storePF:%d \n", satp, io.flush, io.cacheEmpty, io.ipf, io.csrMMU.loadPF, io.csrMMU.storePF) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    
  module CacheStage1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<87>}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {req : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<87>}}}, metaReadBus : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<7>}}, flip resp : {data : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4]}}, dataReadBus : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<10>}}, flip resp : {data : {data : UInt<64>}[4]}}}
    
    node _T = and(io.in.ready, io.in.valid) @[Decoupled.scala 40:37]
    when _T : @[Cache.scala 124:31]
      node _T_1 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
      node _T_2 = eq(_T_1, UInt<1>("h00")) @[Cache.scala 124:40]
      node _T_3 = asUInt(reset) @[Cache.scala 124:39]
      node _T_4 = or(_T_2, _T_3) @[Cache.scala 124:39]
      node _T_5 = eq(_T_4, UInt<1>("h00")) @[Cache.scala 124:39]
      when _T_5 : @[Cache.scala 124:39]
        printf(clock, UInt<1>(1), "Assertion failed\n    at Cache.scala:124 if (ro) when (io.in.fire()) { assert(!io.in.bits.isWrite()) }\n") @[Cache.scala 124:39]
        stop(clock, UInt<1>(1), 1) @[Cache.scala 124:39]
        skip @[Cache.scala 124:39]
      skip @[Cache.scala 124:31]
    node _T_6 = and(io.in.ready, io.in.valid) @[Decoupled.scala 40:37]
    reg _T_7 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_8 = add(_T_7, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_9 = tail(_T_8, 1) @[GTimer.scala 25:12]
    _T_7 <= _T_9 @[GTimer.scala 25:7]
    wire _T_10 : UInt<1>
    _T_10 <= UInt<1>("h00")
    node _T_11 = and(_T_6, _T_10) @[Debug.scala 55:16]
    when _T_11 : @[Debug.scala 55:31]
      node _T_12 = asUInt(reset) @[Debug.scala 56:24]
      node _T_13 = eq(_T_12, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_13 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage1: ", _T_7) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_14 = asUInt(reset) @[Debug.scala 57:13]
      node _T_15 = eq(_T_14, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_15 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[L1$] cache stage1, addr in: %x, user: %x id: %x\n", io.in.bits.addr, io.in.bits.user, UInt<1>("h00")) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node readBusValid = and(io.in.valid, io.out.ready) @[Cache.scala 128:34]
    wire _T_16 : {tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _T_17 : UInt<32>
    _T_17 <= io.in.bits.addr
    node _T_18 = bits(_T_17, 2, 0) @[Cache.scala 79:45]
    _T_16.byteOffset <= _T_18 @[Cache.scala 79:45]
    node _T_19 = bits(_T_17, 5, 3) @[Cache.scala 79:45]
    _T_16.wordIndex <= _T_19 @[Cache.scala 79:45]
    node _T_20 = bits(_T_17, 12, 6) @[Cache.scala 79:45]
    _T_16.index <= _T_20 @[Cache.scala 79:45]
    node _T_21 = bits(_T_17, 31, 13) @[Cache.scala 79:45]
    _T_16.tag <= _T_21 @[Cache.scala 79:45]
    io.metaReadBus.req.bits.setIdx <= _T_16.index @[SRAMTemplate.scala 26:17]
    io.metaReadBus.req.valid <= readBusValid @[SRAMTemplate.scala 53:20]
    wire _T_22 : {tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 80:49]
    wire _T_23 : UInt<32>
    _T_23 <= io.in.bits.addr
    node _T_24 = bits(_T_23, 2, 0) @[Cache.scala 80:49]
    _T_22.byteOffset <= _T_24 @[Cache.scala 80:49]
    node _T_25 = bits(_T_23, 5, 3) @[Cache.scala 80:49]
    _T_22.wordIndex <= _T_25 @[Cache.scala 80:49]
    node _T_26 = bits(_T_23, 12, 6) @[Cache.scala 80:49]
    _T_22.index <= _T_26 @[Cache.scala 80:49]
    node _T_27 = bits(_T_23, 31, 13) @[Cache.scala 80:49]
    _T_22.tag <= _T_27 @[Cache.scala 80:49]
    wire _T_28 : {tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 80:82]
    wire _T_29 : UInt<32>
    _T_29 <= io.in.bits.addr
    node _T_30 = bits(_T_29, 2, 0) @[Cache.scala 80:82]
    _T_28.byteOffset <= _T_30 @[Cache.scala 80:82]
    node _T_31 = bits(_T_29, 5, 3) @[Cache.scala 80:82]
    _T_28.wordIndex <= _T_31 @[Cache.scala 80:82]
    node _T_32 = bits(_T_29, 12, 6) @[Cache.scala 80:82]
    _T_28.index <= _T_32 @[Cache.scala 80:82]
    node _T_33 = bits(_T_29, 31, 13) @[Cache.scala 80:82]
    _T_28.tag <= _T_33 @[Cache.scala 80:82]
    node _T_34 = cat(_T_22.index, _T_28.wordIndex) @[Cat.scala 29:58]
    io.dataReadBus.req.bits.setIdx <= _T_34 @[SRAMTemplate.scala 26:17]
    io.dataReadBus.req.valid <= readBusValid @[SRAMTemplate.scala 53:20]
    io.out.bits.req.user <= io.in.bits.user @[Cache.scala 132:19]
    io.out.bits.req.wdata <= io.in.bits.wdata @[Cache.scala 132:19]
    io.out.bits.req.wmask <= io.in.bits.wmask @[Cache.scala 132:19]
    io.out.bits.req.cmd <= io.in.bits.cmd @[Cache.scala 132:19]
    io.out.bits.req.size <= io.in.bits.size @[Cache.scala 132:19]
    io.out.bits.req.addr <= io.in.bits.addr @[Cache.scala 132:19]
    node _T_35 = and(io.in.valid, io.metaReadBus.req.ready) @[Cache.scala 133:31]
    node _T_36 = and(_T_35, io.dataReadBus.req.ready) @[Cache.scala 133:59]
    io.out.valid <= _T_36 @[Cache.scala 133:16]
    node _T_37 = eq(io.in.valid, UInt<1>("h00")) @[Cache.scala 134:19]
    node _T_38 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_39 = or(_T_37, _T_38) @[Cache.scala 134:32]
    node _T_40 = and(_T_39, io.metaReadBus.req.ready) @[Cache.scala 134:50]
    node _T_41 = and(_T_40, io.dataReadBus.req.ready) @[Cache.scala 134:78]
    io.in.ready <= _T_41 @[Cache.scala 134:15]
    reg _T_42 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_43 = add(_T_42, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_44 = tail(_T_43, 1) @[GTimer.scala 25:12]
    _T_42 <= _T_44 @[GTimer.scala 25:7]
    wire _T_45 : UInt<1>
    _T_45 <= UInt<1>("h00")
    node _T_46 = and(UInt<1>("h01"), _T_45) @[Debug.scala 55:16]
    when _T_46 : @[Debug.scala 55:31]
      node _T_47 = asUInt(reset) @[Debug.scala 56:24]
      node _T_48 = eq(_T_47, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_48 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage1: ", _T_42) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_49 = asUInt(reset) @[Debug.scala 57:13]
      node _T_50 = eq(_T_49, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_50 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "in.ready = %d, in.valid = %d, out.valid = %d, out.ready = %d, addr = %x, cmd = %x, dataReadBus.req.valid = %d\n", io.in.ready, io.in.valid, io.out.valid, io.out.ready, io.in.bits.addr, io.in.bits.cmd, io.dataReadBus.req.valid) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    
  module CacheStage2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {req : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<87>}}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {req : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<87>}, metas : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4], datas : {data : UInt<64>}[4], hit : UInt<1>, waymask : UInt<4>, mmio : UInt<1>, isForwardData : UInt<1>, forwardData : {setIdx : UInt<10>, data : {data : UInt<64>}, waymask : UInt<4>}}}, flip metaReadResp : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4], flip dataReadResp : {data : UInt<64>}[4], flip metaWriteBus : {req : {ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<7>, data : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}}, flip dataWriteBus : {req : {ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<10>, data : {data : UInt<64>}, waymask : UInt<4>}}}}
    
    wire addr : {tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 162:31]
    wire _T : UInt<32>
    _T <= io.in.bits.req.addr
    node _T_1 = bits(_T, 2, 0) @[Cache.scala 162:31]
    addr.byteOffset <= _T_1 @[Cache.scala 162:31]
    node _T_2 = bits(_T, 5, 3) @[Cache.scala 162:31]
    addr.wordIndex <= _T_2 @[Cache.scala 162:31]
    node _T_3 = bits(_T, 12, 6) @[Cache.scala 162:31]
    addr.index <= _T_3 @[Cache.scala 162:31]
    node _T_4 = bits(_T, 31, 13) @[Cache.scala 162:31]
    addr.tag <= _T_4 @[Cache.scala 162:31]
    node _T_5 = and(io.in.valid, io.metaWriteBus.req.valid) @[Cache.scala 164:35]
    wire _T_6 : {tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _T_7 : UInt<32>
    _T_7 <= io.in.bits.req.addr
    node _T_8 = bits(_T_7, 2, 0) @[Cache.scala 79:45]
    _T_6.byteOffset <= _T_8 @[Cache.scala 79:45]
    node _T_9 = bits(_T_7, 5, 3) @[Cache.scala 79:45]
    _T_6.wordIndex <= _T_9 @[Cache.scala 79:45]
    node _T_10 = bits(_T_7, 12, 6) @[Cache.scala 79:45]
    _T_6.index <= _T_10 @[Cache.scala 79:45]
    node _T_11 = bits(_T_7, 31, 13) @[Cache.scala 79:45]
    _T_6.tag <= _T_11 @[Cache.scala 79:45]
    node _T_12 = eq(io.metaWriteBus.req.bits.setIdx, _T_6.index) @[Cache.scala 164:99]
    node isForwardMeta = and(_T_5, _T_12) @[Cache.scala 164:64]
    reg isForwardMetaReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Cache.scala 165:33]
    when isForwardMeta : @[Cache.scala 166:24]
      isForwardMetaReg <= UInt<1>("h01") @[Cache.scala 166:43]
      skip @[Cache.scala 166:24]
    node _T_13 = and(io.in.ready, io.in.valid) @[Decoupled.scala 40:37]
    node _T_14 = eq(io.in.valid, UInt<1>("h00")) @[Cache.scala 167:25]
    node _T_15 = or(_T_13, _T_14) @[Cache.scala 167:22]
    when _T_15 : @[Cache.scala 167:39]
      isForwardMetaReg <= UInt<1>("h00") @[Cache.scala 167:58]
      skip @[Cache.scala 167:39]
    reg forwardMetaReg : {setIdx : UInt<7>, data : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}, clock @[Reg.scala 15:16]
    when isForwardMeta : @[Reg.scala 16:19]
      forwardMetaReg.waymask <= io.metaWriteBus.req.bits.waymask @[Reg.scala 16:23]
      forwardMetaReg.data.dirty <= io.metaWriteBus.req.bits.data.dirty @[Reg.scala 16:23]
      forwardMetaReg.data.valid <= io.metaWriteBus.req.bits.data.valid @[Reg.scala 16:23]
      forwardMetaReg.data.tag <= io.metaWriteBus.req.bits.data.tag @[Reg.scala 16:23]
      forwardMetaReg.setIdx <= io.metaWriteBus.req.bits.setIdx @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    wire metaWay : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4] @[Cache.scala 170:21]
    node pickForwardMeta = or(isForwardMetaReg, isForwardMeta) @[Cache.scala 171:42]
    node forwardMeta = mux(isForwardMeta, io.metaWriteBus.req.bits, forwardMetaReg) @[Cache.scala 172:24]
    node forwardWaymask_0 = bits(forwardMeta.waymask, 0, 0) @[Cache.scala 173:61]
    node forwardWaymask_1 = bits(forwardMeta.waymask, 1, 1) @[Cache.scala 173:61]
    node forwardWaymask_2 = bits(forwardMeta.waymask, 2, 2) @[Cache.scala 173:61]
    node forwardWaymask_3 = bits(forwardMeta.waymask, 3, 3) @[Cache.scala 173:61]
    node _T_16 = and(pickForwardMeta, forwardWaymask_0) @[Cache.scala 175:39]
    node _T_17 = mux(_T_16, forwardMeta.data, io.metaReadResp[0]) @[Cache.scala 175:22]
    metaWay[0].dirty <= _T_17.dirty @[Cache.scala 175:16]
    metaWay[0].valid <= _T_17.valid @[Cache.scala 175:16]
    metaWay[0].tag <= _T_17.tag @[Cache.scala 175:16]
    node _T_18 = and(pickForwardMeta, forwardWaymask_1) @[Cache.scala 175:39]
    node _T_19 = mux(_T_18, forwardMeta.data, io.metaReadResp[1]) @[Cache.scala 175:22]
    metaWay[1].dirty <= _T_19.dirty @[Cache.scala 175:16]
    metaWay[1].valid <= _T_19.valid @[Cache.scala 175:16]
    metaWay[1].tag <= _T_19.tag @[Cache.scala 175:16]
    node _T_20 = and(pickForwardMeta, forwardWaymask_2) @[Cache.scala 175:39]
    node _T_21 = mux(_T_20, forwardMeta.data, io.metaReadResp[2]) @[Cache.scala 175:22]
    metaWay[2].dirty <= _T_21.dirty @[Cache.scala 175:16]
    metaWay[2].valid <= _T_21.valid @[Cache.scala 175:16]
    metaWay[2].tag <= _T_21.tag @[Cache.scala 175:16]
    node _T_22 = and(pickForwardMeta, forwardWaymask_3) @[Cache.scala 175:39]
    node _T_23 = mux(_T_22, forwardMeta.data, io.metaReadResp[3]) @[Cache.scala 175:22]
    metaWay[3].dirty <= _T_23.dirty @[Cache.scala 175:16]
    metaWay[3].valid <= _T_23.valid @[Cache.scala 175:16]
    metaWay[3].tag <= _T_23.tag @[Cache.scala 175:16]
    node _T_24 = eq(metaWay[0].tag, addr.tag) @[Cache.scala 178:59]
    node _T_25 = and(metaWay[0].valid, _T_24) @[Cache.scala 178:49]
    node _T_26 = and(_T_25, io.in.valid) @[Cache.scala 178:73]
    node _T_27 = eq(metaWay[1].tag, addr.tag) @[Cache.scala 178:59]
    node _T_28 = and(metaWay[1].valid, _T_27) @[Cache.scala 178:49]
    node _T_29 = and(_T_28, io.in.valid) @[Cache.scala 178:73]
    node _T_30 = eq(metaWay[2].tag, addr.tag) @[Cache.scala 178:59]
    node _T_31 = and(metaWay[2].valid, _T_30) @[Cache.scala 178:49]
    node _T_32 = and(_T_31, io.in.valid) @[Cache.scala 178:73]
    node _T_33 = eq(metaWay[3].tag, addr.tag) @[Cache.scala 178:59]
    node _T_34 = and(metaWay[3].valid, _T_33) @[Cache.scala 178:49]
    node _T_35 = and(_T_34, io.in.valid) @[Cache.scala 178:73]
    wire _T_36 : UInt<1>[4] @[Cache.scala 178:23]
    _T_36[0] <= _T_26 @[Cache.scala 178:23]
    _T_36[1] <= _T_29 @[Cache.scala 178:23]
    _T_36[2] <= _T_32 @[Cache.scala 178:23]
    _T_36[3] <= _T_35 @[Cache.scala 178:23]
    node _T_37 = cat(_T_36[1], _T_36[0]) @[Cache.scala 178:90]
    node _T_38 = cat(_T_36[3], _T_36[2]) @[Cache.scala 178:90]
    node hitVec = cat(_T_38, _T_37) @[Cache.scala 178:90]
    reg _T_39 : UInt<64>, clock with : (reset => (reset, UInt<64>("h01234567887654321"))) @[LFSR64.scala 25:23]
    node _T_40 = bits(_T_39, 0, 0) @[LFSR64.scala 26:19]
    node _T_41 = bits(_T_39, 1, 1) @[LFSR64.scala 26:29]
    node _T_42 = xor(_T_40, _T_41) @[LFSR64.scala 26:23]
    node _T_43 = bits(_T_39, 3, 3) @[LFSR64.scala 26:39]
    node _T_44 = xor(_T_42, _T_43) @[LFSR64.scala 26:33]
    node _T_45 = bits(_T_39, 4, 4) @[LFSR64.scala 26:49]
    node _T_46 = xor(_T_44, _T_45) @[LFSR64.scala 26:43]
    when UInt<1>("h01") : @[LFSR64.scala 27:22]
      node _T_47 = eq(_T_39, UInt<1>("h00")) @[LFSR64.scala 28:24]
      node _T_48 = bits(_T_39, 63, 1) @[LFSR64.scala 28:51]
      node _T_49 = cat(_T_46, _T_48) @[Cat.scala 29:58]
      node _T_50 = mux(_T_47, UInt<1>("h01"), _T_49) @[LFSR64.scala 28:18]
      _T_39 <= _T_50 @[LFSR64.scala 28:12]
      skip @[LFSR64.scala 27:22]
    node _T_51 = bits(_T_39, 1, 0) @[Cache.scala 179:53]
    node victimWaymask = dshl(UInt<1>("h01"), _T_51) @[Cache.scala 179:42]
    node _T_52 = eq(metaWay[0].valid, UInt<1>("h00")) @[Cache.scala 181:45]
    node _T_53 = eq(metaWay[1].valid, UInt<1>("h00")) @[Cache.scala 181:45]
    node _T_54 = eq(metaWay[2].valid, UInt<1>("h00")) @[Cache.scala 181:45]
    node _T_55 = eq(metaWay[3].valid, UInt<1>("h00")) @[Cache.scala 181:45]
    wire _T_56 : UInt<1>[4] @[Cache.scala 181:27]
    _T_56[0] <= _T_52 @[Cache.scala 181:27]
    _T_56[1] <= _T_53 @[Cache.scala 181:27]
    _T_56[2] <= _T_54 @[Cache.scala 181:27]
    _T_56[3] <= _T_55 @[Cache.scala 181:27]
    node _T_57 = cat(_T_56[1], _T_56[0]) @[Cache.scala 181:56]
    node _T_58 = cat(_T_56[3], _T_56[2]) @[Cache.scala 181:56]
    node invalidVec = cat(_T_58, _T_57) @[Cache.scala 181:56]
    node hasInvalidWay = orr(invalidVec) @[Cache.scala 182:34]
    node _T_59 = geq(invalidVec, UInt<4>("h08")) @[Cache.scala 183:45]
    node _T_60 = geq(invalidVec, UInt<3>("h04")) @[Cache.scala 184:20]
    node _T_61 = geq(invalidVec, UInt<2>("h02")) @[Cache.scala 185:20]
    node _T_62 = mux(_T_61, UInt<2>("h02"), UInt<1>("h01")) @[Cache.scala 185:8]
    node _T_63 = mux(_T_60, UInt<3>("h04"), _T_62) @[Cache.scala 184:8]
    node refillInvalidWaymask = mux(_T_59, UInt<4>("h08"), _T_63) @[Cache.scala 183:33]
    node _T_64 = mux(hasInvalidWay, refillInvalidWaymask, victimWaymask) @[Cache.scala 188:49]
    node waymask = mux(io.out.bits.hit, hitVec, _T_64) @[Cache.scala 188:20]
    node _T_65 = bits(waymask, 0, 0) @[Bitwise.scala 49:65]
    node _T_66 = bits(waymask, 1, 1) @[Bitwise.scala 49:65]
    node _T_67 = bits(waymask, 2, 2) @[Bitwise.scala 49:65]
    node _T_68 = bits(waymask, 3, 3) @[Bitwise.scala 49:65]
    node _T_69 = add(_T_65, _T_66) @[Bitwise.scala 47:55]
    node _T_70 = bits(_T_69, 1, 0) @[Bitwise.scala 47:55]
    node _T_71 = add(_T_67, _T_68) @[Bitwise.scala 47:55]
    node _T_72 = bits(_T_71, 1, 0) @[Bitwise.scala 47:55]
    node _T_73 = add(_T_70, _T_72) @[Bitwise.scala 47:55]
    node _T_74 = bits(_T_73, 2, 0) @[Bitwise.scala 47:55]
    node _T_75 = gt(_T_74, UInt<1>("h01")) @[Cache.scala 189:26]
    when _T_75 : @[Cache.scala 189:32]
      reg _T_76 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_77 = add(_T_76, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_78 = tail(_T_77, 1) @[GTimer.scala 25:12]
      _T_76 <= _T_78 @[GTimer.scala 25:7]
      wire _T_79 : UInt<1>
      _T_79 <= UInt<1>("h00")
      node _T_80 = and(UInt<1>("h01"), _T_79) @[Debug.scala 55:16]
      when _T_80 : @[Debug.scala 55:31]
        node _T_81 = asUInt(reset) @[Debug.scala 56:24]
        node _T_82 = eq(_T_81, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_82 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] CacheStage2: ", _T_76) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_83 = asUInt(reset) @[Debug.scala 57:13]
        node _T_84 = eq(_T_83, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_84 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[ERROR] metaWay %x metat %x reqt %x\n", metaWay[0].valid, metaWay[0].tag, addr.tag) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      reg _T_85 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_86 = add(_T_85, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_87 = tail(_T_86, 1) @[GTimer.scala 25:12]
      _T_85 <= _T_87 @[GTimer.scala 25:7]
      wire _T_88 : UInt<1>
      _T_88 <= UInt<1>("h00")
      node _T_89 = and(UInt<1>("h01"), _T_88) @[Debug.scala 55:16]
      when _T_89 : @[Debug.scala 55:31]
        node _T_90 = asUInt(reset) @[Debug.scala 56:24]
        node _T_91 = eq(_T_90, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_91 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] CacheStage2: ", _T_85) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_92 = asUInt(reset) @[Debug.scala 57:13]
        node _T_93 = eq(_T_92, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_93 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[ERROR] metaWay %x metat %x reqt %x\n", metaWay[1].valid, metaWay[1].tag, addr.tag) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      reg _T_94 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_95 = add(_T_94, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_96 = tail(_T_95, 1) @[GTimer.scala 25:12]
      _T_94 <= _T_96 @[GTimer.scala 25:7]
      wire _T_97 : UInt<1>
      _T_97 <= UInt<1>("h00")
      node _T_98 = and(UInt<1>("h01"), _T_97) @[Debug.scala 55:16]
      when _T_98 : @[Debug.scala 55:31]
        node _T_99 = asUInt(reset) @[Debug.scala 56:24]
        node _T_100 = eq(_T_99, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_100 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] CacheStage2: ", _T_94) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_101 = asUInt(reset) @[Debug.scala 57:13]
        node _T_102 = eq(_T_101, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_102 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[ERROR] metaWay %x metat %x reqt %x\n", metaWay[2].valid, metaWay[2].tag, addr.tag) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      reg _T_103 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_104 = add(_T_103, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_105 = tail(_T_104, 1) @[GTimer.scala 25:12]
      _T_103 <= _T_105 @[GTimer.scala 25:7]
      wire _T_106 : UInt<1>
      _T_106 <= UInt<1>("h00")
      node _T_107 = and(UInt<1>("h01"), _T_106) @[Debug.scala 55:16]
      when _T_107 : @[Debug.scala 55:31]
        node _T_108 = asUInt(reset) @[Debug.scala 56:24]
        node _T_109 = eq(_T_108, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_109 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] CacheStage2: ", _T_103) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_110 = asUInt(reset) @[Debug.scala 57:13]
        node _T_111 = eq(_T_110, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_111 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[ERROR] metaWay %x metat %x reqt %x\n", metaWay[3].valid, metaWay[3].tag, addr.tag) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      reg _T_112 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_113 = add(_T_112, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_114 = tail(_T_113, 1) @[GTimer.scala 25:12]
      _T_112 <= _T_114 @[GTimer.scala 25:7]
      wire _T_115 : UInt<1>
      _T_115 <= UInt<1>("h00")
      node _T_116 = and(UInt<1>("h01"), _T_115) @[Debug.scala 55:16]
      when _T_116 : @[Debug.scala 55:31]
        node _T_117 = asUInt(reset) @[Debug.scala 56:24]
        node _T_118 = eq(_T_117, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_118 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] CacheStage2: ", _T_112) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_119 = asUInt(reset) @[Debug.scala 57:13]
        node _T_120 = eq(_T_119, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_120 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[ERROR] metaReadResp %x metat %x reqt %x\n", io.metaReadResp[0].valid, io.metaReadResp[0].tag, addr.tag) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      reg _T_121 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_122 = add(_T_121, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_123 = tail(_T_122, 1) @[GTimer.scala 25:12]
      _T_121 <= _T_123 @[GTimer.scala 25:7]
      wire _T_124 : UInt<1>
      _T_124 <= UInt<1>("h00")
      node _T_125 = and(UInt<1>("h01"), _T_124) @[Debug.scala 55:16]
      when _T_125 : @[Debug.scala 55:31]
        node _T_126 = asUInt(reset) @[Debug.scala 56:24]
        node _T_127 = eq(_T_126, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_127 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] CacheStage2: ", _T_121) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_128 = asUInt(reset) @[Debug.scala 57:13]
        node _T_129 = eq(_T_128, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_129 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[ERROR] metaReadResp %x metat %x reqt %x\n", io.metaReadResp[1].valid, io.metaReadResp[1].tag, addr.tag) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      reg _T_130 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_131 = add(_T_130, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_132 = tail(_T_131, 1) @[GTimer.scala 25:12]
      _T_130 <= _T_132 @[GTimer.scala 25:7]
      wire _T_133 : UInt<1>
      _T_133 <= UInt<1>("h00")
      node _T_134 = and(UInt<1>("h01"), _T_133) @[Debug.scala 55:16]
      when _T_134 : @[Debug.scala 55:31]
        node _T_135 = asUInt(reset) @[Debug.scala 56:24]
        node _T_136 = eq(_T_135, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_136 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] CacheStage2: ", _T_130) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_137 = asUInt(reset) @[Debug.scala 57:13]
        node _T_138 = eq(_T_137, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_138 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[ERROR] metaReadResp %x metat %x reqt %x\n", io.metaReadResp[2].valid, io.metaReadResp[2].tag, addr.tag) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      reg _T_139 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_140 = add(_T_139, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_141 = tail(_T_140, 1) @[GTimer.scala 25:12]
      _T_139 <= _T_141 @[GTimer.scala 25:7]
      wire _T_142 : UInt<1>
      _T_142 <= UInt<1>("h00")
      node _T_143 = and(UInt<1>("h01"), _T_142) @[Debug.scala 55:16]
      when _T_143 : @[Debug.scala 55:31]
        node _T_144 = asUInt(reset) @[Debug.scala 56:24]
        node _T_145 = eq(_T_144, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_145 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] CacheStage2: ", _T_139) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_146 = asUInt(reset) @[Debug.scala 57:13]
        node _T_147 = eq(_T_146, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_147 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[ERROR] metaReadResp %x metat %x reqt %x\n", io.metaReadResp[3].valid, io.metaReadResp[3].tag, addr.tag) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      reg _T_148 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_149 = add(_T_148, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_150 = tail(_T_149, 1) @[GTimer.scala 25:12]
      _T_148 <= _T_150 @[GTimer.scala 25:7]
      wire _T_151 : UInt<1>
      _T_151 <= UInt<1>("h00")
      node _T_152 = and(UInt<1>("h01"), _T_151) @[Debug.scala 55:16]
      when _T_152 : @[Debug.scala 55:31]
        node _T_153 = asUInt(reset) @[Debug.scala 56:24]
        node _T_154 = eq(_T_153, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_154 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] CacheStage2: ", _T_148) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_155 = asUInt(reset) @[Debug.scala 57:13]
        node _T_156 = eq(_T_155, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_156 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[ERROR] forwardMetaReg isForwardMetaReg %x %x metat %x wm %b\n", isForwardMetaReg, forwardMetaReg.data.valid, forwardMetaReg.data.tag, forwardMetaReg.waymask) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      reg _T_157 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_158 = add(_T_157, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_159 = tail(_T_158, 1) @[GTimer.scala 25:12]
      _T_157 <= _T_159 @[GTimer.scala 25:7]
      wire _T_160 : UInt<1>
      _T_160 <= UInt<1>("h00")
      node _T_161 = and(UInt<1>("h01"), _T_160) @[Debug.scala 55:16]
      when _T_161 : @[Debug.scala 55:31]
        node _T_162 = asUInt(reset) @[Debug.scala 56:24]
        node _T_163 = eq(_T_162, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_163 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] CacheStage2: ", _T_157) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_164 = asUInt(reset) @[Debug.scala 57:13]
        node _T_165 = eq(_T_164, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_165 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[ERROR] forwardMeta isForwardMeta %x %x metat %x wm %b\n", isForwardMeta, io.metaWriteBus.req.bits.data.valid, io.metaWriteBus.req.bits.data.tag, io.metaWriteBus.req.bits.waymask) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      skip @[Cache.scala 189:32]
    node _T_166 = bits(waymask, 0, 0) @[Bitwise.scala 49:65]
    node _T_167 = bits(waymask, 1, 1) @[Bitwise.scala 49:65]
    node _T_168 = bits(waymask, 2, 2) @[Bitwise.scala 49:65]
    node _T_169 = bits(waymask, 3, 3) @[Bitwise.scala 49:65]
    node _T_170 = add(_T_166, _T_167) @[Bitwise.scala 47:55]
    node _T_171 = bits(_T_170, 1, 0) @[Bitwise.scala 47:55]
    node _T_172 = add(_T_168, _T_169) @[Bitwise.scala 47:55]
    node _T_173 = bits(_T_172, 1, 0) @[Bitwise.scala 47:55]
    node _T_174 = add(_T_171, _T_173) @[Bitwise.scala 47:55]
    node _T_175 = bits(_T_174, 2, 0) @[Bitwise.scala 47:55]
    node _T_176 = gt(_T_175, UInt<1>("h01")) @[Cache.scala 195:26]
    when _T_176 : @[Cache.scala 195:32]
      reg _T_177 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_178 = add(_T_177, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_179 = tail(_T_178, 1) @[GTimer.scala 25:12]
      _T_177 <= _T_179 @[GTimer.scala 25:7]
      wire _T_180 : UInt<1>
      _T_180 <= UInt<1>("h00")
      node _T_181 = and(UInt<1>("h01"), _T_180) @[Debug.scala 55:16]
      when _T_181 : @[Debug.scala 55:31]
        node _T_182 = asUInt(reset) @[Debug.scala 56:24]
        node _T_183 = eq(_T_182, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_183 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] CacheStage2: ", _T_177) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_184 = asUInt(reset) @[Debug.scala 57:13]
        node _T_185 = eq(_T_184, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_185 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[ERROR] hit %b wmask %b hitvec %b\n", io.out.bits.hit, forwardMeta.waymask, hitVec) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      skip @[Cache.scala 195:32]
    node _T_186 = bits(waymask, 0, 0) @[Bitwise.scala 49:65]
    node _T_187 = bits(waymask, 1, 1) @[Bitwise.scala 49:65]
    node _T_188 = bits(waymask, 2, 2) @[Bitwise.scala 49:65]
    node _T_189 = bits(waymask, 3, 3) @[Bitwise.scala 49:65]
    node _T_190 = add(_T_186, _T_187) @[Bitwise.scala 47:55]
    node _T_191 = bits(_T_190, 1, 0) @[Bitwise.scala 47:55]
    node _T_192 = add(_T_188, _T_189) @[Bitwise.scala 47:55]
    node _T_193 = bits(_T_192, 1, 0) @[Bitwise.scala 47:55]
    node _T_194 = add(_T_191, _T_193) @[Bitwise.scala 47:55]
    node _T_195 = bits(_T_194, 2, 0) @[Bitwise.scala 47:55]
    node _T_196 = gt(_T_195, UInt<1>("h01")) @[Cache.scala 196:45]
    node _T_197 = and(io.in.valid, _T_196) @[Cache.scala 196:24]
    node _T_198 = eq(_T_197, UInt<1>("h00")) @[Cache.scala 196:10]
    node _T_199 = asUInt(reset) @[Cache.scala 196:9]
    node _T_200 = or(_T_198, _T_199) @[Cache.scala 196:9]
    node _T_201 = eq(_T_200, UInt<1>("h00")) @[Cache.scala 196:9]
    when _T_201 : @[Cache.scala 196:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at Cache.scala:196 assert(!(io.in.valid && PopCount(waymask) > 1.U))\n") @[Cache.scala 196:9]
      stop(clock, UInt<1>(1), 1) @[Cache.scala 196:9]
      skip @[Cache.scala 196:9]
    io.out.bits.metas[0].dirty <= metaWay[0].dirty @[Cache.scala 198:21]
    io.out.bits.metas[0].valid <= metaWay[0].valid @[Cache.scala 198:21]
    io.out.bits.metas[0].tag <= metaWay[0].tag @[Cache.scala 198:21]
    io.out.bits.metas[1].dirty <= metaWay[1].dirty @[Cache.scala 198:21]
    io.out.bits.metas[1].valid <= metaWay[1].valid @[Cache.scala 198:21]
    io.out.bits.metas[1].tag <= metaWay[1].tag @[Cache.scala 198:21]
    io.out.bits.metas[2].dirty <= metaWay[2].dirty @[Cache.scala 198:21]
    io.out.bits.metas[2].valid <= metaWay[2].valid @[Cache.scala 198:21]
    io.out.bits.metas[2].tag <= metaWay[2].tag @[Cache.scala 198:21]
    io.out.bits.metas[3].dirty <= metaWay[3].dirty @[Cache.scala 198:21]
    io.out.bits.metas[3].valid <= metaWay[3].valid @[Cache.scala 198:21]
    io.out.bits.metas[3].tag <= metaWay[3].tag @[Cache.scala 198:21]
    node _T_202 = orr(hitVec) @[Cache.scala 199:44]
    node _T_203 = and(io.in.valid, _T_202) @[Cache.scala 199:34]
    io.out.bits.hit <= _T_203 @[Cache.scala 199:19]
    io.out.bits.waymask <= waymask @[Cache.scala 200:23]
    io.out.bits.datas[0].data <= io.dataReadResp[0].data @[Cache.scala 201:21]
    io.out.bits.datas[1].data <= io.dataReadResp[1].data @[Cache.scala 201:21]
    io.out.bits.datas[2].data <= io.dataReadResp[2].data @[Cache.scala 201:21]
    io.out.bits.datas[3].data <= io.dataReadResp[3].data @[Cache.scala 201:21]
    node _T_204 = xor(io.in.bits.req.addr, UInt<30>("h030000000")) @[NutCore.scala 86:11]
    node _T_205 = bits(_T_204, 31, 28) @[NutCore.scala 86:24]
    node _T_206 = eq(_T_205, UInt<1>("h00")) @[NutCore.scala 86:44]
    node _T_207 = xor(io.in.bits.req.addr, UInt<31>("h040600000")) @[NutCore.scala 86:11]
    node _T_208 = bits(_T_207, 31, 24) @[NutCore.scala 86:24]
    node _T_209 = eq(_T_208, UInt<1>("h00")) @[NutCore.scala 86:44]
    node _T_210 = or(_T_206, _T_209) @[NutCore.scala 87:15]
    io.out.bits.mmio <= _T_210 @[Cache.scala 202:20]
    wire _T_211 : {tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 80:49]
    wire _T_212 : UInt<32>
    _T_212 <= io.in.bits.req.addr
    node _T_213 = bits(_T_212, 2, 0) @[Cache.scala 80:49]
    _T_211.byteOffset <= _T_213 @[Cache.scala 80:49]
    node _T_214 = bits(_T_212, 5, 3) @[Cache.scala 80:49]
    _T_211.wordIndex <= _T_214 @[Cache.scala 80:49]
    node _T_215 = bits(_T_212, 12, 6) @[Cache.scala 80:49]
    _T_211.index <= _T_215 @[Cache.scala 80:49]
    node _T_216 = bits(_T_212, 31, 13) @[Cache.scala 80:49]
    _T_211.tag <= _T_216 @[Cache.scala 80:49]
    wire _T_217 : {tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 80:82]
    wire _T_218 : UInt<32>
    _T_218 <= io.in.bits.req.addr
    node _T_219 = bits(_T_218, 2, 0) @[Cache.scala 80:82]
    _T_217.byteOffset <= _T_219 @[Cache.scala 80:82]
    node _T_220 = bits(_T_218, 5, 3) @[Cache.scala 80:82]
    _T_217.wordIndex <= _T_220 @[Cache.scala 80:82]
    node _T_221 = bits(_T_218, 12, 6) @[Cache.scala 80:82]
    _T_217.index <= _T_221 @[Cache.scala 80:82]
    node _T_222 = bits(_T_218, 31, 13) @[Cache.scala 80:82]
    _T_217.tag <= _T_222 @[Cache.scala 80:82]
    node _T_223 = cat(_T_211.index, _T_217.wordIndex) @[Cat.scala 29:58]
    node _T_224 = eq(io.dataWriteBus.req.bits.setIdx, _T_223) @[Cache.scala 205:30]
    node _T_225 = and(io.dataWriteBus.req.valid, _T_224) @[Cache.scala 205:13]
    node isForwardData = and(io.in.valid, _T_225) @[Cache.scala 204:35]
    reg isForwardDataReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Cache.scala 207:33]
    when isForwardData : @[Cache.scala 208:24]
      isForwardDataReg <= UInt<1>("h01") @[Cache.scala 208:43]
      skip @[Cache.scala 208:24]
    node _T_226 = and(io.in.ready, io.in.valid) @[Decoupled.scala 40:37]
    node _T_227 = eq(io.in.valid, UInt<1>("h00")) @[Cache.scala 209:25]
    node _T_228 = or(_T_226, _T_227) @[Cache.scala 209:22]
    when _T_228 : @[Cache.scala 209:39]
      isForwardDataReg <= UInt<1>("h00") @[Cache.scala 209:58]
      skip @[Cache.scala 209:39]
    reg forwardDataReg : {setIdx : UInt<10>, data : {data : UInt<64>}, waymask : UInt<4>}, clock @[Reg.scala 15:16]
    when isForwardData : @[Reg.scala 16:19]
      forwardDataReg.waymask <= io.dataWriteBus.req.bits.waymask @[Reg.scala 16:23]
      forwardDataReg.data.data <= io.dataWriteBus.req.bits.data.data @[Reg.scala 16:23]
      forwardDataReg.setIdx <= io.dataWriteBus.req.bits.setIdx @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _T_229 = or(isForwardDataReg, isForwardData) @[Cache.scala 211:49]
    io.out.bits.isForwardData <= _T_229 @[Cache.scala 211:29]
    node _T_230 = mux(isForwardData, io.dataWriteBus.req.bits, forwardDataReg) @[Cache.scala 212:33]
    io.out.bits.forwardData.waymask <= _T_230.waymask @[Cache.scala 212:27]
    io.out.bits.forwardData.data.data <= _T_230.data.data @[Cache.scala 212:27]
    io.out.bits.forwardData.setIdx <= _T_230.setIdx @[Cache.scala 212:27]
    io.out.bits.req.user <= io.in.bits.req.user @[Cache.scala 214:19]
    io.out.bits.req.wdata <= io.in.bits.req.wdata @[Cache.scala 214:19]
    io.out.bits.req.wmask <= io.in.bits.req.wmask @[Cache.scala 214:19]
    io.out.bits.req.cmd <= io.in.bits.req.cmd @[Cache.scala 214:19]
    io.out.bits.req.size <= io.in.bits.req.size @[Cache.scala 214:19]
    io.out.bits.req.addr <= io.in.bits.req.addr @[Cache.scala 214:19]
    io.out.valid <= io.in.valid @[Cache.scala 215:16]
    node _T_231 = eq(io.in.valid, UInt<1>("h00")) @[Cache.scala 216:18]
    node _T_232 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_233 = or(_T_231, _T_232) @[Cache.scala 216:31]
    io.in.ready <= _T_233 @[Cache.scala 216:15]
    node _T_234 = and(io.in.ready, io.in.valid) @[Decoupled.scala 40:37]
    reg _T_235 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_236 = add(_T_235, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_237 = tail(_T_236, 1) @[GTimer.scala 25:12]
    _T_235 <= _T_237 @[GTimer.scala 25:7]
    wire _T_238 : UInt<1>
    _T_238 <= UInt<1>("h00")
    node _T_239 = and(UInt<1>("h01"), _T_238) @[Debug.scala 55:16]
    when _T_239 : @[Debug.scala 55:31]
      node _T_240 = asUInt(reset) @[Debug.scala 56:24]
      node _T_241 = eq(_T_240, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_241 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage2: ", _T_235) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_242 = asUInt(reset) @[Debug.scala 57:13]
      node _T_243 = eq(_T_242, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_243 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[isFD:%d isFDreg:%d inFire:%d invalid:%d \n", isForwardData, isForwardDataReg, _T_234, io.in.valid) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    wire _T_244 : {tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _T_245 : UInt<32>
    _T_245 <= io.in.bits.req.addr
    node _T_246 = bits(_T_245, 2, 0) @[Cache.scala 79:45]
    _T_244.byteOffset <= _T_246 @[Cache.scala 79:45]
    node _T_247 = bits(_T_245, 5, 3) @[Cache.scala 79:45]
    _T_244.wordIndex <= _T_247 @[Cache.scala 79:45]
    node _T_248 = bits(_T_245, 12, 6) @[Cache.scala 79:45]
    _T_244.index <= _T_248 @[Cache.scala 79:45]
    node _T_249 = bits(_T_245, 31, 13) @[Cache.scala 79:45]
    _T_244.tag <= _T_249 @[Cache.scala 79:45]
    reg _T_250 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_251 = add(_T_250, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_252 = tail(_T_251, 1) @[GTimer.scala 25:12]
    _T_250 <= _T_252 @[GTimer.scala 25:7]
    wire _T_253 : UInt<1>
    _T_253 <= UInt<1>("h00")
    node _T_254 = and(UInt<1>("h01"), _T_253) @[Debug.scala 55:16]
    when _T_254 : @[Debug.scala 55:31]
      node _T_255 = asUInt(reset) @[Debug.scala 56:24]
      node _T_256 = eq(_T_255, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_256 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage2: ", _T_250) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_257 = asUInt(reset) @[Debug.scala 57:13]
      node _T_258 = eq(_T_257, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_258 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[isFM:%d isFMreg:%d metawreq:%x widx:%x ridx:%x \n", isForwardMeta, isForwardMetaReg, io.metaWriteBus.req.valid, io.metaWriteBus.req.bits.setIdx, _T_244.index) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    
  module Arbiter : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<7>, data : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}[2], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<7>, data : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}, chosen : UInt<1>}
    
    io.chosen <= UInt<1>("h01") @[Arbiter.scala 123:13]
    io.out.bits.waymask <= io.in[1].bits.waymask @[Arbiter.scala 124:15]
    io.out.bits.data.dirty <= io.in[1].bits.data.dirty @[Arbiter.scala 124:15]
    io.out.bits.data.valid <= io.in[1].bits.data.valid @[Arbiter.scala 124:15]
    io.out.bits.data.tag <= io.in[1].bits.data.tag @[Arbiter.scala 124:15]
    io.out.bits.setIdx <= io.in[1].bits.setIdx @[Arbiter.scala 124:15]
    when io.in[0].valid : @[Arbiter.scala 126:27]
      io.chosen <= UInt<1>("h00") @[Arbiter.scala 127:17]
      io.out.bits.waymask <= io.in[0].bits.waymask @[Arbiter.scala 128:19]
      io.out.bits.data.dirty <= io.in[0].bits.data.dirty @[Arbiter.scala 128:19]
      io.out.bits.data.valid <= io.in[0].bits.data.valid @[Arbiter.scala 128:19]
      io.out.bits.data.tag <= io.in[0].bits.data.tag @[Arbiter.scala 128:19]
      io.out.bits.setIdx <= io.in[0].bits.setIdx @[Arbiter.scala 128:19]
      skip @[Arbiter.scala 126:27]
    node grant_1 = eq(io.in[0].valid, UInt<1>("h00")) @[Arbiter.scala 31:78]
    node _T = and(UInt<1>("h01"), io.out.ready) @[Arbiter.scala 134:19]
    io.in[0].ready <= _T @[Arbiter.scala 134:14]
    node _T_1 = and(grant_1, io.out.ready) @[Arbiter.scala 134:19]
    io.in[1].ready <= _T_1 @[Arbiter.scala 134:14]
    node _T_2 = eq(grant_1, UInt<1>("h00")) @[Arbiter.scala 135:19]
    node _T_3 = or(_T_2, io.in[1].valid) @[Arbiter.scala 135:31]
    io.out.valid <= _T_3 @[Arbiter.scala 135:16]
    
  module Arbiter_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<10>, data : {data : UInt<64>}, waymask : UInt<4>}}[2], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<10>, data : {data : UInt<64>}, waymask : UInt<4>}}, chosen : UInt<1>}
    
    io.chosen <= UInt<1>("h01") @[Arbiter.scala 123:13]
    io.out.bits.waymask <= io.in[1].bits.waymask @[Arbiter.scala 124:15]
    io.out.bits.data.data <= io.in[1].bits.data.data @[Arbiter.scala 124:15]
    io.out.bits.setIdx <= io.in[1].bits.setIdx @[Arbiter.scala 124:15]
    when io.in[0].valid : @[Arbiter.scala 126:27]
      io.chosen <= UInt<1>("h00") @[Arbiter.scala 127:17]
      io.out.bits.waymask <= io.in[0].bits.waymask @[Arbiter.scala 128:19]
      io.out.bits.data.data <= io.in[0].bits.data.data @[Arbiter.scala 128:19]
      io.out.bits.setIdx <= io.in[0].bits.setIdx @[Arbiter.scala 128:19]
      skip @[Arbiter.scala 126:27]
    node grant_1 = eq(io.in[0].valid, UInt<1>("h00")) @[Arbiter.scala 31:78]
    node _T = and(UInt<1>("h01"), io.out.ready) @[Arbiter.scala 134:19]
    io.in[0].ready <= _T @[Arbiter.scala 134:14]
    node _T_1 = and(grant_1, io.out.ready) @[Arbiter.scala 134:19]
    io.in[1].ready <= _T_1 @[Arbiter.scala 134:14]
    node _T_2 = eq(grant_1, UInt<1>("h00")) @[Arbiter.scala 135:19]
    node _T_3 = or(_T_2, io.in[1].valid) @[Arbiter.scala 135:31]
    io.out.valid <= _T_3 @[Arbiter.scala 135:16]
    
  module CacheStage3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {req : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<87>}, metas : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4], datas : {data : UInt<64>}[4], hit : UInt<1>, waymask : UInt<4>, mmio : UInt<1>, isForwardData : UInt<1>, forwardData : {setIdx : UInt<10>, data : {data : UInt<64>}, waymask : UInt<4>}}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>, user : UInt<87>}}, isFinish : UInt<1>, flip flush : UInt<1>, dataReadBus : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<10>}}, flip resp : {data : {data : UInt<64>}[4]}}, dataWriteBus : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<10>, data : {data : UInt<64>}, waymask : UInt<4>}}}, metaWriteBus : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<7>, data : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}}, mem : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}, mmio : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}, cohResp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}, dataReadRespToL1 : UInt<1>}
    
    inst metaWriteArb of Arbiter @[Cache.scala 241:28]
    metaWriteArb.clock <= clock
    metaWriteArb.reset <= reset
    inst dataWriteArb of Arbiter_1 @[Cache.scala 242:28]
    dataWriteArb.clock <= clock
    dataWriteArb.reset <= reset
    wire addr : {tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 245:31]
    wire _T : UInt<32>
    _T <= io.in.bits.req.addr
    node _T_1 = bits(_T, 2, 0) @[Cache.scala 245:31]
    addr.byteOffset <= _T_1 @[Cache.scala 245:31]
    node _T_2 = bits(_T, 5, 3) @[Cache.scala 245:31]
    addr.wordIndex <= _T_2 @[Cache.scala 245:31]
    node _T_3 = bits(_T, 12, 6) @[Cache.scala 245:31]
    addr.index <= _T_3 @[Cache.scala 245:31]
    node _T_4 = bits(_T, 31, 13) @[Cache.scala 245:31]
    addr.tag <= _T_4 @[Cache.scala 245:31]
    node mmio = and(io.in.valid, io.in.bits.mmio) @[Cache.scala 246:26]
    node hit = and(io.in.valid, io.in.bits.hit) @[Cache.scala 247:25]
    node _T_5 = eq(io.in.bits.hit, UInt<1>("h00")) @[Cache.scala 248:29]
    node miss = and(io.in.valid, _T_5) @[Cache.scala 248:26]
    node _T_6 = and(io.in.valid, UInt<1>("h00")) @[Cache.scala 249:27]
    node _T_7 = eq(io.in.bits.req.cmd, UInt<4>("h08")) @[SimpleBus.scala 79:23]
    node probe = and(_T_6, _T_7) @[Cache.scala 249:39]
    node _T_8 = eq(io.in.bits.req.cmd, UInt<2>("h02")) @[SimpleBus.scala 76:27]
    node hitReadBurst = and(hit, _T_8) @[Cache.scala 250:26]
    node _T_9 = bits(io.in.bits.waymask, 0, 0) @[Mux.scala 29:36]
    node _T_10 = bits(io.in.bits.waymask, 1, 1) @[Mux.scala 29:36]
    node _T_11 = bits(io.in.bits.waymask, 2, 2) @[Mux.scala 29:36]
    node _T_12 = bits(io.in.bits.waymask, 3, 3) @[Mux.scala 29:36]
    node _T_13 = cat(io.in.bits.metas[0].tag, io.in.bits.metas[0].valid) @[Mux.scala 27:72]
    node _T_14 = cat(_T_13, io.in.bits.metas[0].dirty) @[Mux.scala 27:72]
    node _T_15 = mux(_T_9, _T_14, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_16 = cat(io.in.bits.metas[1].tag, io.in.bits.metas[1].valid) @[Mux.scala 27:72]
    node _T_17 = cat(_T_16, io.in.bits.metas[1].dirty) @[Mux.scala 27:72]
    node _T_18 = mux(_T_10, _T_17, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_19 = cat(io.in.bits.metas[2].tag, io.in.bits.metas[2].valid) @[Mux.scala 27:72]
    node _T_20 = cat(_T_19, io.in.bits.metas[2].dirty) @[Mux.scala 27:72]
    node _T_21 = mux(_T_11, _T_20, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_22 = cat(io.in.bits.metas[3].tag, io.in.bits.metas[3].valid) @[Mux.scala 27:72]
    node _T_23 = cat(_T_22, io.in.bits.metas[3].dirty) @[Mux.scala 27:72]
    node _T_24 = mux(_T_12, _T_23, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_25 = or(_T_15, _T_18) @[Mux.scala 27:72]
    node _T_26 = or(_T_25, _T_21) @[Mux.scala 27:72]
    node _T_27 = or(_T_26, _T_24) @[Mux.scala 27:72]
    wire meta : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>} @[Mux.scala 27:72]
    wire _T_28 : UInt<21>
    _T_28 <= _T_27
    node _T_29 = bits(_T_28, 0, 0) @[Mux.scala 27:72]
    meta.dirty <= _T_29 @[Mux.scala 27:72]
    node _T_30 = bits(_T_28, 1, 1) @[Mux.scala 27:72]
    meta.valid <= _T_30 @[Mux.scala 27:72]
    node _T_31 = bits(_T_28, 20, 2) @[Mux.scala 27:72]
    meta.tag <= _T_31 @[Mux.scala 27:72]
    node _T_32 = and(mmio, hit) @[Cache.scala 252:17]
    node _T_33 = eq(_T_32, UInt<1>("h00")) @[Cache.scala 252:10]
    node _T_34 = asUInt(reset) @[Cache.scala 252:9]
    node _T_35 = or(_T_33, _T_34) @[Cache.scala 252:9]
    node _T_36 = eq(_T_35, UInt<1>("h00")) @[Cache.scala 252:9]
    when _T_36 : @[Cache.scala 252:9]
      printf(clock, UInt<1>(1), "Assertion failed: MMIO request should not hit in cache\n    at Cache.scala:252 assert(!(mmio && hit), \"MMIO request should not hit in cache\")\n") @[Cache.scala 252:9]
      stop(clock, UInt<1>(1), 1) @[Cache.scala 252:9]
      skip @[Cache.scala 252:9]
    node _T_37 = eq(io.in.bits.waymask, io.in.bits.forwardData.waymask) @[Cache.scala 260:71]
    node useForwardData = and(io.in.bits.isForwardData, _T_37) @[Cache.scala 260:49]
    node _T_38 = bits(io.in.bits.waymask, 0, 0) @[Mux.scala 29:36]
    node _T_39 = bits(io.in.bits.waymask, 1, 1) @[Mux.scala 29:36]
    node _T_40 = bits(io.in.bits.waymask, 2, 2) @[Mux.scala 29:36]
    node _T_41 = bits(io.in.bits.waymask, 3, 3) @[Mux.scala 29:36]
    node _T_42 = mux(_T_38, io.in.bits.datas[0].data, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_43 = mux(_T_39, io.in.bits.datas[1].data, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_44 = mux(_T_40, io.in.bits.datas[2].data, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_45 = mux(_T_41, io.in.bits.datas[3].data, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_46 = or(_T_42, _T_43) @[Mux.scala 27:72]
    node _T_47 = or(_T_46, _T_44) @[Mux.scala 27:72]
    node _T_48 = or(_T_47, _T_45) @[Mux.scala 27:72]
    wire _T_49 : {data : UInt<64>} @[Mux.scala 27:72]
    wire _T_50 : UInt<64>
    _T_50 <= _T_48
    node _T_51 = bits(_T_50, 63, 0) @[Mux.scala 27:72]
    _T_49.data <= _T_51 @[Mux.scala 27:72]
    node dataRead = mux(useForwardData, io.in.bits.forwardData.data.data, _T_49.data) @[Cache.scala 262:21]
    node _T_52 = eq(UInt<1>("h01"), UInt<1>("h00")) @[Cache.scala 263:22]
    node _T_53 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_54 = and(_T_52, _T_53) @[Cache.scala 263:28]
    node _T_55 = bits(io.in.bits.req.wmask, 0, 0) @[BitUtils.scala 27:29]
    node _T_56 = bits(io.in.bits.req.wmask, 1, 1) @[BitUtils.scala 27:29]
    node _T_57 = bits(io.in.bits.req.wmask, 2, 2) @[BitUtils.scala 27:29]
    node _T_58 = bits(io.in.bits.req.wmask, 3, 3) @[BitUtils.scala 27:29]
    node _T_59 = bits(io.in.bits.req.wmask, 4, 4) @[BitUtils.scala 27:29]
    node _T_60 = bits(io.in.bits.req.wmask, 5, 5) @[BitUtils.scala 27:29]
    node _T_61 = bits(io.in.bits.req.wmask, 6, 6) @[BitUtils.scala 27:29]
    node _T_62 = bits(io.in.bits.req.wmask, 7, 7) @[BitUtils.scala 27:29]
    node _T_63 = bits(_T_55, 0, 0) @[Bitwise.scala 72:15]
    node _T_64 = mux(_T_63, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_65 = bits(_T_56, 0, 0) @[Bitwise.scala 72:15]
    node _T_66 = mux(_T_65, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_67 = bits(_T_57, 0, 0) @[Bitwise.scala 72:15]
    node _T_68 = mux(_T_67, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_69 = bits(_T_58, 0, 0) @[Bitwise.scala 72:15]
    node _T_70 = mux(_T_69, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_71 = bits(_T_59, 0, 0) @[Bitwise.scala 72:15]
    node _T_72 = mux(_T_71, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_73 = bits(_T_60, 0, 0) @[Bitwise.scala 72:15]
    node _T_74 = mux(_T_73, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_75 = bits(_T_61, 0, 0) @[Bitwise.scala 72:15]
    node _T_76 = mux(_T_75, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_77 = bits(_T_62, 0, 0) @[Bitwise.scala 72:15]
    node _T_78 = mux(_T_77, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_79 = cat(_T_66, _T_64) @[Cat.scala 29:58]
    node _T_80 = cat(_T_70, _T_68) @[Cat.scala 29:58]
    node _T_81 = cat(_T_80, _T_79) @[Cat.scala 29:58]
    node _T_82 = cat(_T_74, _T_72) @[Cat.scala 29:58]
    node _T_83 = cat(_T_78, _T_76) @[Cat.scala 29:58]
    node _T_84 = cat(_T_83, _T_82) @[Cat.scala 29:58]
    node _T_85 = cat(_T_84, _T_81) @[Cat.scala 29:58]
    node wordMask = mux(_T_54, _T_85, UInt<64>("h00")) @[Cache.scala 263:21]
    reg value : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Counter.scala 29:33]
    node _T_86 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_87 = eq(io.in.bits.req.cmd, UInt<2>("h03")) @[Cache.scala 266:34]
    node _T_88 = eq(io.in.bits.req.cmd, UInt<3>("h07")) @[SimpleBus.scala 78:27]
    node _T_89 = or(_T_87, _T_88) @[Cache.scala 266:62]
    node _T_90 = and(_T_86, _T_89) @[Cache.scala 266:22]
    when _T_90 : @[Cache.scala 266:85]
      node _T_91 = eq(value, UInt<3>("h07")) @[Counter.scala 38:24]
      node _T_92 = add(value, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_93 = tail(_T_92, 1) @[Counter.scala 39:22]
      value <= _T_93 @[Counter.scala 39:13]
      skip @[Cache.scala 266:85]
    node _T_94 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node hitWrite = and(hit, _T_94) @[Cache.scala 270:22]
    wire dataHitWriteBus : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<10>, data : {data : UInt<64>}, waymask : UInt<4>}}} @[Cache.scala 271:29]
    wire _T_95 : {data : UInt<64>} @[Cache.scala 272:16]
    node _T_96 = and(io.in.bits.req.wdata, wordMask) @[BitUtils.scala 32:13]
    node _T_97 = not(wordMask) @[BitUtils.scala 32:38]
    node _T_98 = and(dataRead, _T_97) @[BitUtils.scala 32:36]
    node _T_99 = or(_T_96, _T_98) @[BitUtils.scala 32:25]
    _T_95.data <= _T_99 @[Cache.scala 106:15]
    node _T_100 = eq(io.in.bits.req.cmd, UInt<2>("h03")) @[Cache.scala 273:60]
    node _T_101 = eq(io.in.bits.req.cmd, UInt<3>("h07")) @[SimpleBus.scala 78:27]
    node _T_102 = or(_T_100, _T_101) @[Cache.scala 273:88]
    node _T_103 = mux(_T_102, value, addr.wordIndex) @[Cache.scala 273:51]
    node _T_104 = cat(addr.index, _T_103) @[Cat.scala 29:58]
    dataHitWriteBus.req.bits.setIdx <= _T_104 @[SRAMTemplate.scala 26:17]
    dataHitWriteBus.req.bits.data.data <= _T_95.data @[SRAMTemplate.scala 37:15]
    dataHitWriteBus.req.bits.waymask <= io.in.bits.waymask @[SRAMTemplate.scala 38:24]
    dataHitWriteBus.req.valid <= hitWrite @[SRAMTemplate.scala 63:20]
    wire metaHitWriteBus : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<7>, data : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}} @[Cache.scala 275:29]
    node _T_105 = eq(meta.dirty, UInt<1>("h00")) @[Cache.scala 276:25]
    node _T_106 = and(hitWrite, _T_105) @[Cache.scala 276:22]
    wire _T_107 : {tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _T_108 : UInt<32>
    _T_108 <= io.in.bits.req.addr
    node _T_109 = bits(_T_108, 2, 0) @[Cache.scala 79:45]
    _T_107.byteOffset <= _T_109 @[Cache.scala 79:45]
    node _T_110 = bits(_T_108, 5, 3) @[Cache.scala 79:45]
    _T_107.wordIndex <= _T_110 @[Cache.scala 79:45]
    node _T_111 = bits(_T_108, 12, 6) @[Cache.scala 79:45]
    _T_107.index <= _T_111 @[Cache.scala 79:45]
    node _T_112 = bits(_T_108, 31, 13) @[Cache.scala 79:45]
    _T_107.tag <= _T_112 @[Cache.scala 79:45]
    wire _T_113 : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>} @[Cache.scala 277:16]
    _T_113.tag <= meta.tag @[Cache.scala 95:14]
    _T_113.valid <= UInt<1>("h01") @[Cache.scala 96:16]
    _T_113.dirty <= UInt<1>("h00") @[Cache.scala 97:16]
    metaHitWriteBus.req.bits.setIdx <= _T_107.index @[SRAMTemplate.scala 26:17]
    metaHitWriteBus.req.bits.data.dirty <= _T_113.dirty @[SRAMTemplate.scala 37:15]
    metaHitWriteBus.req.bits.data.valid <= _T_113.valid @[SRAMTemplate.scala 37:15]
    metaHitWriteBus.req.bits.data.tag <= _T_113.tag @[SRAMTemplate.scala 37:15]
    metaHitWriteBus.req.bits.waymask <= io.in.bits.waymask @[SRAMTemplate.scala 38:24]
    metaHitWriteBus.req.valid <= _T_106 @[SRAMTemplate.scala 63:20]
    reg state : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[Cache.scala 281:22]
    reg needFlush : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Cache.scala 282:26]
    node _T_114 = neq(state, UInt<4>("h00")) @[Cache.scala 284:28]
    node _T_115 = and(io.flush, _T_114) @[Cache.scala 284:18]
    when _T_115 : @[Cache.scala 284:41]
      needFlush <= UInt<1>("h01") @[Cache.scala 284:53]
      skip @[Cache.scala 284:41]
    node _T_116 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_117 = and(_T_116, needFlush) @[Cache.scala 285:23]
    when _T_117 : @[Cache.scala 285:37]
      needFlush <= UInt<1>("h00") @[Cache.scala 285:49]
      skip @[Cache.scala 285:37]
    reg value_1 : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Counter.scala 29:33]
    reg value_2 : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Counter.scala 29:33]
    reg state2 : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Cache.scala 291:23]
    node _T_118 = eq(state, UInt<4>("h03")) @[Cache.scala 293:39]
    node _T_119 = eq(state, UInt<4>("h08")) @[Cache.scala 293:66]
    node _T_120 = or(_T_118, _T_119) @[Cache.scala 293:57]
    node _T_121 = eq(state2, UInt<2>("h00")) @[Cache.scala 293:92]
    node _T_122 = and(_T_120, _T_121) @[Cache.scala 293:81]
    node _T_123 = eq(state, UInt<4>("h08")) @[Cache.scala 294:40]
    node _T_124 = mux(_T_123, value_1, value_2) @[Cache.scala 294:33]
    node _T_125 = cat(addr.index, _T_124) @[Cat.scala 29:58]
    io.dataReadBus.req.bits.setIdx <= _T_125 @[SRAMTemplate.scala 26:17]
    io.dataReadBus.req.valid <= _T_122 @[SRAMTemplate.scala 53:20]
    node _T_126 = eq(state2, UInt<2>("h01")) @[Cache.scala 295:60]
    reg dataWay : {data : UInt<64>}[4], clock @[Reg.scala 15:16]
    when _T_126 : @[Reg.scala 16:19]
      dataWay[0].data <= io.dataReadBus.resp.data[0].data @[Reg.scala 16:23]
      dataWay[1].data <= io.dataReadBus.resp.data[1].data @[Reg.scala 16:23]
      dataWay[2].data <= io.dataReadBus.resp.data[2].data @[Reg.scala 16:23]
      dataWay[3].data <= io.dataReadBus.resp.data[3].data @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _T_127 = bits(io.in.bits.waymask, 0, 0) @[Mux.scala 29:36]
    node _T_128 = bits(io.in.bits.waymask, 1, 1) @[Mux.scala 29:36]
    node _T_129 = bits(io.in.bits.waymask, 2, 2) @[Mux.scala 29:36]
    node _T_130 = bits(io.in.bits.waymask, 3, 3) @[Mux.scala 29:36]
    node _T_131 = mux(_T_127, dataWay[0].data, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_132 = mux(_T_128, dataWay[1].data, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_133 = mux(_T_129, dataWay[2].data, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_134 = mux(_T_130, dataWay[3].data, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_135 = or(_T_131, _T_132) @[Mux.scala 27:72]
    node _T_136 = or(_T_135, _T_133) @[Mux.scala 27:72]
    node _T_137 = or(_T_136, _T_134) @[Mux.scala 27:72]
    wire _T_138 : {data : UInt<64>} @[Mux.scala 27:72]
    wire _T_139 : UInt<64>
    _T_139 <= _T_137
    node _T_140 = bits(_T_139, 63, 0) @[Mux.scala 27:72]
    _T_138.data <= _T_140 @[Mux.scala 27:72]
    node _T_141 = eq(UInt<2>("h00"), state2) @[Conditional.scala 37:30]
    when _T_141 : @[Conditional.scala 40:58]
      node _T_142 = and(io.dataReadBus.req.ready, io.dataReadBus.req.valid) @[Decoupled.scala 40:37]
      when _T_142 : @[Cache.scala 299:53]
        state2 <= UInt<2>("h01") @[Cache.scala 299:62]
        skip @[Cache.scala 299:53]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_143 = eq(UInt<2>("h01"), state2) @[Conditional.scala 37:30]
      when _T_143 : @[Conditional.scala 39:67]
        state2 <= UInt<2>("h02") @[Cache.scala 300:35]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_144 = eq(UInt<2>("h02"), state2) @[Conditional.scala 37:30]
        when _T_144 : @[Conditional.scala 39:67]
          node _T_145 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
          node _T_146 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 40:37]
          node _T_147 = or(_T_145, _T_146) @[Cache.scala 301:46]
          node _T_148 = and(hitReadBurst, io.out.ready) @[Cache.scala 301:83]
          node _T_149 = or(_T_147, _T_148) @[Cache.scala 301:67]
          when _T_149 : @[Cache.scala 301:100]
            state2 <= UInt<2>("h00") @[Cache.scala 301:109]
            skip @[Cache.scala 301:100]
          skip @[Conditional.scala 39:67]
    node _T_150 = bits(io.in.bits.req.addr, 31, 3) @[Cache.scala 305:44]
    node raddr = cat(_T_150, UInt<3>("h00")) @[Cat.scala 29:58]
    node _T_151 = cat(meta.tag, addr.index) @[Cat.scala 29:58]
    node waddr = cat(_T_151, UInt<6>("h00")) @[Cat.scala 29:58]
    node _T_152 = eq(state, UInt<4>("h01")) @[Cache.scala 309:23]
    node _T_153 = eq(value_2, UInt<3>("h07")) @[Cache.scala 310:29]
    node _T_154 = mux(_T_153, UInt<3>("h07"), UInt<2>("h03")) @[Cache.scala 310:8]
    node cmd = mux(_T_152, UInt<2>("h02"), _T_154) @[Cache.scala 309:16]
    node _T_155 = eq(state, UInt<4>("h01")) @[Cache.scala 311:42]
    node _T_156 = mux(_T_155, raddr, waddr) @[Cache.scala 311:35]
    node _T_157 = mux(UInt<1>("h01"), UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    io.mem.req.bits.addr <= _T_156 @[SimpleBus.scala 64:15]
    io.mem.req.bits.cmd <= cmd @[SimpleBus.scala 65:14]
    io.mem.req.bits.size <= UInt<2>("h03") @[SimpleBus.scala 66:15]
    io.mem.req.bits.wdata <= _T_138.data @[SimpleBus.scala 67:16]
    io.mem.req.bits.wmask <= _T_157 @[SimpleBus.scala 68:16]
    io.mem.resp.ready <= UInt<1>("h01") @[Cache.scala 315:21]
    node _T_158 = eq(state, UInt<4>("h01")) @[Cache.scala 316:30]
    node _T_159 = eq(state, UInt<4>("h03")) @[Cache.scala 316:59]
    node _T_160 = eq(state2, UInt<2>("h02")) @[Cache.scala 316:89]
    node _T_161 = and(_T_159, _T_160) @[Cache.scala 316:78]
    node _T_162 = or(_T_158, _T_161) @[Cache.scala 316:48]
    io.mem.req.valid <= _T_162 @[Cache.scala 316:20]
    io.mmio.req.bits.wdata <= io.in.bits.req.wdata @[Cache.scala 319:20]
    io.mmio.req.bits.wmask <= io.in.bits.req.wmask @[Cache.scala 319:20]
    io.mmio.req.bits.cmd <= io.in.bits.req.cmd @[Cache.scala 319:20]
    io.mmio.req.bits.size <= io.in.bits.req.size @[Cache.scala 319:20]
    io.mmio.req.bits.addr <= io.in.bits.req.addr @[Cache.scala 319:20]
    io.mmio.resp.ready <= UInt<1>("h01") @[Cache.scala 320:22]
    node _T_163 = eq(state, UInt<4>("h05")) @[Cache.scala 321:31]
    io.mmio.req.valid <= _T_163 @[Cache.scala 321:21]
    reg afterFirstRead : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Cache.scala 323:31]
    node _T_164 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    reg alreadyOutFire : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Reg.scala 27:20]
    when _T_164 : @[Reg.scala 28:19]
      alreadyOutFire <= UInt<1>("h01") @[Reg.scala 28:23]
      skip @[Reg.scala 28:19]
    node _T_165 = eq(afterFirstRead, UInt<1>("h00")) @[Cache.scala 325:22]
    node _T_166 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
    node _T_167 = and(_T_165, _T_166) @[Cache.scala 325:38]
    node _T_168 = eq(state, UInt<4>("h02")) @[Cache.scala 325:70]
    node readingFirst = and(_T_167, _T_168) @[Cache.scala 325:60]
    node _T_169 = mux(mmio, io.mmio.resp.bits.rdata, io.mem.resp.bits.rdata) @[Cache.scala 326:39]
    node _T_170 = eq(state, UInt<4>("h06")) @[Cache.scala 327:52]
    node _T_171 = mux(mmio, _T_170, readingFirst) @[Cache.scala 327:39]
    reg inRdataRegDemand : UInt<64>, clock @[Reg.scala 15:16]
    when _T_171 : @[Reg.scala 16:19]
      inRdataRegDemand <= _T_169 @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _T_172 = eq(state, UInt<4>("h00")) @[Cache.scala 330:31]
    node _T_173 = and(_T_172, probe) @[Cache.scala 330:43]
    node _T_174 = eq(state, UInt<4>("h08")) @[Cache.scala 331:31]
    node _T_175 = eq(state2, UInt<2>("h02")) @[Cache.scala 331:57]
    node _T_176 = and(_T_174, _T_175) @[Cache.scala 331:46]
    node _T_177 = or(_T_173, _T_176) @[Cache.scala 330:53]
    io.cohResp.valid <= _T_177 @[Cache.scala 330:20]
    io.cohResp.bits.rdata <= _T_138.data @[Cache.scala 332:25]
    node _T_178 = eq(state, UInt<4>("h08")) @[Cache.scala 333:35]
    node _T_179 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 40:37]
    node _T_180 = and(_T_178, _T_179) @[Cache.scala 333:49]
    reg _T_181 : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Counter.scala 29:33]
    wire releaseLast : UInt<1>
    releaseLast <= UInt<1>("h00")
    when _T_180 : @[Counter.scala 67:17]
      node _T_182 = eq(_T_181, UInt<3>("h07")) @[Counter.scala 38:24]
      node _T_183 = add(_T_181, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_184 = tail(_T_183, 1) @[Counter.scala 39:22]
      _T_181 <= _T_184 @[Counter.scala 39:13]
      releaseLast <= _T_182 @[Counter.scala 67:24]
      skip @[Counter.scala 67:17]
    node _T_185 = eq(state, UInt<4>("h08")) @[Cache.scala 334:36]
    node _T_186 = mux(releaseLast, UInt<3>("h06"), UInt<1>("h00")) @[Cache.scala 334:54]
    node _T_187 = mux(hit, UInt<4>("h0c"), UInt<4>("h08")) @[Cache.scala 335:8]
    node _T_188 = mux(_T_185, _T_186, _T_187) @[Cache.scala 334:29]
    io.cohResp.bits.cmd <= _T_188 @[Cache.scala 334:23]
    node _T_189 = and(hitReadBurst, io.out.ready) @[Cache.scala 337:35]
    node _T_190 = eq(state2, UInt<2>("h02")) @[Cache.scala 337:61]
    node respToL1Fire = and(_T_189, _T_190) @[Cache.scala 337:51]
    node _T_191 = eq(state, UInt<4>("h00")) @[Cache.scala 338:37]
    node _T_192 = eq(state, UInt<4>("h08")) @[Cache.scala 338:57]
    node _T_193 = eq(state2, UInt<2>("h02")) @[Cache.scala 338:81]
    node _T_194 = and(_T_192, _T_193) @[Cache.scala 338:71]
    node _T_195 = or(_T_191, _T_194) @[Cache.scala 338:48]
    node _T_196 = and(_T_195, hitReadBurst) @[Cache.scala 338:96]
    node _T_197 = and(_T_196, io.out.ready) @[Cache.scala 338:112]
    reg _T_198 : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Counter.scala 29:33]
    wire respToL1Last : UInt<1>
    respToL1Last <= UInt<1>("h00")
    when _T_197 : @[Counter.scala 67:17]
      node _T_199 = eq(_T_198, UInt<3>("h07")) @[Counter.scala 38:24]
      node _T_200 = add(_T_198, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_201 = tail(_T_200, 1) @[Counter.scala 39:22]
      _T_198 <= _T_201 @[Counter.scala 39:13]
      respToL1Last <= _T_199 @[Counter.scala 67:24]
      skip @[Counter.scala 67:17]
    node _T_202 = eq(UInt<4>("h00"), state) @[Conditional.scala 37:30]
    when _T_202 : @[Conditional.scala 40:58]
      afterFirstRead <= UInt<1>("h00") @[Cache.scala 342:22]
      alreadyOutFire <= UInt<1>("h00") @[Cache.scala 343:22]
      when probe : @[Cache.scala 345:20]
        node _T_203 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 40:37]
        when _T_203 : @[Cache.scala 346:34]
          node _T_204 = mux(hit, UInt<4>("h08"), UInt<4>("h00")) @[Cache.scala 347:23]
          state <= _T_204 @[Cache.scala 347:17]
          value_1 <= addr.wordIndex @[Cache.scala 348:29]
          skip @[Cache.scala 346:34]
        skip @[Cache.scala 345:20]
      else : @[Cache.scala 350:50]
        node _T_205 = and(hitReadBurst, io.out.ready) @[Cache.scala 350:33]
        when _T_205 : @[Cache.scala 350:50]
          state <= UInt<4>("h08") @[Cache.scala 351:15]
          node _T_206 = eq(addr.wordIndex, UInt<3>("h07")) @[Cache.scala 352:49]
          node _T_207 = add(addr.wordIndex, UInt<1>("h01")) @[Cache.scala 352:93]
          node _T_208 = tail(_T_207, 1) @[Cache.scala 352:93]
          node _T_209 = mux(_T_206, UInt<1>("h00"), _T_208) @[Cache.scala 352:33]
          value_1 <= _T_209 @[Cache.scala 352:27]
          skip @[Cache.scala 350:50]
        else : @[Cache.scala 353:49]
          node _T_210 = or(miss, mmio) @[Cache.scala 353:26]
          node _T_211 = eq(io.flush, UInt<1>("h00")) @[Cache.scala 353:38]
          node _T_212 = and(_T_210, _T_211) @[Cache.scala 353:35]
          when _T_212 : @[Cache.scala 353:49]
            node _T_213 = eq(UInt<1>("h01"), UInt<1>("h00")) @[Cache.scala 354:43]
            node _T_214 = and(_T_213, meta.dirty) @[Cache.scala 354:49]
            node _T_215 = mux(_T_214, UInt<4>("h03"), UInt<4>("h01")) @[Cache.scala 354:42]
            node _T_216 = mux(mmio, UInt<4>("h05"), _T_215) @[Cache.scala 354:21]
            state <= _T_216 @[Cache.scala 354:15]
            skip @[Cache.scala 353:49]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_217 = eq(UInt<4>("h05"), state) @[Conditional.scala 37:30]
      when _T_217 : @[Conditional.scala 39:67]
        node _T_218 = and(io.mmio.req.ready, io.mmio.req.valid) @[Decoupled.scala 40:37]
        when _T_218 : @[Cache.scala 358:48]
          state <= UInt<4>("h06") @[Cache.scala 358:56]
          skip @[Cache.scala 358:48]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_219 = eq(UInt<4>("h06"), state) @[Conditional.scala 37:30]
        when _T_219 : @[Conditional.scala 39:67]
          node _T_220 = and(io.mmio.resp.ready, io.mmio.resp.valid) @[Decoupled.scala 40:37]
          when _T_220 : @[Cache.scala 359:50]
            state <= UInt<4>("h07") @[Cache.scala 359:58]
            skip @[Cache.scala 359:50]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_221 = eq(UInt<4>("h08"), state) @[Conditional.scala 37:30]
          when _T_221 : @[Conditional.scala 39:67]
            node _T_222 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 40:37]
            node _T_223 = or(_T_222, respToL1Fire) @[Cache.scala 362:31]
            when _T_223 : @[Cache.scala 362:48]
              node _T_224 = eq(value_1, UInt<3>("h07")) @[Counter.scala 38:24]
              node _T_225 = add(value_1, UInt<1>("h01")) @[Counter.scala 39:22]
              node _T_226 = tail(_T_225, 1) @[Counter.scala 39:22]
              value_1 <= _T_226 @[Counter.scala 39:13]
              skip @[Cache.scala 362:48]
            node _T_227 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 40:37]
            node _T_228 = and(probe, _T_227) @[Cache.scala 363:19]
            node _T_229 = and(_T_228, releaseLast) @[Cache.scala 363:40]
            node _T_230 = and(respToL1Fire, respToL1Last) @[Cache.scala 363:71]
            node _T_231 = or(_T_229, _T_230) @[Cache.scala 363:55]
            when _T_231 : @[Cache.scala 363:88]
              state <= UInt<4>("h00") @[Cache.scala 363:96]
              skip @[Cache.scala 363:88]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_232 = eq(UInt<4>("h01"), state) @[Conditional.scala 37:30]
            when _T_232 : @[Conditional.scala 39:67]
              node _T_233 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
              when _T_233 : @[Cache.scala 366:50]
                state <= UInt<4>("h02") @[Cache.scala 367:13]
                value_1 <= addr.wordIndex @[Cache.scala 368:25]
                skip @[Cache.scala 366:50]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_234 = eq(UInt<4>("h02"), state) @[Conditional.scala 37:30]
              when _T_234 : @[Conditional.scala 39:67]
                node _T_235 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
                when _T_235 : @[Cache.scala 372:33]
                  afterFirstRead <= UInt<1>("h01") @[Cache.scala 373:24]
                  node _T_236 = eq(value_1, UInt<3>("h07")) @[Counter.scala 38:24]
                  node _T_237 = add(value_1, UInt<1>("h01")) @[Counter.scala 39:22]
                  node _T_238 = tail(_T_237, 1) @[Counter.scala 39:22]
                  value_1 <= _T_238 @[Counter.scala 39:13]
                  node _T_239 = eq(io.in.bits.req.cmd, UInt<2>("h03")) @[Cache.scala 375:23]
                  when _T_239 : @[Cache.scala 375:52]
                    value <= UInt<1>("h00") @[Cache.scala 375:75]
                    skip @[Cache.scala 375:52]
                  node _T_240 = eq(io.mem.resp.bits.cmd, UInt<3>("h06")) @[SimpleBus.scala 91:26]
                  when _T_240 : @[Cache.scala 376:46]
                    state <= UInt<4>("h07") @[Cache.scala 376:54]
                    skip @[Cache.scala 376:46]
                  skip @[Cache.scala 372:33]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_241 = eq(UInt<4>("h03"), state) @[Conditional.scala 37:30]
                when _T_241 : @[Conditional.scala 39:67]
                  node _T_242 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
                  when _T_242 : @[Cache.scala 381:32]
                    node _T_243 = eq(value_2, UInt<3>("h07")) @[Counter.scala 38:24]
                    node _T_244 = add(value_2, UInt<1>("h01")) @[Counter.scala 39:22]
                    node _T_245 = tail(_T_244, 1) @[Counter.scala 39:22]
                    value_2 <= _T_245 @[Counter.scala 39:13]
                    skip @[Cache.scala 381:32]
                  node _T_246 = eq(io.mem.req.bits.cmd, UInt<3>("h07")) @[SimpleBus.scala 78:27]
                  node _T_247 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
                  node _T_248 = and(_T_246, _T_247) @[Cache.scala 382:43]
                  when _T_248 : @[Cache.scala 382:65]
                    state <= UInt<4>("h04") @[Cache.scala 382:73]
                    skip @[Cache.scala 382:65]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_249 = eq(UInt<4>("h04"), state) @[Conditional.scala 37:30]
                  when _T_249 : @[Conditional.scala 39:67]
                    node _T_250 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
                    when _T_250 : @[Cache.scala 385:53]
                      state <= UInt<4>("h01") @[Cache.scala 385:61]
                      skip @[Cache.scala 385:53]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_251 = eq(UInt<4>("h07"), state) @[Conditional.scala 37:30]
                    when _T_251 : @[Conditional.scala 39:67]
                      node _T_252 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
                      node _T_253 = or(_T_252, needFlush) @[Cache.scala 386:44]
                      node _T_254 = or(_T_253, alreadyOutFire) @[Cache.scala 386:57]
                      when _T_254 : @[Cache.scala 386:76]
                        state <= UInt<4>("h00") @[Cache.scala 386:84]
                        skip @[Cache.scala 386:76]
                      skip @[Conditional.scala 39:67]
    node _T_255 = mux(readingFirst, wordMask, UInt<64>("h00")) @[Cache.scala 389:67]
    node _T_256 = and(io.in.bits.req.wdata, _T_255) @[BitUtils.scala 32:13]
    node _T_257 = not(_T_255) @[BitUtils.scala 32:38]
    node _T_258 = and(io.mem.resp.bits.rdata, _T_257) @[BitUtils.scala 32:36]
    node dataRefill = or(_T_256, _T_258) @[BitUtils.scala 32:25]
    wire dataRefillWriteBus : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<10>, data : {data : UInt<64>}, waymask : UInt<4>}}} @[Cache.scala 390:32]
    node _T_259 = eq(state, UInt<4>("h02")) @[Cache.scala 391:20]
    node _T_260 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
    node _T_261 = and(_T_259, _T_260) @[Cache.scala 391:39]
    node _T_262 = cat(addr.index, value_1) @[Cat.scala 29:58]
    wire _T_263 : {data : UInt<64>} @[Cache.scala 392:16]
    _T_263.data <= dataRefill @[Cache.scala 106:15]
    dataRefillWriteBus.req.bits.setIdx <= _T_262 @[SRAMTemplate.scala 26:17]
    dataRefillWriteBus.req.bits.data.data <= _T_263.data @[SRAMTemplate.scala 37:15]
    dataRefillWriteBus.req.bits.waymask <= io.in.bits.waymask @[SRAMTemplate.scala 38:24]
    dataRefillWriteBus.req.valid <= _T_261 @[SRAMTemplate.scala 63:20]
    dataWriteArb.io.in[0].bits.waymask <= dataHitWriteBus.req.bits.waymask @[Cache.scala 394:25]
    dataWriteArb.io.in[0].bits.data.data <= dataHitWriteBus.req.bits.data.data @[Cache.scala 394:25]
    dataWriteArb.io.in[0].bits.setIdx <= dataHitWriteBus.req.bits.setIdx @[Cache.scala 394:25]
    dataWriteArb.io.in[0].valid <= dataHitWriteBus.req.valid @[Cache.scala 394:25]
    dataHitWriteBus.req.ready <= dataWriteArb.io.in[0].ready @[Cache.scala 394:25]
    dataWriteArb.io.in[1].bits.waymask <= dataRefillWriteBus.req.bits.waymask @[Cache.scala 395:25]
    dataWriteArb.io.in[1].bits.data.data <= dataRefillWriteBus.req.bits.data.data @[Cache.scala 395:25]
    dataWriteArb.io.in[1].bits.setIdx <= dataRefillWriteBus.req.bits.setIdx @[Cache.scala 395:25]
    dataWriteArb.io.in[1].valid <= dataRefillWriteBus.req.valid @[Cache.scala 395:25]
    dataRefillWriteBus.req.ready <= dataWriteArb.io.in[1].ready @[Cache.scala 395:25]
    io.dataWriteBus.req.bits.waymask <= dataWriteArb.io.out.bits.waymask @[Cache.scala 396:23]
    io.dataWriteBus.req.bits.data.data <= dataWriteArb.io.out.bits.data.data @[Cache.scala 396:23]
    io.dataWriteBus.req.bits.setIdx <= dataWriteArb.io.out.bits.setIdx @[Cache.scala 396:23]
    io.dataWriteBus.req.valid <= dataWriteArb.io.out.valid @[Cache.scala 396:23]
    dataWriteArb.io.out.ready <= io.dataWriteBus.req.ready @[Cache.scala 396:23]
    wire metaRefillWriteBus : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<7>, data : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}} @[Cache.scala 398:32]
    node _T_264 = eq(state, UInt<4>("h02")) @[Cache.scala 399:20]
    node _T_265 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
    node _T_266 = and(_T_264, _T_265) @[Cache.scala 399:39]
    node _T_267 = eq(io.mem.resp.bits.cmd, UInt<3>("h06")) @[SimpleBus.scala 91:26]
    node _T_268 = and(_T_266, _T_267) @[Cache.scala 399:61]
    wire _T_269 : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>} @[Cache.scala 400:16]
    node _T_270 = eq(UInt<1>("h01"), UInt<1>("h00")) @[Cache.scala 400:79]
    node _T_271 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_272 = and(_T_270, _T_271) @[Cache.scala 400:85]
    _T_269.tag <= addr.tag @[Cache.scala 95:14]
    _T_269.valid <= UInt<1>("h01") @[Cache.scala 96:16]
    _T_269.dirty <= _T_272 @[Cache.scala 97:16]
    wire _T_273 : {tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _T_274 : UInt<32>
    _T_274 <= io.in.bits.req.addr
    node _T_275 = bits(_T_274, 2, 0) @[Cache.scala 79:45]
    _T_273.byteOffset <= _T_275 @[Cache.scala 79:45]
    node _T_276 = bits(_T_274, 5, 3) @[Cache.scala 79:45]
    _T_273.wordIndex <= _T_276 @[Cache.scala 79:45]
    node _T_277 = bits(_T_274, 12, 6) @[Cache.scala 79:45]
    _T_273.index <= _T_277 @[Cache.scala 79:45]
    node _T_278 = bits(_T_274, 31, 13) @[Cache.scala 79:45]
    _T_273.tag <= _T_278 @[Cache.scala 79:45]
    metaRefillWriteBus.req.bits.setIdx <= _T_273.index @[SRAMTemplate.scala 26:17]
    metaRefillWriteBus.req.bits.data.dirty <= _T_269.dirty @[SRAMTemplate.scala 37:15]
    metaRefillWriteBus.req.bits.data.valid <= _T_269.valid @[SRAMTemplate.scala 37:15]
    metaRefillWriteBus.req.bits.data.tag <= _T_269.tag @[SRAMTemplate.scala 37:15]
    metaRefillWriteBus.req.bits.waymask <= io.in.bits.waymask @[SRAMTemplate.scala 38:24]
    metaRefillWriteBus.req.valid <= _T_268 @[SRAMTemplate.scala 63:20]
    metaWriteArb.io.in[0].bits.waymask <= metaHitWriteBus.req.bits.waymask @[Cache.scala 404:25]
    metaWriteArb.io.in[0].bits.data.dirty <= metaHitWriteBus.req.bits.data.dirty @[Cache.scala 404:25]
    metaWriteArb.io.in[0].bits.data.valid <= metaHitWriteBus.req.bits.data.valid @[Cache.scala 404:25]
    metaWriteArb.io.in[0].bits.data.tag <= metaHitWriteBus.req.bits.data.tag @[Cache.scala 404:25]
    metaWriteArb.io.in[0].bits.setIdx <= metaHitWriteBus.req.bits.setIdx @[Cache.scala 404:25]
    metaWriteArb.io.in[0].valid <= metaHitWriteBus.req.valid @[Cache.scala 404:25]
    metaHitWriteBus.req.ready <= metaWriteArb.io.in[0].ready @[Cache.scala 404:25]
    metaWriteArb.io.in[1].bits.waymask <= metaRefillWriteBus.req.bits.waymask @[Cache.scala 405:25]
    metaWriteArb.io.in[1].bits.data.dirty <= metaRefillWriteBus.req.bits.data.dirty @[Cache.scala 405:25]
    metaWriteArb.io.in[1].bits.data.valid <= metaRefillWriteBus.req.bits.data.valid @[Cache.scala 405:25]
    metaWriteArb.io.in[1].bits.data.tag <= metaRefillWriteBus.req.bits.data.tag @[Cache.scala 405:25]
    metaWriteArb.io.in[1].bits.setIdx <= metaRefillWriteBus.req.bits.setIdx @[Cache.scala 405:25]
    metaWriteArb.io.in[1].valid <= metaRefillWriteBus.req.valid @[Cache.scala 405:25]
    metaRefillWriteBus.req.ready <= metaWriteArb.io.in[1].ready @[Cache.scala 405:25]
    io.metaWriteBus.req.bits.waymask <= metaWriteArb.io.out.bits.waymask @[Cache.scala 406:23]
    io.metaWriteBus.req.bits.data.dirty <= metaWriteArb.io.out.bits.data.dirty @[Cache.scala 406:23]
    io.metaWriteBus.req.bits.data.valid <= metaWriteArb.io.out.bits.data.valid @[Cache.scala 406:23]
    io.metaWriteBus.req.bits.data.tag <= metaWriteArb.io.out.bits.data.tag @[Cache.scala 406:23]
    io.metaWriteBus.req.bits.setIdx <= metaWriteArb.io.out.bits.setIdx @[Cache.scala 406:23]
    io.metaWriteBus.req.valid <= metaWriteArb.io.out.valid @[Cache.scala 406:23]
    metaWriteArb.io.out.ready <= io.metaWriteBus.req.ready @[Cache.scala 406:23]
    node _T_279 = mux(hit, dataRead, inRdataRegDemand) @[Cache.scala 426:29]
    io.out.bits.rdata <= _T_279 @[Cache.scala 426:23]
    node _T_280 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_281 = eq(_T_280, UInt<1>("h00")) @[SimpleBus.scala 73:18]
    node _T_282 = bits(io.in.bits.req.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_283 = eq(_T_282, UInt<1>("h00")) @[SimpleBus.scala 73:29]
    node _T_284 = and(_T_281, _T_283) @[SimpleBus.scala 73:26]
    node _T_285 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    wire _T_287 : UInt<3> @[Cache.scala 427:79]
    _T_287 is invalid @[Cache.scala 427:79]
    node _T_286 = mux(_T_285, UInt<3>("h05"), _T_287) @[Cache.scala 427:79]
    node _T_288 = mux(_T_284, UInt<3>("h06"), _T_286) @[Cache.scala 427:27]
    io.out.bits.cmd <= _T_288 @[Cache.scala 427:21]
    io.out.bits.user <= io.in.bits.req.user @[Cache.scala 429:56]
    node _T_289 = bits(io.in.bits.req.cmd, 1, 1) @[SimpleBus.scala 75:22]
    node _T_290 = and(_T_289, UInt<1>("h00")) @[Cache.scala 432:52]
    node _T_291 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_292 = eq(hit, UInt<1>("h00")) @[Cache.scala 433:34]
    node _T_293 = eq(state, UInt<4>("h07")) @[Cache.scala 433:48]
    node _T_294 = and(_T_292, _T_293) @[Cache.scala 433:39]
    node _T_295 = or(hit, _T_294) @[Cache.scala 433:31]
    node _T_296 = and(_T_291, _T_295) @[Cache.scala 433:23]
    node _T_297 = eq(state, UInt<4>("h02")) @[Cache.scala 433:81]
    node _T_298 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
    node _T_299 = and(_T_297, _T_298) @[Cache.scala 433:99]
    node _T_300 = eq(io.in.bits.req.cmd, UInt<2>("h02")) @[Cache.scala 433:132]
    node _T_301 = and(_T_299, _T_300) @[Cache.scala 433:121]
    node _T_302 = mux(_T_296, UInt<1>("h01"), _T_301) @[Cache.scala 433:8]
    node _T_303 = and(respToL1Fire, respToL1Last) @[Cache.scala 433:178]
    node _T_304 = eq(state, UInt<4>("h08")) @[Cache.scala 433:203]
    node _T_305 = and(_T_303, _T_304) @[Cache.scala 433:194]
    node _T_306 = or(_T_302, _T_305) @[Cache.scala 433:161]
    node _T_307 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_308 = or(_T_307, mmio) @[Cache.scala 434:60]
    node _T_309 = eq(state, UInt<4>("h07")) @[Cache.scala 434:75]
    node _T_310 = eq(alreadyOutFire, UInt<1>("h00")) @[Cache.scala 434:110]
    node _T_311 = and(afterFirstRead, _T_310) @[Cache.scala 434:107]
    node _T_312 = mux(_T_308, _T_309, _T_311) @[Cache.scala 434:45]
    node _T_313 = mux(hit, UInt<1>("h01"), _T_312) @[Cache.scala 434:28]
    node _T_314 = mux(probe, UInt<1>("h00"), _T_313) @[Cache.scala 434:8]
    node _T_315 = mux(_T_290, _T_306, _T_314) @[Cache.scala 432:37]
    node _T_316 = and(io.in.valid, _T_315) @[Cache.scala 432:31]
    io.out.valid <= _T_316 @[Cache.scala 432:16]
    node _T_317 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 40:37]
    node _T_318 = eq(state, UInt<4>("h00")) @[Cache.scala 441:66]
    node _T_319 = eq(state, UInt<4>("h08")) @[Cache.scala 441:85]
    node _T_320 = and(_T_319, releaseLast) @[Cache.scala 441:100]
    node _T_321 = mux(miss, _T_318, _T_320) @[Cache.scala 441:53]
    node _T_322 = and(_T_317, _T_321) @[Cache.scala 441:47]
    node _T_323 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_324 = or(hit, _T_323) @[Cache.scala 442:13]
    node _T_325 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_326 = eq(state, UInt<4>("h07")) @[Cache.scala 442:53]
    node _T_327 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_328 = or(_T_327, alreadyOutFire) @[Cache.scala 442:88]
    node _T_329 = and(_T_326, _T_328) @[Cache.scala 442:70]
    node _T_330 = mux(_T_324, _T_325, _T_329) @[Cache.scala 442:8]
    node _T_331 = mux(probe, _T_322, _T_330) @[Cache.scala 441:21]
    io.isFinish <= _T_331 @[Cache.scala 441:15]
    node _T_332 = eq(state, UInt<4>("h00")) @[Cache.scala 445:41]
    node _T_333 = eq(hitReadBurst, UInt<1>("h00")) @[Cache.scala 445:55]
    node _T_334 = and(_T_332, _T_333) @[Cache.scala 445:52]
    node _T_335 = and(io.out.ready, _T_334) @[Cache.scala 445:31]
    node _T_336 = eq(miss, UInt<1>("h00")) @[Cache.scala 445:73]
    node _T_337 = and(_T_335, _T_336) @[Cache.scala 445:70]
    node _T_338 = eq(probe, UInt<1>("h00")) @[Cache.scala 445:82]
    node _T_339 = and(_T_337, _T_338) @[Cache.scala 445:79]
    io.in.ready <= _T_339 @[Cache.scala 445:15]
    node _T_340 = eq(state, UInt<4>("h00")) @[Cache.scala 446:49]
    node _T_341 = and(_T_340, io.out.ready) @[Cache.scala 446:60]
    node _T_342 = eq(state, UInt<4>("h08")) @[Cache.scala 446:85]
    node _T_343 = eq(state2, UInt<2>("h02")) @[Cache.scala 446:109]
    node _T_344 = and(_T_342, _T_343) @[Cache.scala 446:99]
    node _T_345 = or(_T_341, _T_344) @[Cache.scala 446:76]
    node _T_346 = and(hitReadBurst, _T_345) @[Cache.scala 446:39]
    io.dataReadRespToL1 <= _T_346 @[Cache.scala 446:23]
    node _T_347 = and(metaHitWriteBus.req.valid, metaRefillWriteBus.req.valid) @[Cache.scala 448:38]
    node _T_348 = eq(_T_347, UInt<1>("h00")) @[Cache.scala 448:10]
    node _T_349 = asUInt(reset) @[Cache.scala 448:9]
    node _T_350 = or(_T_348, _T_349) @[Cache.scala 448:9]
    node _T_351 = eq(_T_350, UInt<1>("h00")) @[Cache.scala 448:9]
    when _T_351 : @[Cache.scala 448:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at Cache.scala:448 assert(!(metaHitWriteBus.req.valid && metaRefillWriteBus.req.valid))\n") @[Cache.scala 448:9]
      stop(clock, UInt<1>(1), 1) @[Cache.scala 448:9]
      skip @[Cache.scala 448:9]
    node _T_352 = and(dataHitWriteBus.req.valid, dataRefillWriteBus.req.valid) @[Cache.scala 449:38]
    node _T_353 = eq(_T_352, UInt<1>("h00")) @[Cache.scala 449:10]
    node _T_354 = asUInt(reset) @[Cache.scala 449:9]
    node _T_355 = or(_T_353, _T_354) @[Cache.scala 449:9]
    node _T_356 = eq(_T_355, UInt<1>("h00")) @[Cache.scala 449:9]
    when _T_356 : @[Cache.scala 449:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at Cache.scala:449 assert(!(dataHitWriteBus.req.valid && dataRefillWriteBus.req.valid))\n") @[Cache.scala 449:9]
      stop(clock, UInt<1>(1), 1) @[Cache.scala 449:9]
      skip @[Cache.scala 449:9]
    node _T_357 = eq(UInt<1>("h01"), UInt<1>("h00")) @[Cache.scala 450:12]
    node _T_358 = and(_T_357, io.flush) @[Cache.scala 450:18]
    node _T_359 = eq(_T_358, UInt<1>("h00")) @[Cache.scala 450:10]
    node _T_360 = asUInt(reset) @[Cache.scala 450:9]
    node _T_361 = or(_T_359, _T_360) @[Cache.scala 450:9]
    node _T_362 = eq(_T_361, UInt<1>("h00")) @[Cache.scala 450:9]
    when _T_362 : @[Cache.scala 450:9]
      printf(clock, UInt<1>(1), "Assertion failed: only allow to flush icache\n    at Cache.scala:450 assert(!(!ro.B && io.flush), \"only allow to flush icache\")\n") @[Cache.scala 450:9]
      stop(clock, UInt<1>(1), 1) @[Cache.scala 450:9]
      skip @[Cache.scala 450:9]
    wire _T_363 : {tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _T_364 : UInt<32>
    _T_364 <= io.in.bits.req.addr
    node _T_365 = bits(_T_364, 2, 0) @[Cache.scala 79:45]
    _T_363.byteOffset <= _T_365 @[Cache.scala 79:45]
    node _T_366 = bits(_T_364, 5, 3) @[Cache.scala 79:45]
    _T_363.wordIndex <= _T_366 @[Cache.scala 79:45]
    node _T_367 = bits(_T_364, 12, 6) @[Cache.scala 79:45]
    _T_363.index <= _T_367 @[Cache.scala 79:45]
    node _T_368 = bits(_T_364, 31, 13) @[Cache.scala 79:45]
    _T_363.tag <= _T_368 @[Cache.scala 79:45]
    node _T_369 = cat(io.in.bits.datas[1].data, io.in.bits.datas[0].data) @[Cache.scala 451:465]
    node _T_370 = cat(io.in.bits.datas[3].data, io.in.bits.datas[2].data) @[Cache.scala 451:465]
    node _T_371 = cat(_T_370, _T_369) @[Cache.scala 451:465]
    reg _T_372 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_373 = add(_T_372, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_374 = tail(_T_373, 1) @[GTimer.scala 25:12]
    _T_372 <= _T_374 @[GTimer.scala 25:7]
    wire _T_375 : UInt<1>
    _T_375 <= UInt<1>("h00")
    node _T_376 = and(UInt<1>("h01"), _T_375) @[Debug.scala 55:16]
    when _T_376 : @[Debug.scala 55:31]
      node _T_377 = asUInt(reset) @[Debug.scala 56:24]
      node _T_378 = eq(_T_377, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_378 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage3: ", _T_372) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_379 = asUInt(reset) @[Debug.scala 57:13]
      node _T_380 = eq(_T_379, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_380 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), " metaread idx %x waymask %b metas %x%x:%x %x%x:%x %x%x:%x %x%x:%x %x\n", _T_363.index, io.in.bits.waymask, io.in.bits.metas[0].valid, io.in.bits.metas[0].dirty, io.in.bits.metas[0].tag, io.in.bits.metas[1].valid, io.in.bits.metas[1].dirty, io.in.bits.metas[1].tag, io.in.bits.metas[2].valid, io.in.bits.metas[2].dirty, io.in.bits.metas[2].tag, io.in.bits.metas[3].valid, io.in.bits.metas[3].dirty, io.in.bits.metas[3].tag, _T_371) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_381 = and(io.metaWriteBus.req.ready, io.metaWriteBus.req.valid) @[Decoupled.scala 40:37]
    reg _T_382 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_383 = add(_T_382, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_384 = tail(_T_383, 1) @[GTimer.scala 25:12]
    _T_382 <= _T_384 @[GTimer.scala 25:7]
    reg _T_385 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_386 = add(_T_385, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_387 = tail(_T_386, 1) @[GTimer.scala 25:12]
    _T_385 <= _T_387 @[GTimer.scala 25:7]
    wire _T_388 : UInt<1>
    _T_388 <= UInt<1>("h00")
    node _T_389 = and(_T_381, _T_388) @[Debug.scala 55:16]
    when _T_389 : @[Debug.scala 55:31]
      node _T_390 = asUInt(reset) @[Debug.scala 56:24]
      node _T_391 = eq(_T_390, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_391 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage3: ", _T_385) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_392 = asUInt(reset) @[Debug.scala 57:13]
      node _T_393 = eq(_T_392, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_393 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "%d: [icache S3]: metawrite idx %x wmask %b meta %x%x:%x\n", _T_382, io.metaWriteBus.req.bits.setIdx, io.metaWriteBus.req.bits.waymask, io.metaWriteBus.req.bits.data.valid, io.metaWriteBus.req.bits.data.dirty, io.metaWriteBus.req.bits.data.tag) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    reg _T_394 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_395 = add(_T_394, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_396 = tail(_T_395, 1) @[GTimer.scala 25:12]
    _T_394 <= _T_396 @[GTimer.scala 25:7]
    wire _T_397 : UInt<1>
    _T_397 <= UInt<1>("h00")
    node _T_398 = and(UInt<1>("h01"), _T_397) @[Debug.scala 55:16]
    when _T_398 : @[Debug.scala 55:31]
      node _T_399 = asUInt(reset) @[Debug.scala 56:24]
      node _T_400 = eq(_T_399, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_400 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage3: ", _T_394) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_401 = asUInt(reset) @[Debug.scala 57:13]
      node _T_402 = eq(_T_401, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_402 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), " in.ready = %d, in.valid = %d, hit = %x, state = %d, addr = %x cmd:%d probe:%d isFinish:%d\n", io.in.ready, io.in.valid, hit, state, io.in.bits.req.addr, io.in.bits.req.cmd, probe, io.isFinish) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    reg _T_403 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_404 = add(_T_403, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_405 = tail(_T_404, 1) @[GTimer.scala 25:12]
    _T_403 <= _T_405 @[GTimer.scala 25:7]
    wire _T_406 : UInt<1>
    _T_406 <= UInt<1>("h00")
    node _T_407 = and(UInt<1>("h01"), _T_406) @[Debug.scala 55:16]
    when _T_407 : @[Debug.scala 55:31]
      node _T_408 = asUInt(reset) @[Debug.scala 56:24]
      node _T_409 = eq(_T_408, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_409 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage3: ", _T_403) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_410 = asUInt(reset) @[Debug.scala 57:13]
      node _T_411 = eq(_T_410, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_411 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), " out.valid:%d rdata:%x cmd:%d user:%x id:%x \n", io.out.valid, io.out.bits.rdata, io.out.bits.cmd, io.out.bits.user, UInt<1>("h00")) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    reg _T_412 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_413 = add(_T_412, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_414 = tail(_T_413, 1) @[GTimer.scala 25:12]
    _T_412 <= _T_414 @[GTimer.scala 25:7]
    wire _T_415 : UInt<1>
    _T_415 <= UInt<1>("h00")
    node _T_416 = and(UInt<1>("h01"), _T_415) @[Debug.scala 55:16]
    when _T_416 : @[Debug.scala 55:31]
      node _T_417 = asUInt(reset) @[Debug.scala 56:24]
      node _T_418 = eq(_T_417, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_418 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage3: ", _T_412) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_419 = asUInt(reset) @[Debug.scala 57:13]
      node _T_420 = eq(_T_419, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_420 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), " DHW: (%d, %d), data:%x setIdx:%x MHW:(%d, %d)\n", dataHitWriteBus.req.valid, dataHitWriteBus.req.ready, dataHitWriteBus.req.bits.data.data, dataHitWriteBus.req.bits.setIdx, metaHitWriteBus.req.valid, metaHitWriteBus.req.ready) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_421 = cat(io.in.bits.datas[1].data, io.in.bits.datas[0].data) @[Cache.scala 456:48]
    node _T_422 = cat(io.in.bits.datas[3].data, io.in.bits.datas[2].data) @[Cache.scala 456:48]
    node _T_423 = cat(_T_422, _T_421) @[Cache.scala 456:48]
    reg _T_424 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_425 = add(_T_424, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_426 = tail(_T_425, 1) @[GTimer.scala 25:12]
    _T_424 <= _T_426 @[GTimer.scala 25:7]
    wire _T_427 : UInt<1>
    _T_427 <= UInt<1>("h00")
    node _T_428 = and(UInt<1>("h01"), _T_427) @[Debug.scala 55:16]
    when _T_428 : @[Debug.scala 55:31]
      node _T_429 = asUInt(reset) @[Debug.scala 56:24]
      node _T_430 = eq(_T_429, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_430 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage3: ", _T_424) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_431 = asUInt(reset) @[Debug.scala 57:13]
      node _T_432 = eq(_T_431, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_432 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), " DreadCache: %x \n", _T_423) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    reg _T_433 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_434 = add(_T_433, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_435 = tail(_T_434, 1) @[GTimer.scala 25:12]
    _T_433 <= _T_435 @[GTimer.scala 25:7]
    wire _T_436 : UInt<1>
    _T_436 <= UInt<1>("h00")
    node _T_437 = and(UInt<1>("h01"), _T_436) @[Debug.scala 55:16]
    when _T_437 : @[Debug.scala 55:31]
      node _T_438 = asUInt(reset) @[Debug.scala 56:24]
      node _T_439 = eq(_T_438, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_439 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage3: ", _T_433) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_440 = asUInt(reset) @[Debug.scala 57:13]
      node _T_441 = eq(_T_440, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_441 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), " useFD:%d isFD:%d FD:%x DreadArray:%x dataRead:%x inwaymask:%x FDwaymask:%x \n", useForwardData, io.in.bits.isForwardData, io.in.bits.forwardData.data.data, _T_49.data, dataRead, io.in.bits.waymask, io.in.bits.forwardData.waymask) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_442 = and(io.dataWriteBus.req.ready, io.dataWriteBus.req.valid) @[Decoupled.scala 40:37]
    reg _T_443 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_444 = add(_T_443, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_445 = tail(_T_444, 1) @[GTimer.scala 25:12]
    _T_443 <= _T_445 @[GTimer.scala 25:7]
    wire _T_446 : UInt<1>
    _T_446 <= UInt<1>("h00")
    node _T_447 = and(_T_442, _T_446) @[Debug.scala 55:16]
    when _T_447 : @[Debug.scala 55:31]
      node _T_448 = asUInt(reset) @[Debug.scala 56:24]
      node _T_449 = eq(_T_448, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_449 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage3: ", _T_443) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_450 = asUInt(reset) @[Debug.scala 57:13]
      node _T_451 = eq(_T_450, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_451 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[WB] waymask: %b data:%x setIdx:%x\n", io.dataWriteBus.req.bits.waymask, io.dataWriteBus.req.bits.data.data, io.dataWriteBus.req.bits.setIdx) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_452 = eq(state, UInt<4>("h03")) @[Cache.scala 460:16]
    node _T_453 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
    node _T_454 = and(_T_452, _T_453) @[Cache.scala 460:35]
    wire _T_455 : {tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _T_456 : UInt<32>
    _T_456 <= io.in.bits.req.addr
    node _T_457 = bits(_T_456, 2, 0) @[Cache.scala 79:45]
    _T_455.byteOffset <= _T_457 @[Cache.scala 79:45]
    node _T_458 = bits(_T_456, 5, 3) @[Cache.scala 79:45]
    _T_455.wordIndex <= _T_458 @[Cache.scala 79:45]
    node _T_459 = bits(_T_456, 12, 6) @[Cache.scala 79:45]
    _T_455.index <= _T_459 @[Cache.scala 79:45]
    node _T_460 = bits(_T_456, 31, 13) @[Cache.scala 79:45]
    _T_455.tag <= _T_460 @[Cache.scala 79:45]
    reg _T_461 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_462 = add(_T_461, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_463 = tail(_T_462, 1) @[GTimer.scala 25:12]
    _T_461 <= _T_463 @[GTimer.scala 25:7]
    wire _T_464 : UInt<1>
    _T_464 <= UInt<1>("h00")
    node _T_465 = and(_T_454, _T_464) @[Debug.scala 55:16]
    when _T_465 : @[Debug.scala 55:31]
      node _T_466 = asUInt(reset) @[Debug.scala 56:24]
      node _T_467 = eq(_T_466, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_467 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage3: ", _T_461) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_468 = asUInt(reset) @[Debug.scala 57:13]
      node _T_469 = eq(_T_468, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_469 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[COUTW] cnt %x addr %x data %x cmd %x size %x wmask %x tag %x idx %x waymask %b \n", value_2, io.mem.req.bits.addr, io.mem.req.bits.wdata, io.mem.req.bits.cmd, io.mem.req.bits.size, io.mem.req.bits.wmask, addr.tag, _T_455.index, io.in.bits.waymask) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_470 = eq(state, UInt<4>("h01")) @[Cache.scala 461:16]
    node _T_471 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
    node _T_472 = and(_T_470, _T_471) @[Cache.scala 461:34]
    wire _T_473 : {tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _T_474 : UInt<32>
    _T_474 <= io.in.bits.req.addr
    node _T_475 = bits(_T_474, 2, 0) @[Cache.scala 79:45]
    _T_473.byteOffset <= _T_475 @[Cache.scala 79:45]
    node _T_476 = bits(_T_474, 5, 3) @[Cache.scala 79:45]
    _T_473.wordIndex <= _T_476 @[Cache.scala 79:45]
    node _T_477 = bits(_T_474, 12, 6) @[Cache.scala 79:45]
    _T_473.index <= _T_477 @[Cache.scala 79:45]
    node _T_478 = bits(_T_474, 31, 13) @[Cache.scala 79:45]
    _T_473.tag <= _T_478 @[Cache.scala 79:45]
    reg _T_479 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_480 = add(_T_479, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_481 = tail(_T_480, 1) @[GTimer.scala 25:12]
    _T_479 <= _T_481 @[GTimer.scala 25:7]
    wire _T_482 : UInt<1>
    _T_482 <= UInt<1>("h00")
    node _T_483 = and(_T_472, _T_482) @[Debug.scala 55:16]
    when _T_483 : @[Debug.scala 55:31]
      node _T_484 = asUInt(reset) @[Debug.scala 56:24]
      node _T_485 = eq(_T_484, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_485 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage3: ", _T_479) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_486 = asUInt(reset) @[Debug.scala 57:13]
      node _T_487 = eq(_T_486, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_487 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[COUTR] addr %x tag %x idx %x waymask %b \n", io.mem.req.bits.addr, addr.tag, _T_473.index, io.in.bits.waymask) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_488 = eq(state, UInt<4>("h02")) @[Cache.scala 462:16]
    node _T_489 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
    node _T_490 = and(_T_488, _T_489) @[Cache.scala 462:35]
    wire _T_491 : {tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _T_492 : UInt<32>
    _T_492 <= io.in.bits.req.addr
    node _T_493 = bits(_T_492, 2, 0) @[Cache.scala 79:45]
    _T_491.byteOffset <= _T_493 @[Cache.scala 79:45]
    node _T_494 = bits(_T_492, 5, 3) @[Cache.scala 79:45]
    _T_491.wordIndex <= _T_494 @[Cache.scala 79:45]
    node _T_495 = bits(_T_492, 12, 6) @[Cache.scala 79:45]
    _T_491.index <= _T_495 @[Cache.scala 79:45]
    node _T_496 = bits(_T_492, 31, 13) @[Cache.scala 79:45]
    _T_491.tag <= _T_496 @[Cache.scala 79:45]
    reg _T_497 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_498 = add(_T_497, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_499 = tail(_T_498, 1) @[GTimer.scala 25:12]
    _T_497 <= _T_499 @[GTimer.scala 25:7]
    wire _T_500 : UInt<1>
    _T_500 <= UInt<1>("h00")
    node _T_501 = and(_T_490, _T_500) @[Debug.scala 55:16]
    when _T_501 : @[Debug.scala 55:31]
      node _T_502 = asUInt(reset) @[Debug.scala 56:24]
      node _T_503 = eq(_T_502, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_503 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage3: ", _T_497) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_504 = asUInt(reset) @[Debug.scala 57:13]
      node _T_505 = eq(_T_504, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_505 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[COUTR] cnt %x data %x tag %x idx %x waymask %b \n", value_1, io.mem.resp.bits.rdata, addr.tag, _T_491.index, io.in.bits.waymask) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    
  module SRAMTemplate_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip r : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<7>}}, flip resp : {data : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4]}}, flip w : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<7>, data : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}}}
    
    smem array : UInt<21>[4][128], undefined @[SRAMTemplate.scala 76:26]
    wire resetState : UInt<1>
    resetState <= UInt<1>("h00")
    wire resetSet : UInt
    resetSet <= UInt<1>("h00")
    reg _T : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[SRAMTemplate.scala 80:30]
    reg _T_1 : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[Counter.scala 29:33]
    wire _T_2 : UInt<1>
    _T_2 <= UInt<1>("h00")
    when _T : @[Counter.scala 67:17]
      node _T_3 = eq(_T_1, UInt<7>("h07f")) @[Counter.scala 38:24]
      node _T_4 = add(_T_1, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_5 = tail(_T_4, 1) @[Counter.scala 39:22]
      _T_1 <= _T_5 @[Counter.scala 39:13]
      _T_2 <= _T_3 @[Counter.scala 67:24]
      skip @[Counter.scala 67:17]
    when _T_2 : @[SRAMTemplate.scala 82:24]
      _T <= UInt<1>("h00") @[SRAMTemplate.scala 82:38]
      skip @[SRAMTemplate.scala 82:24]
    resetState <= _T @[SRAMTemplate.scala 84:16]
    resetSet <= _T_1 @[SRAMTemplate.scala 85:14]
    node wen = or(io.w.req.valid, resetState) @[SRAMTemplate.scala 88:52]
    node _T_6 = eq(wen, UInt<1>("h00")) @[SRAMTemplate.scala 89:41]
    node realRen = and(io.r.req.valid, _T_6) @[SRAMTemplate.scala 89:38]
    node setIdx = mux(resetState, resetSet, io.w.req.bits.setIdx) @[SRAMTemplate.scala 91:19]
    wire _T_7 : UInt<21> @[SRAMTemplate.scala 92:47]
    _T_7 <= UInt<1>("h00") @[SRAMTemplate.scala 92:47]
    node _T_8 = cat(io.w.req.bits.data.tag, io.w.req.bits.data.valid) @[SRAMTemplate.scala 92:78]
    node _T_9 = cat(_T_8, io.w.req.bits.data.dirty) @[SRAMTemplate.scala 92:78]
    node wdataword = mux(resetState, _T_7, _T_9) @[SRAMTemplate.scala 92:22]
    node _T_10 = mux(UInt<1>("h01"), UInt<4>("h0f"), UInt<4>("h00")) @[Bitwise.scala 72:12]
    node waymask = mux(resetState, _T_10, io.w.req.bits.waymask) @[SRAMTemplate.scala 93:20]
    wire wdata : UInt<21>[4] @[SRAMTemplate.scala 94:22]
    wdata[0] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[1] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[2] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[3] <= wdataword @[SRAMTemplate.scala 94:22]
    when wen : @[SRAMTemplate.scala 95:14]
      node _T_11 = bits(waymask, 0, 0) @[SRAMTemplate.scala 95:51]
      node _T_12 = bits(waymask, 1, 1) @[SRAMTemplate.scala 95:51]
      node _T_13 = bits(waymask, 2, 2) @[SRAMTemplate.scala 95:51]
      node _T_14 = bits(waymask, 3, 3) @[SRAMTemplate.scala 95:51]
      node _T_15 = or(setIdx, UInt<7>("h00"))
      node _T_16 = bits(_T_15, 6, 0)
      write mport _T_17 = array[_T_16], clock
      when _T_11 :
        _T_17[0] <= wdata[0]
        skip
      when _T_12 :
        _T_17[1] <= wdata[1]
        skip
      when _T_13 :
        _T_17[2] <= wdata[2]
        skip
      when _T_14 :
        _T_17[3] <= wdata[3]
        skip
      skip @[SRAMTemplate.scala 95:14]
    wire _T_18 : UInt @[SRAMTemplate.scala 98:31]
    _T_18 is invalid @[SRAMTemplate.scala 98:31]
    when realRen : @[SRAMTemplate.scala 98:31]
      _T_18 <= io.r.req.bits.setIdx @[SRAMTemplate.scala 98:31]
      node _T_19 = or(_T_18, UInt<7>("h00")) @[SRAMTemplate.scala 98:31]
      node _T_20 = bits(_T_19, 6, 0) @[SRAMTemplate.scala 98:31]
      read mport _T_21 = array[_T_20], clock @[SRAMTemplate.scala 98:31]
      skip @[SRAMTemplate.scala 98:31]
    wire rdata_0 : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>} @[SRAMTemplate.scala 98:78]
    wire _T_22 : UInt<21>
    _T_22 <= _T_21[0]
    node _T_23 = bits(_T_22, 0, 0) @[SRAMTemplate.scala 98:78]
    rdata_0.dirty <= _T_23 @[SRAMTemplate.scala 98:78]
    node _T_24 = bits(_T_22, 1, 1) @[SRAMTemplate.scala 98:78]
    rdata_0.valid <= _T_24 @[SRAMTemplate.scala 98:78]
    node _T_25 = bits(_T_22, 20, 2) @[SRAMTemplate.scala 98:78]
    rdata_0.tag <= _T_25 @[SRAMTemplate.scala 98:78]
    wire rdata_1 : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>} @[SRAMTemplate.scala 98:78]
    wire _T_26 : UInt<21>
    _T_26 <= _T_21[1]
    node _T_27 = bits(_T_26, 0, 0) @[SRAMTemplate.scala 98:78]
    rdata_1.dirty <= _T_27 @[SRAMTemplate.scala 98:78]
    node _T_28 = bits(_T_26, 1, 1) @[SRAMTemplate.scala 98:78]
    rdata_1.valid <= _T_28 @[SRAMTemplate.scala 98:78]
    node _T_29 = bits(_T_26, 20, 2) @[SRAMTemplate.scala 98:78]
    rdata_1.tag <= _T_29 @[SRAMTemplate.scala 98:78]
    wire rdata_2 : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>} @[SRAMTemplate.scala 98:78]
    wire _T_30 : UInt<21>
    _T_30 <= _T_21[2]
    node _T_31 = bits(_T_30, 0, 0) @[SRAMTemplate.scala 98:78]
    rdata_2.dirty <= _T_31 @[SRAMTemplate.scala 98:78]
    node _T_32 = bits(_T_30, 1, 1) @[SRAMTemplate.scala 98:78]
    rdata_2.valid <= _T_32 @[SRAMTemplate.scala 98:78]
    node _T_33 = bits(_T_30, 20, 2) @[SRAMTemplate.scala 98:78]
    rdata_2.tag <= _T_33 @[SRAMTemplate.scala 98:78]
    wire rdata_3 : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>} @[SRAMTemplate.scala 98:78]
    wire _T_34 : UInt<21>
    _T_34 <= _T_21[3]
    node _T_35 = bits(_T_34, 0, 0) @[SRAMTemplate.scala 98:78]
    rdata_3.dirty <= _T_35 @[SRAMTemplate.scala 98:78]
    node _T_36 = bits(_T_34, 1, 1) @[SRAMTemplate.scala 98:78]
    rdata_3.valid <= _T_36 @[SRAMTemplate.scala 98:78]
    node _T_37 = bits(_T_34, 20, 2) @[SRAMTemplate.scala 98:78]
    rdata_3.tag <= _T_37 @[SRAMTemplate.scala 98:78]
    wire _T_38 : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4] @[SRAMTemplate.scala 99:28]
    _T_38[0].dirty <= rdata_0.dirty @[SRAMTemplate.scala 99:28]
    _T_38[0].valid <= rdata_0.valid @[SRAMTemplate.scala 99:28]
    _T_38[0].tag <= rdata_0.tag @[SRAMTemplate.scala 99:28]
    _T_38[1].dirty <= rdata_1.dirty @[SRAMTemplate.scala 99:28]
    _T_38[1].valid <= rdata_1.valid @[SRAMTemplate.scala 99:28]
    _T_38[1].tag <= rdata_1.tag @[SRAMTemplate.scala 99:28]
    _T_38[2].dirty <= rdata_2.dirty @[SRAMTemplate.scala 99:28]
    _T_38[2].valid <= rdata_2.valid @[SRAMTemplate.scala 99:28]
    _T_38[2].tag <= rdata_2.tag @[SRAMTemplate.scala 99:28]
    _T_38[3].dirty <= rdata_3.dirty @[SRAMTemplate.scala 99:28]
    _T_38[3].valid <= rdata_3.valid @[SRAMTemplate.scala 99:28]
    _T_38[3].tag <= rdata_3.tag @[SRAMTemplate.scala 99:28]
    io.r.resp.data[0].dirty <= _T_38[0].dirty @[SRAMTemplate.scala 99:18]
    io.r.resp.data[0].valid <= _T_38[0].valid @[SRAMTemplate.scala 99:18]
    io.r.resp.data[0].tag <= _T_38[0].tag @[SRAMTemplate.scala 99:18]
    io.r.resp.data[1].dirty <= _T_38[1].dirty @[SRAMTemplate.scala 99:18]
    io.r.resp.data[1].valid <= _T_38[1].valid @[SRAMTemplate.scala 99:18]
    io.r.resp.data[1].tag <= _T_38[1].tag @[SRAMTemplate.scala 99:18]
    io.r.resp.data[2].dirty <= _T_38[2].dirty @[SRAMTemplate.scala 99:18]
    io.r.resp.data[2].valid <= _T_38[2].valid @[SRAMTemplate.scala 99:18]
    io.r.resp.data[2].tag <= _T_38[2].tag @[SRAMTemplate.scala 99:18]
    io.r.resp.data[3].dirty <= _T_38[3].dirty @[SRAMTemplate.scala 99:18]
    io.r.resp.data[3].valid <= _T_38[3].valid @[SRAMTemplate.scala 99:18]
    io.r.resp.data[3].tag <= _T_38[3].tag @[SRAMTemplate.scala 99:18]
    node _T_39 = eq(resetState, UInt<1>("h00")) @[SRAMTemplate.scala 101:21]
    node _T_40 = eq(wen, UInt<1>("h00")) @[SRAMTemplate.scala 101:53]
    node _T_41 = and(_T_39, _T_40) @[SRAMTemplate.scala 101:33]
    io.r.req.ready <= _T_41 @[SRAMTemplate.scala 101:18]
    io.w.req.ready <= UInt<1>("h01") @[SRAMTemplate.scala 102:18]
    
  module Arbiter_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<7>}}[1], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<7>}}, chosen : UInt<0>}
    
    io.chosen <= UInt<1>("h00") @[Arbiter.scala 123:13]
    io.out.bits.setIdx <= io.in[0].bits.setIdx @[Arbiter.scala 124:15]
    node _T = and(UInt<1>("h01"), io.out.ready) @[Arbiter.scala 134:19]
    io.in[0].ready <= _T @[Arbiter.scala 134:14]
    node _T_1 = eq(UInt<1>("h01"), UInt<1>("h00")) @[Arbiter.scala 135:19]
    node _T_2 = or(_T_1, io.in[0].valid) @[Arbiter.scala 135:31]
    io.out.valid <= _T_2 @[Arbiter.scala 135:16]
    
  module SRAMTemplateWithArbiter : 
    input clock : Clock
    input reset : Reset
    output io : {flip r : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<7>}}, flip resp : {data : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4]}}[1], flip w : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<7>, data : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}}}
    
    inst ram of SRAMTemplate_1 @[SRAMTemplate.scala 121:19]
    ram.clock <= clock
    ram.reset <= reset
    ram.io.w.req.bits.waymask <= io.w.req.bits.waymask @[SRAMTemplate.scala 122:12]
    ram.io.w.req.bits.data.dirty <= io.w.req.bits.data.dirty @[SRAMTemplate.scala 122:12]
    ram.io.w.req.bits.data.valid <= io.w.req.bits.data.valid @[SRAMTemplate.scala 122:12]
    ram.io.w.req.bits.data.tag <= io.w.req.bits.data.tag @[SRAMTemplate.scala 122:12]
    ram.io.w.req.bits.setIdx <= io.w.req.bits.setIdx @[SRAMTemplate.scala 122:12]
    ram.io.w.req.valid <= io.w.req.valid @[SRAMTemplate.scala 122:12]
    io.w.req.ready <= ram.io.w.req.ready @[SRAMTemplate.scala 122:12]
    inst readArb of Arbiter_2 @[SRAMTemplate.scala 124:23]
    readArb.clock <= clock
    readArb.reset <= reset
    readArb.io.in[0].bits.setIdx <= io.r[0].req.bits.setIdx @[SRAMTemplate.scala 125:17]
    readArb.io.in[0].valid <= io.r[0].req.valid @[SRAMTemplate.scala 125:17]
    io.r[0].req.ready <= readArb.io.in[0].ready @[SRAMTemplate.scala 125:17]
    ram.io.r.req.bits.setIdx <= readArb.io.out.bits.setIdx @[SRAMTemplate.scala 126:16]
    ram.io.r.req.valid <= readArb.io.out.valid @[SRAMTemplate.scala 126:16]
    readArb.io.out.ready <= ram.io.r.req.ready @[SRAMTemplate.scala 126:16]
    node _T = and(io.r[0].req.ready, io.r[0].req.valid) @[Decoupled.scala 40:37]
    reg _T_1 : UInt<1>, clock @[SRAMTemplate.scala 130:58]
    _T_1 <= _T @[SRAMTemplate.scala 130:58]
    wire _T_2 : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4] @[Hold.scala 23:81]
    _T_2[0].dirty <= UInt<1>("h00") @[Hold.scala 23:81]
    _T_2[0].valid <= UInt<1>("h00") @[Hold.scala 23:81]
    _T_2[0].tag <= UInt<19>("h00") @[Hold.scala 23:81]
    _T_2[1].dirty <= UInt<1>("h00") @[Hold.scala 23:81]
    _T_2[1].valid <= UInt<1>("h00") @[Hold.scala 23:81]
    _T_2[1].tag <= UInt<19>("h00") @[Hold.scala 23:81]
    _T_2[2].dirty <= UInt<1>("h00") @[Hold.scala 23:81]
    _T_2[2].valid <= UInt<1>("h00") @[Hold.scala 23:81]
    _T_2[2].tag <= UInt<19>("h00") @[Hold.scala 23:81]
    _T_2[3].dirty <= UInt<1>("h00") @[Hold.scala 23:81]
    _T_2[3].valid <= UInt<1>("h00") @[Hold.scala 23:81]
    _T_2[3].tag <= UInt<19>("h00") @[Hold.scala 23:81]
    reg _T_3 : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4], clock with : (reset => (reset, _T_2)) @[Reg.scala 27:20]
    when _T_1 : @[Reg.scala 28:19]
      _T_3[0].dirty <= ram.io.r.resp.data[0].dirty @[Reg.scala 28:23]
      _T_3[0].valid <= ram.io.r.resp.data[0].valid @[Reg.scala 28:23]
      _T_3[0].tag <= ram.io.r.resp.data[0].tag @[Reg.scala 28:23]
      _T_3[1].dirty <= ram.io.r.resp.data[1].dirty @[Reg.scala 28:23]
      _T_3[1].valid <= ram.io.r.resp.data[1].valid @[Reg.scala 28:23]
      _T_3[1].tag <= ram.io.r.resp.data[1].tag @[Reg.scala 28:23]
      _T_3[2].dirty <= ram.io.r.resp.data[2].dirty @[Reg.scala 28:23]
      _T_3[2].valid <= ram.io.r.resp.data[2].valid @[Reg.scala 28:23]
      _T_3[2].tag <= ram.io.r.resp.data[2].tag @[Reg.scala 28:23]
      _T_3[3].dirty <= ram.io.r.resp.data[3].dirty @[Reg.scala 28:23]
      _T_3[3].valid <= ram.io.r.resp.data[3].valid @[Reg.scala 28:23]
      _T_3[3].tag <= ram.io.r.resp.data[3].tag @[Reg.scala 28:23]
      skip @[Reg.scala 28:19]
    node _T_4 = mux(_T_1, ram.io.r.resp.data, _T_3) @[Hold.scala 23:48]
    io.r[0].resp.data[0].dirty <= _T_4[0].dirty @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[0].valid <= _T_4[0].valid @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[0].tag <= _T_4[0].tag @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[1].dirty <= _T_4[1].dirty @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[1].valid <= _T_4[1].valid @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[1].tag <= _T_4[1].tag @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[2].dirty <= _T_4[2].dirty @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[2].valid <= _T_4[2].valid @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[2].tag <= _T_4[2].tag @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[3].dirty <= _T_4[3].dirty @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[3].valid <= _T_4[3].valid @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[3].tag <= _T_4[3].tag @[SRAMTemplate.scala 130:17]
    
  module SRAMTemplate_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip r : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<10>}}, flip resp : {data : {data : UInt<64>}[4]}}, flip w : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<10>, data : {data : UInt<64>}, waymask : UInt<4>}}}}
    
    smem array : UInt<64>[4][1024], undefined @[SRAMTemplate.scala 76:26]
    wire resetState : UInt<1>
    resetState <= UInt<1>("h00")
    wire resetSet : UInt
    resetSet <= UInt<1>("h00")
    node wen = or(io.w.req.valid, resetState) @[SRAMTemplate.scala 88:52]
    node _T = eq(wen, UInt<1>("h00")) @[SRAMTemplate.scala 89:41]
    node realRen = and(io.r.req.valid, _T) @[SRAMTemplate.scala 89:38]
    node setIdx = mux(resetState, resetSet, io.w.req.bits.setIdx) @[SRAMTemplate.scala 91:19]
    wire _T_1 : UInt<64> @[SRAMTemplate.scala 92:47]
    _T_1 <= UInt<1>("h00") @[SRAMTemplate.scala 92:47]
    node wdataword = mux(resetState, _T_1, io.w.req.bits.data.data) @[SRAMTemplate.scala 92:22]
    node _T_2 = mux(UInt<1>("h01"), UInt<4>("h0f"), UInt<4>("h00")) @[Bitwise.scala 72:12]
    node waymask = mux(resetState, _T_2, io.w.req.bits.waymask) @[SRAMTemplate.scala 93:20]
    wire wdata : UInt<64>[4] @[SRAMTemplate.scala 94:22]
    wdata[0] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[1] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[2] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[3] <= wdataword @[SRAMTemplate.scala 94:22]
    when wen : @[SRAMTemplate.scala 95:14]
      node _T_3 = bits(waymask, 0, 0) @[SRAMTemplate.scala 95:51]
      node _T_4 = bits(waymask, 1, 1) @[SRAMTemplate.scala 95:51]
      node _T_5 = bits(waymask, 2, 2) @[SRAMTemplate.scala 95:51]
      node _T_6 = bits(waymask, 3, 3) @[SRAMTemplate.scala 95:51]
      node _T_7 = or(setIdx, UInt<10>("h00"))
      node _T_8 = bits(_T_7, 9, 0)
      write mport _T_9 = array[_T_8], clock
      when _T_3 :
        _T_9[0] <= wdata[0]
        skip
      when _T_4 :
        _T_9[1] <= wdata[1]
        skip
      when _T_5 :
        _T_9[2] <= wdata[2]
        skip
      when _T_6 :
        _T_9[3] <= wdata[3]
        skip
      skip @[SRAMTemplate.scala 95:14]
    wire _T_10 : UInt @[SRAMTemplate.scala 98:31]
    _T_10 is invalid @[SRAMTemplate.scala 98:31]
    when realRen : @[SRAMTemplate.scala 98:31]
      _T_10 <= io.r.req.bits.setIdx @[SRAMTemplate.scala 98:31]
      node _T_11 = or(_T_10, UInt<10>("h00")) @[SRAMTemplate.scala 98:31]
      node _T_12 = bits(_T_11, 9, 0) @[SRAMTemplate.scala 98:31]
      read mport _T_13 = array[_T_12], clock @[SRAMTemplate.scala 98:31]
      skip @[SRAMTemplate.scala 98:31]
    wire rdata_0 : {data : UInt<64>} @[SRAMTemplate.scala 98:78]
    wire _T_14 : UInt<64>
    _T_14 <= _T_13[0]
    node _T_15 = bits(_T_14, 63, 0) @[SRAMTemplate.scala 98:78]
    rdata_0.data <= _T_15 @[SRAMTemplate.scala 98:78]
    wire rdata_1 : {data : UInt<64>} @[SRAMTemplate.scala 98:78]
    wire _T_16 : UInt<64>
    _T_16 <= _T_13[1]
    node _T_17 = bits(_T_16, 63, 0) @[SRAMTemplate.scala 98:78]
    rdata_1.data <= _T_17 @[SRAMTemplate.scala 98:78]
    wire rdata_2 : {data : UInt<64>} @[SRAMTemplate.scala 98:78]
    wire _T_18 : UInt<64>
    _T_18 <= _T_13[2]
    node _T_19 = bits(_T_18, 63, 0) @[SRAMTemplate.scala 98:78]
    rdata_2.data <= _T_19 @[SRAMTemplate.scala 98:78]
    wire rdata_3 : {data : UInt<64>} @[SRAMTemplate.scala 98:78]
    wire _T_20 : UInt<64>
    _T_20 <= _T_13[3]
    node _T_21 = bits(_T_20, 63, 0) @[SRAMTemplate.scala 98:78]
    rdata_3.data <= _T_21 @[SRAMTemplate.scala 98:78]
    wire _T_22 : {data : UInt<64>}[4] @[SRAMTemplate.scala 99:28]
    _T_22[0].data <= rdata_0.data @[SRAMTemplate.scala 99:28]
    _T_22[1].data <= rdata_1.data @[SRAMTemplate.scala 99:28]
    _T_22[2].data <= rdata_2.data @[SRAMTemplate.scala 99:28]
    _T_22[3].data <= rdata_3.data @[SRAMTemplate.scala 99:28]
    io.r.resp.data[0].data <= _T_22[0].data @[SRAMTemplate.scala 99:18]
    io.r.resp.data[1].data <= _T_22[1].data @[SRAMTemplate.scala 99:18]
    io.r.resp.data[2].data <= _T_22[2].data @[SRAMTemplate.scala 99:18]
    io.r.resp.data[3].data <= _T_22[3].data @[SRAMTemplate.scala 99:18]
    node _T_23 = eq(resetState, UInt<1>("h00")) @[SRAMTemplate.scala 101:21]
    node _T_24 = eq(wen, UInt<1>("h00")) @[SRAMTemplate.scala 101:53]
    node _T_25 = and(_T_23, _T_24) @[SRAMTemplate.scala 101:33]
    io.r.req.ready <= _T_25 @[SRAMTemplate.scala 101:18]
    io.w.req.ready <= UInt<1>("h01") @[SRAMTemplate.scala 102:18]
    
  module Arbiter_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<10>}}[2], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<10>}}, chosen : UInt<1>}
    
    io.chosen <= UInt<1>("h01") @[Arbiter.scala 123:13]
    io.out.bits.setIdx <= io.in[1].bits.setIdx @[Arbiter.scala 124:15]
    when io.in[0].valid : @[Arbiter.scala 126:27]
      io.chosen <= UInt<1>("h00") @[Arbiter.scala 127:17]
      io.out.bits.setIdx <= io.in[0].bits.setIdx @[Arbiter.scala 128:19]
      skip @[Arbiter.scala 126:27]
    node grant_1 = eq(io.in[0].valid, UInt<1>("h00")) @[Arbiter.scala 31:78]
    node _T = and(UInt<1>("h01"), io.out.ready) @[Arbiter.scala 134:19]
    io.in[0].ready <= _T @[Arbiter.scala 134:14]
    node _T_1 = and(grant_1, io.out.ready) @[Arbiter.scala 134:19]
    io.in[1].ready <= _T_1 @[Arbiter.scala 134:14]
    node _T_2 = eq(grant_1, UInt<1>("h00")) @[Arbiter.scala 135:19]
    node _T_3 = or(_T_2, io.in[1].valid) @[Arbiter.scala 135:31]
    io.out.valid <= _T_3 @[Arbiter.scala 135:16]
    
  module SRAMTemplateWithArbiter_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip r : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<10>}}, flip resp : {data : {data : UInt<64>}[4]}}[2], flip w : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<10>, data : {data : UInt<64>}, waymask : UInt<4>}}}}
    
    inst ram of SRAMTemplate_2 @[SRAMTemplate.scala 121:19]
    ram.clock <= clock
    ram.reset <= reset
    ram.io.w.req.bits.waymask <= io.w.req.bits.waymask @[SRAMTemplate.scala 122:12]
    ram.io.w.req.bits.data.data <= io.w.req.bits.data.data @[SRAMTemplate.scala 122:12]
    ram.io.w.req.bits.setIdx <= io.w.req.bits.setIdx @[SRAMTemplate.scala 122:12]
    ram.io.w.req.valid <= io.w.req.valid @[SRAMTemplate.scala 122:12]
    io.w.req.ready <= ram.io.w.req.ready @[SRAMTemplate.scala 122:12]
    inst readArb of Arbiter_3 @[SRAMTemplate.scala 124:23]
    readArb.clock <= clock
    readArb.reset <= reset
    readArb.io.in[0].bits.setIdx <= io.r[0].req.bits.setIdx @[SRAMTemplate.scala 125:17]
    readArb.io.in[0].valid <= io.r[0].req.valid @[SRAMTemplate.scala 125:17]
    io.r[0].req.ready <= readArb.io.in[0].ready @[SRAMTemplate.scala 125:17]
    readArb.io.in[1].bits.setIdx <= io.r[1].req.bits.setIdx @[SRAMTemplate.scala 125:17]
    readArb.io.in[1].valid <= io.r[1].req.valid @[SRAMTemplate.scala 125:17]
    io.r[1].req.ready <= readArb.io.in[1].ready @[SRAMTemplate.scala 125:17]
    ram.io.r.req.bits.setIdx <= readArb.io.out.bits.setIdx @[SRAMTemplate.scala 126:16]
    ram.io.r.req.valid <= readArb.io.out.valid @[SRAMTemplate.scala 126:16]
    readArb.io.out.ready <= ram.io.r.req.ready @[SRAMTemplate.scala 126:16]
    node _T = and(io.r[0].req.ready, io.r[0].req.valid) @[Decoupled.scala 40:37]
    reg _T_1 : UInt<1>, clock @[SRAMTemplate.scala 130:58]
    _T_1 <= _T @[SRAMTemplate.scala 130:58]
    wire _T_2 : {data : UInt<64>}[4] @[Hold.scala 23:81]
    _T_2[0].data <= UInt<64>("h00") @[Hold.scala 23:81]
    _T_2[1].data <= UInt<64>("h00") @[Hold.scala 23:81]
    _T_2[2].data <= UInt<64>("h00") @[Hold.scala 23:81]
    _T_2[3].data <= UInt<64>("h00") @[Hold.scala 23:81]
    reg _T_3 : {data : UInt<64>}[4], clock with : (reset => (reset, _T_2)) @[Reg.scala 27:20]
    when _T_1 : @[Reg.scala 28:19]
      _T_3[0].data <= ram.io.r.resp.data[0].data @[Reg.scala 28:23]
      _T_3[1].data <= ram.io.r.resp.data[1].data @[Reg.scala 28:23]
      _T_3[2].data <= ram.io.r.resp.data[2].data @[Reg.scala 28:23]
      _T_3[3].data <= ram.io.r.resp.data[3].data @[Reg.scala 28:23]
      skip @[Reg.scala 28:19]
    node _T_4 = mux(_T_1, ram.io.r.resp.data, _T_3) @[Hold.scala 23:48]
    io.r[0].resp.data[0].data <= _T_4[0].data @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[1].data <= _T_4[1].data @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[2].data <= _T_4[2].data @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[3].data <= _T_4[3].data @[SRAMTemplate.scala 130:17]
    node _T_5 = and(io.r[1].req.ready, io.r[1].req.valid) @[Decoupled.scala 40:37]
    reg _T_6 : UInt<1>, clock @[SRAMTemplate.scala 130:58]
    _T_6 <= _T_5 @[SRAMTemplate.scala 130:58]
    wire _T_7 : {data : UInt<64>}[4] @[Hold.scala 23:81]
    _T_7[0].data <= UInt<64>("h00") @[Hold.scala 23:81]
    _T_7[1].data <= UInt<64>("h00") @[Hold.scala 23:81]
    _T_7[2].data <= UInt<64>("h00") @[Hold.scala 23:81]
    _T_7[3].data <= UInt<64>("h00") @[Hold.scala 23:81]
    reg _T_8 : {data : UInt<64>}[4], clock with : (reset => (reset, _T_7)) @[Reg.scala 27:20]
    when _T_6 : @[Reg.scala 28:19]
      _T_8[0].data <= ram.io.r.resp.data[0].data @[Reg.scala 28:23]
      _T_8[1].data <= ram.io.r.resp.data[1].data @[Reg.scala 28:23]
      _T_8[2].data <= ram.io.r.resp.data[2].data @[Reg.scala 28:23]
      _T_8[3].data <= ram.io.r.resp.data[3].data @[Reg.scala 28:23]
      skip @[Reg.scala 28:19]
    node _T_9 = mux(_T_6, ram.io.r.resp.data, _T_8) @[Hold.scala 23:48]
    io.r[1].resp.data[0].data <= _T_9[0].data @[SRAMTemplate.scala 130:17]
    io.r[1].resp.data[1].data <= _T_9[1].data @[SRAMTemplate.scala 130:17]
    io.r[1].resp.data[2].data <= _T_9[2].data @[SRAMTemplate.scala 130:17]
    io.r[1].resp.data[3].data <= _T_9[3].data @[SRAMTemplate.scala 130:17]
    
  module Arbiter_4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<87>}}[1], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<87>}}, chosen : UInt<0>}
    
    io.chosen <= UInt<1>("h00") @[Arbiter.scala 123:13]
    io.out.bits.user <= io.in[0].bits.user @[Arbiter.scala 124:15]
    io.out.bits.wdata <= io.in[0].bits.wdata @[Arbiter.scala 124:15]
    io.out.bits.wmask <= io.in[0].bits.wmask @[Arbiter.scala 124:15]
    io.out.bits.cmd <= io.in[0].bits.cmd @[Arbiter.scala 124:15]
    io.out.bits.size <= io.in[0].bits.size @[Arbiter.scala 124:15]
    io.out.bits.addr <= io.in[0].bits.addr @[Arbiter.scala 124:15]
    node _T = and(UInt<1>("h01"), io.out.ready) @[Arbiter.scala 134:19]
    io.in[0].ready <= _T @[Arbiter.scala 134:14]
    node _T_1 = eq(UInt<1>("h01"), UInt<1>("h00")) @[Arbiter.scala 135:19]
    node _T_2 = or(_T_1, io.in[0].valid) @[Arbiter.scala 135:31]
    io.out.valid <= _T_2 @[Arbiter.scala 135:16]
    
  module Cache : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<87>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>, user : UInt<87>}}}, flip flush : UInt<2>, out : {mem : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}, flip coh : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}}, mmio : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}, empty : UInt<1>}
    
    inst s1 of CacheStage1 @[Cache.scala 475:18]
    s1.clock <= clock
    s1.reset <= reset
    inst s2 of CacheStage2 @[Cache.scala 476:18]
    s2.clock <= clock
    s2.reset <= reset
    inst s3 of CacheStage3 @[Cache.scala 477:18]
    s3.clock <= clock
    s3.reset <= reset
    inst metaArray of SRAMTemplateWithArbiter @[Cache.scala 478:25]
    metaArray.clock <= clock
    metaArray.reset <= reset
    inst dataArray of SRAMTemplateWithArbiter_1 @[Cache.scala 479:25]
    dataArray.clock <= clock
    dataArray.reset <= reset
    wire _T : UInt<1>
    _T <= UInt<1>("h00")
    node _T_1 = asUInt(reset) @[Cache.scala 485:30]
    node _T_2 = or(_T_1, _T) @[Cache.scala 485:37]
    metaArray.reset <= _T_2 @[Cache.scala 485:21]
    inst arb of Arbiter_4 @[Cache.scala 488:19]
    arb.clock <= clock
    arb.reset <= reset
    arb.io.in[0].bits.user <= io.in.req.bits.user @[Cache.scala 489:28]
    arb.io.in[0].bits.wdata <= io.in.req.bits.wdata @[Cache.scala 489:28]
    arb.io.in[0].bits.wmask <= io.in.req.bits.wmask @[Cache.scala 489:28]
    arb.io.in[0].bits.cmd <= io.in.req.bits.cmd @[Cache.scala 489:28]
    arb.io.in[0].bits.size <= io.in.req.bits.size @[Cache.scala 489:28]
    arb.io.in[0].bits.addr <= io.in.req.bits.addr @[Cache.scala 489:28]
    arb.io.in[0].valid <= io.in.req.valid @[Cache.scala 489:28]
    io.in.req.ready <= arb.io.in[0].ready @[Cache.scala 489:28]
    s1.io.in.bits.user <= arb.io.out.bits.user @[Cache.scala 491:12]
    s1.io.in.bits.wdata <= arb.io.out.bits.wdata @[Cache.scala 491:12]
    s1.io.in.bits.wmask <= arb.io.out.bits.wmask @[Cache.scala 491:12]
    s1.io.in.bits.cmd <= arb.io.out.bits.cmd @[Cache.scala 491:12]
    s1.io.in.bits.size <= arb.io.out.bits.size @[Cache.scala 491:12]
    s1.io.in.bits.addr <= arb.io.out.bits.addr @[Cache.scala 491:12]
    s1.io.in.valid <= arb.io.out.valid @[Cache.scala 491:12]
    arb.io.out.ready <= s1.io.in.ready @[Cache.scala 491:12]
    node _T_3 = and(s2.io.out.ready, s2.io.out.valid) @[Decoupled.scala 40:37]
    node _T_4 = bits(io.flush, 0, 0) @[Cache.scala 497:66]
    reg _T_5 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Pipeline.scala 24:24]
    when _T_3 : @[Pipeline.scala 25:25]
      _T_5 <= UInt<1>("h00") @[Pipeline.scala 25:33]
      skip @[Pipeline.scala 25:25]
    node _T_6 = and(s1.io.out.valid, s2.io.in.ready) @[Pipeline.scala 26:22]
    when _T_6 : @[Pipeline.scala 26:38]
      _T_5 <= UInt<1>("h01") @[Pipeline.scala 26:46]
      skip @[Pipeline.scala 26:38]
    when _T_4 : @[Pipeline.scala 27:20]
      _T_5 <= UInt<1>("h00") @[Pipeline.scala 27:28]
      skip @[Pipeline.scala 27:20]
    s1.io.out.ready <= s2.io.in.ready @[Pipeline.scala 29:16]
    node _T_7 = and(s1.io.out.valid, s2.io.in.ready) @[Pipeline.scala 30:51]
    reg _T_8 : {req : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<87>}}, clock @[Reg.scala 15:16]
    when _T_7 : @[Reg.scala 16:19]
      _T_8.req.user <= s1.io.out.bits.req.user @[Reg.scala 16:23]
      _T_8.req.wdata <= s1.io.out.bits.req.wdata @[Reg.scala 16:23]
      _T_8.req.wmask <= s1.io.out.bits.req.wmask @[Reg.scala 16:23]
      _T_8.req.cmd <= s1.io.out.bits.req.cmd @[Reg.scala 16:23]
      _T_8.req.size <= s1.io.out.bits.req.size @[Reg.scala 16:23]
      _T_8.req.addr <= s1.io.out.bits.req.addr @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    s2.io.in.bits.req.user <= _T_8.req.user @[Pipeline.scala 30:16]
    s2.io.in.bits.req.wdata <= _T_8.req.wdata @[Pipeline.scala 30:16]
    s2.io.in.bits.req.wmask <= _T_8.req.wmask @[Pipeline.scala 30:16]
    s2.io.in.bits.req.cmd <= _T_8.req.cmd @[Pipeline.scala 30:16]
    s2.io.in.bits.req.size <= _T_8.req.size @[Pipeline.scala 30:16]
    s2.io.in.bits.req.addr <= _T_8.req.addr @[Pipeline.scala 30:16]
    s2.io.in.valid <= _T_5 @[Pipeline.scala 31:17]
    node _T_9 = bits(io.flush, 1, 1) @[Cache.scala 498:64]
    reg _T_10 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Pipeline.scala 24:24]
    when s3.io.isFinish : @[Pipeline.scala 25:25]
      _T_10 <= UInt<1>("h00") @[Pipeline.scala 25:33]
      skip @[Pipeline.scala 25:25]
    node _T_11 = and(s2.io.out.valid, s3.io.in.ready) @[Pipeline.scala 26:22]
    when _T_11 : @[Pipeline.scala 26:38]
      _T_10 <= UInt<1>("h01") @[Pipeline.scala 26:46]
      skip @[Pipeline.scala 26:38]
    when _T_9 : @[Pipeline.scala 27:20]
      _T_10 <= UInt<1>("h00") @[Pipeline.scala 27:28]
      skip @[Pipeline.scala 27:20]
    s2.io.out.ready <= s3.io.in.ready @[Pipeline.scala 29:16]
    node _T_12 = and(s2.io.out.valid, s3.io.in.ready) @[Pipeline.scala 30:51]
    reg _T_13 : {req : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<87>}, metas : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4], datas : {data : UInt<64>}[4], hit : UInt<1>, waymask : UInt<4>, mmio : UInt<1>, isForwardData : UInt<1>, forwardData : {setIdx : UInt<10>, data : {data : UInt<64>}, waymask : UInt<4>}}, clock @[Reg.scala 15:16]
    when _T_12 : @[Reg.scala 16:19]
      _T_13.forwardData.waymask <= s2.io.out.bits.forwardData.waymask @[Reg.scala 16:23]
      _T_13.forwardData.data.data <= s2.io.out.bits.forwardData.data.data @[Reg.scala 16:23]
      _T_13.forwardData.setIdx <= s2.io.out.bits.forwardData.setIdx @[Reg.scala 16:23]
      _T_13.isForwardData <= s2.io.out.bits.isForwardData @[Reg.scala 16:23]
      _T_13.mmio <= s2.io.out.bits.mmio @[Reg.scala 16:23]
      _T_13.waymask <= s2.io.out.bits.waymask @[Reg.scala 16:23]
      _T_13.hit <= s2.io.out.bits.hit @[Reg.scala 16:23]
      _T_13.datas[0].data <= s2.io.out.bits.datas[0].data @[Reg.scala 16:23]
      _T_13.datas[1].data <= s2.io.out.bits.datas[1].data @[Reg.scala 16:23]
      _T_13.datas[2].data <= s2.io.out.bits.datas[2].data @[Reg.scala 16:23]
      _T_13.datas[3].data <= s2.io.out.bits.datas[3].data @[Reg.scala 16:23]
      _T_13.metas[0].dirty <= s2.io.out.bits.metas[0].dirty @[Reg.scala 16:23]
      _T_13.metas[0].valid <= s2.io.out.bits.metas[0].valid @[Reg.scala 16:23]
      _T_13.metas[0].tag <= s2.io.out.bits.metas[0].tag @[Reg.scala 16:23]
      _T_13.metas[1].dirty <= s2.io.out.bits.metas[1].dirty @[Reg.scala 16:23]
      _T_13.metas[1].valid <= s2.io.out.bits.metas[1].valid @[Reg.scala 16:23]
      _T_13.metas[1].tag <= s2.io.out.bits.metas[1].tag @[Reg.scala 16:23]
      _T_13.metas[2].dirty <= s2.io.out.bits.metas[2].dirty @[Reg.scala 16:23]
      _T_13.metas[2].valid <= s2.io.out.bits.metas[2].valid @[Reg.scala 16:23]
      _T_13.metas[2].tag <= s2.io.out.bits.metas[2].tag @[Reg.scala 16:23]
      _T_13.metas[3].dirty <= s2.io.out.bits.metas[3].dirty @[Reg.scala 16:23]
      _T_13.metas[3].valid <= s2.io.out.bits.metas[3].valid @[Reg.scala 16:23]
      _T_13.metas[3].tag <= s2.io.out.bits.metas[3].tag @[Reg.scala 16:23]
      _T_13.req.user <= s2.io.out.bits.req.user @[Reg.scala 16:23]
      _T_13.req.wdata <= s2.io.out.bits.req.wdata @[Reg.scala 16:23]
      _T_13.req.wmask <= s2.io.out.bits.req.wmask @[Reg.scala 16:23]
      _T_13.req.cmd <= s2.io.out.bits.req.cmd @[Reg.scala 16:23]
      _T_13.req.size <= s2.io.out.bits.req.size @[Reg.scala 16:23]
      _T_13.req.addr <= s2.io.out.bits.req.addr @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    s3.io.in.bits.forwardData.waymask <= _T_13.forwardData.waymask @[Pipeline.scala 30:16]
    s3.io.in.bits.forwardData.data.data <= _T_13.forwardData.data.data @[Pipeline.scala 30:16]
    s3.io.in.bits.forwardData.setIdx <= _T_13.forwardData.setIdx @[Pipeline.scala 30:16]
    s3.io.in.bits.isForwardData <= _T_13.isForwardData @[Pipeline.scala 30:16]
    s3.io.in.bits.mmio <= _T_13.mmio @[Pipeline.scala 30:16]
    s3.io.in.bits.waymask <= _T_13.waymask @[Pipeline.scala 30:16]
    s3.io.in.bits.hit <= _T_13.hit @[Pipeline.scala 30:16]
    s3.io.in.bits.datas[0].data <= _T_13.datas[0].data @[Pipeline.scala 30:16]
    s3.io.in.bits.datas[1].data <= _T_13.datas[1].data @[Pipeline.scala 30:16]
    s3.io.in.bits.datas[2].data <= _T_13.datas[2].data @[Pipeline.scala 30:16]
    s3.io.in.bits.datas[3].data <= _T_13.datas[3].data @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[0].dirty <= _T_13.metas[0].dirty @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[0].valid <= _T_13.metas[0].valid @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[0].tag <= _T_13.metas[0].tag @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[1].dirty <= _T_13.metas[1].dirty @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[1].valid <= _T_13.metas[1].valid @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[1].tag <= _T_13.metas[1].tag @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[2].dirty <= _T_13.metas[2].dirty @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[2].valid <= _T_13.metas[2].valid @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[2].tag <= _T_13.metas[2].tag @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[3].dirty <= _T_13.metas[3].dirty @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[3].valid <= _T_13.metas[3].valid @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[3].tag <= _T_13.metas[3].tag @[Pipeline.scala 30:16]
    s3.io.in.bits.req.user <= _T_13.req.user @[Pipeline.scala 30:16]
    s3.io.in.bits.req.wdata <= _T_13.req.wdata @[Pipeline.scala 30:16]
    s3.io.in.bits.req.wmask <= _T_13.req.wmask @[Pipeline.scala 30:16]
    s3.io.in.bits.req.cmd <= _T_13.req.cmd @[Pipeline.scala 30:16]
    s3.io.in.bits.req.size <= _T_13.req.size @[Pipeline.scala 30:16]
    s3.io.in.bits.req.addr <= _T_13.req.addr @[Pipeline.scala 30:16]
    s3.io.in.valid <= _T_10 @[Pipeline.scala 31:17]
    io.in.resp.bits.user <= s3.io.out.bits.user @[Cache.scala 499:14]
    io.in.resp.bits.rdata <= s3.io.out.bits.rdata @[Cache.scala 499:14]
    io.in.resp.bits.cmd <= s3.io.out.bits.cmd @[Cache.scala 499:14]
    io.in.resp.valid <= s3.io.out.valid @[Cache.scala 499:14]
    s3.io.out.ready <= io.in.resp.ready @[Cache.scala 499:14]
    node _T_14 = bits(io.flush, 1, 1) @[Cache.scala 500:26]
    s3.io.flush <= _T_14 @[Cache.scala 500:15]
    s3.io.mem.resp.bits.rdata <= io.out.mem.resp.bits.rdata @[Cache.scala 501:14]
    s3.io.mem.resp.bits.cmd <= io.out.mem.resp.bits.cmd @[Cache.scala 501:14]
    s3.io.mem.resp.valid <= io.out.mem.resp.valid @[Cache.scala 501:14]
    io.out.mem.resp.ready <= s3.io.mem.resp.ready @[Cache.scala 501:14]
    io.out.mem.req.bits.wdata <= s3.io.mem.req.bits.wdata @[Cache.scala 501:14]
    io.out.mem.req.bits.wmask <= s3.io.mem.req.bits.wmask @[Cache.scala 501:14]
    io.out.mem.req.bits.cmd <= s3.io.mem.req.bits.cmd @[Cache.scala 501:14]
    io.out.mem.req.bits.size <= s3.io.mem.req.bits.size @[Cache.scala 501:14]
    io.out.mem.req.bits.addr <= s3.io.mem.req.bits.addr @[Cache.scala 501:14]
    io.out.mem.req.valid <= s3.io.mem.req.valid @[Cache.scala 501:14]
    s3.io.mem.req.ready <= io.out.mem.req.ready @[Cache.scala 501:14]
    s3.io.mmio.resp.bits.rdata <= io.mmio.resp.bits.rdata @[Cache.scala 502:11]
    s3.io.mmio.resp.bits.cmd <= io.mmio.resp.bits.cmd @[Cache.scala 502:11]
    s3.io.mmio.resp.valid <= io.mmio.resp.valid @[Cache.scala 502:11]
    io.mmio.resp.ready <= s3.io.mmio.resp.ready @[Cache.scala 502:11]
    io.mmio.req.bits.wdata <= s3.io.mmio.req.bits.wdata @[Cache.scala 502:11]
    io.mmio.req.bits.wmask <= s3.io.mmio.req.bits.wmask @[Cache.scala 502:11]
    io.mmio.req.bits.cmd <= s3.io.mmio.req.bits.cmd @[Cache.scala 502:11]
    io.mmio.req.bits.size <= s3.io.mmio.req.bits.size @[Cache.scala 502:11]
    io.mmio.req.bits.addr <= s3.io.mmio.req.bits.addr @[Cache.scala 502:11]
    io.mmio.req.valid <= s3.io.mmio.req.valid @[Cache.scala 502:11]
    s3.io.mmio.req.ready <= io.mmio.req.ready @[Cache.scala 502:11]
    node _T_15 = eq(s2.io.in.valid, UInt<1>("h00")) @[Cache.scala 503:15]
    node _T_16 = eq(s3.io.in.valid, UInt<1>("h00")) @[Cache.scala 503:34]
    node _T_17 = and(_T_15, _T_16) @[Cache.scala 503:31]
    io.empty <= _T_17 @[Cache.scala 503:12]
    node _T_18 = eq(s3.io.out.bits.cmd, UInt<3>("h04")) @[SimpleBus.scala 95:26]
    node _T_19 = and(s3.io.out.valid, _T_18) @[Cache.scala 505:43]
    node _T_20 = or(s3.io.out.valid, s3.io.dataReadRespToL1) @[Cache.scala 505:100]
    node _T_21 = mux(_T_19, UInt<1>("h00"), _T_20) @[Cache.scala 505:26]
    io.in.resp.valid <= _T_21 @[Cache.scala 505:20]
    io.out.coh.req.ready <= UInt<1>("h01") @[Cache.scala 517:26]
    io.out.coh.resp.bits.rdata is invalid @[Cache.scala 518:21]
    io.out.coh.resp.bits.cmd is invalid @[Cache.scala 518:21]
    io.out.coh.resp.valid is invalid @[Cache.scala 518:21]
    io.out.coh.resp.ready is invalid @[Cache.scala 518:21]
    io.out.coh.resp.valid <= UInt<1>("h00") @[Cache.scala 519:27]
    s3.io.cohResp.ready <= UInt<1>("h01") @[Cache.scala 520:25]
    s1.io.metaReadBus.resp.data[0].dirty <= metaArray.io.r[0].resp.data[0].dirty @[Cache.scala 523:21]
    s1.io.metaReadBus.resp.data[0].valid <= metaArray.io.r[0].resp.data[0].valid @[Cache.scala 523:21]
    s1.io.metaReadBus.resp.data[0].tag <= metaArray.io.r[0].resp.data[0].tag @[Cache.scala 523:21]
    s1.io.metaReadBus.resp.data[1].dirty <= metaArray.io.r[0].resp.data[1].dirty @[Cache.scala 523:21]
    s1.io.metaReadBus.resp.data[1].valid <= metaArray.io.r[0].resp.data[1].valid @[Cache.scala 523:21]
    s1.io.metaReadBus.resp.data[1].tag <= metaArray.io.r[0].resp.data[1].tag @[Cache.scala 523:21]
    s1.io.metaReadBus.resp.data[2].dirty <= metaArray.io.r[0].resp.data[2].dirty @[Cache.scala 523:21]
    s1.io.metaReadBus.resp.data[2].valid <= metaArray.io.r[0].resp.data[2].valid @[Cache.scala 523:21]
    s1.io.metaReadBus.resp.data[2].tag <= metaArray.io.r[0].resp.data[2].tag @[Cache.scala 523:21]
    s1.io.metaReadBus.resp.data[3].dirty <= metaArray.io.r[0].resp.data[3].dirty @[Cache.scala 523:21]
    s1.io.metaReadBus.resp.data[3].valid <= metaArray.io.r[0].resp.data[3].valid @[Cache.scala 523:21]
    s1.io.metaReadBus.resp.data[3].tag <= metaArray.io.r[0].resp.data[3].tag @[Cache.scala 523:21]
    metaArray.io.r[0].req.bits.setIdx <= s1.io.metaReadBus.req.bits.setIdx @[Cache.scala 523:21]
    metaArray.io.r[0].req.valid <= s1.io.metaReadBus.req.valid @[Cache.scala 523:21]
    s1.io.metaReadBus.req.ready <= metaArray.io.r[0].req.ready @[Cache.scala 523:21]
    s1.io.dataReadBus.resp.data[0].data <= dataArray.io.r[0].resp.data[0].data @[Cache.scala 524:21]
    s1.io.dataReadBus.resp.data[1].data <= dataArray.io.r[0].resp.data[1].data @[Cache.scala 524:21]
    s1.io.dataReadBus.resp.data[2].data <= dataArray.io.r[0].resp.data[2].data @[Cache.scala 524:21]
    s1.io.dataReadBus.resp.data[3].data <= dataArray.io.r[0].resp.data[3].data @[Cache.scala 524:21]
    dataArray.io.r[0].req.bits.setIdx <= s1.io.dataReadBus.req.bits.setIdx @[Cache.scala 524:21]
    dataArray.io.r[0].req.valid <= s1.io.dataReadBus.req.valid @[Cache.scala 524:21]
    s1.io.dataReadBus.req.ready <= dataArray.io.r[0].req.ready @[Cache.scala 524:21]
    s3.io.dataReadBus.resp.data[0].data <= dataArray.io.r[1].resp.data[0].data @[Cache.scala 525:21]
    s3.io.dataReadBus.resp.data[1].data <= dataArray.io.r[1].resp.data[1].data @[Cache.scala 525:21]
    s3.io.dataReadBus.resp.data[2].data <= dataArray.io.r[1].resp.data[2].data @[Cache.scala 525:21]
    s3.io.dataReadBus.resp.data[3].data <= dataArray.io.r[1].resp.data[3].data @[Cache.scala 525:21]
    dataArray.io.r[1].req.bits.setIdx <= s3.io.dataReadBus.req.bits.setIdx @[Cache.scala 525:21]
    dataArray.io.r[1].req.valid <= s3.io.dataReadBus.req.valid @[Cache.scala 525:21]
    s3.io.dataReadBus.req.ready <= dataArray.io.r[1].req.ready @[Cache.scala 525:21]
    metaArray.io.w.req.bits.waymask <= s3.io.metaWriteBus.req.bits.waymask @[Cache.scala 527:18]
    metaArray.io.w.req.bits.data.dirty <= s3.io.metaWriteBus.req.bits.data.dirty @[Cache.scala 527:18]
    metaArray.io.w.req.bits.data.valid <= s3.io.metaWriteBus.req.bits.data.valid @[Cache.scala 527:18]
    metaArray.io.w.req.bits.data.tag <= s3.io.metaWriteBus.req.bits.data.tag @[Cache.scala 527:18]
    metaArray.io.w.req.bits.setIdx <= s3.io.metaWriteBus.req.bits.setIdx @[Cache.scala 527:18]
    metaArray.io.w.req.valid <= s3.io.metaWriteBus.req.valid @[Cache.scala 527:18]
    s3.io.metaWriteBus.req.ready <= metaArray.io.w.req.ready @[Cache.scala 527:18]
    dataArray.io.w.req.bits.waymask <= s3.io.dataWriteBus.req.bits.waymask @[Cache.scala 528:18]
    dataArray.io.w.req.bits.data.data <= s3.io.dataWriteBus.req.bits.data.data @[Cache.scala 528:18]
    dataArray.io.w.req.bits.setIdx <= s3.io.dataWriteBus.req.bits.setIdx @[Cache.scala 528:18]
    dataArray.io.w.req.valid <= s3.io.dataWriteBus.req.valid @[Cache.scala 528:18]
    s3.io.dataWriteBus.req.ready <= dataArray.io.w.req.ready @[Cache.scala 528:18]
    s2.io.metaReadResp[0].dirty <= s1.io.metaReadBus.resp.data[0].dirty @[Cache.scala 530:22]
    s2.io.metaReadResp[0].valid <= s1.io.metaReadBus.resp.data[0].valid @[Cache.scala 530:22]
    s2.io.metaReadResp[0].tag <= s1.io.metaReadBus.resp.data[0].tag @[Cache.scala 530:22]
    s2.io.metaReadResp[1].dirty <= s1.io.metaReadBus.resp.data[1].dirty @[Cache.scala 530:22]
    s2.io.metaReadResp[1].valid <= s1.io.metaReadBus.resp.data[1].valid @[Cache.scala 530:22]
    s2.io.metaReadResp[1].tag <= s1.io.metaReadBus.resp.data[1].tag @[Cache.scala 530:22]
    s2.io.metaReadResp[2].dirty <= s1.io.metaReadBus.resp.data[2].dirty @[Cache.scala 530:22]
    s2.io.metaReadResp[2].valid <= s1.io.metaReadBus.resp.data[2].valid @[Cache.scala 530:22]
    s2.io.metaReadResp[2].tag <= s1.io.metaReadBus.resp.data[2].tag @[Cache.scala 530:22]
    s2.io.metaReadResp[3].dirty <= s1.io.metaReadBus.resp.data[3].dirty @[Cache.scala 530:22]
    s2.io.metaReadResp[3].valid <= s1.io.metaReadBus.resp.data[3].valid @[Cache.scala 530:22]
    s2.io.metaReadResp[3].tag <= s1.io.metaReadBus.resp.data[3].tag @[Cache.scala 530:22]
    s2.io.dataReadResp[0].data <= s1.io.dataReadBus.resp.data[0].data @[Cache.scala 531:22]
    s2.io.dataReadResp[1].data <= s1.io.dataReadBus.resp.data[1].data @[Cache.scala 531:22]
    s2.io.dataReadResp[2].data <= s1.io.dataReadBus.resp.data[2].data @[Cache.scala 531:22]
    s2.io.dataReadResp[3].data <= s1.io.dataReadBus.resp.data[3].data @[Cache.scala 531:22]
    s2.io.dataWriteBus.req.bits.waymask <= s3.io.dataWriteBus.req.bits.waymask @[Cache.scala 532:22]
    s2.io.dataWriteBus.req.bits.data.data <= s3.io.dataWriteBus.req.bits.data.data @[Cache.scala 532:22]
    s2.io.dataWriteBus.req.bits.setIdx <= s3.io.dataWriteBus.req.bits.setIdx @[Cache.scala 532:22]
    s2.io.dataWriteBus.req.valid <= s3.io.dataWriteBus.req.valid @[Cache.scala 532:22]
    s2.io.dataWriteBus.req.ready <= s3.io.dataWriteBus.req.ready @[Cache.scala 532:22]
    s2.io.metaWriteBus.req.bits.waymask <= s3.io.metaWriteBus.req.bits.waymask @[Cache.scala 533:22]
    s2.io.metaWriteBus.req.bits.data.dirty <= s3.io.metaWriteBus.req.bits.data.dirty @[Cache.scala 533:22]
    s2.io.metaWriteBus.req.bits.data.valid <= s3.io.metaWriteBus.req.bits.data.valid @[Cache.scala 533:22]
    s2.io.metaWriteBus.req.bits.data.tag <= s3.io.metaWriteBus.req.bits.data.tag @[Cache.scala 533:22]
    s2.io.metaWriteBus.req.bits.setIdx <= s3.io.metaWriteBus.req.bits.setIdx @[Cache.scala 533:22]
    s2.io.metaWriteBus.req.valid <= s3.io.metaWriteBus.req.valid @[Cache.scala 533:22]
    s2.io.metaWriteBus.req.ready <= s3.io.metaWriteBus.req.ready @[Cache.scala 533:22]
    reg _T_22 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_23 = add(_T_22, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_24 = tail(_T_23, 1) @[GTimer.scala 25:12]
    _T_22 <= _T_24 @[GTimer.scala 25:7]
    wire _T_25 : UInt<1>
    _T_25 <= UInt<1>("h00")
    node _T_26 = and(UInt<1>("h01"), _T_25) @[Debug.scala 55:16]
    when _T_26 : @[Debug.scala 55:31]
      node _T_27 = asUInt(reset) @[Debug.scala 56:24]
      node _T_28 = eq(_T_27, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_28 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] Cache: ", _T_22) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_29 = asUInt(reset) @[Debug.scala 57:13]
      node _T_30 = eq(_T_29, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_30 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "InReq(%d, %d) InResp(%d, %d) \n", io.in.req.valid, io.in.req.ready, io.in.resp.valid, io.in.resp.ready) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    reg _T_31 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_32 = add(_T_31, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_33 = tail(_T_32, 1) @[GTimer.scala 25:12]
    _T_31 <= _T_33 @[GTimer.scala 25:7]
    wire _T_34 : UInt<1>
    _T_34 <= UInt<1>("h00")
    node _T_35 = and(UInt<1>("h01"), _T_34) @[Debug.scala 55:16]
    when _T_35 : @[Debug.scala 55:31]
      node _T_36 = asUInt(reset) @[Debug.scala 56:24]
      node _T_37 = eq(_T_36, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_37 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] Cache: ", _T_31) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_38 = asUInt(reset) @[Debug.scala 57:13]
      node _T_39 = eq(_T_38, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_39 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "{IN s1:(%d,%d), s2:(%d,%d), s3:(%d,%d)} {OUT s1:(%d,%d), s2:(%d,%d), s3:(%d,%d)}\n", s1.io.in.valid, s1.io.in.ready, s2.io.in.valid, s2.io.in.ready, s3.io.in.valid, s3.io.in.ready, s1.io.out.valid, s1.io.out.ready, s2.io.out.valid, s2.io.out.ready, s3.io.out.valid, s3.io.out.ready) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    when s1.io.in.valid : @[Cache.scala 543:25]
      reg _T_40 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_41 = add(_T_40, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_42 = tail(_T_41, 1) @[GTimer.scala 25:12]
      _T_40 <= _T_42 @[GTimer.scala 25:7]
      wire _T_43 : UInt<1>
      _T_43 <= UInt<1>("h00")
      node _T_44 = and(UInt<1>("h01"), _T_43) @[Debug.scala 55:16]
      when _T_44 : @[Debug.scala 55:31]
        node _T_45 = asUInt(reset) @[Debug.scala 56:24]
        node _T_46 = eq(_T_45, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_46 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] Cache: ", _T_40) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_47 = asUInt(reset) @[Debug.scala 57:13]
        node _T_48 = eq(_T_47, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_48 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[icache.S1]: addr = 0x%x, cmd = %d, size = %d, wmask = 0x%x, wdata = 0x%x\n", s1.io.in.bits.addr, s1.io.in.bits.cmd, s1.io.in.bits.size, s1.io.in.bits.wmask, s1.io.in.bits.wdata) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      skip @[Cache.scala 543:25]
    when s2.io.in.valid : @[Cache.scala 544:25]
      reg _T_49 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_50 = add(_T_49, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_51 = tail(_T_50, 1) @[GTimer.scala 25:12]
      _T_49 <= _T_51 @[GTimer.scala 25:7]
      wire _T_52 : UInt<1>
      _T_52 <= UInt<1>("h00")
      node _T_53 = and(UInt<1>("h01"), _T_52) @[Debug.scala 55:16]
      when _T_53 : @[Debug.scala 55:31]
        node _T_54 = asUInt(reset) @[Debug.scala 56:24]
        node _T_55 = eq(_T_54, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_55 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] Cache: ", _T_49) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_56 = asUInt(reset) @[Debug.scala 57:13]
        node _T_57 = eq(_T_56, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_57 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[icache.S2]: addr = 0x%x, cmd = %d, size = %d, wmask = 0x%x, wdata = 0x%x\n", s2.io.in.bits.req.addr, s2.io.in.bits.req.cmd, s2.io.in.bits.req.size, s2.io.in.bits.req.wmask, s2.io.in.bits.req.wdata) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      skip @[Cache.scala 544:25]
    when s3.io.in.valid : @[Cache.scala 545:25]
      reg _T_58 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_59 = add(_T_58, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_60 = tail(_T_59, 1) @[GTimer.scala 25:12]
      _T_58 <= _T_60 @[GTimer.scala 25:7]
      wire _T_61 : UInt<1>
      _T_61 <= UInt<1>("h00")
      node _T_62 = and(UInt<1>("h01"), _T_61) @[Debug.scala 55:16]
      when _T_62 : @[Debug.scala 55:31]
        node _T_63 = asUInt(reset) @[Debug.scala 56:24]
        node _T_64 = eq(_T_63, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_64 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] Cache: ", _T_58) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_65 = asUInt(reset) @[Debug.scala 57:13]
        node _T_66 = eq(_T_65, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_66 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[icache.S3]: addr = 0x%x, cmd = %d, size = %d, wmask = 0x%x, wdata = 0x%x\n", s3.io.in.bits.req.addr, s3.io.in.bits.req.cmd, s3.io.in.bits.req.size, s3.io.in.bits.req.wmask, s3.io.in.bits.req.wdata) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      skip @[Cache.scala 545:25]
    
  module EmbeddedTLBExec_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<39>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip md : UInt<121>[4], mdWrite : {wen : UInt<1>, windex : UInt<4>, waymask : UInt<4>, wdata : UInt<121>}, flip mdReady : UInt<1>, mem : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}, flip flush : UInt<1>, flip satp : UInt<64>, pf : {flip priviledgeMode : UInt<2>, flip status_sum : UInt<1>, flip status_mxr : UInt<1>, loadPF : UInt<1>, storePF : UInt<1>, addr : UInt<39>}, ipf : UInt<1>, isFinish : UInt<1>}
    
    wire _T : {vpn : UInt<27>, off : UInt<12>} @[EmbeddedTLB.scala 193:30]
    wire _T_1 : UInt<39>
    _T_1 <= io.in.bits.addr
    node _T_2 = bits(_T_1, 11, 0) @[EmbeddedTLB.scala 193:30]
    _T.off <= _T_2 @[EmbeddedTLB.scala 193:30]
    node _T_3 = bits(_T_1, 38, 12) @[EmbeddedTLB.scala 193:30]
    _T.vpn <= _T_3 @[EmbeddedTLB.scala 193:30]
    wire vpn : {vpn2 : UInt<9>, vpn1 : UInt<9>, vpn0 : UInt<9>} @[EmbeddedTLB.scala 193:54]
    wire _T_4 : UInt<27>
    _T_4 <= _T.vpn
    node _T_5 = bits(_T_4, 8, 0) @[EmbeddedTLB.scala 193:54]
    vpn.vpn0 <= _T_5 @[EmbeddedTLB.scala 193:54]
    node _T_6 = bits(_T_4, 17, 9) @[EmbeddedTLB.scala 193:54]
    vpn.vpn1 <= _T_6 @[EmbeddedTLB.scala 193:54]
    node _T_7 = bits(_T_4, 26, 18) @[EmbeddedTLB.scala 193:54]
    vpn.vpn2 <= _T_7 @[EmbeddedTLB.scala 193:54]
    wire satp : {mode : UInt<4>, asid : UInt<16>, res : UInt<24>, ppn : UInt<20>} @[EmbeddedTLB.scala 195:30]
    wire _T_8 : UInt<64>
    _T_8 <= io.satp
    node _T_9 = bits(_T_8, 19, 0) @[EmbeddedTLB.scala 195:30]
    satp.ppn <= _T_9 @[EmbeddedTLB.scala 195:30]
    node _T_10 = bits(_T_8, 43, 20) @[EmbeddedTLB.scala 195:30]
    satp.res <= _T_10 @[EmbeddedTLB.scala 195:30]
    node _T_11 = bits(_T_8, 59, 44) @[EmbeddedTLB.scala 195:30]
    satp.asid <= _T_11 @[EmbeddedTLB.scala 195:30]
    node _T_12 = bits(_T_8, 63, 60) @[EmbeddedTLB.scala 195:30]
    satp.mode <= _T_12 @[EmbeddedTLB.scala 195:30]
    io.pf.loadPF <= UInt<1>("h00") @[EmbeddedTLB.scala 199:13]
    io.pf.storePF <= UInt<1>("h00") @[EmbeddedTLB.scala 200:14]
    io.pf.addr <= io.in.bits.addr @[EmbeddedTLB.scala 201:11]
    wire _T_13 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 204:46]
    wire _T_14 : UInt<121>
    _T_14 <= io.md[0]
    node _T_15 = bits(_T_14, 31, 0) @[EmbeddedTLB.scala 204:46]
    _T_13.pteaddr <= _T_15 @[EmbeddedTLB.scala 204:46]
    node _T_16 = bits(_T_14, 51, 32) @[EmbeddedTLB.scala 204:46]
    _T_13.ppn <= _T_16 @[EmbeddedTLB.scala 204:46]
    node _T_17 = bits(_T_14, 59, 52) @[EmbeddedTLB.scala 204:46]
    _T_13.flag <= _T_17 @[EmbeddedTLB.scala 204:46]
    node _T_18 = bits(_T_14, 77, 60) @[EmbeddedTLB.scala 204:46]
    _T_13.mask <= _T_18 @[EmbeddedTLB.scala 204:46]
    node _T_19 = bits(_T_14, 93, 78) @[EmbeddedTLB.scala 204:46]
    _T_13.asid <= _T_19 @[EmbeddedTLB.scala 204:46]
    node _T_20 = bits(_T_14, 120, 94) @[EmbeddedTLB.scala 204:46]
    _T_13.vpn <= _T_20 @[EmbeddedTLB.scala 204:46]
    wire _T_21 : {d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>} @[EmbeddedTLB.scala 204:71]
    wire _T_22 : UInt<8>
    _T_22 <= _T_13.flag
    node _T_23 = bits(_T_22, 0, 0) @[EmbeddedTLB.scala 204:71]
    _T_21.v <= _T_23 @[EmbeddedTLB.scala 204:71]
    node _T_24 = bits(_T_22, 1, 1) @[EmbeddedTLB.scala 204:71]
    _T_21.r <= _T_24 @[EmbeddedTLB.scala 204:71]
    node _T_25 = bits(_T_22, 2, 2) @[EmbeddedTLB.scala 204:71]
    _T_21.w <= _T_25 @[EmbeddedTLB.scala 204:71]
    node _T_26 = bits(_T_22, 3, 3) @[EmbeddedTLB.scala 204:71]
    _T_21.x <= _T_26 @[EmbeddedTLB.scala 204:71]
    node _T_27 = bits(_T_22, 4, 4) @[EmbeddedTLB.scala 204:71]
    _T_21.u <= _T_27 @[EmbeddedTLB.scala 204:71]
    node _T_28 = bits(_T_22, 5, 5) @[EmbeddedTLB.scala 204:71]
    _T_21.g <= _T_28 @[EmbeddedTLB.scala 204:71]
    node _T_29 = bits(_T_22, 6, 6) @[EmbeddedTLB.scala 204:71]
    _T_21.a <= _T_29 @[EmbeddedTLB.scala 204:71]
    node _T_30 = bits(_T_22, 7, 7) @[EmbeddedTLB.scala 204:71]
    _T_21.d <= _T_30 @[EmbeddedTLB.scala 204:71]
    wire _T_31 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 204:100]
    wire _T_32 : UInt<121>
    _T_32 <= io.md[0]
    node _T_33 = bits(_T_32, 31, 0) @[EmbeddedTLB.scala 204:100]
    _T_31.pteaddr <= _T_33 @[EmbeddedTLB.scala 204:100]
    node _T_34 = bits(_T_32, 51, 32) @[EmbeddedTLB.scala 204:100]
    _T_31.ppn <= _T_34 @[EmbeddedTLB.scala 204:100]
    node _T_35 = bits(_T_32, 59, 52) @[EmbeddedTLB.scala 204:100]
    _T_31.flag <= _T_35 @[EmbeddedTLB.scala 204:100]
    node _T_36 = bits(_T_32, 77, 60) @[EmbeddedTLB.scala 204:100]
    _T_31.mask <= _T_36 @[EmbeddedTLB.scala 204:100]
    node _T_37 = bits(_T_32, 93, 78) @[EmbeddedTLB.scala 204:100]
    _T_31.asid <= _T_37 @[EmbeddedTLB.scala 204:100]
    node _T_38 = bits(_T_32, 120, 94) @[EmbeddedTLB.scala 204:100]
    _T_31.vpn <= _T_38 @[EmbeddedTLB.scala 204:100]
    node _T_39 = eq(_T_31.asid, satp.asid) @[EmbeddedTLB.scala 204:117]
    node _T_40 = and(_T_21.v, _T_39) @[EmbeddedTLB.scala 204:86]
    wire _T_41 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 204:152]
    wire _T_42 : UInt<121>
    _T_42 <= io.md[0]
    node _T_43 = bits(_T_42, 31, 0) @[EmbeddedTLB.scala 204:152]
    _T_41.pteaddr <= _T_43 @[EmbeddedTLB.scala 204:152]
    node _T_44 = bits(_T_42, 51, 32) @[EmbeddedTLB.scala 204:152]
    _T_41.ppn <= _T_44 @[EmbeddedTLB.scala 204:152]
    node _T_45 = bits(_T_42, 59, 52) @[EmbeddedTLB.scala 204:152]
    _T_41.flag <= _T_45 @[EmbeddedTLB.scala 204:152]
    node _T_46 = bits(_T_42, 77, 60) @[EmbeddedTLB.scala 204:152]
    _T_41.mask <= _T_46 @[EmbeddedTLB.scala 204:152]
    node _T_47 = bits(_T_42, 93, 78) @[EmbeddedTLB.scala 204:152]
    _T_41.asid <= _T_47 @[EmbeddedTLB.scala 204:152]
    node _T_48 = bits(_T_42, 120, 94) @[EmbeddedTLB.scala 204:152]
    _T_41.vpn <= _T_48 @[EmbeddedTLB.scala 204:152]
    wire _T_49 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 204:180]
    wire _T_50 : UInt<121>
    _T_50 <= io.md[0]
    node _T_51 = bits(_T_50, 31, 0) @[EmbeddedTLB.scala 204:180]
    _T_49.pteaddr <= _T_51 @[EmbeddedTLB.scala 204:180]
    node _T_52 = bits(_T_50, 51, 32) @[EmbeddedTLB.scala 204:180]
    _T_49.ppn <= _T_52 @[EmbeddedTLB.scala 204:180]
    node _T_53 = bits(_T_50, 59, 52) @[EmbeddedTLB.scala 204:180]
    _T_49.flag <= _T_53 @[EmbeddedTLB.scala 204:180]
    node _T_54 = bits(_T_50, 77, 60) @[EmbeddedTLB.scala 204:180]
    _T_49.mask <= _T_54 @[EmbeddedTLB.scala 204:180]
    node _T_55 = bits(_T_50, 93, 78) @[EmbeddedTLB.scala 204:180]
    _T_49.asid <= _T_55 @[EmbeddedTLB.scala 204:180]
    node _T_56 = bits(_T_50, 120, 94) @[EmbeddedTLB.scala 204:180]
    _T_49.vpn <= _T_56 @[EmbeddedTLB.scala 204:180]
    node _T_57 = cat(vpn.vpn2, vpn.vpn1) @[EmbeddedTLB.scala 204:201]
    node _T_58 = cat(_T_57, vpn.vpn0) @[EmbeddedTLB.scala 204:201]
    node _T_59 = cat(UInt<9>("h01ff"), _T_41.mask) @[Cat.scala 29:58]
    node _T_60 = and(_T_59, _T_49.vpn) @[TLB.scala 131:37]
    node _T_61 = cat(UInt<9>("h01ff"), _T_41.mask) @[Cat.scala 29:58]
    node _T_62 = and(_T_61, _T_58) @[TLB.scala 131:84]
    node _T_63 = eq(_T_60, _T_62) @[TLB.scala 131:48]
    node _T_64 = and(_T_40, _T_63) @[EmbeddedTLB.scala 204:132]
    wire _T_65 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 204:46]
    wire _T_66 : UInt<121>
    _T_66 <= io.md[1]
    node _T_67 = bits(_T_66, 31, 0) @[EmbeddedTLB.scala 204:46]
    _T_65.pteaddr <= _T_67 @[EmbeddedTLB.scala 204:46]
    node _T_68 = bits(_T_66, 51, 32) @[EmbeddedTLB.scala 204:46]
    _T_65.ppn <= _T_68 @[EmbeddedTLB.scala 204:46]
    node _T_69 = bits(_T_66, 59, 52) @[EmbeddedTLB.scala 204:46]
    _T_65.flag <= _T_69 @[EmbeddedTLB.scala 204:46]
    node _T_70 = bits(_T_66, 77, 60) @[EmbeddedTLB.scala 204:46]
    _T_65.mask <= _T_70 @[EmbeddedTLB.scala 204:46]
    node _T_71 = bits(_T_66, 93, 78) @[EmbeddedTLB.scala 204:46]
    _T_65.asid <= _T_71 @[EmbeddedTLB.scala 204:46]
    node _T_72 = bits(_T_66, 120, 94) @[EmbeddedTLB.scala 204:46]
    _T_65.vpn <= _T_72 @[EmbeddedTLB.scala 204:46]
    wire _T_73 : {d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>} @[EmbeddedTLB.scala 204:71]
    wire _T_74 : UInt<8>
    _T_74 <= _T_65.flag
    node _T_75 = bits(_T_74, 0, 0) @[EmbeddedTLB.scala 204:71]
    _T_73.v <= _T_75 @[EmbeddedTLB.scala 204:71]
    node _T_76 = bits(_T_74, 1, 1) @[EmbeddedTLB.scala 204:71]
    _T_73.r <= _T_76 @[EmbeddedTLB.scala 204:71]
    node _T_77 = bits(_T_74, 2, 2) @[EmbeddedTLB.scala 204:71]
    _T_73.w <= _T_77 @[EmbeddedTLB.scala 204:71]
    node _T_78 = bits(_T_74, 3, 3) @[EmbeddedTLB.scala 204:71]
    _T_73.x <= _T_78 @[EmbeddedTLB.scala 204:71]
    node _T_79 = bits(_T_74, 4, 4) @[EmbeddedTLB.scala 204:71]
    _T_73.u <= _T_79 @[EmbeddedTLB.scala 204:71]
    node _T_80 = bits(_T_74, 5, 5) @[EmbeddedTLB.scala 204:71]
    _T_73.g <= _T_80 @[EmbeddedTLB.scala 204:71]
    node _T_81 = bits(_T_74, 6, 6) @[EmbeddedTLB.scala 204:71]
    _T_73.a <= _T_81 @[EmbeddedTLB.scala 204:71]
    node _T_82 = bits(_T_74, 7, 7) @[EmbeddedTLB.scala 204:71]
    _T_73.d <= _T_82 @[EmbeddedTLB.scala 204:71]
    wire _T_83 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 204:100]
    wire _T_84 : UInt<121>
    _T_84 <= io.md[1]
    node _T_85 = bits(_T_84, 31, 0) @[EmbeddedTLB.scala 204:100]
    _T_83.pteaddr <= _T_85 @[EmbeddedTLB.scala 204:100]
    node _T_86 = bits(_T_84, 51, 32) @[EmbeddedTLB.scala 204:100]
    _T_83.ppn <= _T_86 @[EmbeddedTLB.scala 204:100]
    node _T_87 = bits(_T_84, 59, 52) @[EmbeddedTLB.scala 204:100]
    _T_83.flag <= _T_87 @[EmbeddedTLB.scala 204:100]
    node _T_88 = bits(_T_84, 77, 60) @[EmbeddedTLB.scala 204:100]
    _T_83.mask <= _T_88 @[EmbeddedTLB.scala 204:100]
    node _T_89 = bits(_T_84, 93, 78) @[EmbeddedTLB.scala 204:100]
    _T_83.asid <= _T_89 @[EmbeddedTLB.scala 204:100]
    node _T_90 = bits(_T_84, 120, 94) @[EmbeddedTLB.scala 204:100]
    _T_83.vpn <= _T_90 @[EmbeddedTLB.scala 204:100]
    node _T_91 = eq(_T_83.asid, satp.asid) @[EmbeddedTLB.scala 204:117]
    node _T_92 = and(_T_73.v, _T_91) @[EmbeddedTLB.scala 204:86]
    wire _T_93 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 204:152]
    wire _T_94 : UInt<121>
    _T_94 <= io.md[1]
    node _T_95 = bits(_T_94, 31, 0) @[EmbeddedTLB.scala 204:152]
    _T_93.pteaddr <= _T_95 @[EmbeddedTLB.scala 204:152]
    node _T_96 = bits(_T_94, 51, 32) @[EmbeddedTLB.scala 204:152]
    _T_93.ppn <= _T_96 @[EmbeddedTLB.scala 204:152]
    node _T_97 = bits(_T_94, 59, 52) @[EmbeddedTLB.scala 204:152]
    _T_93.flag <= _T_97 @[EmbeddedTLB.scala 204:152]
    node _T_98 = bits(_T_94, 77, 60) @[EmbeddedTLB.scala 204:152]
    _T_93.mask <= _T_98 @[EmbeddedTLB.scala 204:152]
    node _T_99 = bits(_T_94, 93, 78) @[EmbeddedTLB.scala 204:152]
    _T_93.asid <= _T_99 @[EmbeddedTLB.scala 204:152]
    node _T_100 = bits(_T_94, 120, 94) @[EmbeddedTLB.scala 204:152]
    _T_93.vpn <= _T_100 @[EmbeddedTLB.scala 204:152]
    wire _T_101 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 204:180]
    wire _T_102 : UInt<121>
    _T_102 <= io.md[1]
    node _T_103 = bits(_T_102, 31, 0) @[EmbeddedTLB.scala 204:180]
    _T_101.pteaddr <= _T_103 @[EmbeddedTLB.scala 204:180]
    node _T_104 = bits(_T_102, 51, 32) @[EmbeddedTLB.scala 204:180]
    _T_101.ppn <= _T_104 @[EmbeddedTLB.scala 204:180]
    node _T_105 = bits(_T_102, 59, 52) @[EmbeddedTLB.scala 204:180]
    _T_101.flag <= _T_105 @[EmbeddedTLB.scala 204:180]
    node _T_106 = bits(_T_102, 77, 60) @[EmbeddedTLB.scala 204:180]
    _T_101.mask <= _T_106 @[EmbeddedTLB.scala 204:180]
    node _T_107 = bits(_T_102, 93, 78) @[EmbeddedTLB.scala 204:180]
    _T_101.asid <= _T_107 @[EmbeddedTLB.scala 204:180]
    node _T_108 = bits(_T_102, 120, 94) @[EmbeddedTLB.scala 204:180]
    _T_101.vpn <= _T_108 @[EmbeddedTLB.scala 204:180]
    node _T_109 = cat(vpn.vpn2, vpn.vpn1) @[EmbeddedTLB.scala 204:201]
    node _T_110 = cat(_T_109, vpn.vpn0) @[EmbeddedTLB.scala 204:201]
    node _T_111 = cat(UInt<9>("h01ff"), _T_93.mask) @[Cat.scala 29:58]
    node _T_112 = and(_T_111, _T_101.vpn) @[TLB.scala 131:37]
    node _T_113 = cat(UInt<9>("h01ff"), _T_93.mask) @[Cat.scala 29:58]
    node _T_114 = and(_T_113, _T_110) @[TLB.scala 131:84]
    node _T_115 = eq(_T_112, _T_114) @[TLB.scala 131:48]
    node _T_116 = and(_T_92, _T_115) @[EmbeddedTLB.scala 204:132]
    wire _T_117 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 204:46]
    wire _T_118 : UInt<121>
    _T_118 <= io.md[2]
    node _T_119 = bits(_T_118, 31, 0) @[EmbeddedTLB.scala 204:46]
    _T_117.pteaddr <= _T_119 @[EmbeddedTLB.scala 204:46]
    node _T_120 = bits(_T_118, 51, 32) @[EmbeddedTLB.scala 204:46]
    _T_117.ppn <= _T_120 @[EmbeddedTLB.scala 204:46]
    node _T_121 = bits(_T_118, 59, 52) @[EmbeddedTLB.scala 204:46]
    _T_117.flag <= _T_121 @[EmbeddedTLB.scala 204:46]
    node _T_122 = bits(_T_118, 77, 60) @[EmbeddedTLB.scala 204:46]
    _T_117.mask <= _T_122 @[EmbeddedTLB.scala 204:46]
    node _T_123 = bits(_T_118, 93, 78) @[EmbeddedTLB.scala 204:46]
    _T_117.asid <= _T_123 @[EmbeddedTLB.scala 204:46]
    node _T_124 = bits(_T_118, 120, 94) @[EmbeddedTLB.scala 204:46]
    _T_117.vpn <= _T_124 @[EmbeddedTLB.scala 204:46]
    wire _T_125 : {d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>} @[EmbeddedTLB.scala 204:71]
    wire _T_126 : UInt<8>
    _T_126 <= _T_117.flag
    node _T_127 = bits(_T_126, 0, 0) @[EmbeddedTLB.scala 204:71]
    _T_125.v <= _T_127 @[EmbeddedTLB.scala 204:71]
    node _T_128 = bits(_T_126, 1, 1) @[EmbeddedTLB.scala 204:71]
    _T_125.r <= _T_128 @[EmbeddedTLB.scala 204:71]
    node _T_129 = bits(_T_126, 2, 2) @[EmbeddedTLB.scala 204:71]
    _T_125.w <= _T_129 @[EmbeddedTLB.scala 204:71]
    node _T_130 = bits(_T_126, 3, 3) @[EmbeddedTLB.scala 204:71]
    _T_125.x <= _T_130 @[EmbeddedTLB.scala 204:71]
    node _T_131 = bits(_T_126, 4, 4) @[EmbeddedTLB.scala 204:71]
    _T_125.u <= _T_131 @[EmbeddedTLB.scala 204:71]
    node _T_132 = bits(_T_126, 5, 5) @[EmbeddedTLB.scala 204:71]
    _T_125.g <= _T_132 @[EmbeddedTLB.scala 204:71]
    node _T_133 = bits(_T_126, 6, 6) @[EmbeddedTLB.scala 204:71]
    _T_125.a <= _T_133 @[EmbeddedTLB.scala 204:71]
    node _T_134 = bits(_T_126, 7, 7) @[EmbeddedTLB.scala 204:71]
    _T_125.d <= _T_134 @[EmbeddedTLB.scala 204:71]
    wire _T_135 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 204:100]
    wire _T_136 : UInt<121>
    _T_136 <= io.md[2]
    node _T_137 = bits(_T_136, 31, 0) @[EmbeddedTLB.scala 204:100]
    _T_135.pteaddr <= _T_137 @[EmbeddedTLB.scala 204:100]
    node _T_138 = bits(_T_136, 51, 32) @[EmbeddedTLB.scala 204:100]
    _T_135.ppn <= _T_138 @[EmbeddedTLB.scala 204:100]
    node _T_139 = bits(_T_136, 59, 52) @[EmbeddedTLB.scala 204:100]
    _T_135.flag <= _T_139 @[EmbeddedTLB.scala 204:100]
    node _T_140 = bits(_T_136, 77, 60) @[EmbeddedTLB.scala 204:100]
    _T_135.mask <= _T_140 @[EmbeddedTLB.scala 204:100]
    node _T_141 = bits(_T_136, 93, 78) @[EmbeddedTLB.scala 204:100]
    _T_135.asid <= _T_141 @[EmbeddedTLB.scala 204:100]
    node _T_142 = bits(_T_136, 120, 94) @[EmbeddedTLB.scala 204:100]
    _T_135.vpn <= _T_142 @[EmbeddedTLB.scala 204:100]
    node _T_143 = eq(_T_135.asid, satp.asid) @[EmbeddedTLB.scala 204:117]
    node _T_144 = and(_T_125.v, _T_143) @[EmbeddedTLB.scala 204:86]
    wire _T_145 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 204:152]
    wire _T_146 : UInt<121>
    _T_146 <= io.md[2]
    node _T_147 = bits(_T_146, 31, 0) @[EmbeddedTLB.scala 204:152]
    _T_145.pteaddr <= _T_147 @[EmbeddedTLB.scala 204:152]
    node _T_148 = bits(_T_146, 51, 32) @[EmbeddedTLB.scala 204:152]
    _T_145.ppn <= _T_148 @[EmbeddedTLB.scala 204:152]
    node _T_149 = bits(_T_146, 59, 52) @[EmbeddedTLB.scala 204:152]
    _T_145.flag <= _T_149 @[EmbeddedTLB.scala 204:152]
    node _T_150 = bits(_T_146, 77, 60) @[EmbeddedTLB.scala 204:152]
    _T_145.mask <= _T_150 @[EmbeddedTLB.scala 204:152]
    node _T_151 = bits(_T_146, 93, 78) @[EmbeddedTLB.scala 204:152]
    _T_145.asid <= _T_151 @[EmbeddedTLB.scala 204:152]
    node _T_152 = bits(_T_146, 120, 94) @[EmbeddedTLB.scala 204:152]
    _T_145.vpn <= _T_152 @[EmbeddedTLB.scala 204:152]
    wire _T_153 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 204:180]
    wire _T_154 : UInt<121>
    _T_154 <= io.md[2]
    node _T_155 = bits(_T_154, 31, 0) @[EmbeddedTLB.scala 204:180]
    _T_153.pteaddr <= _T_155 @[EmbeddedTLB.scala 204:180]
    node _T_156 = bits(_T_154, 51, 32) @[EmbeddedTLB.scala 204:180]
    _T_153.ppn <= _T_156 @[EmbeddedTLB.scala 204:180]
    node _T_157 = bits(_T_154, 59, 52) @[EmbeddedTLB.scala 204:180]
    _T_153.flag <= _T_157 @[EmbeddedTLB.scala 204:180]
    node _T_158 = bits(_T_154, 77, 60) @[EmbeddedTLB.scala 204:180]
    _T_153.mask <= _T_158 @[EmbeddedTLB.scala 204:180]
    node _T_159 = bits(_T_154, 93, 78) @[EmbeddedTLB.scala 204:180]
    _T_153.asid <= _T_159 @[EmbeddedTLB.scala 204:180]
    node _T_160 = bits(_T_154, 120, 94) @[EmbeddedTLB.scala 204:180]
    _T_153.vpn <= _T_160 @[EmbeddedTLB.scala 204:180]
    node _T_161 = cat(vpn.vpn2, vpn.vpn1) @[EmbeddedTLB.scala 204:201]
    node _T_162 = cat(_T_161, vpn.vpn0) @[EmbeddedTLB.scala 204:201]
    node _T_163 = cat(UInt<9>("h01ff"), _T_145.mask) @[Cat.scala 29:58]
    node _T_164 = and(_T_163, _T_153.vpn) @[TLB.scala 131:37]
    node _T_165 = cat(UInt<9>("h01ff"), _T_145.mask) @[Cat.scala 29:58]
    node _T_166 = and(_T_165, _T_162) @[TLB.scala 131:84]
    node _T_167 = eq(_T_164, _T_166) @[TLB.scala 131:48]
    node _T_168 = and(_T_144, _T_167) @[EmbeddedTLB.scala 204:132]
    wire _T_169 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 204:46]
    wire _T_170 : UInt<121>
    _T_170 <= io.md[3]
    node _T_171 = bits(_T_170, 31, 0) @[EmbeddedTLB.scala 204:46]
    _T_169.pteaddr <= _T_171 @[EmbeddedTLB.scala 204:46]
    node _T_172 = bits(_T_170, 51, 32) @[EmbeddedTLB.scala 204:46]
    _T_169.ppn <= _T_172 @[EmbeddedTLB.scala 204:46]
    node _T_173 = bits(_T_170, 59, 52) @[EmbeddedTLB.scala 204:46]
    _T_169.flag <= _T_173 @[EmbeddedTLB.scala 204:46]
    node _T_174 = bits(_T_170, 77, 60) @[EmbeddedTLB.scala 204:46]
    _T_169.mask <= _T_174 @[EmbeddedTLB.scala 204:46]
    node _T_175 = bits(_T_170, 93, 78) @[EmbeddedTLB.scala 204:46]
    _T_169.asid <= _T_175 @[EmbeddedTLB.scala 204:46]
    node _T_176 = bits(_T_170, 120, 94) @[EmbeddedTLB.scala 204:46]
    _T_169.vpn <= _T_176 @[EmbeddedTLB.scala 204:46]
    wire _T_177 : {d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>} @[EmbeddedTLB.scala 204:71]
    wire _T_178 : UInt<8>
    _T_178 <= _T_169.flag
    node _T_179 = bits(_T_178, 0, 0) @[EmbeddedTLB.scala 204:71]
    _T_177.v <= _T_179 @[EmbeddedTLB.scala 204:71]
    node _T_180 = bits(_T_178, 1, 1) @[EmbeddedTLB.scala 204:71]
    _T_177.r <= _T_180 @[EmbeddedTLB.scala 204:71]
    node _T_181 = bits(_T_178, 2, 2) @[EmbeddedTLB.scala 204:71]
    _T_177.w <= _T_181 @[EmbeddedTLB.scala 204:71]
    node _T_182 = bits(_T_178, 3, 3) @[EmbeddedTLB.scala 204:71]
    _T_177.x <= _T_182 @[EmbeddedTLB.scala 204:71]
    node _T_183 = bits(_T_178, 4, 4) @[EmbeddedTLB.scala 204:71]
    _T_177.u <= _T_183 @[EmbeddedTLB.scala 204:71]
    node _T_184 = bits(_T_178, 5, 5) @[EmbeddedTLB.scala 204:71]
    _T_177.g <= _T_184 @[EmbeddedTLB.scala 204:71]
    node _T_185 = bits(_T_178, 6, 6) @[EmbeddedTLB.scala 204:71]
    _T_177.a <= _T_185 @[EmbeddedTLB.scala 204:71]
    node _T_186 = bits(_T_178, 7, 7) @[EmbeddedTLB.scala 204:71]
    _T_177.d <= _T_186 @[EmbeddedTLB.scala 204:71]
    wire _T_187 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 204:100]
    wire _T_188 : UInt<121>
    _T_188 <= io.md[3]
    node _T_189 = bits(_T_188, 31, 0) @[EmbeddedTLB.scala 204:100]
    _T_187.pteaddr <= _T_189 @[EmbeddedTLB.scala 204:100]
    node _T_190 = bits(_T_188, 51, 32) @[EmbeddedTLB.scala 204:100]
    _T_187.ppn <= _T_190 @[EmbeddedTLB.scala 204:100]
    node _T_191 = bits(_T_188, 59, 52) @[EmbeddedTLB.scala 204:100]
    _T_187.flag <= _T_191 @[EmbeddedTLB.scala 204:100]
    node _T_192 = bits(_T_188, 77, 60) @[EmbeddedTLB.scala 204:100]
    _T_187.mask <= _T_192 @[EmbeddedTLB.scala 204:100]
    node _T_193 = bits(_T_188, 93, 78) @[EmbeddedTLB.scala 204:100]
    _T_187.asid <= _T_193 @[EmbeddedTLB.scala 204:100]
    node _T_194 = bits(_T_188, 120, 94) @[EmbeddedTLB.scala 204:100]
    _T_187.vpn <= _T_194 @[EmbeddedTLB.scala 204:100]
    node _T_195 = eq(_T_187.asid, satp.asid) @[EmbeddedTLB.scala 204:117]
    node _T_196 = and(_T_177.v, _T_195) @[EmbeddedTLB.scala 204:86]
    wire _T_197 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 204:152]
    wire _T_198 : UInt<121>
    _T_198 <= io.md[3]
    node _T_199 = bits(_T_198, 31, 0) @[EmbeddedTLB.scala 204:152]
    _T_197.pteaddr <= _T_199 @[EmbeddedTLB.scala 204:152]
    node _T_200 = bits(_T_198, 51, 32) @[EmbeddedTLB.scala 204:152]
    _T_197.ppn <= _T_200 @[EmbeddedTLB.scala 204:152]
    node _T_201 = bits(_T_198, 59, 52) @[EmbeddedTLB.scala 204:152]
    _T_197.flag <= _T_201 @[EmbeddedTLB.scala 204:152]
    node _T_202 = bits(_T_198, 77, 60) @[EmbeddedTLB.scala 204:152]
    _T_197.mask <= _T_202 @[EmbeddedTLB.scala 204:152]
    node _T_203 = bits(_T_198, 93, 78) @[EmbeddedTLB.scala 204:152]
    _T_197.asid <= _T_203 @[EmbeddedTLB.scala 204:152]
    node _T_204 = bits(_T_198, 120, 94) @[EmbeddedTLB.scala 204:152]
    _T_197.vpn <= _T_204 @[EmbeddedTLB.scala 204:152]
    wire _T_205 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 204:180]
    wire _T_206 : UInt<121>
    _T_206 <= io.md[3]
    node _T_207 = bits(_T_206, 31, 0) @[EmbeddedTLB.scala 204:180]
    _T_205.pteaddr <= _T_207 @[EmbeddedTLB.scala 204:180]
    node _T_208 = bits(_T_206, 51, 32) @[EmbeddedTLB.scala 204:180]
    _T_205.ppn <= _T_208 @[EmbeddedTLB.scala 204:180]
    node _T_209 = bits(_T_206, 59, 52) @[EmbeddedTLB.scala 204:180]
    _T_205.flag <= _T_209 @[EmbeddedTLB.scala 204:180]
    node _T_210 = bits(_T_206, 77, 60) @[EmbeddedTLB.scala 204:180]
    _T_205.mask <= _T_210 @[EmbeddedTLB.scala 204:180]
    node _T_211 = bits(_T_206, 93, 78) @[EmbeddedTLB.scala 204:180]
    _T_205.asid <= _T_211 @[EmbeddedTLB.scala 204:180]
    node _T_212 = bits(_T_206, 120, 94) @[EmbeddedTLB.scala 204:180]
    _T_205.vpn <= _T_212 @[EmbeddedTLB.scala 204:180]
    node _T_213 = cat(vpn.vpn2, vpn.vpn1) @[EmbeddedTLB.scala 204:201]
    node _T_214 = cat(_T_213, vpn.vpn0) @[EmbeddedTLB.scala 204:201]
    node _T_215 = cat(UInt<9>("h01ff"), _T_197.mask) @[Cat.scala 29:58]
    node _T_216 = and(_T_215, _T_205.vpn) @[TLB.scala 131:37]
    node _T_217 = cat(UInt<9>("h01ff"), _T_197.mask) @[Cat.scala 29:58]
    node _T_218 = and(_T_217, _T_214) @[TLB.scala 131:84]
    node _T_219 = eq(_T_216, _T_218) @[TLB.scala 131:48]
    node _T_220 = and(_T_196, _T_219) @[EmbeddedTLB.scala 204:132]
    wire _T_221 : UInt<1>[4] @[EmbeddedTLB.scala 204:23]
    _T_221[0] <= _T_64 @[EmbeddedTLB.scala 204:23]
    _T_221[1] <= _T_116 @[EmbeddedTLB.scala 204:23]
    _T_221[2] <= _T_168 @[EmbeddedTLB.scala 204:23]
    _T_221[3] <= _T_220 @[EmbeddedTLB.scala 204:23]
    node _T_222 = cat(_T_221[1], _T_221[0]) @[EmbeddedTLB.scala 204:211]
    node _T_223 = cat(_T_221[3], _T_221[2]) @[EmbeddedTLB.scala 204:211]
    node hitVec = cat(_T_223, _T_222) @[EmbeddedTLB.scala 204:211]
    node _T_224 = orr(hitVec) @[EmbeddedTLB.scala 205:35]
    node hit = and(io.in.valid, _T_224) @[EmbeddedTLB.scala 205:25]
    node _T_225 = orr(hitVec) @[EmbeddedTLB.scala 206:37]
    node _T_226 = eq(_T_225, UInt<1>("h00")) @[EmbeddedTLB.scala 206:29]
    node miss = and(io.in.valid, _T_226) @[EmbeddedTLB.scala 206:26]
    reg _T_227 : UInt<64>, clock with : (reset => (reset, UInt<64>("h01234567887654321"))) @[LFSR64.scala 25:23]
    node _T_228 = bits(_T_227, 0, 0) @[LFSR64.scala 26:19]
    node _T_229 = bits(_T_227, 1, 1) @[LFSR64.scala 26:29]
    node _T_230 = xor(_T_228, _T_229) @[LFSR64.scala 26:23]
    node _T_231 = bits(_T_227, 3, 3) @[LFSR64.scala 26:39]
    node _T_232 = xor(_T_230, _T_231) @[LFSR64.scala 26:33]
    node _T_233 = bits(_T_227, 4, 4) @[LFSR64.scala 26:49]
    node _T_234 = xor(_T_232, _T_233) @[LFSR64.scala 26:43]
    when UInt<1>("h01") : @[LFSR64.scala 27:22]
      node _T_235 = eq(_T_227, UInt<1>("h00")) @[LFSR64.scala 28:24]
      node _T_236 = bits(_T_227, 63, 1) @[LFSR64.scala 28:51]
      node _T_237 = cat(_T_234, _T_236) @[Cat.scala 29:58]
      node _T_238 = mux(_T_235, UInt<1>("h01"), _T_237) @[LFSR64.scala 28:18]
      _T_227 <= _T_238 @[LFSR64.scala 28:12]
      skip @[LFSR64.scala 27:22]
    node _T_239 = bits(_T_227, 1, 0) @[EmbeddedTLB.scala 208:53]
    node victimWaymask = dshl(UInt<1>("h01"), _T_239) @[EmbeddedTLB.scala 208:42]
    node waymask = mux(hit, hitVec, victimWaymask) @[EmbeddedTLB.scala 209:20]
    wire loadPF : UInt<1>
    loadPF <= UInt<1>("h00")
    wire storePF : UInt<1>
    storePF <= UInt<1>("h00")
    node _T_240 = bits(waymask, 0, 0) @[Mux.scala 29:36]
    node _T_241 = bits(waymask, 1, 1) @[Mux.scala 29:36]
    node _T_242 = bits(waymask, 2, 2) @[Mux.scala 29:36]
    node _T_243 = bits(waymask, 3, 3) @[Mux.scala 29:36]
    node _T_244 = mux(_T_240, io.md[0], UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_245 = mux(_T_241, io.md[1], UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_246 = mux(_T_242, io.md[2], UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_247 = mux(_T_243, io.md[3], UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_248 = or(_T_244, _T_245) @[Mux.scala 27:72]
    node _T_249 = or(_T_248, _T_246) @[Mux.scala 27:72]
    node _T_250 = or(_T_249, _T_247) @[Mux.scala 27:72]
    wire _T_251 : UInt<121> @[Mux.scala 27:72]
    _T_251 <= _T_250 @[Mux.scala 27:72]
    wire _T_252 : {meta : UInt<69>, data : UInt<52>} @[EmbeddedTLB.scala 215:44]
    wire _T_253 : UInt<121>
    _T_253 <= _T_251
    node _T_254 = bits(_T_253, 51, 0) @[EmbeddedTLB.scala 215:44]
    _T_252.data <= _T_254 @[EmbeddedTLB.scala 215:44]
    node _T_255 = bits(_T_253, 120, 52) @[EmbeddedTLB.scala 215:44]
    _T_252.meta <= _T_255 @[EmbeddedTLB.scala 215:44]
    wire hitMeta : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>} @[EmbeddedTLB.scala 215:70]
    wire _T_256 : UInt<69>
    _T_256 <= _T_252.meta
    node _T_257 = bits(_T_256, 7, 0) @[EmbeddedTLB.scala 215:70]
    hitMeta.flag <= _T_257 @[EmbeddedTLB.scala 215:70]
    node _T_258 = bits(_T_256, 25, 8) @[EmbeddedTLB.scala 215:70]
    hitMeta.mask <= _T_258 @[EmbeddedTLB.scala 215:70]
    node _T_259 = bits(_T_256, 41, 26) @[EmbeddedTLB.scala 215:70]
    hitMeta.asid <= _T_259 @[EmbeddedTLB.scala 215:70]
    node _T_260 = bits(_T_256, 68, 42) @[EmbeddedTLB.scala 215:70]
    hitMeta.vpn <= _T_260 @[EmbeddedTLB.scala 215:70]
    node _T_261 = bits(waymask, 0, 0) @[Mux.scala 29:36]
    node _T_262 = bits(waymask, 1, 1) @[Mux.scala 29:36]
    node _T_263 = bits(waymask, 2, 2) @[Mux.scala 29:36]
    node _T_264 = bits(waymask, 3, 3) @[Mux.scala 29:36]
    node _T_265 = mux(_T_261, io.md[0], UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_266 = mux(_T_262, io.md[1], UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_267 = mux(_T_263, io.md[2], UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_268 = mux(_T_264, io.md[3], UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_269 = or(_T_265, _T_266) @[Mux.scala 27:72]
    node _T_270 = or(_T_269, _T_267) @[Mux.scala 27:72]
    node _T_271 = or(_T_270, _T_268) @[Mux.scala 27:72]
    wire _T_272 : UInt<121> @[Mux.scala 27:72]
    _T_272 <= _T_271 @[Mux.scala 27:72]
    wire _T_273 : {meta : UInt<69>, data : UInt<52>} @[EmbeddedTLB.scala 216:44]
    wire _T_274 : UInt<121>
    _T_274 <= _T_272
    node _T_275 = bits(_T_274, 51, 0) @[EmbeddedTLB.scala 216:44]
    _T_273.data <= _T_275 @[EmbeddedTLB.scala 216:44]
    node _T_276 = bits(_T_274, 120, 52) @[EmbeddedTLB.scala 216:44]
    _T_273.meta <= _T_276 @[EmbeddedTLB.scala 216:44]
    wire hitData : {ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 216:70]
    wire _T_277 : UInt<52>
    _T_277 <= _T_273.data
    node _T_278 = bits(_T_277, 31, 0) @[EmbeddedTLB.scala 216:70]
    hitData.pteaddr <= _T_278 @[EmbeddedTLB.scala 216:70]
    node _T_279 = bits(_T_277, 51, 32) @[EmbeddedTLB.scala 216:70]
    hitData.ppn <= _T_279 @[EmbeddedTLB.scala 216:70]
    wire hitFlag : {d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>} @[EmbeddedTLB.scala 217:38]
    wire _T_280 : UInt<8>
    _T_280 <= hitMeta.flag
    node _T_281 = bits(_T_280, 0, 0) @[EmbeddedTLB.scala 217:38]
    hitFlag.v <= _T_281 @[EmbeddedTLB.scala 217:38]
    node _T_282 = bits(_T_280, 1, 1) @[EmbeddedTLB.scala 217:38]
    hitFlag.r <= _T_282 @[EmbeddedTLB.scala 217:38]
    node _T_283 = bits(_T_280, 2, 2) @[EmbeddedTLB.scala 217:38]
    hitFlag.w <= _T_283 @[EmbeddedTLB.scala 217:38]
    node _T_284 = bits(_T_280, 3, 3) @[EmbeddedTLB.scala 217:38]
    hitFlag.x <= _T_284 @[EmbeddedTLB.scala 217:38]
    node _T_285 = bits(_T_280, 4, 4) @[EmbeddedTLB.scala 217:38]
    hitFlag.u <= _T_285 @[EmbeddedTLB.scala 217:38]
    node _T_286 = bits(_T_280, 5, 5) @[EmbeddedTLB.scala 217:38]
    hitFlag.g <= _T_286 @[EmbeddedTLB.scala 217:38]
    node _T_287 = bits(_T_280, 6, 6) @[EmbeddedTLB.scala 217:38]
    hitFlag.a <= _T_287 @[EmbeddedTLB.scala 217:38]
    node _T_288 = bits(_T_280, 7, 7) @[EmbeddedTLB.scala 217:38]
    hitFlag.d <= _T_288 @[EmbeddedTLB.scala 217:38]
    wire hitinstrPF : UInt<1>
    hitinstrPF <= UInt<1>("h00")
    node _T_289 = eq(hitFlag.a, UInt<1>("h00")) @[EmbeddedTLB.scala 221:23]
    node _T_290 = eq(hitFlag.d, UInt<1>("h00")) @[EmbeddedTLB.scala 221:37]
    node _T_291 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_292 = and(_T_290, _T_291) @[EmbeddedTLB.scala 221:48]
    node _T_293 = or(_T_289, _T_292) @[EmbeddedTLB.scala 221:34]
    node _T_294 = and(hit, _T_293) @[EmbeddedTLB.scala 221:19]
    node _T_295 = eq(hitinstrPF, UInt<1>("h00")) @[EmbeddedTLB.scala 221:69]
    node _T_296 = and(_T_294, _T_295) @[EmbeddedTLB.scala 221:66]
    node _T_297 = or(loadPF, storePF) @[EmbeddedTLB.scala 221:93]
    node _T_298 = or(io.pf.loadPF, io.pf.storePF) @[Bundle.scala 129:23]
    node _T_299 = or(_T_297, _T_298) @[EmbeddedTLB.scala 221:104]
    node _T_300 = eq(_T_299, UInt<1>("h00")) @[EmbeddedTLB.scala 221:84]
    node hitWB = and(_T_296, _T_300) @[EmbeddedTLB.scala 221:81]
    node _T_301 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_302 = cat(_T_301, UInt<1>("h01")) @[Cat.scala 29:58]
    node _T_303 = cat(_T_302, UInt<6>("h00")) @[Cat.scala 29:58]
    node _T_304 = cat(hitFlag.r, hitFlag.v) @[EmbeddedTLB.scala 222:79]
    node _T_305 = cat(hitFlag.x, hitFlag.w) @[EmbeddedTLB.scala 222:79]
    node _T_306 = cat(_T_305, _T_304) @[EmbeddedTLB.scala 222:79]
    node _T_307 = cat(hitFlag.g, hitFlag.u) @[EmbeddedTLB.scala 222:79]
    node _T_308 = cat(hitFlag.d, hitFlag.a) @[EmbeddedTLB.scala 222:79]
    node _T_309 = cat(_T_308, _T_307) @[EmbeddedTLB.scala 222:79]
    node _T_310 = cat(_T_309, _T_306) @[EmbeddedTLB.scala 222:79]
    node hitRefillFlag = or(_T_303, _T_310) @[EmbeddedTLB.scala 222:69]
    node _T_311 = cat(UInt<2>("h00"), hitRefillFlag) @[Cat.scala 29:58]
    node _T_312 = cat(UInt<10>("h00"), hitData.ppn) @[Cat.scala 29:58]
    node _T_313 = cat(_T_312, _T_311) @[Cat.scala 29:58]
    reg hitWBStore : UInt<40>, clock @[Reg.scala 15:16]
    when hitWB : @[Reg.scala 16:19]
      hitWBStore <= _T_313 @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _T_314 = eq(io.pf.priviledgeMode, UInt<1>("h00")) @[EmbeddedTLB.scala 226:62]
    node _T_315 = eq(hitFlag.u, UInt<1>("h00")) @[EmbeddedTLB.scala 226:75]
    node _T_316 = and(_T_314, _T_315) @[EmbeddedTLB.scala 226:72]
    node _T_317 = eq(_T_316, UInt<1>("h00")) @[EmbeddedTLB.scala 226:42]
    node _T_318 = and(hit, _T_317) @[EmbeddedTLB.scala 226:39]
    node _T_319 = eq(io.pf.priviledgeMode, UInt<1>("h01")) @[EmbeddedTLB.scala 226:110]
    node _T_320 = and(_T_319, hitFlag.u) @[EmbeddedTLB.scala 226:120]
    node _T_321 = eq(io.pf.status_sum, UInt<1>("h00")) @[EmbeddedTLB.scala 226:137]
    node _T_322 = or(_T_321, UInt<1>("h00")) @[EmbeddedTLB.scala 226:152]
    node _T_323 = and(_T_320, _T_322) @[EmbeddedTLB.scala 226:133]
    node _T_324 = eq(_T_323, UInt<1>("h00")) @[EmbeddedTLB.scala 226:90]
    node hitCheck = and(_T_318, _T_324) @[EmbeddedTLB.scala 226:87]
    node hitExec = and(hitCheck, hitFlag.x) @[EmbeddedTLB.scala 227:26]
    node _T_325 = and(io.pf.status_mxr, hitFlag.x) @[EmbeddedTLB.scala 228:57]
    node _T_326 = or(hitFlag.r, _T_325) @[EmbeddedTLB.scala 228:40]
    node hitLoad = and(hitCheck, _T_326) @[EmbeddedTLB.scala 228:26]
    node hitStore = and(hitCheck, hitFlag.w) @[EmbeddedTLB.scala 229:27]
    wire isAMO : UInt<1>
    isAMO <= UInt<1>("h00")
    reg _T_327 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EmbeddedTLB.scala 236:26]
    _T_327 <= loadPF @[EmbeddedTLB.scala 236:26]
    io.pf.loadPF <= _T_327 @[EmbeddedTLB.scala 236:16]
    reg _T_328 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EmbeddedTLB.scala 237:27]
    _T_328 <= storePF @[EmbeddedTLB.scala 237:27]
    io.pf.storePF <= _T_328 @[EmbeddedTLB.scala 237:17]
    node _T_329 = eq(hitLoad, UInt<1>("h00")) @[EmbeddedTLB.scala 241:15]
    node _T_330 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_331 = eq(_T_330, UInt<1>("h00")) @[SimpleBus.scala 73:18]
    node _T_332 = bits(io.in.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_333 = eq(_T_332, UInt<1>("h00")) @[SimpleBus.scala 73:29]
    node _T_334 = and(_T_331, _T_333) @[SimpleBus.scala 73:26]
    node _T_335 = and(_T_329, _T_334) @[EmbeddedTLB.scala 241:24]
    node _T_336 = and(_T_335, hit) @[EmbeddedTLB.scala 241:40]
    node _T_337 = eq(isAMO, UInt<1>("h00")) @[EmbeddedTLB.scala 241:50]
    node _T_338 = and(_T_336, _T_337) @[EmbeddedTLB.scala 241:47]
    loadPF <= _T_338 @[EmbeddedTLB.scala 241:12]
    node _T_339 = eq(hitStore, UInt<1>("h00")) @[EmbeddedTLB.scala 242:17]
    node _T_340 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_341 = and(_T_339, _T_340) @[EmbeddedTLB.scala 242:27]
    node _T_342 = and(_T_341, hit) @[EmbeddedTLB.scala 242:44]
    node _T_343 = eq(hitLoad, UInt<1>("h00")) @[EmbeddedTLB.scala 242:56]
    node _T_344 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_345 = eq(_T_344, UInt<1>("h00")) @[SimpleBus.scala 73:18]
    node _T_346 = bits(io.in.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_347 = eq(_T_346, UInt<1>("h00")) @[SimpleBus.scala 73:29]
    node _T_348 = and(_T_345, _T_347) @[SimpleBus.scala 73:26]
    node _T_349 = and(_T_343, _T_348) @[EmbeddedTLB.scala 242:65]
    node _T_350 = and(_T_349, hit) @[EmbeddedTLB.scala 242:81]
    node _T_351 = and(_T_350, isAMO) @[EmbeddedTLB.scala 242:88]
    node _T_352 = or(_T_342, _T_351) @[EmbeddedTLB.scala 242:52]
    storePF <= _T_352 @[EmbeddedTLB.scala 242:13]
    reg state : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[EmbeddedTLB.scala 247:22]
    reg level : UInt<2>, clock with : (reset => (reset, UInt<2>("h03"))) @[EmbeddedTLB.scala 248:22]
    reg memRespStore : UInt<64>, clock @[EmbeddedTLB.scala 250:25]
    wire missMask : UInt<18>
    missMask <= UInt<18>("h03ffff")
    reg missMaskStore : UInt<18>, clock @[EmbeddedTLB.scala 252:26]
    wire missMetaRefill : UInt<1>
    missMetaRefill <= UInt<1>("h00")
    wire missRefillFlag : UInt<8>
    missRefillFlag <= UInt<8>("h00")
    wire memRdata : {reserved : UInt<34>, ppn : UInt<20>, rsw : UInt<2>, flag : {d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>}} @[EmbeddedTLB.scala 255:49]
    wire _T_353 : UInt<64>
    _T_353 <= io.mem.resp.bits.rdata
    node _T_354 = bits(_T_353, 0, 0) @[EmbeddedTLB.scala 255:49]
    memRdata.flag.v <= _T_354 @[EmbeddedTLB.scala 255:49]
    node _T_355 = bits(_T_353, 1, 1) @[EmbeddedTLB.scala 255:49]
    memRdata.flag.r <= _T_355 @[EmbeddedTLB.scala 255:49]
    node _T_356 = bits(_T_353, 2, 2) @[EmbeddedTLB.scala 255:49]
    memRdata.flag.w <= _T_356 @[EmbeddedTLB.scala 255:49]
    node _T_357 = bits(_T_353, 3, 3) @[EmbeddedTLB.scala 255:49]
    memRdata.flag.x <= _T_357 @[EmbeddedTLB.scala 255:49]
    node _T_358 = bits(_T_353, 4, 4) @[EmbeddedTLB.scala 255:49]
    memRdata.flag.u <= _T_358 @[EmbeddedTLB.scala 255:49]
    node _T_359 = bits(_T_353, 5, 5) @[EmbeddedTLB.scala 255:49]
    memRdata.flag.g <= _T_359 @[EmbeddedTLB.scala 255:49]
    node _T_360 = bits(_T_353, 6, 6) @[EmbeddedTLB.scala 255:49]
    memRdata.flag.a <= _T_360 @[EmbeddedTLB.scala 255:49]
    node _T_361 = bits(_T_353, 7, 7) @[EmbeddedTLB.scala 255:49]
    memRdata.flag.d <= _T_361 @[EmbeddedTLB.scala 255:49]
    node _T_362 = bits(_T_353, 9, 8) @[EmbeddedTLB.scala 255:49]
    memRdata.rsw <= _T_362 @[EmbeddedTLB.scala 255:49]
    node _T_363 = bits(_T_353, 29, 10) @[EmbeddedTLB.scala 255:49]
    memRdata.ppn <= _T_363 @[EmbeddedTLB.scala 255:49]
    node _T_364 = bits(_T_353, 63, 30) @[EmbeddedTLB.scala 255:49]
    memRdata.reserved <= _T_364 @[EmbeddedTLB.scala 255:49]
    reg raddr : UInt<32>, clock @[EmbeddedTLB.scala 256:18]
    node _T_365 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    reg alreadyOutFire : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Reg.scala 27:20]
    when _T_365 : @[Reg.scala 28:19]
      alreadyOutFire <= UInt<1>("h01") @[Reg.scala 28:23]
      skip @[Reg.scala 28:19]
    reg needFlush : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EmbeddedTLB.scala 260:26]
    node isFlush = or(needFlush, io.flush) @[EmbeddedTLB.scala 262:27]
    node _T_366 = neq(state, UInt<3>("h00")) @[EmbeddedTLB.scala 263:27]
    node _T_367 = and(io.flush, _T_366) @[EmbeddedTLB.scala 263:17]
    when _T_367 : @[EmbeddedTLB.scala 263:40]
      needFlush <= UInt<1>("h01") @[EmbeddedTLB.scala 263:52]
      skip @[EmbeddedTLB.scala 263:40]
    node _T_368 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_369 = and(_T_368, needFlush) @[EmbeddedTLB.scala 264:23]
    when _T_369 : @[EmbeddedTLB.scala 264:37]
      needFlush <= UInt<1>("h00") @[EmbeddedTLB.scala 264:49]
      skip @[EmbeddedTLB.scala 264:37]
    reg missIPF : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EmbeddedTLB.scala 266:24]
    node _T_370 = eq(UInt<3>("h00"), state) @[Conditional.scala 37:30]
    when _T_370 : @[Conditional.scala 40:58]
      node _T_371 = eq(io.flush, UInt<1>("h00")) @[EmbeddedTLB.scala 271:13]
      node _T_372 = and(_T_371, hitWB) @[EmbeddedTLB.scala 271:22]
      when _T_372 : @[EmbeddedTLB.scala 271:32]
        state <= UInt<3>("h03") @[EmbeddedTLB.scala 272:15]
        needFlush <= UInt<1>("h00") @[EmbeddedTLB.scala 273:19]
        alreadyOutFire <= UInt<1>("h00") @[EmbeddedTLB.scala 274:24]
        skip @[EmbeddedTLB.scala 271:32]
      else : @[EmbeddedTLB.scala 275:37]
        node _T_373 = eq(io.flush, UInt<1>("h00")) @[EmbeddedTLB.scala 275:27]
        node _T_374 = and(miss, _T_373) @[EmbeddedTLB.scala 275:24]
        when _T_374 : @[EmbeddedTLB.scala 275:37]
          state <= UInt<3>("h01") @[EmbeddedTLB.scala 276:15]
          node _T_375 = cat(satp.ppn, vpn.vpn2) @[Cat.scala 29:58]
          node _T_376 = cat(_T_375, UInt<3>("h00")) @[Cat.scala 29:58]
          raddr <= _T_376 @[EmbeddedTLB.scala 277:15]
          level <= UInt<2>("h03") @[EmbeddedTLB.scala 278:15]
          needFlush <= UInt<1>("h00") @[EmbeddedTLB.scala 279:19]
          alreadyOutFire <= UInt<1>("h00") @[EmbeddedTLB.scala 280:24]
          skip @[EmbeddedTLB.scala 275:37]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_377 = eq(UInt<3>("h01"), state) @[Conditional.scala 37:30]
      when _T_377 : @[Conditional.scala 39:67]
        when isFlush : @[EmbeddedTLB.scala 285:22]
          state <= UInt<3>("h00") @[EmbeddedTLB.scala 286:15]
          needFlush <= UInt<1>("h00") @[EmbeddedTLB.scala 287:19]
          skip @[EmbeddedTLB.scala 285:22]
        else : @[EmbeddedTLB.scala 288:38]
          node _T_378 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
          when _T_378 : @[EmbeddedTLB.scala 288:38]
            state <= UInt<3>("h02") @[EmbeddedTLB.scala 288:46]
            skip @[EmbeddedTLB.scala 288:38]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_379 = eq(UInt<3>("h02"), state) @[Conditional.scala 37:30]
        when _T_379 : @[Conditional.scala 39:67]
          wire _T_380 : {d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>} @[EmbeddedTLB.scala 292:44]
          node _T_381 = cat(memRdata.flag.r, memRdata.flag.v) @[EmbeddedTLB.scala 292:44]
          node _T_382 = cat(memRdata.flag.x, memRdata.flag.w) @[EmbeddedTLB.scala 292:44]
          node _T_383 = cat(_T_382, _T_381) @[EmbeddedTLB.scala 292:44]
          node _T_384 = cat(memRdata.flag.g, memRdata.flag.u) @[EmbeddedTLB.scala 292:44]
          node _T_385 = cat(memRdata.flag.d, memRdata.flag.a) @[EmbeddedTLB.scala 292:44]
          node _T_386 = cat(_T_385, _T_384) @[EmbeddedTLB.scala 292:44]
          node _T_387 = cat(_T_386, _T_383) @[EmbeddedTLB.scala 292:44]
          wire _T_388 : UInt<8>
          _T_388 <= _T_387
          node _T_389 = bits(_T_388, 0, 0) @[EmbeddedTLB.scala 292:44]
          _T_380.v <= _T_389 @[EmbeddedTLB.scala 292:44]
          node _T_390 = bits(_T_388, 1, 1) @[EmbeddedTLB.scala 292:44]
          _T_380.r <= _T_390 @[EmbeddedTLB.scala 292:44]
          node _T_391 = bits(_T_388, 2, 2) @[EmbeddedTLB.scala 292:44]
          _T_380.w <= _T_391 @[EmbeddedTLB.scala 292:44]
          node _T_392 = bits(_T_388, 3, 3) @[EmbeddedTLB.scala 292:44]
          _T_380.x <= _T_392 @[EmbeddedTLB.scala 292:44]
          node _T_393 = bits(_T_388, 4, 4) @[EmbeddedTLB.scala 292:44]
          _T_380.u <= _T_393 @[EmbeddedTLB.scala 292:44]
          node _T_394 = bits(_T_388, 5, 5) @[EmbeddedTLB.scala 292:44]
          _T_380.g <= _T_394 @[EmbeddedTLB.scala 292:44]
          node _T_395 = bits(_T_388, 6, 6) @[EmbeddedTLB.scala 292:44]
          _T_380.a <= _T_395 @[EmbeddedTLB.scala 292:44]
          node _T_396 = bits(_T_388, 7, 7) @[EmbeddedTLB.scala 292:44]
          _T_380.d <= _T_396 @[EmbeddedTLB.scala 292:44]
          node _T_397 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
          when _T_397 : @[EmbeddedTLB.scala 293:33]
            when isFlush : @[EmbeddedTLB.scala 294:24]
              state <= UInt<3>("h00") @[EmbeddedTLB.scala 295:17]
              needFlush <= UInt<1>("h00") @[EmbeddedTLB.scala 296:21]
              skip @[EmbeddedTLB.scala 294:24]
            else : @[EmbeddedTLB.scala 297:82]
              node _T_398 = or(_T_380.r, _T_380.x) @[EmbeddedTLB.scala 297:34]
              node _T_399 = eq(_T_398, UInt<1>("h00")) @[EmbeddedTLB.scala 297:21]
              node _T_400 = eq(level, UInt<2>("h03")) @[EmbeddedTLB.scala 297:58]
              node _T_401 = eq(level, UInt<2>("h02")) @[EmbeddedTLB.scala 297:73]
              node _T_402 = or(_T_400, _T_401) @[EmbeddedTLB.scala 297:65]
              node _T_403 = and(_T_399, _T_402) @[EmbeddedTLB.scala 297:49]
              when _T_403 : @[EmbeddedTLB.scala 297:82]
                node _T_404 = eq(_T_380.v, UInt<1>("h00")) @[EmbeddedTLB.scala 298:16]
                node _T_405 = eq(_T_380.r, UInt<1>("h00")) @[EmbeddedTLB.scala 298:32]
                node _T_406 = and(_T_405, _T_380.w) @[EmbeddedTLB.scala 298:44]
                node _T_407 = or(_T_404, _T_406) @[EmbeddedTLB.scala 298:28]
                when _T_407 : @[EmbeddedTLB.scala 298:60]
                  state <= UInt<3>("h05") @[EmbeddedTLB.scala 299:73]
                  node _T_408 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
                  node _T_409 = eq(_T_408, UInt<1>("h00")) @[SimpleBus.scala 73:18]
                  node _T_410 = bits(io.in.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
                  node _T_411 = eq(_T_410, UInt<1>("h00")) @[SimpleBus.scala 73:29]
                  node _T_412 = and(_T_409, _T_411) @[SimpleBus.scala 73:26]
                  node _T_413 = eq(isAMO, UInt<1>("h00")) @[EmbeddedTLB.scala 302:41]
                  node _T_414 = and(_T_412, _T_413) @[EmbeddedTLB.scala 302:38]
                  loadPF <= _T_414 @[EmbeddedTLB.scala 302:22]
                  node _T_415 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
                  node _T_416 = or(_T_415, isAMO) @[EmbeddedTLB.scala 303:40]
                  storePF <= _T_416 @[EmbeddedTLB.scala 303:23]
                  reg _T_417 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
                  node _T_418 = add(_T_417, UInt<1>("h01")) @[GTimer.scala 25:12]
                  node _T_419 = tail(_T_418, 1) @[GTimer.scala 25:12]
                  _T_417 <= _T_419 @[GTimer.scala 25:7]
                  wire _T_420 : UInt<1>
                  _T_420 <= UInt<1>("h00")
                  node _T_421 = and(UInt<1>("h01"), _T_420) @[Debug.scala 55:16]
                  when _T_421 : @[Debug.scala 55:31]
                    node _T_422 = asUInt(reset) @[Debug.scala 56:24]
                    node _T_423 = eq(_T_422, UInt<1>("h00")) @[Debug.scala 56:24]
                    when _T_423 : @[Debug.scala 56:24]
                      printf(clock, UInt<1>(1), "[%d] EmbeddedTLBExec_1: ", _T_417) @[Debug.scala 56:24]
                      skip @[Debug.scala 56:24]
                    node _T_424 = asUInt(reset) @[Debug.scala 57:13]
                    node _T_425 = eq(_T_424, UInt<1>("h00")) @[Debug.scala 57:13]
                    when _T_425 : @[Debug.scala 57:13]
                      printf(clock, UInt<1>(1), "tlbException!!! ") @[Debug.scala 57:13]
                      skip @[Debug.scala 57:13]
                    skip @[Debug.scala 55:31]
                  reg _T_426 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
                  node _T_427 = add(_T_426, UInt<1>("h01")) @[GTimer.scala 25:12]
                  node _T_428 = tail(_T_427, 1) @[GTimer.scala 25:12]
                  _T_426 <= _T_428 @[GTimer.scala 25:7]
                  wire _T_429 : UInt<1>
                  _T_429 <= UInt<1>("h00")
                  node _T_430 = and(UInt<1>("h01"), _T_429) @[Debug.scala 55:16]
                  when _T_430 : @[Debug.scala 55:31]
                    node _T_431 = asUInt(reset) @[Debug.scala 57:13]
                    node _T_432 = eq(_T_431, UInt<1>("h00")) @[Debug.scala 57:13]
                    when _T_432 : @[Debug.scala 57:13]
                      printf(clock, UInt<1>(1), " req:addr = 0x%x, cmd = %d, size = %d, wmask = 0x%x, wdata = 0x%x  Memreq:DecoupledIO(ready -> %d, valid -> %d, bits -> addr = 0x%x, cmd = %d, size = %d, wmask = 0x%x, wdata = 0x%x)  MemResp:DecoupledIO(ready -> %d, valid -> %d, bits -> rdata = %x, cmd = %d)", io.in.bits.addr, io.in.bits.cmd, io.in.bits.size, io.in.bits.wmask, io.in.bits.wdata, io.mem.req.ready, io.mem.req.valid, io.mem.req.bits.addr, io.mem.req.bits.cmd, io.mem.req.bits.size, io.mem.req.bits.wmask, io.mem.req.bits.wdata, io.mem.resp.ready, io.mem.resp.valid, io.mem.resp.bits.rdata, io.mem.resp.bits.cmd) @[Debug.scala 57:13]
                      skip @[Debug.scala 57:13]
                    skip @[Debug.scala 55:31]
                  reg _T_433 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
                  node _T_434 = add(_T_433, UInt<1>("h01")) @[GTimer.scala 25:12]
                  node _T_435 = tail(_T_434, 1) @[GTimer.scala 25:12]
                  _T_433 <= _T_435 @[GTimer.scala 25:7]
                  wire _T_436 : UInt<1>
                  _T_436 <= UInt<1>("h00")
                  node _T_437 = and(UInt<1>("h01"), _T_436) @[Debug.scala 55:16]
                  when _T_437 : @[Debug.scala 55:31]
                    node _T_438 = asUInt(reset) @[Debug.scala 57:13]
                    node _T_439 = eq(_T_438, UInt<1>("h00")) @[Debug.scala 57:13]
                    when _T_439 : @[Debug.scala 57:13]
                      printf(clock, UInt<1>(1), " level:%d", level) @[Debug.scala 57:13]
                      skip @[Debug.scala 57:13]
                    skip @[Debug.scala 55:31]
                  reg _T_440 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
                  node _T_441 = add(_T_440, UInt<1>("h01")) @[GTimer.scala 25:12]
                  node _T_442 = tail(_T_441, 1) @[GTimer.scala 25:12]
                  _T_440 <= _T_442 @[GTimer.scala 25:7]
                  wire _T_443 : UInt<1>
                  _T_443 <= UInt<1>("h00")
                  node _T_444 = and(UInt<1>("h01"), _T_443) @[Debug.scala 55:16]
                  when _T_444 : @[Debug.scala 55:31]
                    node _T_445 = asUInt(reset) @[Debug.scala 57:13]
                    node _T_446 = eq(_T_445, UInt<1>("h00")) @[Debug.scala 57:13]
                    when _T_446 : @[Debug.scala 57:13]
                      printf(clock, UInt<1>(1), "\n") @[Debug.scala 57:13]
                      skip @[Debug.scala 57:13]
                    skip @[Debug.scala 55:31]
                  skip @[EmbeddedTLB.scala 298:60]
                else : @[EmbeddedTLB.scala 309:23]
                  state <= UInt<3>("h01") @[EmbeddedTLB.scala 310:19]
                  node _T_447 = eq(level, UInt<2>("h03")) @[EmbeddedTLB.scala 311:57]
                  node _T_448 = mux(_T_447, vpn.vpn1, vpn.vpn0) @[EmbeddedTLB.scala 311:50]
                  node _T_449 = cat(memRdata.ppn, _T_448) @[Cat.scala 29:58]
                  node _T_450 = cat(_T_449, UInt<3>("h00")) @[Cat.scala 29:58]
                  raddr <= _T_450 @[EmbeddedTLB.scala 311:19]
                  skip @[EmbeddedTLB.scala 309:23]
                skip @[EmbeddedTLB.scala 297:82]
              else : @[EmbeddedTLB.scala 313:36]
                node _T_451 = neq(level, UInt<1>("h00")) @[EmbeddedTLB.scala 313:27]
                when _T_451 : @[EmbeddedTLB.scala 313:36]
                  node _T_452 = eq(io.pf.priviledgeMode, UInt<1>("h00")) @[EmbeddedTLB.scala 314:61]
                  node _T_453 = eq(_T_380.u, UInt<1>("h00")) @[EmbeddedTLB.scala 314:74]
                  node _T_454 = and(_T_452, _T_453) @[EmbeddedTLB.scala 314:71]
                  node _T_455 = eq(_T_454, UInt<1>("h00")) @[EmbeddedTLB.scala 314:41]
                  node _T_456 = and(_T_380.v, _T_455) @[EmbeddedTLB.scala 314:38]
                  node _T_457 = eq(io.pf.priviledgeMode, UInt<1>("h01")) @[EmbeddedTLB.scala 314:110]
                  node _T_458 = and(_T_457, _T_380.u) @[EmbeddedTLB.scala 314:120]
                  node _T_459 = eq(io.pf.status_sum, UInt<1>("h00")) @[EmbeddedTLB.scala 314:138]
                  node _T_460 = or(_T_459, UInt<1>("h00")) @[EmbeddedTLB.scala 314:153]
                  node _T_461 = and(_T_458, _T_460) @[EmbeddedTLB.scala 314:134]
                  node _T_462 = eq(_T_461, UInt<1>("h00")) @[EmbeddedTLB.scala 314:90]
                  node _T_463 = and(_T_456, _T_462) @[EmbeddedTLB.scala 314:87]
                  node _T_464 = and(_T_463, _T_380.x) @[EmbeddedTLB.scala 315:36]
                  node _T_465 = and(io.pf.status_mxr, _T_380.x) @[EmbeddedTLB.scala 316:68]
                  node _T_466 = or(_T_380.r, _T_465) @[EmbeddedTLB.scala 316:51]
                  node _T_467 = and(_T_463, _T_466) @[EmbeddedTLB.scala 316:36]
                  node _T_468 = and(_T_463, _T_380.w) @[EmbeddedTLB.scala 317:37]
                  node _T_469 = eq(_T_380.a, UInt<1>("h00")) @[EmbeddedTLB.scala 318:60]
                  node _T_470 = eq(_T_380.d, UInt<1>("h00")) @[EmbeddedTLB.scala 318:76]
                  node _T_471 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
                  node _T_472 = and(_T_470, _T_471) @[EmbeddedTLB.scala 318:88]
                  node _T_473 = or(_T_469, _T_472) @[EmbeddedTLB.scala 318:72]
                  node _T_474 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
                  node _T_475 = cat(UInt<1>("h01"), UInt<6>("h00")) @[Cat.scala 29:58]
                  node _T_476 = cat(UInt<56>("h00"), _T_474) @[Cat.scala 29:58]
                  node _T_477 = cat(_T_476, _T_475) @[Cat.scala 29:58]
                  node _T_478 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
                  node _T_479 = cat(_T_478, UInt<1>("h01")) @[Cat.scala 29:58]
                  node _T_480 = cat(_T_479, UInt<6>("h00")) @[Cat.scala 29:58]
                  node _T_481 = cat(_T_380.r, _T_380.v) @[EmbeddedTLB.scala 320:79]
                  node _T_482 = cat(_T_380.x, _T_380.w) @[EmbeddedTLB.scala 320:79]
                  node _T_483 = cat(_T_482, _T_481) @[EmbeddedTLB.scala 320:79]
                  node _T_484 = cat(_T_380.g, _T_380.u) @[EmbeddedTLB.scala 320:79]
                  node _T_485 = cat(_T_380.d, _T_380.a) @[EmbeddedTLB.scala 320:79]
                  node _T_486 = cat(_T_485, _T_484) @[EmbeddedTLB.scala 320:79]
                  node _T_487 = cat(_T_486, _T_483) @[EmbeddedTLB.scala 320:79]
                  node _T_488 = or(_T_480, _T_487) @[EmbeddedTLB.scala 320:68]
                  missRefillFlag <= _T_488 @[EmbeddedTLB.scala 320:26]
                  node _T_489 = or(io.mem.resp.bits.rdata, _T_477) @[EmbeddedTLB.scala 321:50]
                  memRespStore <= _T_489 @[EmbeddedTLB.scala 321:24]
                  node _T_490 = eq(_T_467, UInt<1>("h00")) @[EmbeddedTLB.scala 330:19]
                  node _T_491 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
                  node _T_492 = eq(_T_491, UInt<1>("h00")) @[SimpleBus.scala 73:18]
                  node _T_493 = bits(io.in.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
                  node _T_494 = eq(_T_493, UInt<1>("h00")) @[SimpleBus.scala 73:29]
                  node _T_495 = and(_T_492, _T_494) @[SimpleBus.scala 73:26]
                  node _T_496 = and(_T_490, _T_495) @[EmbeddedTLB.scala 330:29]
                  node _T_497 = eq(_T_468, UInt<1>("h00")) @[EmbeddedTLB.scala 330:50]
                  node _T_498 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
                  node _T_499 = and(_T_497, _T_498) @[EmbeddedTLB.scala 330:61]
                  node _T_500 = or(_T_496, _T_499) @[EmbeddedTLB.scala 330:46]
                  when _T_500 : @[EmbeddedTLB.scala 330:80]
                    state <= UInt<3>("h05") @[EmbeddedTLB.scala 331:21]
                    node _T_501 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
                    node _T_502 = eq(_T_501, UInt<1>("h00")) @[SimpleBus.scala 73:18]
                    node _T_503 = bits(io.in.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
                    node _T_504 = eq(_T_503, UInt<1>("h00")) @[SimpleBus.scala 73:29]
                    node _T_505 = and(_T_502, _T_504) @[SimpleBus.scala 73:26]
                    node _T_506 = eq(isAMO, UInt<1>("h00")) @[EmbeddedTLB.scala 332:41]
                    node _T_507 = and(_T_505, _T_506) @[EmbeddedTLB.scala 332:38]
                    loadPF <= _T_507 @[EmbeddedTLB.scala 332:22]
                    node _T_508 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
                    node _T_509 = or(_T_508, isAMO) @[EmbeddedTLB.scala 333:40]
                    storePF <= _T_509 @[EmbeddedTLB.scala 333:23]
                    skip @[EmbeddedTLB.scala 330:80]
                  else : @[EmbeddedTLB.scala 334:25]
                    node _T_510 = mux(_T_473, UInt<3>("h03"), UInt<3>("h04")) @[EmbeddedTLB.scala 335:27]
                    state <= _T_510 @[EmbeddedTLB.scala 335:21]
                    missMetaRefill <= UInt<1>("h01") @[EmbeddedTLB.scala 336:30]
                    skip @[EmbeddedTLB.scala 334:25]
                  node _T_511 = eq(level, UInt<2>("h03")) @[EmbeddedTLB.scala 339:32]
                  node _T_512 = eq(level, UInt<2>("h02")) @[EmbeddedTLB.scala 339:65]
                  node _T_513 = mux(_T_512, UInt<18>("h03fe00"), UInt<18>("h03ffff")) @[EmbeddedTLB.scala 339:59]
                  node _T_514 = mux(_T_511, UInt<18>("h00"), _T_513) @[EmbeddedTLB.scala 339:26]
                  missMask <= _T_514 @[EmbeddedTLB.scala 339:20]
                  missMaskStore <= missMask @[EmbeddedTLB.scala 340:25]
                  skip @[EmbeddedTLB.scala 313:36]
            node _T_515 = sub(level, UInt<1>("h01")) @[EmbeddedTLB.scala 342:24]
            node _T_516 = tail(_T_515, 1) @[EmbeddedTLB.scala 342:24]
            level <= _T_516 @[EmbeddedTLB.scala 342:15]
            skip @[EmbeddedTLB.scala 293:33]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_517 = eq(UInt<3>("h03"), state) @[Conditional.scala 37:30]
          when _T_517 : @[Conditional.scala 39:67]
            when isFlush : @[EmbeddedTLB.scala 347:22]
              state <= UInt<3>("h00") @[EmbeddedTLB.scala 348:15]
              needFlush <= UInt<1>("h00") @[EmbeddedTLB.scala 349:19]
              skip @[EmbeddedTLB.scala 347:22]
            else : @[EmbeddedTLB.scala 350:38]
              node _T_518 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
              when _T_518 : @[EmbeddedTLB.scala 350:38]
                state <= UInt<3>("h04") @[EmbeddedTLB.scala 350:46]
                skip @[EmbeddedTLB.scala 350:38]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_519 = eq(UInt<3>("h04"), state) @[Conditional.scala 37:30]
            when _T_519 : @[Conditional.scala 39:67]
              node _T_520 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
              node _T_521 = or(_T_520, io.flush) @[EmbeddedTLB.scala 353:44]
              node _T_522 = or(_T_521, alreadyOutFire) @[EmbeddedTLB.scala 353:55]
              when _T_522 : @[EmbeddedTLB.scala 353:73]
                state <= UInt<3>("h00") @[EmbeddedTLB.scala 354:13]
                missIPF <= UInt<1>("h00") @[EmbeddedTLB.scala 355:15]
                alreadyOutFire <= UInt<1>("h00") @[EmbeddedTLB.scala 356:22]
                skip @[EmbeddedTLB.scala 353:73]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_523 = eq(UInt<3>("h05"), state) @[Conditional.scala 37:30]
              when _T_523 : @[Conditional.scala 39:67]
                state <= UInt<3>("h00") @[EmbeddedTLB.scala 360:13]
                skip @[Conditional.scala 39:67]
    node _T_524 = eq(state, UInt<3>("h03")) @[EmbeddedTLB.scala 365:23]
    node cmd = mux(_T_524, UInt<1>("h01"), UInt<1>("h00")) @[EmbeddedTLB.scala 365:16]
    node _T_525 = mux(hitWB, hitData.pteaddr, raddr) @[EmbeddedTLB.scala 366:35]
    node _T_526 = mux(hitWB, hitWBStore, memRespStore) @[EmbeddedTLB.scala 366:138]
    io.mem.req.bits.addr <= _T_525 @[SimpleBus.scala 64:15]
    io.mem.req.bits.cmd <= cmd @[SimpleBus.scala 65:14]
    io.mem.req.bits.size <= UInt<2>("h03") @[SimpleBus.scala 66:15]
    io.mem.req.bits.wdata <= _T_526 @[SimpleBus.scala 67:16]
    io.mem.req.bits.wmask <= UInt<8>("h0ff") @[SimpleBus.scala 68:16]
    node _T_527 = eq(state, UInt<3>("h01")) @[EmbeddedTLB.scala 367:31]
    node _T_528 = eq(state, UInt<3>("h03")) @[EmbeddedTLB.scala 367:57]
    node _T_529 = or(_T_527, _T_528) @[EmbeddedTLB.scala 367:48]
    node _T_530 = eq(isFlush, UInt<1>("h00")) @[EmbeddedTLB.scala 367:77]
    node _T_531 = and(_T_529, _T_530) @[EmbeddedTLB.scala 367:74]
    io.mem.req.valid <= _T_531 @[EmbeddedTLB.scala 367:20]
    io.mem.resp.ready <= UInt<1>("h01") @[EmbeddedTLB.scala 368:21]
    node _T_532 = eq(isFlush, UInt<1>("h00")) @[EmbeddedTLB.scala 371:53]
    node _T_533 = and(missMetaRefill, _T_532) @[EmbeddedTLB.scala 371:50]
    node _T_534 = eq(state, UInt<3>("h00")) @[EmbeddedTLB.scala 371:82]
    node _T_535 = and(hitWB, _T_534) @[EmbeddedTLB.scala 371:73]
    node _T_536 = eq(isFlush, UInt<1>("h00")) @[EmbeddedTLB.scala 371:96]
    node _T_537 = and(_T_535, _T_536) @[EmbeddedTLB.scala 371:93]
    node _T_538 = or(_T_533, _T_537) @[EmbeddedTLB.scala 371:63]
    reg _T_539 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EmbeddedTLB.scala 371:33]
    _T_539 <= _T_538 @[EmbeddedTLB.scala 371:33]
    wire _T_540 : {tag : UInt<23>, index : UInt<4>, off : UInt<12>} @[TLB.scala 200:19]
    wire _T_541 : UInt<39>
    _T_541 <= io.in.bits.addr
    node _T_542 = bits(_T_541, 11, 0) @[TLB.scala 200:19]
    _T_540.off <= _T_542 @[TLB.scala 200:19]
    node _T_543 = bits(_T_541, 15, 12) @[TLB.scala 200:19]
    _T_540.index <= _T_543 @[TLB.scala 200:19]
    node _T_544 = bits(_T_541, 38, 16) @[TLB.scala 200:19]
    _T_540.tag <= _T_544 @[TLB.scala 200:19]
    reg _T_545 : UInt, clock @[EmbeddedTLB.scala 372:21]
    _T_545 <= _T_540.index @[EmbeddedTLB.scala 372:21]
    reg _T_546 : UInt, clock @[EmbeddedTLB.scala 372:60]
    _T_546 <= waymask @[EmbeddedTLB.scala 372:60]
    node _T_547 = cat(vpn.vpn2, vpn.vpn1) @[EmbeddedTLB.scala 372:89]
    node _T_548 = cat(_T_547, vpn.vpn0) @[EmbeddedTLB.scala 372:89]
    reg _T_549 : UInt, clock @[EmbeddedTLB.scala 372:84]
    _T_549 <= _T_548 @[EmbeddedTLB.scala 372:84]
    node _T_550 = mux(hitWB, hitMeta.asid, satp.asid) @[EmbeddedTLB.scala 373:23]
    reg _T_551 : UInt, clock @[EmbeddedTLB.scala 373:19]
    _T_551 <= _T_550 @[EmbeddedTLB.scala 373:19]
    node _T_552 = mux(hitWB, hitMeta.mask, missMask) @[EmbeddedTLB.scala 373:76]
    reg _T_553 : UInt, clock @[EmbeddedTLB.scala 373:72]
    _T_553 <= _T_552 @[EmbeddedTLB.scala 373:72]
    node _T_554 = mux(hitWB, hitRefillFlag, missRefillFlag) @[EmbeddedTLB.scala 374:23]
    reg _T_555 : UInt, clock @[EmbeddedTLB.scala 374:19]
    _T_555 <= _T_554 @[EmbeddedTLB.scala 374:19]
    node _T_556 = mux(hitWB, hitData.ppn, memRdata.ppn) @[EmbeddedTLB.scala 374:81]
    reg _T_557 : UInt, clock @[EmbeddedTLB.scala 374:77]
    _T_557 <= _T_556 @[EmbeddedTLB.scala 374:77]
    node _T_558 = mux(hitWB, hitData.pteaddr, raddr) @[EmbeddedTLB.scala 375:27]
    reg _T_559 : UInt, clock @[EmbeddedTLB.scala 375:22]
    _T_559 <= _T_558 @[EmbeddedTLB.scala 375:22]
    io.mdWrite.wen <= _T_539 @[TLB.scala 214:14]
    io.mdWrite.windex <= _T_545 @[TLB.scala 215:17]
    io.mdWrite.waymask <= _T_546 @[TLB.scala 216:18]
    node _T_560 = cat(_T_555, _T_557) @[Cat.scala 29:58]
    node _T_561 = cat(_T_560, _T_559) @[Cat.scala 29:58]
    node _T_562 = cat(_T_549, _T_551) @[Cat.scala 29:58]
    node _T_563 = cat(_T_562, _T_553) @[Cat.scala 29:58]
    node _T_564 = cat(_T_563, _T_561) @[Cat.scala 29:58]
    io.mdWrite.wdata <= _T_564 @[TLB.scala 217:16]
    io.out.bits.wdata <= io.in.bits.wdata @[EmbeddedTLB.scala 378:15]
    io.out.bits.wmask <= io.in.bits.wmask @[EmbeddedTLB.scala 378:15]
    io.out.bits.cmd <= io.in.bits.cmd @[EmbeddedTLB.scala 378:15]
    io.out.bits.size <= io.in.bits.size @[EmbeddedTLB.scala 378:15]
    io.out.bits.addr <= io.in.bits.addr @[EmbeddedTLB.scala 378:15]
    node _T_565 = bits(io.in.bits.addr, 31, 0) @[EmbeddedTLB.scala 379:63]
    node _T_566 = cat(hitData.ppn, UInt<12>("h00")) @[Cat.scala 29:58]
    node _T_567 = mux(UInt<1>("h01"), UInt<2>("h03"), UInt<2>("h00")) @[Bitwise.scala 72:12]
    node _T_568 = cat(_T_567, hitMeta.mask) @[Cat.scala 29:58]
    node _T_569 = cat(_T_568, UInt<12>("h00")) @[Cat.scala 29:58]
    node _T_570 = and(_T_566, _T_569) @[BitUtils.scala 32:13]
    node _T_571 = not(_T_569) @[BitUtils.scala 32:38]
    node _T_572 = and(_T_565, _T_571) @[BitUtils.scala 32:36]
    node _T_573 = or(_T_570, _T_572) @[BitUtils.scala 32:25]
    wire _T_574 : {reserved : UInt<34>, ppn : UInt<20>, rsw : UInt<2>, flag : {d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>}} @[EmbeddedTLB.scala 379:122]
    wire _T_575 : UInt<64>
    _T_575 <= memRespStore
    node _T_576 = bits(_T_575, 0, 0) @[EmbeddedTLB.scala 379:122]
    _T_574.flag.v <= _T_576 @[EmbeddedTLB.scala 379:122]
    node _T_577 = bits(_T_575, 1, 1) @[EmbeddedTLB.scala 379:122]
    _T_574.flag.r <= _T_577 @[EmbeddedTLB.scala 379:122]
    node _T_578 = bits(_T_575, 2, 2) @[EmbeddedTLB.scala 379:122]
    _T_574.flag.w <= _T_578 @[EmbeddedTLB.scala 379:122]
    node _T_579 = bits(_T_575, 3, 3) @[EmbeddedTLB.scala 379:122]
    _T_574.flag.x <= _T_579 @[EmbeddedTLB.scala 379:122]
    node _T_580 = bits(_T_575, 4, 4) @[EmbeddedTLB.scala 379:122]
    _T_574.flag.u <= _T_580 @[EmbeddedTLB.scala 379:122]
    node _T_581 = bits(_T_575, 5, 5) @[EmbeddedTLB.scala 379:122]
    _T_574.flag.g <= _T_581 @[EmbeddedTLB.scala 379:122]
    node _T_582 = bits(_T_575, 6, 6) @[EmbeddedTLB.scala 379:122]
    _T_574.flag.a <= _T_582 @[EmbeddedTLB.scala 379:122]
    node _T_583 = bits(_T_575, 7, 7) @[EmbeddedTLB.scala 379:122]
    _T_574.flag.d <= _T_583 @[EmbeddedTLB.scala 379:122]
    node _T_584 = bits(_T_575, 9, 8) @[EmbeddedTLB.scala 379:122]
    _T_574.rsw <= _T_584 @[EmbeddedTLB.scala 379:122]
    node _T_585 = bits(_T_575, 29, 10) @[EmbeddedTLB.scala 379:122]
    _T_574.ppn <= _T_585 @[EmbeddedTLB.scala 379:122]
    node _T_586 = bits(_T_575, 63, 30) @[EmbeddedTLB.scala 379:122]
    _T_574.reserved <= _T_586 @[EmbeddedTLB.scala 379:122]
    node _T_587 = bits(io.in.bits.addr, 31, 0) @[EmbeddedTLB.scala 379:147]
    node _T_588 = cat(_T_574.ppn, UInt<12>("h00")) @[Cat.scala 29:58]
    node _T_589 = mux(UInt<1>("h01"), UInt<2>("h03"), UInt<2>("h00")) @[Bitwise.scala 72:12]
    node _T_590 = cat(_T_589, missMaskStore) @[Cat.scala 29:58]
    node _T_591 = cat(_T_590, UInt<12>("h00")) @[Cat.scala 29:58]
    node _T_592 = and(_T_588, _T_591) @[BitUtils.scala 32:13]
    node _T_593 = not(_T_591) @[BitUtils.scala 32:38]
    node _T_594 = and(_T_587, _T_593) @[BitUtils.scala 32:36]
    node _T_595 = or(_T_592, _T_594) @[BitUtils.scala 32:25]
    node _T_596 = mux(hit, _T_573, _T_595) @[EmbeddedTLB.scala 379:26]
    io.out.bits.addr <= _T_596 @[EmbeddedTLB.scala 379:20]
    node _T_597 = eq(hitWB, UInt<1>("h00")) @[EmbeddedTLB.scala 380:45]
    node _T_598 = and(hit, _T_597) @[EmbeddedTLB.scala 380:42]
    node _T_599 = or(io.pf.loadPF, io.pf.storePF) @[Bundle.scala 129:23]
    node _T_600 = or(_T_599, loadPF) @[EmbeddedTLB.scala 380:68]
    node _T_601 = or(_T_600, storePF) @[EmbeddedTLB.scala 380:78]
    node _T_602 = eq(_T_601, UInt<1>("h00")) @[EmbeddedTLB.scala 380:53]
    node _T_603 = eq(state, UInt<3>("h04")) @[EmbeddedTLB.scala 380:97]
    node _T_604 = mux(_T_598, _T_602, _T_603) @[EmbeddedTLB.scala 380:37]
    node _T_605 = and(io.in.valid, _T_604) @[EmbeddedTLB.scala 380:31]
    io.out.valid <= _T_605 @[EmbeddedTLB.scala 380:16]
    node _T_606 = eq(state, UInt<3>("h00")) @[EmbeddedTLB.scala 382:41]
    node _T_607 = and(io.out.ready, _T_606) @[EmbeddedTLB.scala 382:31]
    node _T_608 = eq(miss, UInt<1>("h00")) @[EmbeddedTLB.scala 382:56]
    node _T_609 = and(_T_607, _T_608) @[EmbeddedTLB.scala 382:53]
    node _T_610 = eq(hitWB, UInt<1>("h00")) @[EmbeddedTLB.scala 382:65]
    node _T_611 = and(_T_609, _T_610) @[EmbeddedTLB.scala 382:62]
    node _T_612 = and(_T_611, io.mdReady) @[EmbeddedTLB.scala 382:72]
    node _T_613 = or(io.pf.loadPF, io.pf.storePF) @[Bundle.scala 129:23]
    node _T_614 = eq(_T_613, UInt<1>("h00")) @[EmbeddedTLB.scala 382:90]
    node _T_615 = eq(loadPF, UInt<1>("h00")) @[EmbeddedTLB.scala 382:107]
    node _T_616 = and(_T_614, _T_615) @[EmbeddedTLB.scala 382:104]
    node _T_617 = eq(storePF, UInt<1>("h00")) @[EmbeddedTLB.scala 382:118]
    node _T_618 = and(_T_616, _T_617) @[EmbeddedTLB.scala 382:115]
    node _T_619 = and(_T_612, _T_618) @[EmbeddedTLB.scala 382:86]
    io.in.ready <= _T_619 @[EmbeddedTLB.scala 382:15]
    node _T_620 = mux(hit, hitinstrPF, missIPF) @[EmbeddedTLB.scala 384:16]
    io.ipf <= _T_620 @[EmbeddedTLB.scala 384:10]
    node _T_621 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_622 = or(io.pf.loadPF, io.pf.storePF) @[Bundle.scala 129:23]
    node _T_623 = or(_T_621, _T_622) @[EmbeddedTLB.scala 385:32]
    io.isFinish <= _T_623 @[EmbeddedTLB.scala 385:15]
    reg _T_624 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_625 = add(_T_624, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_626 = tail(_T_625, 1) @[GTimer.scala 25:12]
    _T_624 <= _T_626 @[GTimer.scala 25:7]
    wire _T_627 : UInt<1>
    _T_627 <= UInt<1>("h00")
    node _T_628 = and(UInt<1>("h01"), _T_627) @[Debug.scala 55:16]
    when _T_628 : @[Debug.scala 55:31]
      node _T_629 = asUInt(reset) @[Debug.scala 56:24]
      node _T_630 = eq(_T_629, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_630 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] EmbeddedTLBExec_1: ", _T_624) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_631 = asUInt(reset) @[Debug.scala 57:13]
      node _T_632 = eq(_T_631, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_632 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "In(%d, %d) Out(%d, %d) InAddr:%x OutAddr:%x cmd:%d \n", io.in.valid, io.in.ready, io.out.valid, io.out.ready, io.in.bits.addr, io.out.bits.addr, io.in.bits.cmd) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    reg _T_633 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_634 = add(_T_633, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_635 = tail(_T_634, 1) @[GTimer.scala 25:12]
    _T_633 <= _T_635 @[GTimer.scala 25:7]
    wire _T_636 : UInt<1>
    _T_636 <= UInt<1>("h00")
    node _T_637 = and(UInt<1>("h01"), _T_636) @[Debug.scala 55:16]
    when _T_637 : @[Debug.scala 55:31]
      node _T_638 = asUInt(reset) @[Debug.scala 56:24]
      node _T_639 = eq(_T_638, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_639 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] EmbeddedTLBExec_1: ", _T_633) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_640 = asUInt(reset) @[Debug.scala 57:13]
      node _T_641 = eq(_T_640, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_641 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "isAMO:%d io.Flush:%d needFlush:%d alreadyOutFire:%d isFinish:%d\n", isAMO, io.flush, needFlush, alreadyOutFire, io.isFinish) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_642 = cat(hitFlag.r, hitFlag.v) @[EmbeddedTLB.scala 389:171]
    node _T_643 = cat(hitFlag.x, hitFlag.w) @[EmbeddedTLB.scala 389:171]
    node _T_644 = cat(_T_643, _T_642) @[EmbeddedTLB.scala 389:171]
    node _T_645 = cat(hitFlag.g, hitFlag.u) @[EmbeddedTLB.scala 389:171]
    node _T_646 = cat(hitFlag.d, hitFlag.a) @[EmbeddedTLB.scala 389:171]
    node _T_647 = cat(_T_646, _T_645) @[EmbeddedTLB.scala 389:171]
    node _T_648 = cat(_T_647, _T_644) @[EmbeddedTLB.scala 389:171]
    reg _T_649 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_650 = add(_T_649, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_651 = tail(_T_650, 1) @[GTimer.scala 25:12]
    _T_649 <= _T_651 @[GTimer.scala 25:7]
    wire _T_652 : UInt<1>
    _T_652 <= UInt<1>("h00")
    node _T_653 = and(UInt<1>("h01"), _T_652) @[Debug.scala 55:16]
    when _T_653 : @[Debug.scala 55:31]
      node _T_654 = asUInt(reset) @[Debug.scala 56:24]
      node _T_655 = eq(_T_654, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_655 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] EmbeddedTLBExec_1: ", _T_649) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_656 = asUInt(reset) @[Debug.scala 57:13]
      node _T_657 = eq(_T_656, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_657 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "hit:%d hitWB:%d hitVPN:%x hitFlag:%x hitPPN:%x hitRefillFlag:%x hitWBStore:%x hitCheck:%d hitExec:%d hitLoad:%d hitStore:%d\n", hit, hitWB, hitMeta.vpn, _T_648, hitData.ppn, hitRefillFlag, hitWBStore, hitCheck, hitExec, hitLoad, hitStore) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_658 = cat(memRdata.flag.r, memRdata.flag.v) @[EmbeddedTLB.scala 390:145]
    node _T_659 = cat(memRdata.flag.u, memRdata.flag.x) @[EmbeddedTLB.scala 390:145]
    node _T_660 = cat(_T_659, memRdata.flag.w) @[EmbeddedTLB.scala 390:145]
    node _T_661 = cat(_T_660, _T_658) @[EmbeddedTLB.scala 390:145]
    node _T_662 = cat(memRdata.flag.d, memRdata.flag.a) @[EmbeddedTLB.scala 390:145]
    node _T_663 = cat(_T_662, memRdata.flag.g) @[EmbeddedTLB.scala 390:145]
    node _T_664 = cat(memRdata.reserved, memRdata.ppn) @[EmbeddedTLB.scala 390:145]
    node _T_665 = cat(_T_664, memRdata.rsw) @[EmbeddedTLB.scala 390:145]
    node _T_666 = cat(_T_665, _T_663) @[EmbeddedTLB.scala 390:145]
    node _T_667 = cat(_T_666, _T_661) @[EmbeddedTLB.scala 390:145]
    reg _T_668 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_669 = add(_T_668, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_670 = tail(_T_669, 1) @[GTimer.scala 25:12]
    _T_668 <= _T_670 @[GTimer.scala 25:7]
    wire _T_671 : UInt<1>
    _T_671 <= UInt<1>("h00")
    node _T_672 = and(UInt<1>("h01"), _T_671) @[Debug.scala 55:16]
    when _T_672 : @[Debug.scala 55:31]
      node _T_673 = asUInt(reset) @[Debug.scala 56:24]
      node _T_674 = eq(_T_673, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_674 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] EmbeddedTLBExec_1: ", _T_668) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_675 = asUInt(reset) @[Debug.scala 57:13]
      node _T_676 = eq(_T_675, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_676 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "miss:%d state:%d level:%d raddr:%x memRdata:%x missMask:%x missRefillFlag:%x missMetaRefill:%d\n", miss, state, level, raddr, _T_667, missMask, missRefillFlag, missMetaRefill) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    wire _T_677 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 391:96]
    wire _T_678 : UInt<121>
    _T_678 <= io.md[0]
    node _T_679 = bits(_T_678, 31, 0) @[EmbeddedTLB.scala 391:96]
    _T_677.pteaddr <= _T_679 @[EmbeddedTLB.scala 391:96]
    node _T_680 = bits(_T_678, 51, 32) @[EmbeddedTLB.scala 391:96]
    _T_677.ppn <= _T_680 @[EmbeddedTLB.scala 391:96]
    node _T_681 = bits(_T_678, 59, 52) @[EmbeddedTLB.scala 391:96]
    _T_677.flag <= _T_681 @[EmbeddedTLB.scala 391:96]
    node _T_682 = bits(_T_678, 77, 60) @[EmbeddedTLB.scala 391:96]
    _T_677.mask <= _T_682 @[EmbeddedTLB.scala 391:96]
    node _T_683 = bits(_T_678, 93, 78) @[EmbeddedTLB.scala 391:96]
    _T_677.asid <= _T_683 @[EmbeddedTLB.scala 391:96]
    node _T_684 = bits(_T_678, 120, 94) @[EmbeddedTLB.scala 391:96]
    _T_677.vpn <= _T_684 @[EmbeddedTLB.scala 391:96]
    wire _T_685 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 391:127]
    wire _T_686 : UInt<121>
    _T_686 <= io.md[0]
    node _T_687 = bits(_T_686, 31, 0) @[EmbeddedTLB.scala 391:127]
    _T_685.pteaddr <= _T_687 @[EmbeddedTLB.scala 391:127]
    node _T_688 = bits(_T_686, 51, 32) @[EmbeddedTLB.scala 391:127]
    _T_685.ppn <= _T_688 @[EmbeddedTLB.scala 391:127]
    node _T_689 = bits(_T_686, 59, 52) @[EmbeddedTLB.scala 391:127]
    _T_685.flag <= _T_689 @[EmbeddedTLB.scala 391:127]
    node _T_690 = bits(_T_686, 77, 60) @[EmbeddedTLB.scala 391:127]
    _T_685.mask <= _T_690 @[EmbeddedTLB.scala 391:127]
    node _T_691 = bits(_T_686, 93, 78) @[EmbeddedTLB.scala 391:127]
    _T_685.asid <= _T_691 @[EmbeddedTLB.scala 391:127]
    node _T_692 = bits(_T_686, 120, 94) @[EmbeddedTLB.scala 391:127]
    _T_685.vpn <= _T_692 @[EmbeddedTLB.scala 391:127]
    wire _T_693 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 391:159]
    wire _T_694 : UInt<121>
    _T_694 <= io.md[0]
    node _T_695 = bits(_T_694, 31, 0) @[EmbeddedTLB.scala 391:159]
    _T_693.pteaddr <= _T_695 @[EmbeddedTLB.scala 391:159]
    node _T_696 = bits(_T_694, 51, 32) @[EmbeddedTLB.scala 391:159]
    _T_693.ppn <= _T_696 @[EmbeddedTLB.scala 391:159]
    node _T_697 = bits(_T_694, 59, 52) @[EmbeddedTLB.scala 391:159]
    _T_693.flag <= _T_697 @[EmbeddedTLB.scala 391:159]
    node _T_698 = bits(_T_694, 77, 60) @[EmbeddedTLB.scala 391:159]
    _T_693.mask <= _T_698 @[EmbeddedTLB.scala 391:159]
    node _T_699 = bits(_T_694, 93, 78) @[EmbeddedTLB.scala 391:159]
    _T_693.asid <= _T_699 @[EmbeddedTLB.scala 391:159]
    node _T_700 = bits(_T_694, 120, 94) @[EmbeddedTLB.scala 391:159]
    _T_693.vpn <= _T_700 @[EmbeddedTLB.scala 391:159]
    wire _T_701 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 391:190]
    wire _T_702 : UInt<121>
    _T_702 <= io.md[1]
    node _T_703 = bits(_T_702, 31, 0) @[EmbeddedTLB.scala 391:190]
    _T_701.pteaddr <= _T_703 @[EmbeddedTLB.scala 391:190]
    node _T_704 = bits(_T_702, 51, 32) @[EmbeddedTLB.scala 391:190]
    _T_701.ppn <= _T_704 @[EmbeddedTLB.scala 391:190]
    node _T_705 = bits(_T_702, 59, 52) @[EmbeddedTLB.scala 391:190]
    _T_701.flag <= _T_705 @[EmbeddedTLB.scala 391:190]
    node _T_706 = bits(_T_702, 77, 60) @[EmbeddedTLB.scala 391:190]
    _T_701.mask <= _T_706 @[EmbeddedTLB.scala 391:190]
    node _T_707 = bits(_T_702, 93, 78) @[EmbeddedTLB.scala 391:190]
    _T_701.asid <= _T_707 @[EmbeddedTLB.scala 391:190]
    node _T_708 = bits(_T_702, 120, 94) @[EmbeddedTLB.scala 391:190]
    _T_701.vpn <= _T_708 @[EmbeddedTLB.scala 391:190]
    wire _T_709 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 391:221]
    wire _T_710 : UInt<121>
    _T_710 <= io.md[1]
    node _T_711 = bits(_T_710, 31, 0) @[EmbeddedTLB.scala 391:221]
    _T_709.pteaddr <= _T_711 @[EmbeddedTLB.scala 391:221]
    node _T_712 = bits(_T_710, 51, 32) @[EmbeddedTLB.scala 391:221]
    _T_709.ppn <= _T_712 @[EmbeddedTLB.scala 391:221]
    node _T_713 = bits(_T_710, 59, 52) @[EmbeddedTLB.scala 391:221]
    _T_709.flag <= _T_713 @[EmbeddedTLB.scala 391:221]
    node _T_714 = bits(_T_710, 77, 60) @[EmbeddedTLB.scala 391:221]
    _T_709.mask <= _T_714 @[EmbeddedTLB.scala 391:221]
    node _T_715 = bits(_T_710, 93, 78) @[EmbeddedTLB.scala 391:221]
    _T_709.asid <= _T_715 @[EmbeddedTLB.scala 391:221]
    node _T_716 = bits(_T_710, 120, 94) @[EmbeddedTLB.scala 391:221]
    _T_709.vpn <= _T_716 @[EmbeddedTLB.scala 391:221]
    wire _T_717 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 391:253]
    wire _T_718 : UInt<121>
    _T_718 <= io.md[1]
    node _T_719 = bits(_T_718, 31, 0) @[EmbeddedTLB.scala 391:253]
    _T_717.pteaddr <= _T_719 @[EmbeddedTLB.scala 391:253]
    node _T_720 = bits(_T_718, 51, 32) @[EmbeddedTLB.scala 391:253]
    _T_717.ppn <= _T_720 @[EmbeddedTLB.scala 391:253]
    node _T_721 = bits(_T_718, 59, 52) @[EmbeddedTLB.scala 391:253]
    _T_717.flag <= _T_721 @[EmbeddedTLB.scala 391:253]
    node _T_722 = bits(_T_718, 77, 60) @[EmbeddedTLB.scala 391:253]
    _T_717.mask <= _T_722 @[EmbeddedTLB.scala 391:253]
    node _T_723 = bits(_T_718, 93, 78) @[EmbeddedTLB.scala 391:253]
    _T_717.asid <= _T_723 @[EmbeddedTLB.scala 391:253]
    node _T_724 = bits(_T_718, 120, 94) @[EmbeddedTLB.scala 391:253]
    _T_717.vpn <= _T_724 @[EmbeddedTLB.scala 391:253]
    wire _T_725 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 391:284]
    wire _T_726 : UInt<121>
    _T_726 <= io.md[2]
    node _T_727 = bits(_T_726, 31, 0) @[EmbeddedTLB.scala 391:284]
    _T_725.pteaddr <= _T_727 @[EmbeddedTLB.scala 391:284]
    node _T_728 = bits(_T_726, 51, 32) @[EmbeddedTLB.scala 391:284]
    _T_725.ppn <= _T_728 @[EmbeddedTLB.scala 391:284]
    node _T_729 = bits(_T_726, 59, 52) @[EmbeddedTLB.scala 391:284]
    _T_725.flag <= _T_729 @[EmbeddedTLB.scala 391:284]
    node _T_730 = bits(_T_726, 77, 60) @[EmbeddedTLB.scala 391:284]
    _T_725.mask <= _T_730 @[EmbeddedTLB.scala 391:284]
    node _T_731 = bits(_T_726, 93, 78) @[EmbeddedTLB.scala 391:284]
    _T_725.asid <= _T_731 @[EmbeddedTLB.scala 391:284]
    node _T_732 = bits(_T_726, 120, 94) @[EmbeddedTLB.scala 391:284]
    _T_725.vpn <= _T_732 @[EmbeddedTLB.scala 391:284]
    wire _T_733 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 391:315]
    wire _T_734 : UInt<121>
    _T_734 <= io.md[2]
    node _T_735 = bits(_T_734, 31, 0) @[EmbeddedTLB.scala 391:315]
    _T_733.pteaddr <= _T_735 @[EmbeddedTLB.scala 391:315]
    node _T_736 = bits(_T_734, 51, 32) @[EmbeddedTLB.scala 391:315]
    _T_733.ppn <= _T_736 @[EmbeddedTLB.scala 391:315]
    node _T_737 = bits(_T_734, 59, 52) @[EmbeddedTLB.scala 391:315]
    _T_733.flag <= _T_737 @[EmbeddedTLB.scala 391:315]
    node _T_738 = bits(_T_734, 77, 60) @[EmbeddedTLB.scala 391:315]
    _T_733.mask <= _T_738 @[EmbeddedTLB.scala 391:315]
    node _T_739 = bits(_T_734, 93, 78) @[EmbeddedTLB.scala 391:315]
    _T_733.asid <= _T_739 @[EmbeddedTLB.scala 391:315]
    node _T_740 = bits(_T_734, 120, 94) @[EmbeddedTLB.scala 391:315]
    _T_733.vpn <= _T_740 @[EmbeddedTLB.scala 391:315]
    wire _T_741 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 391:347]
    wire _T_742 : UInt<121>
    _T_742 <= io.md[2]
    node _T_743 = bits(_T_742, 31, 0) @[EmbeddedTLB.scala 391:347]
    _T_741.pteaddr <= _T_743 @[EmbeddedTLB.scala 391:347]
    node _T_744 = bits(_T_742, 51, 32) @[EmbeddedTLB.scala 391:347]
    _T_741.ppn <= _T_744 @[EmbeddedTLB.scala 391:347]
    node _T_745 = bits(_T_742, 59, 52) @[EmbeddedTLB.scala 391:347]
    _T_741.flag <= _T_745 @[EmbeddedTLB.scala 391:347]
    node _T_746 = bits(_T_742, 77, 60) @[EmbeddedTLB.scala 391:347]
    _T_741.mask <= _T_746 @[EmbeddedTLB.scala 391:347]
    node _T_747 = bits(_T_742, 93, 78) @[EmbeddedTLB.scala 391:347]
    _T_741.asid <= _T_747 @[EmbeddedTLB.scala 391:347]
    node _T_748 = bits(_T_742, 120, 94) @[EmbeddedTLB.scala 391:347]
    _T_741.vpn <= _T_748 @[EmbeddedTLB.scala 391:347]
    wire _T_749 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 391:378]
    wire _T_750 : UInt<121>
    _T_750 <= io.md[3]
    node _T_751 = bits(_T_750, 31, 0) @[EmbeddedTLB.scala 391:378]
    _T_749.pteaddr <= _T_751 @[EmbeddedTLB.scala 391:378]
    node _T_752 = bits(_T_750, 51, 32) @[EmbeddedTLB.scala 391:378]
    _T_749.ppn <= _T_752 @[EmbeddedTLB.scala 391:378]
    node _T_753 = bits(_T_750, 59, 52) @[EmbeddedTLB.scala 391:378]
    _T_749.flag <= _T_753 @[EmbeddedTLB.scala 391:378]
    node _T_754 = bits(_T_750, 77, 60) @[EmbeddedTLB.scala 391:378]
    _T_749.mask <= _T_754 @[EmbeddedTLB.scala 391:378]
    node _T_755 = bits(_T_750, 93, 78) @[EmbeddedTLB.scala 391:378]
    _T_749.asid <= _T_755 @[EmbeddedTLB.scala 391:378]
    node _T_756 = bits(_T_750, 120, 94) @[EmbeddedTLB.scala 391:378]
    _T_749.vpn <= _T_756 @[EmbeddedTLB.scala 391:378]
    wire _T_757 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 391:409]
    wire _T_758 : UInt<121>
    _T_758 <= io.md[3]
    node _T_759 = bits(_T_758, 31, 0) @[EmbeddedTLB.scala 391:409]
    _T_757.pteaddr <= _T_759 @[EmbeddedTLB.scala 391:409]
    node _T_760 = bits(_T_758, 51, 32) @[EmbeddedTLB.scala 391:409]
    _T_757.ppn <= _T_760 @[EmbeddedTLB.scala 391:409]
    node _T_761 = bits(_T_758, 59, 52) @[EmbeddedTLB.scala 391:409]
    _T_757.flag <= _T_761 @[EmbeddedTLB.scala 391:409]
    node _T_762 = bits(_T_758, 77, 60) @[EmbeddedTLB.scala 391:409]
    _T_757.mask <= _T_762 @[EmbeddedTLB.scala 391:409]
    node _T_763 = bits(_T_758, 93, 78) @[EmbeddedTLB.scala 391:409]
    _T_757.asid <= _T_763 @[EmbeddedTLB.scala 391:409]
    node _T_764 = bits(_T_758, 120, 94) @[EmbeddedTLB.scala 391:409]
    _T_757.vpn <= _T_764 @[EmbeddedTLB.scala 391:409]
    wire _T_765 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 391:441]
    wire _T_766 : UInt<121>
    _T_766 <= io.md[3]
    node _T_767 = bits(_T_766, 31, 0) @[EmbeddedTLB.scala 391:441]
    _T_765.pteaddr <= _T_767 @[EmbeddedTLB.scala 391:441]
    node _T_768 = bits(_T_766, 51, 32) @[EmbeddedTLB.scala 391:441]
    _T_765.ppn <= _T_768 @[EmbeddedTLB.scala 391:441]
    node _T_769 = bits(_T_766, 59, 52) @[EmbeddedTLB.scala 391:441]
    _T_765.flag <= _T_769 @[EmbeddedTLB.scala 391:441]
    node _T_770 = bits(_T_766, 77, 60) @[EmbeddedTLB.scala 391:441]
    _T_765.mask <= _T_770 @[EmbeddedTLB.scala 391:441]
    node _T_771 = bits(_T_766, 93, 78) @[EmbeddedTLB.scala 391:441]
    _T_765.asid <= _T_771 @[EmbeddedTLB.scala 391:441]
    node _T_772 = bits(_T_766, 120, 94) @[EmbeddedTLB.scala 391:441]
    _T_765.vpn <= _T_772 @[EmbeddedTLB.scala 391:441]
    reg _T_773 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_774 = add(_T_773, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_775 = tail(_T_774, 1) @[GTimer.scala 25:12]
    _T_773 <= _T_775 @[GTimer.scala 25:7]
    wire _T_776 : UInt<1>
    _T_776 <= UInt<1>("h00")
    node _T_777 = and(UInt<1>("h01"), _T_776) @[Debug.scala 55:16]
    when _T_777 : @[Debug.scala 55:31]
      node _T_778 = asUInt(reset) @[Debug.scala 56:24]
      node _T_779 = eq(_T_778, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_779 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] EmbeddedTLBExec_1: ", _T_773) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_780 = asUInt(reset) @[Debug.scala 57:13]
      node _T_781 = eq(_T_780, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_781 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "meta/data: (0)%x|%b|%x (1)%x|%b|%x (2)%x|%b|%x (3)%x|%b|%x rread:%d\n", _T_677.vpn, _T_685.flag, _T_693.ppn, _T_701.vpn, _T_709.flag, _T_717.ppn, _T_725.vpn, _T_733.flag, _T_741.ppn, _T_749.vpn, _T_757.flag, _T_765.ppn, io.mdReady) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    wire _T_782 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 392:183]
    wire _T_783 : UInt<121>
    _T_783 <= io.mdWrite.wdata
    node _T_784 = bits(_T_783, 31, 0) @[EmbeddedTLB.scala 392:183]
    _T_782.pteaddr <= _T_784 @[EmbeddedTLB.scala 392:183]
    node _T_785 = bits(_T_783, 51, 32) @[EmbeddedTLB.scala 392:183]
    _T_782.ppn <= _T_785 @[EmbeddedTLB.scala 392:183]
    node _T_786 = bits(_T_783, 59, 52) @[EmbeddedTLB.scala 392:183]
    _T_782.flag <= _T_786 @[EmbeddedTLB.scala 392:183]
    node _T_787 = bits(_T_783, 77, 60) @[EmbeddedTLB.scala 392:183]
    _T_782.mask <= _T_787 @[EmbeddedTLB.scala 392:183]
    node _T_788 = bits(_T_783, 93, 78) @[EmbeddedTLB.scala 392:183]
    _T_782.asid <= _T_788 @[EmbeddedTLB.scala 392:183]
    node _T_789 = bits(_T_783, 120, 94) @[EmbeddedTLB.scala 392:183]
    _T_782.vpn <= _T_789 @[EmbeddedTLB.scala 392:183]
    wire _T_790 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 392:225]
    wire _T_791 : UInt<121>
    _T_791 <= io.mdWrite.wdata
    node _T_792 = bits(_T_791, 31, 0) @[EmbeddedTLB.scala 392:225]
    _T_790.pteaddr <= _T_792 @[EmbeddedTLB.scala 392:225]
    node _T_793 = bits(_T_791, 51, 32) @[EmbeddedTLB.scala 392:225]
    _T_790.ppn <= _T_793 @[EmbeddedTLB.scala 392:225]
    node _T_794 = bits(_T_791, 59, 52) @[EmbeddedTLB.scala 392:225]
    _T_790.flag <= _T_794 @[EmbeddedTLB.scala 392:225]
    node _T_795 = bits(_T_791, 77, 60) @[EmbeddedTLB.scala 392:225]
    _T_790.mask <= _T_795 @[EmbeddedTLB.scala 392:225]
    node _T_796 = bits(_T_791, 93, 78) @[EmbeddedTLB.scala 392:225]
    _T_790.asid <= _T_796 @[EmbeddedTLB.scala 392:225]
    node _T_797 = bits(_T_791, 120, 94) @[EmbeddedTLB.scala 392:225]
    _T_790.vpn <= _T_797 @[EmbeddedTLB.scala 392:225]
    wire _T_798 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 392:268]
    wire _T_799 : UInt<121>
    _T_799 <= io.mdWrite.wdata
    node _T_800 = bits(_T_799, 31, 0) @[EmbeddedTLB.scala 392:268]
    _T_798.pteaddr <= _T_800 @[EmbeddedTLB.scala 392:268]
    node _T_801 = bits(_T_799, 51, 32) @[EmbeddedTLB.scala 392:268]
    _T_798.ppn <= _T_801 @[EmbeddedTLB.scala 392:268]
    node _T_802 = bits(_T_799, 59, 52) @[EmbeddedTLB.scala 392:268]
    _T_798.flag <= _T_802 @[EmbeddedTLB.scala 392:268]
    node _T_803 = bits(_T_799, 77, 60) @[EmbeddedTLB.scala 392:268]
    _T_798.mask <= _T_803 @[EmbeddedTLB.scala 392:268]
    node _T_804 = bits(_T_799, 93, 78) @[EmbeddedTLB.scala 392:268]
    _T_798.asid <= _T_804 @[EmbeddedTLB.scala 392:268]
    node _T_805 = bits(_T_799, 120, 94) @[EmbeddedTLB.scala 392:268]
    _T_798.vpn <= _T_805 @[EmbeddedTLB.scala 392:268]
    wire _T_806 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 392:311]
    wire _T_807 : UInt<121>
    _T_807 <= io.mdWrite.wdata
    node _T_808 = bits(_T_807, 31, 0) @[EmbeddedTLB.scala 392:311]
    _T_806.pteaddr <= _T_808 @[EmbeddedTLB.scala 392:311]
    node _T_809 = bits(_T_807, 51, 32) @[EmbeddedTLB.scala 392:311]
    _T_806.ppn <= _T_809 @[EmbeddedTLB.scala 392:311]
    node _T_810 = bits(_T_807, 59, 52) @[EmbeddedTLB.scala 392:311]
    _T_806.flag <= _T_810 @[EmbeddedTLB.scala 392:311]
    node _T_811 = bits(_T_807, 77, 60) @[EmbeddedTLB.scala 392:311]
    _T_806.mask <= _T_811 @[EmbeddedTLB.scala 392:311]
    node _T_812 = bits(_T_807, 93, 78) @[EmbeddedTLB.scala 392:311]
    _T_806.asid <= _T_812 @[EmbeddedTLB.scala 392:311]
    node _T_813 = bits(_T_807, 120, 94) @[EmbeddedTLB.scala 392:311]
    _T_806.vpn <= _T_813 @[EmbeddedTLB.scala 392:311]
    wire _T_814 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 392:354]
    wire _T_815 : UInt<121>
    _T_815 <= io.mdWrite.wdata
    node _T_816 = bits(_T_815, 31, 0) @[EmbeddedTLB.scala 392:354]
    _T_814.pteaddr <= _T_816 @[EmbeddedTLB.scala 392:354]
    node _T_817 = bits(_T_815, 51, 32) @[EmbeddedTLB.scala 392:354]
    _T_814.ppn <= _T_817 @[EmbeddedTLB.scala 392:354]
    node _T_818 = bits(_T_815, 59, 52) @[EmbeddedTLB.scala 392:354]
    _T_814.flag <= _T_818 @[EmbeddedTLB.scala 392:354]
    node _T_819 = bits(_T_815, 77, 60) @[EmbeddedTLB.scala 392:354]
    _T_814.mask <= _T_819 @[EmbeddedTLB.scala 392:354]
    node _T_820 = bits(_T_815, 93, 78) @[EmbeddedTLB.scala 392:354]
    _T_814.asid <= _T_820 @[EmbeddedTLB.scala 392:354]
    node _T_821 = bits(_T_815, 120, 94) @[EmbeddedTLB.scala 392:354]
    _T_814.vpn <= _T_821 @[EmbeddedTLB.scala 392:354]
    wire _T_822 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 392:397]
    wire _T_823 : UInt<121>
    _T_823 <= io.mdWrite.wdata
    node _T_824 = bits(_T_823, 31, 0) @[EmbeddedTLB.scala 392:397]
    _T_822.pteaddr <= _T_824 @[EmbeddedTLB.scala 392:397]
    node _T_825 = bits(_T_823, 51, 32) @[EmbeddedTLB.scala 392:397]
    _T_822.ppn <= _T_825 @[EmbeddedTLB.scala 392:397]
    node _T_826 = bits(_T_823, 59, 52) @[EmbeddedTLB.scala 392:397]
    _T_822.flag <= _T_826 @[EmbeddedTLB.scala 392:397]
    node _T_827 = bits(_T_823, 77, 60) @[EmbeddedTLB.scala 392:397]
    _T_822.mask <= _T_827 @[EmbeddedTLB.scala 392:397]
    node _T_828 = bits(_T_823, 93, 78) @[EmbeddedTLB.scala 392:397]
    _T_822.asid <= _T_828 @[EmbeddedTLB.scala 392:397]
    node _T_829 = bits(_T_823, 120, 94) @[EmbeddedTLB.scala 392:397]
    _T_822.vpn <= _T_829 @[EmbeddedTLB.scala 392:397]
    wire _T_830 : {vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 392:439]
    wire _T_831 : UInt<121>
    _T_831 <= io.mdWrite.wdata
    node _T_832 = bits(_T_831, 31, 0) @[EmbeddedTLB.scala 392:439]
    _T_830.pteaddr <= _T_832 @[EmbeddedTLB.scala 392:439]
    node _T_833 = bits(_T_831, 51, 32) @[EmbeddedTLB.scala 392:439]
    _T_830.ppn <= _T_833 @[EmbeddedTLB.scala 392:439]
    node _T_834 = bits(_T_831, 59, 52) @[EmbeddedTLB.scala 392:439]
    _T_830.flag <= _T_834 @[EmbeddedTLB.scala 392:439]
    node _T_835 = bits(_T_831, 77, 60) @[EmbeddedTLB.scala 392:439]
    _T_830.mask <= _T_835 @[EmbeddedTLB.scala 392:439]
    node _T_836 = bits(_T_831, 93, 78) @[EmbeddedTLB.scala 392:439]
    _T_830.asid <= _T_836 @[EmbeddedTLB.scala 392:439]
    node _T_837 = bits(_T_831, 120, 94) @[EmbeddedTLB.scala 392:439]
    _T_830.vpn <= _T_837 @[EmbeddedTLB.scala 392:439]
    reg _T_838 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_839 = add(_T_838, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_840 = tail(_T_839, 1) @[GTimer.scala 25:12]
    _T_838 <= _T_840 @[GTimer.scala 25:7]
    wire _T_841 : UInt<1>
    _T_841 <= UInt<1>("h00")
    node _T_842 = and(UInt<1>("h01"), _T_841) @[Debug.scala 55:16]
    when _T_842 : @[Debug.scala 55:31]
      node _T_843 = asUInt(reset) @[Debug.scala 56:24]
      node _T_844 = eq(_T_843, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_844 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] EmbeddedTLBExec_1: ", _T_838) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_845 = asUInt(reset) @[Debug.scala 57:13]
      node _T_846 = eq(_T_845, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_846 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "md: wen:%d windex:%x waymask:%x vpn:%x asid:%x mask:%x flag:%x asid:%x ppn:%x pteaddr:%x\n", io.mdWrite.wen, io.mdWrite.windex, io.mdWrite.waymask, _T_782.vpn, _T_790.asid, _T_798.mask, _T_806.flag, _T_814.asid, _T_822.ppn, _T_830.pteaddr) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    reg _T_847 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_848 = add(_T_847, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_849 = tail(_T_848, 1) @[GTimer.scala 25:12]
    _T_847 <= _T_849 @[GTimer.scala 25:7]
    wire _T_850 : UInt<1>
    _T_850 <= UInt<1>("h00")
    node _T_851 = and(UInt<1>("h01"), _T_850) @[Debug.scala 55:16]
    when _T_851 : @[Debug.scala 55:31]
      node _T_852 = asUInt(reset) @[Debug.scala 56:24]
      node _T_853 = eq(_T_852, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_853 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] EmbeddedTLBExec_1: ", _T_847) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_854 = asUInt(reset) @[Debug.scala 57:13]
      node _T_855 = eq(_T_854, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_855 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "MemReq(%d, %d) MemResp(%d, %d) addr:%x cmd:%d rdata:%x cmd:%d\n", io.mem.req.valid, io.mem.req.ready, io.mem.resp.valid, io.mem.resp.ready, io.mem.req.bits.addr, io.mem.req.bits.cmd, io.mem.resp.bits.rdata, io.mem.resp.bits.cmd) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    reg _T_856 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_857 = add(_T_856, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_858 = tail(_T_857, 1) @[GTimer.scala 25:12]
    _T_856 <= _T_858 @[GTimer.scala 25:7]
    wire _T_859 : UInt<1>
    _T_859 <= UInt<1>("h00")
    node _T_860 = and(UInt<1>("h01"), _T_859) @[Debug.scala 55:16]
    when _T_860 : @[Debug.scala 55:31]
      node _T_861 = asUInt(reset) @[Debug.scala 56:24]
      node _T_862 = eq(_T_861, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_862 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] EmbeddedTLBExec_1: ", _T_856) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_863 = asUInt(reset) @[Debug.scala 57:13]
      node _T_864 = eq(_T_863, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_864 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "io.ipf:%d hitinstrPF:%d missIPF:%d pf.loadPF:%d pf.storePF:%d loadPF:%d storePF:%d\n", io.ipf, hitinstrPF, missIPF, io.pf.loadPF, io.pf.storePF, loadPF, storePF) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    
  module EmbeddedTLBEmpty_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}}
    
    io.out.bits.wdata <= io.in.bits.wdata @[EmbeddedTLB.scala 403:10]
    io.out.bits.wmask <= io.in.bits.wmask @[EmbeddedTLB.scala 403:10]
    io.out.bits.cmd <= io.in.bits.cmd @[EmbeddedTLB.scala 403:10]
    io.out.bits.size <= io.in.bits.size @[EmbeddedTLB.scala 403:10]
    io.out.bits.addr <= io.in.bits.addr @[EmbeddedTLB.scala 403:10]
    io.out.valid <= io.in.valid @[EmbeddedTLB.scala 403:10]
    io.in.ready <= io.out.ready @[EmbeddedTLB.scala 403:10]
    
  module EmbeddedTLBMD_1 : 
    input clock : Clock
    input reset : Reset
    output io : {tlbmd : UInt<121>[4], flip write : {wen : UInt<1>, windex : UInt<4>, waymask : UInt<4>, wdata : UInt<121>}, flip rindex : UInt<4>, ready : UInt<1>}
    
    cmem tlbmd : UInt<121>[4][16] @[EmbeddedTLB.scala 38:18]
    infer mport _T = tlbmd[io.rindex], clock @[EmbeddedTLB.scala 39:20]
    io.tlbmd[0] <= _T[0] @[EmbeddedTLB.scala 39:12]
    io.tlbmd[1] <= _T[1] @[EmbeddedTLB.scala 39:12]
    io.tlbmd[2] <= _T[2] @[EmbeddedTLB.scala 39:12]
    io.tlbmd[3] <= _T[3] @[EmbeddedTLB.scala 39:12]
    reg resetState : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[EmbeddedTLB.scala 42:27]
    reg resetSet : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[Counter.scala 29:33]
    wire resetFinish : UInt<1>
    resetFinish <= UInt<1>("h00")
    when resetState : @[Counter.scala 67:17]
      node _T_1 = eq(resetSet, UInt<4>("h0f")) @[Counter.scala 38:24]
      node _T_2 = add(resetSet, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_3 = tail(_T_2, 1) @[Counter.scala 39:22]
      resetSet <= _T_3 @[Counter.scala 39:13]
      resetFinish <= _T_1 @[Counter.scala 67:24]
      skip @[Counter.scala 67:17]
    when resetFinish : @[EmbeddedTLB.scala 44:22]
      resetState <= UInt<1>("h00") @[EmbeddedTLB.scala 44:35]
      skip @[EmbeddedTLB.scala 44:22]
    node wen = mux(resetState, UInt<1>("h01"), io.write.wen) @[EmbeddedTLB.scala 51:16]
    node setIdx = mux(resetState, resetSet, io.write.windex) @[EmbeddedTLB.scala 52:19]
    node _T_4 = mux(UInt<1>("h01"), UInt<4>("h0f"), UInt<4>("h00")) @[Bitwise.scala 72:12]
    node waymask = mux(resetState, _T_4, io.write.waymask) @[EmbeddedTLB.scala 53:20]
    node dataword = mux(resetState, UInt<1>("h00"), io.write.wdata) @[EmbeddedTLB.scala 54:21]
    wire wdata : UInt<121>[4] @[EmbeddedTLB.scala 55:22]
    wdata[0] <= dataword @[EmbeddedTLB.scala 55:22]
    wdata[1] <= dataword @[EmbeddedTLB.scala 55:22]
    wdata[2] <= dataword @[EmbeddedTLB.scala 55:22]
    wdata[3] <= dataword @[EmbeddedTLB.scala 55:22]
    when wen : @[EmbeddedTLB.scala 57:14]
      node _T_5 = bits(waymask, 0, 0) @[EmbeddedTLB.scala 57:51]
      node _T_6 = bits(waymask, 1, 1) @[EmbeddedTLB.scala 57:51]
      node _T_7 = bits(waymask, 2, 2) @[EmbeddedTLB.scala 57:51]
      node _T_8 = bits(waymask, 3, 3) @[EmbeddedTLB.scala 57:51]
      write mport _T_9 = tlbmd[setIdx], clock
      when _T_5 :
        _T_9[0] <= wdata[0]
        skip
      when _T_6 :
        _T_9[1] <= wdata[1]
        skip
      when _T_7 :
        _T_9[2] <= wdata[2]
        skip
      when _T_8 :
        _T_9[3] <= wdata[3]
        skip
      skip @[EmbeddedTLB.scala 57:14]
    node _T_10 = eq(resetState, UInt<1>("h00")) @[EmbeddedTLB.scala 59:15]
    io.ready <= _T_10 @[EmbeddedTLB.scala 59:12]
    
  module EmbeddedTLB_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<39>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}, out : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}, mem : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}, flip flush : UInt<1>, csrMMU : {flip priviledgeMode : UInt<2>, flip status_sum : UInt<1>, flip status_mxr : UInt<1>, loadPF : UInt<1>, storePF : UInt<1>, addr : UInt<39>}, flip cacheEmpty : UInt<1>, ipf : UInt<1>}
    
    wire satp : UInt<64>
    satp <= UInt<64>("h00")
    inst tlbExec of EmbeddedTLBExec_1 @[EmbeddedTLB.scala 80:23]
    tlbExec.clock <= clock
    tlbExec.reset <= reset
    inst tlbEmpty of EmbeddedTLBEmpty_1 @[EmbeddedTLB.scala 81:24]
    tlbEmpty.clock <= clock
    tlbEmpty.reset <= reset
    inst mdTLB of EmbeddedTLBMD_1 @[EmbeddedTLB.scala 82:21]
    mdTLB.clock <= clock
    mdTLB.reset <= reset
    wire mdUpdate : UInt<1> @[EmbeddedTLB.scala 83:22]
    tlbExec.io.flush <= io.flush @[EmbeddedTLB.scala 85:20]
    tlbExec.io.satp <= satp @[EmbeddedTLB.scala 86:19]
    tlbExec.io.mem.resp.bits.rdata <= io.mem.resp.bits.rdata @[EmbeddedTLB.scala 87:18]
    tlbExec.io.mem.resp.bits.cmd <= io.mem.resp.bits.cmd @[EmbeddedTLB.scala 87:18]
    tlbExec.io.mem.resp.valid <= io.mem.resp.valid @[EmbeddedTLB.scala 87:18]
    io.mem.resp.ready <= tlbExec.io.mem.resp.ready @[EmbeddedTLB.scala 87:18]
    io.mem.req.bits.wdata <= tlbExec.io.mem.req.bits.wdata @[EmbeddedTLB.scala 87:18]
    io.mem.req.bits.wmask <= tlbExec.io.mem.req.bits.wmask @[EmbeddedTLB.scala 87:18]
    io.mem.req.bits.cmd <= tlbExec.io.mem.req.bits.cmd @[EmbeddedTLB.scala 87:18]
    io.mem.req.bits.size <= tlbExec.io.mem.req.bits.size @[EmbeddedTLB.scala 87:18]
    io.mem.req.bits.addr <= tlbExec.io.mem.req.bits.addr @[EmbeddedTLB.scala 87:18]
    io.mem.req.valid <= tlbExec.io.mem.req.valid @[EmbeddedTLB.scala 87:18]
    tlbExec.io.mem.req.ready <= io.mem.req.ready @[EmbeddedTLB.scala 87:18]
    io.csrMMU.addr <= tlbExec.io.pf.addr @[EmbeddedTLB.scala 88:17]
    io.csrMMU.storePF <= tlbExec.io.pf.storePF @[EmbeddedTLB.scala 88:17]
    io.csrMMU.loadPF <= tlbExec.io.pf.loadPF @[EmbeddedTLB.scala 88:17]
    tlbExec.io.pf.status_mxr <= io.csrMMU.status_mxr @[EmbeddedTLB.scala 88:17]
    tlbExec.io.pf.status_sum <= io.csrMMU.status_sum @[EmbeddedTLB.scala 88:17]
    tlbExec.io.pf.priviledgeMode <= io.csrMMU.priviledgeMode @[EmbeddedTLB.scala 88:17]
    reg _T : UInt<121>[4], clock @[Reg.scala 15:16]
    when mdUpdate : @[Reg.scala 16:19]
      _T[0] <= mdTLB.io.tlbmd[0] @[Reg.scala 16:23]
      _T[1] <= mdTLB.io.tlbmd[1] @[Reg.scala 16:23]
      _T[2] <= mdTLB.io.tlbmd[2] @[Reg.scala 16:23]
      _T[3] <= mdTLB.io.tlbmd[3] @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    tlbExec.io.md[0] <= _T[0] @[EmbeddedTLB.scala 89:17]
    tlbExec.io.md[1] <= _T[1] @[EmbeddedTLB.scala 89:17]
    tlbExec.io.md[2] <= _T[2] @[EmbeddedTLB.scala 89:17]
    tlbExec.io.md[3] <= _T[3] @[EmbeddedTLB.scala 89:17]
    tlbExec.io.mdReady <= mdTLB.io.ready @[EmbeddedTLB.scala 90:22]
    wire _T_1 : {tag : UInt<23>, index : UInt<4>, off : UInt<12>} @[TLB.scala 200:19]
    wire _T_2 : UInt<39>
    _T_2 <= io.in.req.bits.addr
    node _T_3 = bits(_T_2, 11, 0) @[TLB.scala 200:19]
    _T_1.off <= _T_3 @[TLB.scala 200:19]
    node _T_4 = bits(_T_2, 15, 12) @[TLB.scala 200:19]
    _T_1.index <= _T_4 @[TLB.scala 200:19]
    node _T_5 = bits(_T_2, 38, 16) @[TLB.scala 200:19]
    _T_1.tag <= _T_5 @[TLB.scala 200:19]
    mdTLB.io.rindex <= _T_1.index @[EmbeddedTLB.scala 91:19]
    mdTLB.io.write.wdata <= tlbExec.io.mdWrite.wdata @[EmbeddedTLB.scala 92:18]
    mdTLB.io.write.waymask <= tlbExec.io.mdWrite.waymask @[EmbeddedTLB.scala 92:18]
    mdTLB.io.write.windex <= tlbExec.io.mdWrite.windex @[EmbeddedTLB.scala 92:18]
    mdTLB.io.write.wen <= tlbExec.io.mdWrite.wen @[EmbeddedTLB.scala 92:18]
    io.ipf <= UInt<1>("h00") @[EmbeddedTLB.scala 94:10]
    wire flushTLB : UInt<1>
    flushTLB <= UInt<1>("h00")
    node _T_6 = asUInt(reset) @[EmbeddedTLB.scala 99:24]
    node _T_7 = or(_T_6, flushTLB) @[EmbeddedTLB.scala 99:31]
    mdTLB.reset <= _T_7 @[EmbeddedTLB.scala 99:15]
    wire _T_8 : {mode : UInt<4>, asid : UInt<16>, res : UInt<24>, ppn : UInt<20>} @[EmbeddedTLB.scala 102:31]
    wire _T_9 : UInt<64>
    _T_9 <= satp
    node _T_10 = bits(_T_9, 19, 0) @[EmbeddedTLB.scala 102:31]
    _T_8.ppn <= _T_10 @[EmbeddedTLB.scala 102:31]
    node _T_11 = bits(_T_9, 43, 20) @[EmbeddedTLB.scala 102:31]
    _T_8.res <= _T_11 @[EmbeddedTLB.scala 102:31]
    node _T_12 = bits(_T_9, 59, 44) @[EmbeddedTLB.scala 102:31]
    _T_8.asid <= _T_12 @[EmbeddedTLB.scala 102:31]
    node _T_13 = bits(_T_9, 63, 60) @[EmbeddedTLB.scala 102:31]
    _T_8.mode <= _T_13 @[EmbeddedTLB.scala 102:31]
    node _T_14 = eq(_T_8.mode, UInt<4>("h08")) @[EmbeddedTLB.scala 102:49]
    node _T_15 = lt(io.csrMMU.priviledgeMode, UInt<2>("h03")) @[EmbeddedTLB.scala 102:86]
    node vmEnable = and(_T_14, _T_15) @[EmbeddedTLB.scala 102:57]
    tlbEmpty.io.in.bits.wdata is invalid @[EmbeddedTLB.scala 117:18]
    tlbEmpty.io.in.bits.wmask is invalid @[EmbeddedTLB.scala 117:18]
    tlbEmpty.io.in.bits.cmd is invalid @[EmbeddedTLB.scala 117:18]
    tlbEmpty.io.in.bits.size is invalid @[EmbeddedTLB.scala 117:18]
    tlbEmpty.io.in.bits.addr is invalid @[EmbeddedTLB.scala 117:18]
    tlbEmpty.io.in.valid is invalid @[EmbeddedTLB.scala 117:18]
    tlbEmpty.io.in.ready is invalid @[EmbeddedTLB.scala 117:18]
    tlbEmpty.io.out.ready is invalid @[EmbeddedTLB.scala 118:25]
    reg _T_16 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EmbeddedTLB.scala 105:24]
    when tlbExec.io.isFinish : @[EmbeddedTLB.scala 106:25]
      _T_16 <= UInt<1>("h00") @[EmbeddedTLB.scala 106:33]
      skip @[EmbeddedTLB.scala 106:25]
    node _T_17 = and(io.in.req.valid, tlbExec.io.in.ready) @[EmbeddedTLB.scala 107:22]
    node _T_18 = and(_T_17, vmEnable) @[EmbeddedTLB.scala 107:37]
    when _T_18 : @[EmbeddedTLB.scala 107:50]
      _T_16 <= UInt<1>("h01") @[EmbeddedTLB.scala 107:58]
      skip @[EmbeddedTLB.scala 107:50]
    when io.flush : @[EmbeddedTLB.scala 108:20]
      _T_16 <= UInt<1>("h00") @[EmbeddedTLB.scala 108:28]
      skip @[EmbeddedTLB.scala 108:20]
    io.in.req.ready <= tlbExec.io.in.ready @[EmbeddedTLB.scala 110:16]
    node _T_19 = and(io.in.req.valid, tlbExec.io.in.ready) @[EmbeddedTLB.scala 111:51]
    reg _T_20 : {addr : UInt<39>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}, clock @[Reg.scala 15:16]
    when _T_19 : @[Reg.scala 16:19]
      _T_20.wdata <= io.in.req.bits.wdata @[Reg.scala 16:23]
      _T_20.wmask <= io.in.req.bits.wmask @[Reg.scala 16:23]
      _T_20.cmd <= io.in.req.bits.cmd @[Reg.scala 16:23]
      _T_20.size <= io.in.req.bits.size @[Reg.scala 16:23]
      _T_20.addr <= io.in.req.bits.addr @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    tlbExec.io.in.bits.wdata <= _T_20.wdata @[EmbeddedTLB.scala 111:16]
    tlbExec.io.in.bits.wmask <= _T_20.wmask @[EmbeddedTLB.scala 111:16]
    tlbExec.io.in.bits.cmd <= _T_20.cmd @[EmbeddedTLB.scala 111:16]
    tlbExec.io.in.bits.size <= _T_20.size @[EmbeddedTLB.scala 111:16]
    tlbExec.io.in.bits.addr <= _T_20.addr @[EmbeddedTLB.scala 111:16]
    tlbExec.io.in.valid <= _T_16 @[EmbeddedTLB.scala 112:17]
    node _T_21 = and(io.in.req.valid, tlbExec.io.in.ready) @[EmbeddedTLB.scala 114:26]
    mdUpdate <= _T_21 @[EmbeddedTLB.scala 114:12]
    node _T_22 = and(tlbEmpty.io.out.ready, tlbEmpty.io.out.valid) @[Decoupled.scala 40:37]
    reg _T_23 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Pipeline.scala 24:24]
    when _T_22 : @[Pipeline.scala 25:25]
      _T_23 <= UInt<1>("h00") @[Pipeline.scala 25:33]
      skip @[Pipeline.scala 25:25]
    node _T_24 = and(tlbExec.io.out.valid, tlbEmpty.io.in.ready) @[Pipeline.scala 26:22]
    when _T_24 : @[Pipeline.scala 26:38]
      _T_23 <= UInt<1>("h01") @[Pipeline.scala 26:46]
      skip @[Pipeline.scala 26:38]
    when io.flush : @[Pipeline.scala 27:20]
      _T_23 <= UInt<1>("h00") @[Pipeline.scala 27:28]
      skip @[Pipeline.scala 27:20]
    tlbExec.io.out.ready <= tlbEmpty.io.in.ready @[Pipeline.scala 29:16]
    node _T_25 = and(tlbExec.io.out.valid, tlbEmpty.io.in.ready) @[Pipeline.scala 30:51]
    reg _T_26 : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}, clock @[Reg.scala 15:16]
    when _T_25 : @[Reg.scala 16:19]
      _T_26.wdata <= tlbExec.io.out.bits.wdata @[Reg.scala 16:23]
      _T_26.wmask <= tlbExec.io.out.bits.wmask @[Reg.scala 16:23]
      _T_26.cmd <= tlbExec.io.out.bits.cmd @[Reg.scala 16:23]
      _T_26.size <= tlbExec.io.out.bits.size @[Reg.scala 16:23]
      _T_26.addr <= tlbExec.io.out.bits.addr @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    tlbEmpty.io.in.bits.wdata <= _T_26.wdata @[Pipeline.scala 30:16]
    tlbEmpty.io.in.bits.wmask <= _T_26.wmask @[Pipeline.scala 30:16]
    tlbEmpty.io.in.bits.cmd <= _T_26.cmd @[Pipeline.scala 30:16]
    tlbEmpty.io.in.bits.size <= _T_26.size @[Pipeline.scala 30:16]
    tlbEmpty.io.in.bits.addr <= _T_26.addr @[Pipeline.scala 30:16]
    tlbEmpty.io.in.valid <= _T_23 @[Pipeline.scala 31:17]
    node _T_27 = eq(vmEnable, UInt<1>("h00")) @[EmbeddedTLB.scala 123:8]
    when _T_27 : @[EmbeddedTLB.scala 123:19]
      tlbExec.io.out.ready <= UInt<1>("h01") @[EmbeddedTLB.scala 124:26]
      tlbEmpty.io.out.ready <= UInt<1>("h01") @[EmbeddedTLB.scala 125:52]
      io.out.req.valid <= io.in.req.valid @[EmbeddedTLB.scala 126:22]
      io.in.req.ready <= io.out.req.ready @[EmbeddedTLB.scala 127:21]
      node _T_28 = bits(io.in.req.bits.addr, 31, 0) @[EmbeddedTLB.scala 128:48]
      io.out.req.bits.addr <= _T_28 @[EmbeddedTLB.scala 128:26]
      io.out.req.bits.size <= io.in.req.bits.size @[EmbeddedTLB.scala 129:26]
      io.out.req.bits.cmd <= io.in.req.bits.cmd @[EmbeddedTLB.scala 130:25]
      io.out.req.bits.wmask <= io.in.req.bits.wmask @[EmbeddedTLB.scala 131:27]
      io.out.req.bits.wdata <= io.in.req.bits.wdata @[EmbeddedTLB.scala 132:27]
      skip @[EmbeddedTLB.scala 123:19]
    else : @[EmbeddedTLB.scala 134:15]
      io.out.req.bits.wdata <= tlbEmpty.io.out.bits.wdata @[EmbeddedTLB.scala 135:41]
      io.out.req.bits.wmask <= tlbEmpty.io.out.bits.wmask @[EmbeddedTLB.scala 135:41]
      io.out.req.bits.cmd <= tlbEmpty.io.out.bits.cmd @[EmbeddedTLB.scala 135:41]
      io.out.req.bits.size <= tlbEmpty.io.out.bits.size @[EmbeddedTLB.scala 135:41]
      io.out.req.bits.addr <= tlbEmpty.io.out.bits.addr @[EmbeddedTLB.scala 135:41]
      io.out.req.valid <= tlbEmpty.io.out.valid @[EmbeddedTLB.scala 135:41]
      tlbEmpty.io.out.ready <= io.out.req.ready @[EmbeddedTLB.scala 135:41]
      skip @[EmbeddedTLB.scala 134:15]
    io.in.resp.bits.rdata <= io.out.resp.bits.rdata @[EmbeddedTLB.scala 138:15]
    io.in.resp.bits.cmd <= io.out.resp.bits.cmd @[EmbeddedTLB.scala 138:15]
    io.in.resp.valid <= io.out.resp.valid @[EmbeddedTLB.scala 138:15]
    io.out.resp.ready <= io.in.resp.ready @[EmbeddedTLB.scala 138:15]
    node _T_29 = eq(tlbExec.io.out.ready, UInt<1>("h00")) @[EmbeddedTLB.scala 142:84]
    node _T_30 = and(tlbExec.io.out.valid, _T_29) @[EmbeddedTLB.scala 142:81]
    reg _T_31 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Reg.scala 27:20]
    when _T_30 : @[Reg.scala 28:19]
      _T_31 <= UInt<1>("h01") @[Reg.scala 28:23]
      skip @[Reg.scala 28:19]
    node _T_32 = and(tlbExec.io.out.ready, tlbExec.io.out.valid) @[Decoupled.scala 40:37]
    node _T_33 = and(_T_31, _T_32) @[EmbeddedTLB.scala 143:27]
    when _T_33 : @[EmbeddedTLB.scala 143:53]
      _T_31 <= UInt<1>("h00") @[EmbeddedTLB.scala 143:72]
      skip @[EmbeddedTLB.scala 143:53]
    node _T_34 = eq(_T_31, UInt<1>("h00")) @[EmbeddedTLB.scala 144:46]
    node _T_35 = and(tlbExec.io.out.valid, _T_34) @[EmbeddedTLB.scala 144:43]
    node _T_36 = or(tlbExec.io.pf.loadPF, tlbExec.io.pf.storePF) @[Bundle.scala 129:23]
    node _T_37 = or(_T_35, _T_36) @[EmbeddedTLB.scala 144:65]
    node _T_38 = or(io.csrMMU.loadPF, io.csrMMU.storePF) @[Bundle.scala 129:23]
    reg _T_39 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_40 = add(_T_39, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_41 = tail(_T_40, 1) @[GTimer.scala 25:12]
    _T_39 <= _T_41 @[GTimer.scala 25:7]
    wire _T_42 : UInt<1>
    _T_42 <= UInt<1>("h00")
    node _T_43 = and(UInt<1>("h01"), _T_42) @[Debug.scala 55:16]
    when _T_43 : @[Debug.scala 55:31]
      node _T_44 = asUInt(reset) @[Debug.scala 56:24]
      node _T_45 = eq(_T_44, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_45 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] EmbeddedTLB_1: ", _T_39) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_46 = asUInt(reset) @[Debug.scala 57:13]
      node _T_47 = eq(_T_46, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_47 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "InReq(%d, %d) InResp(%d, %d) OutReq(%d, %d) OutResp(%d, %d) vmEnable:%d mode:%d\n", io.in.req.valid, io.in.req.ready, io.in.resp.valid, io.in.resp.ready, io.out.req.valid, io.out.req.ready, io.out.resp.valid, io.out.resp.ready, vmEnable, io.csrMMU.priviledgeMode) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    reg _T_48 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_49 = add(_T_48, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_50 = tail(_T_49, 1) @[GTimer.scala 25:12]
    _T_48 <= _T_50 @[GTimer.scala 25:7]
    wire _T_51 : UInt<1>
    _T_51 <= UInt<1>("h00")
    node _T_52 = and(UInt<1>("h01"), _T_51) @[Debug.scala 55:16]
    when _T_52 : @[Debug.scala 55:31]
      node _T_53 = asUInt(reset) @[Debug.scala 56:24]
      node _T_54 = eq(_T_53, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_54 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] EmbeddedTLB_1: ", _T_48) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_55 = asUInt(reset) @[Debug.scala 57:13]
      node _T_56 = eq(_T_55, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_56 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "InReq: addr:%x cmd:%d wdata:%x OutReq: addr:%x cmd:%x wdata:%x\n", io.in.req.bits.addr, io.in.req.bits.cmd, io.in.req.bits.wdata, io.out.req.bits.addr, io.out.req.bits.cmd, io.out.req.bits.wdata) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    reg _T_57 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_58 = add(_T_57, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_59 = tail(_T_58, 1) @[GTimer.scala 25:12]
    _T_57 <= _T_59 @[GTimer.scala 25:7]
    wire _T_60 : UInt<1>
    _T_60 <= UInt<1>("h00")
    node _T_61 = and(UInt<1>("h01"), _T_60) @[Debug.scala 55:16]
    when _T_61 : @[Debug.scala 55:31]
      node _T_62 = asUInt(reset) @[Debug.scala 56:24]
      node _T_63 = eq(_T_62, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_63 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] EmbeddedTLB_1: ", _T_57) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_64 = asUInt(reset) @[Debug.scala 57:13]
      node _T_65 = eq(_T_64, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_65 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "OutResp: rdata:%x cmd:%x Inresp: rdata:%x cmd:%x\n", io.out.resp.bits.rdata, io.out.resp.bits.cmd, io.in.resp.bits.rdata, io.in.resp.bits.cmd) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    reg _T_66 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_67 = add(_T_66, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_68 = tail(_T_67, 1) @[GTimer.scala 25:12]
    _T_66 <= _T_68 @[GTimer.scala 25:7]
    wire _T_69 : UInt<1>
    _T_69 <= UInt<1>("h00")
    node _T_70 = and(UInt<1>("h01"), _T_69) @[Debug.scala 55:16]
    when _T_70 : @[Debug.scala 55:31]
      node _T_71 = asUInt(reset) @[Debug.scala 56:24]
      node _T_72 = eq(_T_71, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_72 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] EmbeddedTLB_1: ", _T_66) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_73 = asUInt(reset) @[Debug.scala 57:13]
      node _T_74 = eq(_T_73, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_74 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "satp:%x flush:%d cacheEmpty:%d instrPF:%d loadPF:%d storePF:%d \n", satp, io.flush, io.cacheEmpty, io.ipf, io.csrMMU.loadPF, io.csrMMU.storePF) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    
  module CacheStage1_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {req : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}}, metaReadBus : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<7>}}, flip resp : {data : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4]}}, dataReadBus : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<10>}}, flip resp : {data : {data : UInt<64>}[4]}}}
    
    node _T = and(io.in.ready, io.in.valid) @[Decoupled.scala 40:37]
    reg _T_1 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_2 = add(_T_1, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_3 = tail(_T_2, 1) @[GTimer.scala 25:12]
    _T_1 <= _T_3 @[GTimer.scala 25:7]
    wire _T_4 : UInt<1>
    _T_4 <= UInt<1>("h00")
    node _T_5 = and(_T, _T_4) @[Debug.scala 55:16]
    when _T_5 : @[Debug.scala 55:31]
      node _T_6 = asUInt(reset) @[Debug.scala 56:24]
      node _T_7 = eq(_T_6, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_7 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage1_1: ", _T_1) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_8 = asUInt(reset) @[Debug.scala 57:13]
      node _T_9 = eq(_T_8, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_9 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[L1$] cache stage1, addr in: %x, user: %x id: %x\n", io.in.bits.addr, UInt<1>("h00"), UInt<1>("h00")) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node readBusValid = and(io.in.valid, io.out.ready) @[Cache.scala 128:34]
    wire _T_10 : {tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _T_11 : UInt<32>
    _T_11 <= io.in.bits.addr
    node _T_12 = bits(_T_11, 2, 0) @[Cache.scala 79:45]
    _T_10.byteOffset <= _T_12 @[Cache.scala 79:45]
    node _T_13 = bits(_T_11, 5, 3) @[Cache.scala 79:45]
    _T_10.wordIndex <= _T_13 @[Cache.scala 79:45]
    node _T_14 = bits(_T_11, 12, 6) @[Cache.scala 79:45]
    _T_10.index <= _T_14 @[Cache.scala 79:45]
    node _T_15 = bits(_T_11, 31, 13) @[Cache.scala 79:45]
    _T_10.tag <= _T_15 @[Cache.scala 79:45]
    io.metaReadBus.req.bits.setIdx <= _T_10.index @[SRAMTemplate.scala 26:17]
    io.metaReadBus.req.valid <= readBusValid @[SRAMTemplate.scala 53:20]
    wire _T_16 : {tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 80:49]
    wire _T_17 : UInt<32>
    _T_17 <= io.in.bits.addr
    node _T_18 = bits(_T_17, 2, 0) @[Cache.scala 80:49]
    _T_16.byteOffset <= _T_18 @[Cache.scala 80:49]
    node _T_19 = bits(_T_17, 5, 3) @[Cache.scala 80:49]
    _T_16.wordIndex <= _T_19 @[Cache.scala 80:49]
    node _T_20 = bits(_T_17, 12, 6) @[Cache.scala 80:49]
    _T_16.index <= _T_20 @[Cache.scala 80:49]
    node _T_21 = bits(_T_17, 31, 13) @[Cache.scala 80:49]
    _T_16.tag <= _T_21 @[Cache.scala 80:49]
    wire _T_22 : {tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 80:82]
    wire _T_23 : UInt<32>
    _T_23 <= io.in.bits.addr
    node _T_24 = bits(_T_23, 2, 0) @[Cache.scala 80:82]
    _T_22.byteOffset <= _T_24 @[Cache.scala 80:82]
    node _T_25 = bits(_T_23, 5, 3) @[Cache.scala 80:82]
    _T_22.wordIndex <= _T_25 @[Cache.scala 80:82]
    node _T_26 = bits(_T_23, 12, 6) @[Cache.scala 80:82]
    _T_22.index <= _T_26 @[Cache.scala 80:82]
    node _T_27 = bits(_T_23, 31, 13) @[Cache.scala 80:82]
    _T_22.tag <= _T_27 @[Cache.scala 80:82]
    node _T_28 = cat(_T_16.index, _T_22.wordIndex) @[Cat.scala 29:58]
    io.dataReadBus.req.bits.setIdx <= _T_28 @[SRAMTemplate.scala 26:17]
    io.dataReadBus.req.valid <= readBusValid @[SRAMTemplate.scala 53:20]
    io.out.bits.req.wdata <= io.in.bits.wdata @[Cache.scala 132:19]
    io.out.bits.req.wmask <= io.in.bits.wmask @[Cache.scala 132:19]
    io.out.bits.req.cmd <= io.in.bits.cmd @[Cache.scala 132:19]
    io.out.bits.req.size <= io.in.bits.size @[Cache.scala 132:19]
    io.out.bits.req.addr <= io.in.bits.addr @[Cache.scala 132:19]
    node _T_29 = and(io.in.valid, io.metaReadBus.req.ready) @[Cache.scala 133:31]
    node _T_30 = and(_T_29, io.dataReadBus.req.ready) @[Cache.scala 133:59]
    io.out.valid <= _T_30 @[Cache.scala 133:16]
    node _T_31 = eq(io.in.valid, UInt<1>("h00")) @[Cache.scala 134:19]
    node _T_32 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_33 = or(_T_31, _T_32) @[Cache.scala 134:32]
    node _T_34 = and(_T_33, io.metaReadBus.req.ready) @[Cache.scala 134:50]
    node _T_35 = and(_T_34, io.dataReadBus.req.ready) @[Cache.scala 134:78]
    io.in.ready <= _T_35 @[Cache.scala 134:15]
    reg _T_36 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_37 = add(_T_36, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_38 = tail(_T_37, 1) @[GTimer.scala 25:12]
    _T_36 <= _T_38 @[GTimer.scala 25:7]
    wire _T_39 : UInt<1>
    _T_39 <= UInt<1>("h00")
    node _T_40 = and(UInt<1>("h01"), _T_39) @[Debug.scala 55:16]
    when _T_40 : @[Debug.scala 55:31]
      node _T_41 = asUInt(reset) @[Debug.scala 56:24]
      node _T_42 = eq(_T_41, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_42 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage1_1: ", _T_36) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_43 = asUInt(reset) @[Debug.scala 57:13]
      node _T_44 = eq(_T_43, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_44 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "in.ready = %d, in.valid = %d, out.valid = %d, out.ready = %d, addr = %x, cmd = %x, dataReadBus.req.valid = %d\n", io.in.ready, io.in.valid, io.out.valid, io.out.ready, io.in.bits.addr, io.in.bits.cmd, io.dataReadBus.req.valid) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    
  module CacheStage2_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {req : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {req : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}, metas : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4], datas : {data : UInt<64>}[4], hit : UInt<1>, waymask : UInt<4>, mmio : UInt<1>, isForwardData : UInt<1>, forwardData : {setIdx : UInt<10>, data : {data : UInt<64>}, waymask : UInt<4>}}}, flip metaReadResp : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4], flip dataReadResp : {data : UInt<64>}[4], flip metaWriteBus : {req : {ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<7>, data : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}}, flip dataWriteBus : {req : {ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<10>, data : {data : UInt<64>}, waymask : UInt<4>}}}}
    
    wire addr : {tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 162:31]
    wire _T : UInt<32>
    _T <= io.in.bits.req.addr
    node _T_1 = bits(_T, 2, 0) @[Cache.scala 162:31]
    addr.byteOffset <= _T_1 @[Cache.scala 162:31]
    node _T_2 = bits(_T, 5, 3) @[Cache.scala 162:31]
    addr.wordIndex <= _T_2 @[Cache.scala 162:31]
    node _T_3 = bits(_T, 12, 6) @[Cache.scala 162:31]
    addr.index <= _T_3 @[Cache.scala 162:31]
    node _T_4 = bits(_T, 31, 13) @[Cache.scala 162:31]
    addr.tag <= _T_4 @[Cache.scala 162:31]
    node _T_5 = and(io.in.valid, io.metaWriteBus.req.valid) @[Cache.scala 164:35]
    wire _T_6 : {tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _T_7 : UInt<32>
    _T_7 <= io.in.bits.req.addr
    node _T_8 = bits(_T_7, 2, 0) @[Cache.scala 79:45]
    _T_6.byteOffset <= _T_8 @[Cache.scala 79:45]
    node _T_9 = bits(_T_7, 5, 3) @[Cache.scala 79:45]
    _T_6.wordIndex <= _T_9 @[Cache.scala 79:45]
    node _T_10 = bits(_T_7, 12, 6) @[Cache.scala 79:45]
    _T_6.index <= _T_10 @[Cache.scala 79:45]
    node _T_11 = bits(_T_7, 31, 13) @[Cache.scala 79:45]
    _T_6.tag <= _T_11 @[Cache.scala 79:45]
    node _T_12 = eq(io.metaWriteBus.req.bits.setIdx, _T_6.index) @[Cache.scala 164:99]
    node isForwardMeta = and(_T_5, _T_12) @[Cache.scala 164:64]
    reg isForwardMetaReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Cache.scala 165:33]
    when isForwardMeta : @[Cache.scala 166:24]
      isForwardMetaReg <= UInt<1>("h01") @[Cache.scala 166:43]
      skip @[Cache.scala 166:24]
    node _T_13 = and(io.in.ready, io.in.valid) @[Decoupled.scala 40:37]
    node _T_14 = eq(io.in.valid, UInt<1>("h00")) @[Cache.scala 167:25]
    node _T_15 = or(_T_13, _T_14) @[Cache.scala 167:22]
    when _T_15 : @[Cache.scala 167:39]
      isForwardMetaReg <= UInt<1>("h00") @[Cache.scala 167:58]
      skip @[Cache.scala 167:39]
    reg forwardMetaReg : {setIdx : UInt<7>, data : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}, clock @[Reg.scala 15:16]
    when isForwardMeta : @[Reg.scala 16:19]
      forwardMetaReg.waymask <= io.metaWriteBus.req.bits.waymask @[Reg.scala 16:23]
      forwardMetaReg.data.dirty <= io.metaWriteBus.req.bits.data.dirty @[Reg.scala 16:23]
      forwardMetaReg.data.valid <= io.metaWriteBus.req.bits.data.valid @[Reg.scala 16:23]
      forwardMetaReg.data.tag <= io.metaWriteBus.req.bits.data.tag @[Reg.scala 16:23]
      forwardMetaReg.setIdx <= io.metaWriteBus.req.bits.setIdx @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    wire metaWay : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4] @[Cache.scala 170:21]
    node pickForwardMeta = or(isForwardMetaReg, isForwardMeta) @[Cache.scala 171:42]
    node forwardMeta = mux(isForwardMeta, io.metaWriteBus.req.bits, forwardMetaReg) @[Cache.scala 172:24]
    node forwardWaymask_0 = bits(forwardMeta.waymask, 0, 0) @[Cache.scala 173:61]
    node forwardWaymask_1 = bits(forwardMeta.waymask, 1, 1) @[Cache.scala 173:61]
    node forwardWaymask_2 = bits(forwardMeta.waymask, 2, 2) @[Cache.scala 173:61]
    node forwardWaymask_3 = bits(forwardMeta.waymask, 3, 3) @[Cache.scala 173:61]
    node _T_16 = and(pickForwardMeta, forwardWaymask_0) @[Cache.scala 175:39]
    node _T_17 = mux(_T_16, forwardMeta.data, io.metaReadResp[0]) @[Cache.scala 175:22]
    metaWay[0].dirty <= _T_17.dirty @[Cache.scala 175:16]
    metaWay[0].valid <= _T_17.valid @[Cache.scala 175:16]
    metaWay[0].tag <= _T_17.tag @[Cache.scala 175:16]
    node _T_18 = and(pickForwardMeta, forwardWaymask_1) @[Cache.scala 175:39]
    node _T_19 = mux(_T_18, forwardMeta.data, io.metaReadResp[1]) @[Cache.scala 175:22]
    metaWay[1].dirty <= _T_19.dirty @[Cache.scala 175:16]
    metaWay[1].valid <= _T_19.valid @[Cache.scala 175:16]
    metaWay[1].tag <= _T_19.tag @[Cache.scala 175:16]
    node _T_20 = and(pickForwardMeta, forwardWaymask_2) @[Cache.scala 175:39]
    node _T_21 = mux(_T_20, forwardMeta.data, io.metaReadResp[2]) @[Cache.scala 175:22]
    metaWay[2].dirty <= _T_21.dirty @[Cache.scala 175:16]
    metaWay[2].valid <= _T_21.valid @[Cache.scala 175:16]
    metaWay[2].tag <= _T_21.tag @[Cache.scala 175:16]
    node _T_22 = and(pickForwardMeta, forwardWaymask_3) @[Cache.scala 175:39]
    node _T_23 = mux(_T_22, forwardMeta.data, io.metaReadResp[3]) @[Cache.scala 175:22]
    metaWay[3].dirty <= _T_23.dirty @[Cache.scala 175:16]
    metaWay[3].valid <= _T_23.valid @[Cache.scala 175:16]
    metaWay[3].tag <= _T_23.tag @[Cache.scala 175:16]
    node _T_24 = eq(metaWay[0].tag, addr.tag) @[Cache.scala 178:59]
    node _T_25 = and(metaWay[0].valid, _T_24) @[Cache.scala 178:49]
    node _T_26 = and(_T_25, io.in.valid) @[Cache.scala 178:73]
    node _T_27 = eq(metaWay[1].tag, addr.tag) @[Cache.scala 178:59]
    node _T_28 = and(metaWay[1].valid, _T_27) @[Cache.scala 178:49]
    node _T_29 = and(_T_28, io.in.valid) @[Cache.scala 178:73]
    node _T_30 = eq(metaWay[2].tag, addr.tag) @[Cache.scala 178:59]
    node _T_31 = and(metaWay[2].valid, _T_30) @[Cache.scala 178:49]
    node _T_32 = and(_T_31, io.in.valid) @[Cache.scala 178:73]
    node _T_33 = eq(metaWay[3].tag, addr.tag) @[Cache.scala 178:59]
    node _T_34 = and(metaWay[3].valid, _T_33) @[Cache.scala 178:49]
    node _T_35 = and(_T_34, io.in.valid) @[Cache.scala 178:73]
    wire _T_36 : UInt<1>[4] @[Cache.scala 178:23]
    _T_36[0] <= _T_26 @[Cache.scala 178:23]
    _T_36[1] <= _T_29 @[Cache.scala 178:23]
    _T_36[2] <= _T_32 @[Cache.scala 178:23]
    _T_36[3] <= _T_35 @[Cache.scala 178:23]
    node _T_37 = cat(_T_36[1], _T_36[0]) @[Cache.scala 178:90]
    node _T_38 = cat(_T_36[3], _T_36[2]) @[Cache.scala 178:90]
    node hitVec = cat(_T_38, _T_37) @[Cache.scala 178:90]
    reg _T_39 : UInt<64>, clock with : (reset => (reset, UInt<64>("h01234567887654321"))) @[LFSR64.scala 25:23]
    node _T_40 = bits(_T_39, 0, 0) @[LFSR64.scala 26:19]
    node _T_41 = bits(_T_39, 1, 1) @[LFSR64.scala 26:29]
    node _T_42 = xor(_T_40, _T_41) @[LFSR64.scala 26:23]
    node _T_43 = bits(_T_39, 3, 3) @[LFSR64.scala 26:39]
    node _T_44 = xor(_T_42, _T_43) @[LFSR64.scala 26:33]
    node _T_45 = bits(_T_39, 4, 4) @[LFSR64.scala 26:49]
    node _T_46 = xor(_T_44, _T_45) @[LFSR64.scala 26:43]
    when UInt<1>("h01") : @[LFSR64.scala 27:22]
      node _T_47 = eq(_T_39, UInt<1>("h00")) @[LFSR64.scala 28:24]
      node _T_48 = bits(_T_39, 63, 1) @[LFSR64.scala 28:51]
      node _T_49 = cat(_T_46, _T_48) @[Cat.scala 29:58]
      node _T_50 = mux(_T_47, UInt<1>("h01"), _T_49) @[LFSR64.scala 28:18]
      _T_39 <= _T_50 @[LFSR64.scala 28:12]
      skip @[LFSR64.scala 27:22]
    node _T_51 = bits(_T_39, 1, 0) @[Cache.scala 179:53]
    node victimWaymask = dshl(UInt<1>("h01"), _T_51) @[Cache.scala 179:42]
    node _T_52 = eq(metaWay[0].valid, UInt<1>("h00")) @[Cache.scala 181:45]
    node _T_53 = eq(metaWay[1].valid, UInt<1>("h00")) @[Cache.scala 181:45]
    node _T_54 = eq(metaWay[2].valid, UInt<1>("h00")) @[Cache.scala 181:45]
    node _T_55 = eq(metaWay[3].valid, UInt<1>("h00")) @[Cache.scala 181:45]
    wire _T_56 : UInt<1>[4] @[Cache.scala 181:27]
    _T_56[0] <= _T_52 @[Cache.scala 181:27]
    _T_56[1] <= _T_53 @[Cache.scala 181:27]
    _T_56[2] <= _T_54 @[Cache.scala 181:27]
    _T_56[3] <= _T_55 @[Cache.scala 181:27]
    node _T_57 = cat(_T_56[1], _T_56[0]) @[Cache.scala 181:56]
    node _T_58 = cat(_T_56[3], _T_56[2]) @[Cache.scala 181:56]
    node invalidVec = cat(_T_58, _T_57) @[Cache.scala 181:56]
    node hasInvalidWay = orr(invalidVec) @[Cache.scala 182:34]
    node _T_59 = geq(invalidVec, UInt<4>("h08")) @[Cache.scala 183:45]
    node _T_60 = geq(invalidVec, UInt<3>("h04")) @[Cache.scala 184:20]
    node _T_61 = geq(invalidVec, UInt<2>("h02")) @[Cache.scala 185:20]
    node _T_62 = mux(_T_61, UInt<2>("h02"), UInt<1>("h01")) @[Cache.scala 185:8]
    node _T_63 = mux(_T_60, UInt<3>("h04"), _T_62) @[Cache.scala 184:8]
    node refillInvalidWaymask = mux(_T_59, UInt<4>("h08"), _T_63) @[Cache.scala 183:33]
    node _T_64 = mux(hasInvalidWay, refillInvalidWaymask, victimWaymask) @[Cache.scala 188:49]
    node waymask = mux(io.out.bits.hit, hitVec, _T_64) @[Cache.scala 188:20]
    node _T_65 = bits(waymask, 0, 0) @[Bitwise.scala 49:65]
    node _T_66 = bits(waymask, 1, 1) @[Bitwise.scala 49:65]
    node _T_67 = bits(waymask, 2, 2) @[Bitwise.scala 49:65]
    node _T_68 = bits(waymask, 3, 3) @[Bitwise.scala 49:65]
    node _T_69 = add(_T_65, _T_66) @[Bitwise.scala 47:55]
    node _T_70 = bits(_T_69, 1, 0) @[Bitwise.scala 47:55]
    node _T_71 = add(_T_67, _T_68) @[Bitwise.scala 47:55]
    node _T_72 = bits(_T_71, 1, 0) @[Bitwise.scala 47:55]
    node _T_73 = add(_T_70, _T_72) @[Bitwise.scala 47:55]
    node _T_74 = bits(_T_73, 2, 0) @[Bitwise.scala 47:55]
    node _T_75 = gt(_T_74, UInt<1>("h01")) @[Cache.scala 189:26]
    when _T_75 : @[Cache.scala 189:32]
      reg _T_76 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_77 = add(_T_76, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_78 = tail(_T_77, 1) @[GTimer.scala 25:12]
      _T_76 <= _T_78 @[GTimer.scala 25:7]
      wire _T_79 : UInt<1>
      _T_79 <= UInt<1>("h00")
      node _T_80 = and(UInt<1>("h01"), _T_79) @[Debug.scala 55:16]
      when _T_80 : @[Debug.scala 55:31]
        node _T_81 = asUInt(reset) @[Debug.scala 56:24]
        node _T_82 = eq(_T_81, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_82 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] CacheStage2_1: ", _T_76) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_83 = asUInt(reset) @[Debug.scala 57:13]
        node _T_84 = eq(_T_83, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_84 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[ERROR] metaWay %x metat %x reqt %x\n", metaWay[0].valid, metaWay[0].tag, addr.tag) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      reg _T_85 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_86 = add(_T_85, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_87 = tail(_T_86, 1) @[GTimer.scala 25:12]
      _T_85 <= _T_87 @[GTimer.scala 25:7]
      wire _T_88 : UInt<1>
      _T_88 <= UInt<1>("h00")
      node _T_89 = and(UInt<1>("h01"), _T_88) @[Debug.scala 55:16]
      when _T_89 : @[Debug.scala 55:31]
        node _T_90 = asUInt(reset) @[Debug.scala 56:24]
        node _T_91 = eq(_T_90, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_91 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] CacheStage2_1: ", _T_85) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_92 = asUInt(reset) @[Debug.scala 57:13]
        node _T_93 = eq(_T_92, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_93 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[ERROR] metaWay %x metat %x reqt %x\n", metaWay[1].valid, metaWay[1].tag, addr.tag) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      reg _T_94 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_95 = add(_T_94, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_96 = tail(_T_95, 1) @[GTimer.scala 25:12]
      _T_94 <= _T_96 @[GTimer.scala 25:7]
      wire _T_97 : UInt<1>
      _T_97 <= UInt<1>("h00")
      node _T_98 = and(UInt<1>("h01"), _T_97) @[Debug.scala 55:16]
      when _T_98 : @[Debug.scala 55:31]
        node _T_99 = asUInt(reset) @[Debug.scala 56:24]
        node _T_100 = eq(_T_99, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_100 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] CacheStage2_1: ", _T_94) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_101 = asUInt(reset) @[Debug.scala 57:13]
        node _T_102 = eq(_T_101, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_102 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[ERROR] metaWay %x metat %x reqt %x\n", metaWay[2].valid, metaWay[2].tag, addr.tag) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      reg _T_103 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_104 = add(_T_103, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_105 = tail(_T_104, 1) @[GTimer.scala 25:12]
      _T_103 <= _T_105 @[GTimer.scala 25:7]
      wire _T_106 : UInt<1>
      _T_106 <= UInt<1>("h00")
      node _T_107 = and(UInt<1>("h01"), _T_106) @[Debug.scala 55:16]
      when _T_107 : @[Debug.scala 55:31]
        node _T_108 = asUInt(reset) @[Debug.scala 56:24]
        node _T_109 = eq(_T_108, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_109 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] CacheStage2_1: ", _T_103) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_110 = asUInt(reset) @[Debug.scala 57:13]
        node _T_111 = eq(_T_110, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_111 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[ERROR] metaWay %x metat %x reqt %x\n", metaWay[3].valid, metaWay[3].tag, addr.tag) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      reg _T_112 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_113 = add(_T_112, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_114 = tail(_T_113, 1) @[GTimer.scala 25:12]
      _T_112 <= _T_114 @[GTimer.scala 25:7]
      wire _T_115 : UInt<1>
      _T_115 <= UInt<1>("h00")
      node _T_116 = and(UInt<1>("h01"), _T_115) @[Debug.scala 55:16]
      when _T_116 : @[Debug.scala 55:31]
        node _T_117 = asUInt(reset) @[Debug.scala 56:24]
        node _T_118 = eq(_T_117, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_118 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] CacheStage2_1: ", _T_112) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_119 = asUInt(reset) @[Debug.scala 57:13]
        node _T_120 = eq(_T_119, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_120 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[ERROR] metaReadResp %x metat %x reqt %x\n", io.metaReadResp[0].valid, io.metaReadResp[0].tag, addr.tag) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      reg _T_121 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_122 = add(_T_121, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_123 = tail(_T_122, 1) @[GTimer.scala 25:12]
      _T_121 <= _T_123 @[GTimer.scala 25:7]
      wire _T_124 : UInt<1>
      _T_124 <= UInt<1>("h00")
      node _T_125 = and(UInt<1>("h01"), _T_124) @[Debug.scala 55:16]
      when _T_125 : @[Debug.scala 55:31]
        node _T_126 = asUInt(reset) @[Debug.scala 56:24]
        node _T_127 = eq(_T_126, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_127 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] CacheStage2_1: ", _T_121) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_128 = asUInt(reset) @[Debug.scala 57:13]
        node _T_129 = eq(_T_128, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_129 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[ERROR] metaReadResp %x metat %x reqt %x\n", io.metaReadResp[1].valid, io.metaReadResp[1].tag, addr.tag) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      reg _T_130 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_131 = add(_T_130, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_132 = tail(_T_131, 1) @[GTimer.scala 25:12]
      _T_130 <= _T_132 @[GTimer.scala 25:7]
      wire _T_133 : UInt<1>
      _T_133 <= UInt<1>("h00")
      node _T_134 = and(UInt<1>("h01"), _T_133) @[Debug.scala 55:16]
      when _T_134 : @[Debug.scala 55:31]
        node _T_135 = asUInt(reset) @[Debug.scala 56:24]
        node _T_136 = eq(_T_135, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_136 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] CacheStage2_1: ", _T_130) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_137 = asUInt(reset) @[Debug.scala 57:13]
        node _T_138 = eq(_T_137, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_138 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[ERROR] metaReadResp %x metat %x reqt %x\n", io.metaReadResp[2].valid, io.metaReadResp[2].tag, addr.tag) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      reg _T_139 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_140 = add(_T_139, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_141 = tail(_T_140, 1) @[GTimer.scala 25:12]
      _T_139 <= _T_141 @[GTimer.scala 25:7]
      wire _T_142 : UInt<1>
      _T_142 <= UInt<1>("h00")
      node _T_143 = and(UInt<1>("h01"), _T_142) @[Debug.scala 55:16]
      when _T_143 : @[Debug.scala 55:31]
        node _T_144 = asUInt(reset) @[Debug.scala 56:24]
        node _T_145 = eq(_T_144, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_145 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] CacheStage2_1: ", _T_139) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_146 = asUInt(reset) @[Debug.scala 57:13]
        node _T_147 = eq(_T_146, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_147 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[ERROR] metaReadResp %x metat %x reqt %x\n", io.metaReadResp[3].valid, io.metaReadResp[3].tag, addr.tag) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      reg _T_148 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_149 = add(_T_148, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_150 = tail(_T_149, 1) @[GTimer.scala 25:12]
      _T_148 <= _T_150 @[GTimer.scala 25:7]
      wire _T_151 : UInt<1>
      _T_151 <= UInt<1>("h00")
      node _T_152 = and(UInt<1>("h01"), _T_151) @[Debug.scala 55:16]
      when _T_152 : @[Debug.scala 55:31]
        node _T_153 = asUInt(reset) @[Debug.scala 56:24]
        node _T_154 = eq(_T_153, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_154 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] CacheStage2_1: ", _T_148) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_155 = asUInt(reset) @[Debug.scala 57:13]
        node _T_156 = eq(_T_155, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_156 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[ERROR] forwardMetaReg isForwardMetaReg %x %x metat %x wm %b\n", isForwardMetaReg, forwardMetaReg.data.valid, forwardMetaReg.data.tag, forwardMetaReg.waymask) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      reg _T_157 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_158 = add(_T_157, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_159 = tail(_T_158, 1) @[GTimer.scala 25:12]
      _T_157 <= _T_159 @[GTimer.scala 25:7]
      wire _T_160 : UInt<1>
      _T_160 <= UInt<1>("h00")
      node _T_161 = and(UInt<1>("h01"), _T_160) @[Debug.scala 55:16]
      when _T_161 : @[Debug.scala 55:31]
        node _T_162 = asUInt(reset) @[Debug.scala 56:24]
        node _T_163 = eq(_T_162, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_163 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] CacheStage2_1: ", _T_157) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_164 = asUInt(reset) @[Debug.scala 57:13]
        node _T_165 = eq(_T_164, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_165 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[ERROR] forwardMeta isForwardMeta %x %x metat %x wm %b\n", isForwardMeta, io.metaWriteBus.req.bits.data.valid, io.metaWriteBus.req.bits.data.tag, io.metaWriteBus.req.bits.waymask) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      skip @[Cache.scala 189:32]
    node _T_166 = bits(waymask, 0, 0) @[Bitwise.scala 49:65]
    node _T_167 = bits(waymask, 1, 1) @[Bitwise.scala 49:65]
    node _T_168 = bits(waymask, 2, 2) @[Bitwise.scala 49:65]
    node _T_169 = bits(waymask, 3, 3) @[Bitwise.scala 49:65]
    node _T_170 = add(_T_166, _T_167) @[Bitwise.scala 47:55]
    node _T_171 = bits(_T_170, 1, 0) @[Bitwise.scala 47:55]
    node _T_172 = add(_T_168, _T_169) @[Bitwise.scala 47:55]
    node _T_173 = bits(_T_172, 1, 0) @[Bitwise.scala 47:55]
    node _T_174 = add(_T_171, _T_173) @[Bitwise.scala 47:55]
    node _T_175 = bits(_T_174, 2, 0) @[Bitwise.scala 47:55]
    node _T_176 = gt(_T_175, UInt<1>("h01")) @[Cache.scala 195:26]
    when _T_176 : @[Cache.scala 195:32]
      reg _T_177 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_178 = add(_T_177, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_179 = tail(_T_178, 1) @[GTimer.scala 25:12]
      _T_177 <= _T_179 @[GTimer.scala 25:7]
      wire _T_180 : UInt<1>
      _T_180 <= UInt<1>("h00")
      node _T_181 = and(UInt<1>("h01"), _T_180) @[Debug.scala 55:16]
      when _T_181 : @[Debug.scala 55:31]
        node _T_182 = asUInt(reset) @[Debug.scala 56:24]
        node _T_183 = eq(_T_182, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_183 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] CacheStage2_1: ", _T_177) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_184 = asUInt(reset) @[Debug.scala 57:13]
        node _T_185 = eq(_T_184, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_185 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[ERROR] hit %b wmask %b hitvec %b\n", io.out.bits.hit, forwardMeta.waymask, hitVec) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      skip @[Cache.scala 195:32]
    node _T_186 = bits(waymask, 0, 0) @[Bitwise.scala 49:65]
    node _T_187 = bits(waymask, 1, 1) @[Bitwise.scala 49:65]
    node _T_188 = bits(waymask, 2, 2) @[Bitwise.scala 49:65]
    node _T_189 = bits(waymask, 3, 3) @[Bitwise.scala 49:65]
    node _T_190 = add(_T_186, _T_187) @[Bitwise.scala 47:55]
    node _T_191 = bits(_T_190, 1, 0) @[Bitwise.scala 47:55]
    node _T_192 = add(_T_188, _T_189) @[Bitwise.scala 47:55]
    node _T_193 = bits(_T_192, 1, 0) @[Bitwise.scala 47:55]
    node _T_194 = add(_T_191, _T_193) @[Bitwise.scala 47:55]
    node _T_195 = bits(_T_194, 2, 0) @[Bitwise.scala 47:55]
    node _T_196 = gt(_T_195, UInt<1>("h01")) @[Cache.scala 196:45]
    node _T_197 = and(io.in.valid, _T_196) @[Cache.scala 196:24]
    node _T_198 = eq(_T_197, UInt<1>("h00")) @[Cache.scala 196:10]
    node _T_199 = asUInt(reset) @[Cache.scala 196:9]
    node _T_200 = or(_T_198, _T_199) @[Cache.scala 196:9]
    node _T_201 = eq(_T_200, UInt<1>("h00")) @[Cache.scala 196:9]
    when _T_201 : @[Cache.scala 196:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at Cache.scala:196 assert(!(io.in.valid && PopCount(waymask) > 1.U))\n") @[Cache.scala 196:9]
      stop(clock, UInt<1>(1), 1) @[Cache.scala 196:9]
      skip @[Cache.scala 196:9]
    io.out.bits.metas[0].dirty <= metaWay[0].dirty @[Cache.scala 198:21]
    io.out.bits.metas[0].valid <= metaWay[0].valid @[Cache.scala 198:21]
    io.out.bits.metas[0].tag <= metaWay[0].tag @[Cache.scala 198:21]
    io.out.bits.metas[1].dirty <= metaWay[1].dirty @[Cache.scala 198:21]
    io.out.bits.metas[1].valid <= metaWay[1].valid @[Cache.scala 198:21]
    io.out.bits.metas[1].tag <= metaWay[1].tag @[Cache.scala 198:21]
    io.out.bits.metas[2].dirty <= metaWay[2].dirty @[Cache.scala 198:21]
    io.out.bits.metas[2].valid <= metaWay[2].valid @[Cache.scala 198:21]
    io.out.bits.metas[2].tag <= metaWay[2].tag @[Cache.scala 198:21]
    io.out.bits.metas[3].dirty <= metaWay[3].dirty @[Cache.scala 198:21]
    io.out.bits.metas[3].valid <= metaWay[3].valid @[Cache.scala 198:21]
    io.out.bits.metas[3].tag <= metaWay[3].tag @[Cache.scala 198:21]
    node _T_202 = orr(hitVec) @[Cache.scala 199:44]
    node _T_203 = and(io.in.valid, _T_202) @[Cache.scala 199:34]
    io.out.bits.hit <= _T_203 @[Cache.scala 199:19]
    io.out.bits.waymask <= waymask @[Cache.scala 200:23]
    io.out.bits.datas[0].data <= io.dataReadResp[0].data @[Cache.scala 201:21]
    io.out.bits.datas[1].data <= io.dataReadResp[1].data @[Cache.scala 201:21]
    io.out.bits.datas[2].data <= io.dataReadResp[2].data @[Cache.scala 201:21]
    io.out.bits.datas[3].data <= io.dataReadResp[3].data @[Cache.scala 201:21]
    node _T_204 = xor(io.in.bits.req.addr, UInt<30>("h030000000")) @[NutCore.scala 86:11]
    node _T_205 = bits(_T_204, 31, 28) @[NutCore.scala 86:24]
    node _T_206 = eq(_T_205, UInt<1>("h00")) @[NutCore.scala 86:44]
    node _T_207 = xor(io.in.bits.req.addr, UInt<31>("h040600000")) @[NutCore.scala 86:11]
    node _T_208 = bits(_T_207, 31, 24) @[NutCore.scala 86:24]
    node _T_209 = eq(_T_208, UInt<1>("h00")) @[NutCore.scala 86:44]
    node _T_210 = or(_T_206, _T_209) @[NutCore.scala 87:15]
    io.out.bits.mmio <= _T_210 @[Cache.scala 202:20]
    wire _T_211 : {tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 80:49]
    wire _T_212 : UInt<32>
    _T_212 <= io.in.bits.req.addr
    node _T_213 = bits(_T_212, 2, 0) @[Cache.scala 80:49]
    _T_211.byteOffset <= _T_213 @[Cache.scala 80:49]
    node _T_214 = bits(_T_212, 5, 3) @[Cache.scala 80:49]
    _T_211.wordIndex <= _T_214 @[Cache.scala 80:49]
    node _T_215 = bits(_T_212, 12, 6) @[Cache.scala 80:49]
    _T_211.index <= _T_215 @[Cache.scala 80:49]
    node _T_216 = bits(_T_212, 31, 13) @[Cache.scala 80:49]
    _T_211.tag <= _T_216 @[Cache.scala 80:49]
    wire _T_217 : {tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 80:82]
    wire _T_218 : UInt<32>
    _T_218 <= io.in.bits.req.addr
    node _T_219 = bits(_T_218, 2, 0) @[Cache.scala 80:82]
    _T_217.byteOffset <= _T_219 @[Cache.scala 80:82]
    node _T_220 = bits(_T_218, 5, 3) @[Cache.scala 80:82]
    _T_217.wordIndex <= _T_220 @[Cache.scala 80:82]
    node _T_221 = bits(_T_218, 12, 6) @[Cache.scala 80:82]
    _T_217.index <= _T_221 @[Cache.scala 80:82]
    node _T_222 = bits(_T_218, 31, 13) @[Cache.scala 80:82]
    _T_217.tag <= _T_222 @[Cache.scala 80:82]
    node _T_223 = cat(_T_211.index, _T_217.wordIndex) @[Cat.scala 29:58]
    node _T_224 = eq(io.dataWriteBus.req.bits.setIdx, _T_223) @[Cache.scala 205:30]
    node _T_225 = and(io.dataWriteBus.req.valid, _T_224) @[Cache.scala 205:13]
    node isForwardData = and(io.in.valid, _T_225) @[Cache.scala 204:35]
    reg isForwardDataReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Cache.scala 207:33]
    when isForwardData : @[Cache.scala 208:24]
      isForwardDataReg <= UInt<1>("h01") @[Cache.scala 208:43]
      skip @[Cache.scala 208:24]
    node _T_226 = and(io.in.ready, io.in.valid) @[Decoupled.scala 40:37]
    node _T_227 = eq(io.in.valid, UInt<1>("h00")) @[Cache.scala 209:25]
    node _T_228 = or(_T_226, _T_227) @[Cache.scala 209:22]
    when _T_228 : @[Cache.scala 209:39]
      isForwardDataReg <= UInt<1>("h00") @[Cache.scala 209:58]
      skip @[Cache.scala 209:39]
    reg forwardDataReg : {setIdx : UInt<10>, data : {data : UInt<64>}, waymask : UInt<4>}, clock @[Reg.scala 15:16]
    when isForwardData : @[Reg.scala 16:19]
      forwardDataReg.waymask <= io.dataWriteBus.req.bits.waymask @[Reg.scala 16:23]
      forwardDataReg.data.data <= io.dataWriteBus.req.bits.data.data @[Reg.scala 16:23]
      forwardDataReg.setIdx <= io.dataWriteBus.req.bits.setIdx @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _T_229 = or(isForwardDataReg, isForwardData) @[Cache.scala 211:49]
    io.out.bits.isForwardData <= _T_229 @[Cache.scala 211:29]
    node _T_230 = mux(isForwardData, io.dataWriteBus.req.bits, forwardDataReg) @[Cache.scala 212:33]
    io.out.bits.forwardData.waymask <= _T_230.waymask @[Cache.scala 212:27]
    io.out.bits.forwardData.data.data <= _T_230.data.data @[Cache.scala 212:27]
    io.out.bits.forwardData.setIdx <= _T_230.setIdx @[Cache.scala 212:27]
    io.out.bits.req.wdata <= io.in.bits.req.wdata @[Cache.scala 214:19]
    io.out.bits.req.wmask <= io.in.bits.req.wmask @[Cache.scala 214:19]
    io.out.bits.req.cmd <= io.in.bits.req.cmd @[Cache.scala 214:19]
    io.out.bits.req.size <= io.in.bits.req.size @[Cache.scala 214:19]
    io.out.bits.req.addr <= io.in.bits.req.addr @[Cache.scala 214:19]
    io.out.valid <= io.in.valid @[Cache.scala 215:16]
    node _T_231 = eq(io.in.valid, UInt<1>("h00")) @[Cache.scala 216:18]
    node _T_232 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_233 = or(_T_231, _T_232) @[Cache.scala 216:31]
    io.in.ready <= _T_233 @[Cache.scala 216:15]
    node _T_234 = and(io.in.ready, io.in.valid) @[Decoupled.scala 40:37]
    reg _T_235 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_236 = add(_T_235, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_237 = tail(_T_236, 1) @[GTimer.scala 25:12]
    _T_235 <= _T_237 @[GTimer.scala 25:7]
    wire _T_238 : UInt<1>
    _T_238 <= UInt<1>("h00")
    node _T_239 = and(UInt<1>("h01"), _T_238) @[Debug.scala 55:16]
    when _T_239 : @[Debug.scala 55:31]
      node _T_240 = asUInt(reset) @[Debug.scala 56:24]
      node _T_241 = eq(_T_240, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_241 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage2_1: ", _T_235) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_242 = asUInt(reset) @[Debug.scala 57:13]
      node _T_243 = eq(_T_242, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_243 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[isFD:%d isFDreg:%d inFire:%d invalid:%d \n", isForwardData, isForwardDataReg, _T_234, io.in.valid) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    wire _T_244 : {tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _T_245 : UInt<32>
    _T_245 <= io.in.bits.req.addr
    node _T_246 = bits(_T_245, 2, 0) @[Cache.scala 79:45]
    _T_244.byteOffset <= _T_246 @[Cache.scala 79:45]
    node _T_247 = bits(_T_245, 5, 3) @[Cache.scala 79:45]
    _T_244.wordIndex <= _T_247 @[Cache.scala 79:45]
    node _T_248 = bits(_T_245, 12, 6) @[Cache.scala 79:45]
    _T_244.index <= _T_248 @[Cache.scala 79:45]
    node _T_249 = bits(_T_245, 31, 13) @[Cache.scala 79:45]
    _T_244.tag <= _T_249 @[Cache.scala 79:45]
    reg _T_250 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_251 = add(_T_250, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_252 = tail(_T_251, 1) @[GTimer.scala 25:12]
    _T_250 <= _T_252 @[GTimer.scala 25:7]
    wire _T_253 : UInt<1>
    _T_253 <= UInt<1>("h00")
    node _T_254 = and(UInt<1>("h01"), _T_253) @[Debug.scala 55:16]
    when _T_254 : @[Debug.scala 55:31]
      node _T_255 = asUInt(reset) @[Debug.scala 56:24]
      node _T_256 = eq(_T_255, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_256 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage2_1: ", _T_250) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_257 = asUInt(reset) @[Debug.scala 57:13]
      node _T_258 = eq(_T_257, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_258 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[isFM:%d isFMreg:%d metawreq:%x widx:%x ridx:%x \n", isForwardMeta, isForwardMetaReg, io.metaWriteBus.req.valid, io.metaWriteBus.req.bits.setIdx, _T_244.index) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    
  module Arbiter_5 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<7>, data : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}[2], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<7>, data : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}, chosen : UInt<1>}
    
    io.chosen <= UInt<1>("h01") @[Arbiter.scala 123:13]
    io.out.bits.waymask <= io.in[1].bits.waymask @[Arbiter.scala 124:15]
    io.out.bits.data.dirty <= io.in[1].bits.data.dirty @[Arbiter.scala 124:15]
    io.out.bits.data.valid <= io.in[1].bits.data.valid @[Arbiter.scala 124:15]
    io.out.bits.data.tag <= io.in[1].bits.data.tag @[Arbiter.scala 124:15]
    io.out.bits.setIdx <= io.in[1].bits.setIdx @[Arbiter.scala 124:15]
    when io.in[0].valid : @[Arbiter.scala 126:27]
      io.chosen <= UInt<1>("h00") @[Arbiter.scala 127:17]
      io.out.bits.waymask <= io.in[0].bits.waymask @[Arbiter.scala 128:19]
      io.out.bits.data.dirty <= io.in[0].bits.data.dirty @[Arbiter.scala 128:19]
      io.out.bits.data.valid <= io.in[0].bits.data.valid @[Arbiter.scala 128:19]
      io.out.bits.data.tag <= io.in[0].bits.data.tag @[Arbiter.scala 128:19]
      io.out.bits.setIdx <= io.in[0].bits.setIdx @[Arbiter.scala 128:19]
      skip @[Arbiter.scala 126:27]
    node grant_1 = eq(io.in[0].valid, UInt<1>("h00")) @[Arbiter.scala 31:78]
    node _T = and(UInt<1>("h01"), io.out.ready) @[Arbiter.scala 134:19]
    io.in[0].ready <= _T @[Arbiter.scala 134:14]
    node _T_1 = and(grant_1, io.out.ready) @[Arbiter.scala 134:19]
    io.in[1].ready <= _T_1 @[Arbiter.scala 134:14]
    node _T_2 = eq(grant_1, UInt<1>("h00")) @[Arbiter.scala 135:19]
    node _T_3 = or(_T_2, io.in[1].valid) @[Arbiter.scala 135:31]
    io.out.valid <= _T_3 @[Arbiter.scala 135:16]
    
  module Arbiter_6 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<10>, data : {data : UInt<64>}, waymask : UInt<4>}}[2], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<10>, data : {data : UInt<64>}, waymask : UInt<4>}}, chosen : UInt<1>}
    
    io.chosen <= UInt<1>("h01") @[Arbiter.scala 123:13]
    io.out.bits.waymask <= io.in[1].bits.waymask @[Arbiter.scala 124:15]
    io.out.bits.data.data <= io.in[1].bits.data.data @[Arbiter.scala 124:15]
    io.out.bits.setIdx <= io.in[1].bits.setIdx @[Arbiter.scala 124:15]
    when io.in[0].valid : @[Arbiter.scala 126:27]
      io.chosen <= UInt<1>("h00") @[Arbiter.scala 127:17]
      io.out.bits.waymask <= io.in[0].bits.waymask @[Arbiter.scala 128:19]
      io.out.bits.data.data <= io.in[0].bits.data.data @[Arbiter.scala 128:19]
      io.out.bits.setIdx <= io.in[0].bits.setIdx @[Arbiter.scala 128:19]
      skip @[Arbiter.scala 126:27]
    node grant_1 = eq(io.in[0].valid, UInt<1>("h00")) @[Arbiter.scala 31:78]
    node _T = and(UInt<1>("h01"), io.out.ready) @[Arbiter.scala 134:19]
    io.in[0].ready <= _T @[Arbiter.scala 134:14]
    node _T_1 = and(grant_1, io.out.ready) @[Arbiter.scala 134:19]
    io.in[1].ready <= _T_1 @[Arbiter.scala 134:14]
    node _T_2 = eq(grant_1, UInt<1>("h00")) @[Arbiter.scala 135:19]
    node _T_3 = or(_T_2, io.in[1].valid) @[Arbiter.scala 135:31]
    io.out.valid <= _T_3 @[Arbiter.scala 135:16]
    
  module CacheStage3_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {req : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}, metas : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4], datas : {data : UInt<64>}[4], hit : UInt<1>, waymask : UInt<4>, mmio : UInt<1>, isForwardData : UInt<1>, forwardData : {setIdx : UInt<10>, data : {data : UInt<64>}, waymask : UInt<4>}}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}, isFinish : UInt<1>, flip flush : UInt<1>, dataReadBus : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<10>}}, flip resp : {data : {data : UInt<64>}[4]}}, dataWriteBus : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<10>, data : {data : UInt<64>}, waymask : UInt<4>}}}, metaWriteBus : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<7>, data : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}}, mem : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}, mmio : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}, cohResp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}, dataReadRespToL1 : UInt<1>}
    
    inst metaWriteArb of Arbiter_5 @[Cache.scala 241:28]
    metaWriteArb.clock <= clock
    metaWriteArb.reset <= reset
    inst dataWriteArb of Arbiter_6 @[Cache.scala 242:28]
    dataWriteArb.clock <= clock
    dataWriteArb.reset <= reset
    wire addr : {tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 245:31]
    wire _T : UInt<32>
    _T <= io.in.bits.req.addr
    node _T_1 = bits(_T, 2, 0) @[Cache.scala 245:31]
    addr.byteOffset <= _T_1 @[Cache.scala 245:31]
    node _T_2 = bits(_T, 5, 3) @[Cache.scala 245:31]
    addr.wordIndex <= _T_2 @[Cache.scala 245:31]
    node _T_3 = bits(_T, 12, 6) @[Cache.scala 245:31]
    addr.index <= _T_3 @[Cache.scala 245:31]
    node _T_4 = bits(_T, 31, 13) @[Cache.scala 245:31]
    addr.tag <= _T_4 @[Cache.scala 245:31]
    node mmio = and(io.in.valid, io.in.bits.mmio) @[Cache.scala 246:26]
    node hit = and(io.in.valid, io.in.bits.hit) @[Cache.scala 247:25]
    node _T_5 = eq(io.in.bits.hit, UInt<1>("h00")) @[Cache.scala 248:29]
    node miss = and(io.in.valid, _T_5) @[Cache.scala 248:26]
    node _T_6 = and(io.in.valid, UInt<1>("h01")) @[Cache.scala 249:27]
    node _T_7 = eq(io.in.bits.req.cmd, UInt<4>("h08")) @[SimpleBus.scala 79:23]
    node probe = and(_T_6, _T_7) @[Cache.scala 249:39]
    node _T_8 = eq(io.in.bits.req.cmd, UInt<2>("h02")) @[SimpleBus.scala 76:27]
    node hitReadBurst = and(hit, _T_8) @[Cache.scala 250:26]
    node _T_9 = bits(io.in.bits.waymask, 0, 0) @[Mux.scala 29:36]
    node _T_10 = bits(io.in.bits.waymask, 1, 1) @[Mux.scala 29:36]
    node _T_11 = bits(io.in.bits.waymask, 2, 2) @[Mux.scala 29:36]
    node _T_12 = bits(io.in.bits.waymask, 3, 3) @[Mux.scala 29:36]
    node _T_13 = cat(io.in.bits.metas[0].tag, io.in.bits.metas[0].valid) @[Mux.scala 27:72]
    node _T_14 = cat(_T_13, io.in.bits.metas[0].dirty) @[Mux.scala 27:72]
    node _T_15 = mux(_T_9, _T_14, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_16 = cat(io.in.bits.metas[1].tag, io.in.bits.metas[1].valid) @[Mux.scala 27:72]
    node _T_17 = cat(_T_16, io.in.bits.metas[1].dirty) @[Mux.scala 27:72]
    node _T_18 = mux(_T_10, _T_17, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_19 = cat(io.in.bits.metas[2].tag, io.in.bits.metas[2].valid) @[Mux.scala 27:72]
    node _T_20 = cat(_T_19, io.in.bits.metas[2].dirty) @[Mux.scala 27:72]
    node _T_21 = mux(_T_11, _T_20, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_22 = cat(io.in.bits.metas[3].tag, io.in.bits.metas[3].valid) @[Mux.scala 27:72]
    node _T_23 = cat(_T_22, io.in.bits.metas[3].dirty) @[Mux.scala 27:72]
    node _T_24 = mux(_T_12, _T_23, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_25 = or(_T_15, _T_18) @[Mux.scala 27:72]
    node _T_26 = or(_T_25, _T_21) @[Mux.scala 27:72]
    node _T_27 = or(_T_26, _T_24) @[Mux.scala 27:72]
    wire meta : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>} @[Mux.scala 27:72]
    wire _T_28 : UInt<21>
    _T_28 <= _T_27
    node _T_29 = bits(_T_28, 0, 0) @[Mux.scala 27:72]
    meta.dirty <= _T_29 @[Mux.scala 27:72]
    node _T_30 = bits(_T_28, 1, 1) @[Mux.scala 27:72]
    meta.valid <= _T_30 @[Mux.scala 27:72]
    node _T_31 = bits(_T_28, 20, 2) @[Mux.scala 27:72]
    meta.tag <= _T_31 @[Mux.scala 27:72]
    node _T_32 = and(mmio, hit) @[Cache.scala 252:17]
    node _T_33 = eq(_T_32, UInt<1>("h00")) @[Cache.scala 252:10]
    node _T_34 = asUInt(reset) @[Cache.scala 252:9]
    node _T_35 = or(_T_33, _T_34) @[Cache.scala 252:9]
    node _T_36 = eq(_T_35, UInt<1>("h00")) @[Cache.scala 252:9]
    when _T_36 : @[Cache.scala 252:9]
      printf(clock, UInt<1>(1), "Assertion failed: MMIO request should not hit in cache\n    at Cache.scala:252 assert(!(mmio && hit), \"MMIO request should not hit in cache\")\n") @[Cache.scala 252:9]
      stop(clock, UInt<1>(1), 1) @[Cache.scala 252:9]
      skip @[Cache.scala 252:9]
    node _T_37 = eq(io.in.bits.waymask, io.in.bits.forwardData.waymask) @[Cache.scala 260:71]
    node useForwardData = and(io.in.bits.isForwardData, _T_37) @[Cache.scala 260:49]
    node _T_38 = bits(io.in.bits.waymask, 0, 0) @[Mux.scala 29:36]
    node _T_39 = bits(io.in.bits.waymask, 1, 1) @[Mux.scala 29:36]
    node _T_40 = bits(io.in.bits.waymask, 2, 2) @[Mux.scala 29:36]
    node _T_41 = bits(io.in.bits.waymask, 3, 3) @[Mux.scala 29:36]
    node _T_42 = mux(_T_38, io.in.bits.datas[0].data, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_43 = mux(_T_39, io.in.bits.datas[1].data, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_44 = mux(_T_40, io.in.bits.datas[2].data, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_45 = mux(_T_41, io.in.bits.datas[3].data, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_46 = or(_T_42, _T_43) @[Mux.scala 27:72]
    node _T_47 = or(_T_46, _T_44) @[Mux.scala 27:72]
    node _T_48 = or(_T_47, _T_45) @[Mux.scala 27:72]
    wire _T_49 : {data : UInt<64>} @[Mux.scala 27:72]
    wire _T_50 : UInt<64>
    _T_50 <= _T_48
    node _T_51 = bits(_T_50, 63, 0) @[Mux.scala 27:72]
    _T_49.data <= _T_51 @[Mux.scala 27:72]
    node dataRead = mux(useForwardData, io.in.bits.forwardData.data.data, _T_49.data) @[Cache.scala 262:21]
    node _T_52 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Cache.scala 263:22]
    node _T_53 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_54 = and(_T_52, _T_53) @[Cache.scala 263:28]
    node _T_55 = bits(io.in.bits.req.wmask, 0, 0) @[BitUtils.scala 27:29]
    node _T_56 = bits(io.in.bits.req.wmask, 1, 1) @[BitUtils.scala 27:29]
    node _T_57 = bits(io.in.bits.req.wmask, 2, 2) @[BitUtils.scala 27:29]
    node _T_58 = bits(io.in.bits.req.wmask, 3, 3) @[BitUtils.scala 27:29]
    node _T_59 = bits(io.in.bits.req.wmask, 4, 4) @[BitUtils.scala 27:29]
    node _T_60 = bits(io.in.bits.req.wmask, 5, 5) @[BitUtils.scala 27:29]
    node _T_61 = bits(io.in.bits.req.wmask, 6, 6) @[BitUtils.scala 27:29]
    node _T_62 = bits(io.in.bits.req.wmask, 7, 7) @[BitUtils.scala 27:29]
    node _T_63 = bits(_T_55, 0, 0) @[Bitwise.scala 72:15]
    node _T_64 = mux(_T_63, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_65 = bits(_T_56, 0, 0) @[Bitwise.scala 72:15]
    node _T_66 = mux(_T_65, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_67 = bits(_T_57, 0, 0) @[Bitwise.scala 72:15]
    node _T_68 = mux(_T_67, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_69 = bits(_T_58, 0, 0) @[Bitwise.scala 72:15]
    node _T_70 = mux(_T_69, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_71 = bits(_T_59, 0, 0) @[Bitwise.scala 72:15]
    node _T_72 = mux(_T_71, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_73 = bits(_T_60, 0, 0) @[Bitwise.scala 72:15]
    node _T_74 = mux(_T_73, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_75 = bits(_T_61, 0, 0) @[Bitwise.scala 72:15]
    node _T_76 = mux(_T_75, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_77 = bits(_T_62, 0, 0) @[Bitwise.scala 72:15]
    node _T_78 = mux(_T_77, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_79 = cat(_T_66, _T_64) @[Cat.scala 29:58]
    node _T_80 = cat(_T_70, _T_68) @[Cat.scala 29:58]
    node _T_81 = cat(_T_80, _T_79) @[Cat.scala 29:58]
    node _T_82 = cat(_T_74, _T_72) @[Cat.scala 29:58]
    node _T_83 = cat(_T_78, _T_76) @[Cat.scala 29:58]
    node _T_84 = cat(_T_83, _T_82) @[Cat.scala 29:58]
    node _T_85 = cat(_T_84, _T_81) @[Cat.scala 29:58]
    node wordMask = mux(_T_54, _T_85, UInt<64>("h00")) @[Cache.scala 263:21]
    reg value : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Counter.scala 29:33]
    node _T_86 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_87 = eq(io.in.bits.req.cmd, UInt<2>("h03")) @[Cache.scala 266:34]
    node _T_88 = eq(io.in.bits.req.cmd, UInt<3>("h07")) @[SimpleBus.scala 78:27]
    node _T_89 = or(_T_87, _T_88) @[Cache.scala 266:62]
    node _T_90 = and(_T_86, _T_89) @[Cache.scala 266:22]
    when _T_90 : @[Cache.scala 266:85]
      node _T_91 = eq(value, UInt<3>("h07")) @[Counter.scala 38:24]
      node _T_92 = add(value, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_93 = tail(_T_92, 1) @[Counter.scala 39:22]
      value <= _T_93 @[Counter.scala 39:13]
      skip @[Cache.scala 266:85]
    node _T_94 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node hitWrite = and(hit, _T_94) @[Cache.scala 270:22]
    wire dataHitWriteBus : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<10>, data : {data : UInt<64>}, waymask : UInt<4>}}} @[Cache.scala 271:29]
    wire _T_95 : {data : UInt<64>} @[Cache.scala 272:16]
    node _T_96 = and(io.in.bits.req.wdata, wordMask) @[BitUtils.scala 32:13]
    node _T_97 = not(wordMask) @[BitUtils.scala 32:38]
    node _T_98 = and(dataRead, _T_97) @[BitUtils.scala 32:36]
    node _T_99 = or(_T_96, _T_98) @[BitUtils.scala 32:25]
    _T_95.data <= _T_99 @[Cache.scala 106:15]
    node _T_100 = eq(io.in.bits.req.cmd, UInt<2>("h03")) @[Cache.scala 273:60]
    node _T_101 = eq(io.in.bits.req.cmd, UInt<3>("h07")) @[SimpleBus.scala 78:27]
    node _T_102 = or(_T_100, _T_101) @[Cache.scala 273:88]
    node _T_103 = mux(_T_102, value, addr.wordIndex) @[Cache.scala 273:51]
    node _T_104 = cat(addr.index, _T_103) @[Cat.scala 29:58]
    dataHitWriteBus.req.bits.setIdx <= _T_104 @[SRAMTemplate.scala 26:17]
    dataHitWriteBus.req.bits.data.data <= _T_95.data @[SRAMTemplate.scala 37:15]
    dataHitWriteBus.req.bits.waymask <= io.in.bits.waymask @[SRAMTemplate.scala 38:24]
    dataHitWriteBus.req.valid <= hitWrite @[SRAMTemplate.scala 63:20]
    wire metaHitWriteBus : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<7>, data : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}} @[Cache.scala 275:29]
    node _T_105 = eq(meta.dirty, UInt<1>("h00")) @[Cache.scala 276:25]
    node _T_106 = and(hitWrite, _T_105) @[Cache.scala 276:22]
    wire _T_107 : {tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _T_108 : UInt<32>
    _T_108 <= io.in.bits.req.addr
    node _T_109 = bits(_T_108, 2, 0) @[Cache.scala 79:45]
    _T_107.byteOffset <= _T_109 @[Cache.scala 79:45]
    node _T_110 = bits(_T_108, 5, 3) @[Cache.scala 79:45]
    _T_107.wordIndex <= _T_110 @[Cache.scala 79:45]
    node _T_111 = bits(_T_108, 12, 6) @[Cache.scala 79:45]
    _T_107.index <= _T_111 @[Cache.scala 79:45]
    node _T_112 = bits(_T_108, 31, 13) @[Cache.scala 79:45]
    _T_107.tag <= _T_112 @[Cache.scala 79:45]
    wire _T_113 : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>} @[Cache.scala 277:16]
    _T_113.tag <= meta.tag @[Cache.scala 95:14]
    _T_113.valid <= UInt<1>("h01") @[Cache.scala 96:16]
    _T_113.dirty <= UInt<1>("h01") @[Cache.scala 97:16]
    metaHitWriteBus.req.bits.setIdx <= _T_107.index @[SRAMTemplate.scala 26:17]
    metaHitWriteBus.req.bits.data.dirty <= _T_113.dirty @[SRAMTemplate.scala 37:15]
    metaHitWriteBus.req.bits.data.valid <= _T_113.valid @[SRAMTemplate.scala 37:15]
    metaHitWriteBus.req.bits.data.tag <= _T_113.tag @[SRAMTemplate.scala 37:15]
    metaHitWriteBus.req.bits.waymask <= io.in.bits.waymask @[SRAMTemplate.scala 38:24]
    metaHitWriteBus.req.valid <= _T_106 @[SRAMTemplate.scala 63:20]
    reg state : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[Cache.scala 281:22]
    reg needFlush : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Cache.scala 282:26]
    node _T_114 = neq(state, UInt<4>("h00")) @[Cache.scala 284:28]
    node _T_115 = and(io.flush, _T_114) @[Cache.scala 284:18]
    when _T_115 : @[Cache.scala 284:41]
      needFlush <= UInt<1>("h01") @[Cache.scala 284:53]
      skip @[Cache.scala 284:41]
    node _T_116 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_117 = and(_T_116, needFlush) @[Cache.scala 285:23]
    when _T_117 : @[Cache.scala 285:37]
      needFlush <= UInt<1>("h00") @[Cache.scala 285:49]
      skip @[Cache.scala 285:37]
    reg value_1 : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Counter.scala 29:33]
    reg value_2 : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Counter.scala 29:33]
    reg state2 : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Cache.scala 291:23]
    node _T_118 = eq(state, UInt<4>("h03")) @[Cache.scala 293:39]
    node _T_119 = eq(state, UInt<4>("h08")) @[Cache.scala 293:66]
    node _T_120 = or(_T_118, _T_119) @[Cache.scala 293:57]
    node _T_121 = eq(state2, UInt<2>("h00")) @[Cache.scala 293:92]
    node _T_122 = and(_T_120, _T_121) @[Cache.scala 293:81]
    node _T_123 = eq(state, UInt<4>("h08")) @[Cache.scala 294:40]
    node _T_124 = mux(_T_123, value_1, value_2) @[Cache.scala 294:33]
    node _T_125 = cat(addr.index, _T_124) @[Cat.scala 29:58]
    io.dataReadBus.req.bits.setIdx <= _T_125 @[SRAMTemplate.scala 26:17]
    io.dataReadBus.req.valid <= _T_122 @[SRAMTemplate.scala 53:20]
    node _T_126 = eq(state2, UInt<2>("h01")) @[Cache.scala 295:60]
    reg dataWay : {data : UInt<64>}[4], clock @[Reg.scala 15:16]
    when _T_126 : @[Reg.scala 16:19]
      dataWay[0].data <= io.dataReadBus.resp.data[0].data @[Reg.scala 16:23]
      dataWay[1].data <= io.dataReadBus.resp.data[1].data @[Reg.scala 16:23]
      dataWay[2].data <= io.dataReadBus.resp.data[2].data @[Reg.scala 16:23]
      dataWay[3].data <= io.dataReadBus.resp.data[3].data @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _T_127 = bits(io.in.bits.waymask, 0, 0) @[Mux.scala 29:36]
    node _T_128 = bits(io.in.bits.waymask, 1, 1) @[Mux.scala 29:36]
    node _T_129 = bits(io.in.bits.waymask, 2, 2) @[Mux.scala 29:36]
    node _T_130 = bits(io.in.bits.waymask, 3, 3) @[Mux.scala 29:36]
    node _T_131 = mux(_T_127, dataWay[0].data, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_132 = mux(_T_128, dataWay[1].data, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_133 = mux(_T_129, dataWay[2].data, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_134 = mux(_T_130, dataWay[3].data, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_135 = or(_T_131, _T_132) @[Mux.scala 27:72]
    node _T_136 = or(_T_135, _T_133) @[Mux.scala 27:72]
    node _T_137 = or(_T_136, _T_134) @[Mux.scala 27:72]
    wire _T_138 : {data : UInt<64>} @[Mux.scala 27:72]
    wire _T_139 : UInt<64>
    _T_139 <= _T_137
    node _T_140 = bits(_T_139, 63, 0) @[Mux.scala 27:72]
    _T_138.data <= _T_140 @[Mux.scala 27:72]
    node _T_141 = eq(UInt<2>("h00"), state2) @[Conditional.scala 37:30]
    when _T_141 : @[Conditional.scala 40:58]
      node _T_142 = and(io.dataReadBus.req.ready, io.dataReadBus.req.valid) @[Decoupled.scala 40:37]
      when _T_142 : @[Cache.scala 299:53]
        state2 <= UInt<2>("h01") @[Cache.scala 299:62]
        skip @[Cache.scala 299:53]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_143 = eq(UInt<2>("h01"), state2) @[Conditional.scala 37:30]
      when _T_143 : @[Conditional.scala 39:67]
        state2 <= UInt<2>("h02") @[Cache.scala 300:35]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_144 = eq(UInt<2>("h02"), state2) @[Conditional.scala 37:30]
        when _T_144 : @[Conditional.scala 39:67]
          node _T_145 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
          node _T_146 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 40:37]
          node _T_147 = or(_T_145, _T_146) @[Cache.scala 301:46]
          node _T_148 = and(hitReadBurst, io.out.ready) @[Cache.scala 301:83]
          node _T_149 = or(_T_147, _T_148) @[Cache.scala 301:67]
          when _T_149 : @[Cache.scala 301:100]
            state2 <= UInt<2>("h00") @[Cache.scala 301:109]
            skip @[Cache.scala 301:100]
          skip @[Conditional.scala 39:67]
    node _T_150 = bits(io.in.bits.req.addr, 31, 3) @[Cache.scala 305:44]
    node raddr = cat(_T_150, UInt<3>("h00")) @[Cat.scala 29:58]
    node _T_151 = cat(meta.tag, addr.index) @[Cat.scala 29:58]
    node waddr = cat(_T_151, UInt<6>("h00")) @[Cat.scala 29:58]
    node _T_152 = eq(state, UInt<4>("h01")) @[Cache.scala 309:23]
    node _T_153 = eq(value_2, UInt<3>("h07")) @[Cache.scala 310:29]
    node _T_154 = mux(_T_153, UInt<3>("h07"), UInt<2>("h03")) @[Cache.scala 310:8]
    node cmd = mux(_T_152, UInt<2>("h02"), _T_154) @[Cache.scala 309:16]
    node _T_155 = eq(state, UInt<4>("h01")) @[Cache.scala 311:42]
    node _T_156 = mux(_T_155, raddr, waddr) @[Cache.scala 311:35]
    node _T_157 = mux(UInt<1>("h01"), UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    io.mem.req.bits.addr <= _T_156 @[SimpleBus.scala 64:15]
    io.mem.req.bits.cmd <= cmd @[SimpleBus.scala 65:14]
    io.mem.req.bits.size <= UInt<2>("h03") @[SimpleBus.scala 66:15]
    io.mem.req.bits.wdata <= _T_138.data @[SimpleBus.scala 67:16]
    io.mem.req.bits.wmask <= _T_157 @[SimpleBus.scala 68:16]
    io.mem.resp.ready <= UInt<1>("h01") @[Cache.scala 315:21]
    node _T_158 = eq(state, UInt<4>("h01")) @[Cache.scala 316:30]
    node _T_159 = eq(state, UInt<4>("h03")) @[Cache.scala 316:59]
    node _T_160 = eq(state2, UInt<2>("h02")) @[Cache.scala 316:89]
    node _T_161 = and(_T_159, _T_160) @[Cache.scala 316:78]
    node _T_162 = or(_T_158, _T_161) @[Cache.scala 316:48]
    io.mem.req.valid <= _T_162 @[Cache.scala 316:20]
    io.mmio.req.bits.wdata <= io.in.bits.req.wdata @[Cache.scala 319:20]
    io.mmio.req.bits.wmask <= io.in.bits.req.wmask @[Cache.scala 319:20]
    io.mmio.req.bits.cmd <= io.in.bits.req.cmd @[Cache.scala 319:20]
    io.mmio.req.bits.size <= io.in.bits.req.size @[Cache.scala 319:20]
    io.mmio.req.bits.addr <= io.in.bits.req.addr @[Cache.scala 319:20]
    io.mmio.resp.ready <= UInt<1>("h01") @[Cache.scala 320:22]
    node _T_163 = eq(state, UInt<4>("h05")) @[Cache.scala 321:31]
    io.mmio.req.valid <= _T_163 @[Cache.scala 321:21]
    reg afterFirstRead : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Cache.scala 323:31]
    node _T_164 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    reg alreadyOutFire : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Reg.scala 27:20]
    when _T_164 : @[Reg.scala 28:19]
      alreadyOutFire <= UInt<1>("h01") @[Reg.scala 28:23]
      skip @[Reg.scala 28:19]
    node _T_165 = eq(afterFirstRead, UInt<1>("h00")) @[Cache.scala 325:22]
    node _T_166 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
    node _T_167 = and(_T_165, _T_166) @[Cache.scala 325:38]
    node _T_168 = eq(state, UInt<4>("h02")) @[Cache.scala 325:70]
    node readingFirst = and(_T_167, _T_168) @[Cache.scala 325:60]
    node _T_169 = mux(mmio, io.mmio.resp.bits.rdata, io.mem.resp.bits.rdata) @[Cache.scala 326:39]
    node _T_170 = eq(state, UInt<4>("h06")) @[Cache.scala 327:52]
    node _T_171 = mux(mmio, _T_170, readingFirst) @[Cache.scala 327:39]
    reg inRdataRegDemand : UInt<64>, clock @[Reg.scala 15:16]
    when _T_171 : @[Reg.scala 16:19]
      inRdataRegDemand <= _T_169 @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _T_172 = eq(state, UInt<4>("h00")) @[Cache.scala 330:31]
    node _T_173 = and(_T_172, probe) @[Cache.scala 330:43]
    node _T_174 = eq(state, UInt<4>("h08")) @[Cache.scala 331:31]
    node _T_175 = eq(state2, UInt<2>("h02")) @[Cache.scala 331:57]
    node _T_176 = and(_T_174, _T_175) @[Cache.scala 331:46]
    node _T_177 = or(_T_173, _T_176) @[Cache.scala 330:53]
    io.cohResp.valid <= _T_177 @[Cache.scala 330:20]
    io.cohResp.bits.rdata <= _T_138.data @[Cache.scala 332:25]
    node _T_178 = eq(state, UInt<4>("h08")) @[Cache.scala 333:35]
    node _T_179 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 40:37]
    node _T_180 = and(_T_178, _T_179) @[Cache.scala 333:49]
    reg _T_181 : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Counter.scala 29:33]
    wire releaseLast : UInt<1>
    releaseLast <= UInt<1>("h00")
    when _T_180 : @[Counter.scala 67:17]
      node _T_182 = eq(_T_181, UInt<3>("h07")) @[Counter.scala 38:24]
      node _T_183 = add(_T_181, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_184 = tail(_T_183, 1) @[Counter.scala 39:22]
      _T_181 <= _T_184 @[Counter.scala 39:13]
      releaseLast <= _T_182 @[Counter.scala 67:24]
      skip @[Counter.scala 67:17]
    node _T_185 = eq(state, UInt<4>("h08")) @[Cache.scala 334:36]
    node _T_186 = mux(releaseLast, UInt<3>("h06"), UInt<1>("h00")) @[Cache.scala 334:54]
    node _T_187 = mux(hit, UInt<4>("h0c"), UInt<4>("h08")) @[Cache.scala 335:8]
    node _T_188 = mux(_T_185, _T_186, _T_187) @[Cache.scala 334:29]
    io.cohResp.bits.cmd <= _T_188 @[Cache.scala 334:23]
    node _T_189 = and(hitReadBurst, io.out.ready) @[Cache.scala 337:35]
    node _T_190 = eq(state2, UInt<2>("h02")) @[Cache.scala 337:61]
    node respToL1Fire = and(_T_189, _T_190) @[Cache.scala 337:51]
    node _T_191 = eq(state, UInt<4>("h00")) @[Cache.scala 338:37]
    node _T_192 = eq(state, UInt<4>("h08")) @[Cache.scala 338:57]
    node _T_193 = eq(state2, UInt<2>("h02")) @[Cache.scala 338:81]
    node _T_194 = and(_T_192, _T_193) @[Cache.scala 338:71]
    node _T_195 = or(_T_191, _T_194) @[Cache.scala 338:48]
    node _T_196 = and(_T_195, hitReadBurst) @[Cache.scala 338:96]
    node _T_197 = and(_T_196, io.out.ready) @[Cache.scala 338:112]
    reg _T_198 : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Counter.scala 29:33]
    wire respToL1Last : UInt<1>
    respToL1Last <= UInt<1>("h00")
    when _T_197 : @[Counter.scala 67:17]
      node _T_199 = eq(_T_198, UInt<3>("h07")) @[Counter.scala 38:24]
      node _T_200 = add(_T_198, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_201 = tail(_T_200, 1) @[Counter.scala 39:22]
      _T_198 <= _T_201 @[Counter.scala 39:13]
      respToL1Last <= _T_199 @[Counter.scala 67:24]
      skip @[Counter.scala 67:17]
    node _T_202 = eq(UInt<4>("h00"), state) @[Conditional.scala 37:30]
    when _T_202 : @[Conditional.scala 40:58]
      afterFirstRead <= UInt<1>("h00") @[Cache.scala 342:22]
      alreadyOutFire <= UInt<1>("h00") @[Cache.scala 343:22]
      when probe : @[Cache.scala 345:20]
        node _T_203 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 40:37]
        when _T_203 : @[Cache.scala 346:34]
          node _T_204 = mux(hit, UInt<4>("h08"), UInt<4>("h00")) @[Cache.scala 347:23]
          state <= _T_204 @[Cache.scala 347:17]
          value_1 <= addr.wordIndex @[Cache.scala 348:29]
          skip @[Cache.scala 346:34]
        skip @[Cache.scala 345:20]
      else : @[Cache.scala 350:50]
        node _T_205 = and(hitReadBurst, io.out.ready) @[Cache.scala 350:33]
        when _T_205 : @[Cache.scala 350:50]
          state <= UInt<4>("h08") @[Cache.scala 351:15]
          node _T_206 = eq(addr.wordIndex, UInt<3>("h07")) @[Cache.scala 352:49]
          node _T_207 = add(addr.wordIndex, UInt<1>("h01")) @[Cache.scala 352:93]
          node _T_208 = tail(_T_207, 1) @[Cache.scala 352:93]
          node _T_209 = mux(_T_206, UInt<1>("h00"), _T_208) @[Cache.scala 352:33]
          value_1 <= _T_209 @[Cache.scala 352:27]
          skip @[Cache.scala 350:50]
        else : @[Cache.scala 353:49]
          node _T_210 = or(miss, mmio) @[Cache.scala 353:26]
          node _T_211 = eq(io.flush, UInt<1>("h00")) @[Cache.scala 353:38]
          node _T_212 = and(_T_210, _T_211) @[Cache.scala 353:35]
          when _T_212 : @[Cache.scala 353:49]
            node _T_213 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Cache.scala 354:43]
            node _T_214 = and(_T_213, meta.dirty) @[Cache.scala 354:49]
            node _T_215 = mux(_T_214, UInt<4>("h03"), UInt<4>("h01")) @[Cache.scala 354:42]
            node _T_216 = mux(mmio, UInt<4>("h05"), _T_215) @[Cache.scala 354:21]
            state <= _T_216 @[Cache.scala 354:15]
            skip @[Cache.scala 353:49]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_217 = eq(UInt<4>("h05"), state) @[Conditional.scala 37:30]
      when _T_217 : @[Conditional.scala 39:67]
        node _T_218 = and(io.mmio.req.ready, io.mmio.req.valid) @[Decoupled.scala 40:37]
        when _T_218 : @[Cache.scala 358:48]
          state <= UInt<4>("h06") @[Cache.scala 358:56]
          skip @[Cache.scala 358:48]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_219 = eq(UInt<4>("h06"), state) @[Conditional.scala 37:30]
        when _T_219 : @[Conditional.scala 39:67]
          node _T_220 = and(io.mmio.resp.ready, io.mmio.resp.valid) @[Decoupled.scala 40:37]
          when _T_220 : @[Cache.scala 359:50]
            state <= UInt<4>("h07") @[Cache.scala 359:58]
            skip @[Cache.scala 359:50]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_221 = eq(UInt<4>("h08"), state) @[Conditional.scala 37:30]
          when _T_221 : @[Conditional.scala 39:67]
            node _T_222 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 40:37]
            node _T_223 = or(_T_222, respToL1Fire) @[Cache.scala 362:31]
            when _T_223 : @[Cache.scala 362:48]
              node _T_224 = eq(value_1, UInt<3>("h07")) @[Counter.scala 38:24]
              node _T_225 = add(value_1, UInt<1>("h01")) @[Counter.scala 39:22]
              node _T_226 = tail(_T_225, 1) @[Counter.scala 39:22]
              value_1 <= _T_226 @[Counter.scala 39:13]
              skip @[Cache.scala 362:48]
            node _T_227 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 40:37]
            node _T_228 = and(probe, _T_227) @[Cache.scala 363:19]
            node _T_229 = and(_T_228, releaseLast) @[Cache.scala 363:40]
            node _T_230 = and(respToL1Fire, respToL1Last) @[Cache.scala 363:71]
            node _T_231 = or(_T_229, _T_230) @[Cache.scala 363:55]
            when _T_231 : @[Cache.scala 363:88]
              state <= UInt<4>("h00") @[Cache.scala 363:96]
              skip @[Cache.scala 363:88]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_232 = eq(UInt<4>("h01"), state) @[Conditional.scala 37:30]
            when _T_232 : @[Conditional.scala 39:67]
              node _T_233 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
              when _T_233 : @[Cache.scala 366:50]
                state <= UInt<4>("h02") @[Cache.scala 367:13]
                value_1 <= addr.wordIndex @[Cache.scala 368:25]
                skip @[Cache.scala 366:50]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_234 = eq(UInt<4>("h02"), state) @[Conditional.scala 37:30]
              when _T_234 : @[Conditional.scala 39:67]
                node _T_235 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
                when _T_235 : @[Cache.scala 372:33]
                  afterFirstRead <= UInt<1>("h01") @[Cache.scala 373:24]
                  node _T_236 = eq(value_1, UInt<3>("h07")) @[Counter.scala 38:24]
                  node _T_237 = add(value_1, UInt<1>("h01")) @[Counter.scala 39:22]
                  node _T_238 = tail(_T_237, 1) @[Counter.scala 39:22]
                  value_1 <= _T_238 @[Counter.scala 39:13]
                  node _T_239 = eq(io.in.bits.req.cmd, UInt<2>("h03")) @[Cache.scala 375:23]
                  when _T_239 : @[Cache.scala 375:52]
                    value <= UInt<1>("h00") @[Cache.scala 375:75]
                    skip @[Cache.scala 375:52]
                  node _T_240 = eq(io.mem.resp.bits.cmd, UInt<3>("h06")) @[SimpleBus.scala 91:26]
                  when _T_240 : @[Cache.scala 376:46]
                    state <= UInt<4>("h07") @[Cache.scala 376:54]
                    skip @[Cache.scala 376:46]
                  skip @[Cache.scala 372:33]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_241 = eq(UInt<4>("h03"), state) @[Conditional.scala 37:30]
                when _T_241 : @[Conditional.scala 39:67]
                  node _T_242 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
                  when _T_242 : @[Cache.scala 381:32]
                    node _T_243 = eq(value_2, UInt<3>("h07")) @[Counter.scala 38:24]
                    node _T_244 = add(value_2, UInt<1>("h01")) @[Counter.scala 39:22]
                    node _T_245 = tail(_T_244, 1) @[Counter.scala 39:22]
                    value_2 <= _T_245 @[Counter.scala 39:13]
                    skip @[Cache.scala 381:32]
                  node _T_246 = eq(io.mem.req.bits.cmd, UInt<3>("h07")) @[SimpleBus.scala 78:27]
                  node _T_247 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
                  node _T_248 = and(_T_246, _T_247) @[Cache.scala 382:43]
                  when _T_248 : @[Cache.scala 382:65]
                    state <= UInt<4>("h04") @[Cache.scala 382:73]
                    skip @[Cache.scala 382:65]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_249 = eq(UInt<4>("h04"), state) @[Conditional.scala 37:30]
                  when _T_249 : @[Conditional.scala 39:67]
                    node _T_250 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
                    when _T_250 : @[Cache.scala 385:53]
                      state <= UInt<4>("h01") @[Cache.scala 385:61]
                      skip @[Cache.scala 385:53]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_251 = eq(UInt<4>("h07"), state) @[Conditional.scala 37:30]
                    when _T_251 : @[Conditional.scala 39:67]
                      node _T_252 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
                      node _T_253 = or(_T_252, needFlush) @[Cache.scala 386:44]
                      node _T_254 = or(_T_253, alreadyOutFire) @[Cache.scala 386:57]
                      when _T_254 : @[Cache.scala 386:76]
                        state <= UInt<4>("h00") @[Cache.scala 386:84]
                        skip @[Cache.scala 386:76]
                      skip @[Conditional.scala 39:67]
    node _T_255 = mux(readingFirst, wordMask, UInt<64>("h00")) @[Cache.scala 389:67]
    node _T_256 = and(io.in.bits.req.wdata, _T_255) @[BitUtils.scala 32:13]
    node _T_257 = not(_T_255) @[BitUtils.scala 32:38]
    node _T_258 = and(io.mem.resp.bits.rdata, _T_257) @[BitUtils.scala 32:36]
    node dataRefill = or(_T_256, _T_258) @[BitUtils.scala 32:25]
    wire dataRefillWriteBus : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<10>, data : {data : UInt<64>}, waymask : UInt<4>}}} @[Cache.scala 390:32]
    node _T_259 = eq(state, UInt<4>("h02")) @[Cache.scala 391:20]
    node _T_260 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
    node _T_261 = and(_T_259, _T_260) @[Cache.scala 391:39]
    node _T_262 = cat(addr.index, value_1) @[Cat.scala 29:58]
    wire _T_263 : {data : UInt<64>} @[Cache.scala 392:16]
    _T_263.data <= dataRefill @[Cache.scala 106:15]
    dataRefillWriteBus.req.bits.setIdx <= _T_262 @[SRAMTemplate.scala 26:17]
    dataRefillWriteBus.req.bits.data.data <= _T_263.data @[SRAMTemplate.scala 37:15]
    dataRefillWriteBus.req.bits.waymask <= io.in.bits.waymask @[SRAMTemplate.scala 38:24]
    dataRefillWriteBus.req.valid <= _T_261 @[SRAMTemplate.scala 63:20]
    dataWriteArb.io.in[0].bits.waymask <= dataHitWriteBus.req.bits.waymask @[Cache.scala 394:25]
    dataWriteArb.io.in[0].bits.data.data <= dataHitWriteBus.req.bits.data.data @[Cache.scala 394:25]
    dataWriteArb.io.in[0].bits.setIdx <= dataHitWriteBus.req.bits.setIdx @[Cache.scala 394:25]
    dataWriteArb.io.in[0].valid <= dataHitWriteBus.req.valid @[Cache.scala 394:25]
    dataHitWriteBus.req.ready <= dataWriteArb.io.in[0].ready @[Cache.scala 394:25]
    dataWriteArb.io.in[1].bits.waymask <= dataRefillWriteBus.req.bits.waymask @[Cache.scala 395:25]
    dataWriteArb.io.in[1].bits.data.data <= dataRefillWriteBus.req.bits.data.data @[Cache.scala 395:25]
    dataWriteArb.io.in[1].bits.setIdx <= dataRefillWriteBus.req.bits.setIdx @[Cache.scala 395:25]
    dataWriteArb.io.in[1].valid <= dataRefillWriteBus.req.valid @[Cache.scala 395:25]
    dataRefillWriteBus.req.ready <= dataWriteArb.io.in[1].ready @[Cache.scala 395:25]
    io.dataWriteBus.req.bits.waymask <= dataWriteArb.io.out.bits.waymask @[Cache.scala 396:23]
    io.dataWriteBus.req.bits.data.data <= dataWriteArb.io.out.bits.data.data @[Cache.scala 396:23]
    io.dataWriteBus.req.bits.setIdx <= dataWriteArb.io.out.bits.setIdx @[Cache.scala 396:23]
    io.dataWriteBus.req.valid <= dataWriteArb.io.out.valid @[Cache.scala 396:23]
    dataWriteArb.io.out.ready <= io.dataWriteBus.req.ready @[Cache.scala 396:23]
    wire metaRefillWriteBus : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<7>, data : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}} @[Cache.scala 398:32]
    node _T_264 = eq(state, UInt<4>("h02")) @[Cache.scala 399:20]
    node _T_265 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
    node _T_266 = and(_T_264, _T_265) @[Cache.scala 399:39]
    node _T_267 = eq(io.mem.resp.bits.cmd, UInt<3>("h06")) @[SimpleBus.scala 91:26]
    node _T_268 = and(_T_266, _T_267) @[Cache.scala 399:61]
    wire _T_269 : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>} @[Cache.scala 400:16]
    node _T_270 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Cache.scala 400:79]
    node _T_271 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_272 = and(_T_270, _T_271) @[Cache.scala 400:85]
    _T_269.tag <= addr.tag @[Cache.scala 95:14]
    _T_269.valid <= UInt<1>("h01") @[Cache.scala 96:16]
    _T_269.dirty <= _T_272 @[Cache.scala 97:16]
    wire _T_273 : {tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _T_274 : UInt<32>
    _T_274 <= io.in.bits.req.addr
    node _T_275 = bits(_T_274, 2, 0) @[Cache.scala 79:45]
    _T_273.byteOffset <= _T_275 @[Cache.scala 79:45]
    node _T_276 = bits(_T_274, 5, 3) @[Cache.scala 79:45]
    _T_273.wordIndex <= _T_276 @[Cache.scala 79:45]
    node _T_277 = bits(_T_274, 12, 6) @[Cache.scala 79:45]
    _T_273.index <= _T_277 @[Cache.scala 79:45]
    node _T_278 = bits(_T_274, 31, 13) @[Cache.scala 79:45]
    _T_273.tag <= _T_278 @[Cache.scala 79:45]
    metaRefillWriteBus.req.bits.setIdx <= _T_273.index @[SRAMTemplate.scala 26:17]
    metaRefillWriteBus.req.bits.data.dirty <= _T_269.dirty @[SRAMTemplate.scala 37:15]
    metaRefillWriteBus.req.bits.data.valid <= _T_269.valid @[SRAMTemplate.scala 37:15]
    metaRefillWriteBus.req.bits.data.tag <= _T_269.tag @[SRAMTemplate.scala 37:15]
    metaRefillWriteBus.req.bits.waymask <= io.in.bits.waymask @[SRAMTemplate.scala 38:24]
    metaRefillWriteBus.req.valid <= _T_268 @[SRAMTemplate.scala 63:20]
    metaWriteArb.io.in[0].bits.waymask <= metaHitWriteBus.req.bits.waymask @[Cache.scala 404:25]
    metaWriteArb.io.in[0].bits.data.dirty <= metaHitWriteBus.req.bits.data.dirty @[Cache.scala 404:25]
    metaWriteArb.io.in[0].bits.data.valid <= metaHitWriteBus.req.bits.data.valid @[Cache.scala 404:25]
    metaWriteArb.io.in[0].bits.data.tag <= metaHitWriteBus.req.bits.data.tag @[Cache.scala 404:25]
    metaWriteArb.io.in[0].bits.setIdx <= metaHitWriteBus.req.bits.setIdx @[Cache.scala 404:25]
    metaWriteArb.io.in[0].valid <= metaHitWriteBus.req.valid @[Cache.scala 404:25]
    metaHitWriteBus.req.ready <= metaWriteArb.io.in[0].ready @[Cache.scala 404:25]
    metaWriteArb.io.in[1].bits.waymask <= metaRefillWriteBus.req.bits.waymask @[Cache.scala 405:25]
    metaWriteArb.io.in[1].bits.data.dirty <= metaRefillWriteBus.req.bits.data.dirty @[Cache.scala 405:25]
    metaWriteArb.io.in[1].bits.data.valid <= metaRefillWriteBus.req.bits.data.valid @[Cache.scala 405:25]
    metaWriteArb.io.in[1].bits.data.tag <= metaRefillWriteBus.req.bits.data.tag @[Cache.scala 405:25]
    metaWriteArb.io.in[1].bits.setIdx <= metaRefillWriteBus.req.bits.setIdx @[Cache.scala 405:25]
    metaWriteArb.io.in[1].valid <= metaRefillWriteBus.req.valid @[Cache.scala 405:25]
    metaRefillWriteBus.req.ready <= metaWriteArb.io.in[1].ready @[Cache.scala 405:25]
    io.metaWriteBus.req.bits.waymask <= metaWriteArb.io.out.bits.waymask @[Cache.scala 406:23]
    io.metaWriteBus.req.bits.data.dirty <= metaWriteArb.io.out.bits.data.dirty @[Cache.scala 406:23]
    io.metaWriteBus.req.bits.data.valid <= metaWriteArb.io.out.bits.data.valid @[Cache.scala 406:23]
    io.metaWriteBus.req.bits.data.tag <= metaWriteArb.io.out.bits.data.tag @[Cache.scala 406:23]
    io.metaWriteBus.req.bits.setIdx <= metaWriteArb.io.out.bits.setIdx @[Cache.scala 406:23]
    io.metaWriteBus.req.valid <= metaWriteArb.io.out.valid @[Cache.scala 406:23]
    metaWriteArb.io.out.ready <= io.metaWriteBus.req.ready @[Cache.scala 406:23]
    node _T_279 = mux(hit, dataRead, inRdataRegDemand) @[Cache.scala 426:29]
    io.out.bits.rdata <= _T_279 @[Cache.scala 426:23]
    node _T_280 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_281 = eq(_T_280, UInt<1>("h00")) @[SimpleBus.scala 73:18]
    node _T_282 = bits(io.in.bits.req.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_283 = eq(_T_282, UInt<1>("h00")) @[SimpleBus.scala 73:29]
    node _T_284 = and(_T_281, _T_283) @[SimpleBus.scala 73:26]
    node _T_285 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    wire _T_287 : UInt<3> @[Cache.scala 427:79]
    _T_287 is invalid @[Cache.scala 427:79]
    node _T_286 = mux(_T_285, UInt<3>("h05"), _T_287) @[Cache.scala 427:79]
    node _T_288 = mux(_T_284, UInt<3>("h06"), _T_286) @[Cache.scala 427:27]
    io.out.bits.cmd <= _T_288 @[Cache.scala 427:21]
    node _T_289 = bits(io.in.bits.req.cmd, 1, 1) @[SimpleBus.scala 75:22]
    node _T_290 = and(_T_289, UInt<1>("h00")) @[Cache.scala 432:52]
    node _T_291 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_292 = eq(hit, UInt<1>("h00")) @[Cache.scala 433:34]
    node _T_293 = eq(state, UInt<4>("h07")) @[Cache.scala 433:48]
    node _T_294 = and(_T_292, _T_293) @[Cache.scala 433:39]
    node _T_295 = or(hit, _T_294) @[Cache.scala 433:31]
    node _T_296 = and(_T_291, _T_295) @[Cache.scala 433:23]
    node _T_297 = eq(state, UInt<4>("h02")) @[Cache.scala 433:81]
    node _T_298 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
    node _T_299 = and(_T_297, _T_298) @[Cache.scala 433:99]
    node _T_300 = eq(io.in.bits.req.cmd, UInt<2>("h02")) @[Cache.scala 433:132]
    node _T_301 = and(_T_299, _T_300) @[Cache.scala 433:121]
    node _T_302 = mux(_T_296, UInt<1>("h01"), _T_301) @[Cache.scala 433:8]
    node _T_303 = and(respToL1Fire, respToL1Last) @[Cache.scala 433:178]
    node _T_304 = eq(state, UInt<4>("h08")) @[Cache.scala 433:203]
    node _T_305 = and(_T_303, _T_304) @[Cache.scala 433:194]
    node _T_306 = or(_T_302, _T_305) @[Cache.scala 433:161]
    node _T_307 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_308 = or(_T_307, mmio) @[Cache.scala 434:60]
    node _T_309 = eq(state, UInt<4>("h07")) @[Cache.scala 434:75]
    node _T_310 = eq(alreadyOutFire, UInt<1>("h00")) @[Cache.scala 434:110]
    node _T_311 = and(afterFirstRead, _T_310) @[Cache.scala 434:107]
    node _T_312 = mux(_T_308, _T_309, _T_311) @[Cache.scala 434:45]
    node _T_313 = mux(hit, UInt<1>("h01"), _T_312) @[Cache.scala 434:28]
    node _T_314 = mux(probe, UInt<1>("h00"), _T_313) @[Cache.scala 434:8]
    node _T_315 = mux(_T_290, _T_306, _T_314) @[Cache.scala 432:37]
    node _T_316 = and(io.in.valid, _T_315) @[Cache.scala 432:31]
    io.out.valid <= _T_316 @[Cache.scala 432:16]
    node _T_317 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 40:37]
    node _T_318 = eq(state, UInt<4>("h00")) @[Cache.scala 441:66]
    node _T_319 = eq(state, UInt<4>("h08")) @[Cache.scala 441:85]
    node _T_320 = and(_T_319, releaseLast) @[Cache.scala 441:100]
    node _T_321 = mux(miss, _T_318, _T_320) @[Cache.scala 441:53]
    node _T_322 = and(_T_317, _T_321) @[Cache.scala 441:47]
    node _T_323 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_324 = or(hit, _T_323) @[Cache.scala 442:13]
    node _T_325 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_326 = eq(state, UInt<4>("h07")) @[Cache.scala 442:53]
    node _T_327 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_328 = or(_T_327, alreadyOutFire) @[Cache.scala 442:88]
    node _T_329 = and(_T_326, _T_328) @[Cache.scala 442:70]
    node _T_330 = mux(_T_324, _T_325, _T_329) @[Cache.scala 442:8]
    node _T_331 = mux(probe, _T_322, _T_330) @[Cache.scala 441:21]
    io.isFinish <= _T_331 @[Cache.scala 441:15]
    node _T_332 = eq(state, UInt<4>("h00")) @[Cache.scala 445:41]
    node _T_333 = eq(hitReadBurst, UInt<1>("h00")) @[Cache.scala 445:55]
    node _T_334 = and(_T_332, _T_333) @[Cache.scala 445:52]
    node _T_335 = and(io.out.ready, _T_334) @[Cache.scala 445:31]
    node _T_336 = eq(miss, UInt<1>("h00")) @[Cache.scala 445:73]
    node _T_337 = and(_T_335, _T_336) @[Cache.scala 445:70]
    node _T_338 = eq(probe, UInt<1>("h00")) @[Cache.scala 445:82]
    node _T_339 = and(_T_337, _T_338) @[Cache.scala 445:79]
    io.in.ready <= _T_339 @[Cache.scala 445:15]
    node _T_340 = eq(state, UInt<4>("h00")) @[Cache.scala 446:49]
    node _T_341 = and(_T_340, io.out.ready) @[Cache.scala 446:60]
    node _T_342 = eq(state, UInt<4>("h08")) @[Cache.scala 446:85]
    node _T_343 = eq(state2, UInt<2>("h02")) @[Cache.scala 446:109]
    node _T_344 = and(_T_342, _T_343) @[Cache.scala 446:99]
    node _T_345 = or(_T_341, _T_344) @[Cache.scala 446:76]
    node _T_346 = and(hitReadBurst, _T_345) @[Cache.scala 446:39]
    io.dataReadRespToL1 <= _T_346 @[Cache.scala 446:23]
    node _T_347 = and(metaHitWriteBus.req.valid, metaRefillWriteBus.req.valid) @[Cache.scala 448:38]
    node _T_348 = eq(_T_347, UInt<1>("h00")) @[Cache.scala 448:10]
    node _T_349 = asUInt(reset) @[Cache.scala 448:9]
    node _T_350 = or(_T_348, _T_349) @[Cache.scala 448:9]
    node _T_351 = eq(_T_350, UInt<1>("h00")) @[Cache.scala 448:9]
    when _T_351 : @[Cache.scala 448:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at Cache.scala:448 assert(!(metaHitWriteBus.req.valid && metaRefillWriteBus.req.valid))\n") @[Cache.scala 448:9]
      stop(clock, UInt<1>(1), 1) @[Cache.scala 448:9]
      skip @[Cache.scala 448:9]
    node _T_352 = and(dataHitWriteBus.req.valid, dataRefillWriteBus.req.valid) @[Cache.scala 449:38]
    node _T_353 = eq(_T_352, UInt<1>("h00")) @[Cache.scala 449:10]
    node _T_354 = asUInt(reset) @[Cache.scala 449:9]
    node _T_355 = or(_T_353, _T_354) @[Cache.scala 449:9]
    node _T_356 = eq(_T_355, UInt<1>("h00")) @[Cache.scala 449:9]
    when _T_356 : @[Cache.scala 449:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at Cache.scala:449 assert(!(dataHitWriteBus.req.valid && dataRefillWriteBus.req.valid))\n") @[Cache.scala 449:9]
      stop(clock, UInt<1>(1), 1) @[Cache.scala 449:9]
      skip @[Cache.scala 449:9]
    node _T_357 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Cache.scala 450:12]
    node _T_358 = and(_T_357, io.flush) @[Cache.scala 450:18]
    node _T_359 = eq(_T_358, UInt<1>("h00")) @[Cache.scala 450:10]
    node _T_360 = asUInt(reset) @[Cache.scala 450:9]
    node _T_361 = or(_T_359, _T_360) @[Cache.scala 450:9]
    node _T_362 = eq(_T_361, UInt<1>("h00")) @[Cache.scala 450:9]
    when _T_362 : @[Cache.scala 450:9]
      printf(clock, UInt<1>(1), "Assertion failed: only allow to flush icache\n    at Cache.scala:450 assert(!(!ro.B && io.flush), \"only allow to flush icache\")\n") @[Cache.scala 450:9]
      stop(clock, UInt<1>(1), 1) @[Cache.scala 450:9]
      skip @[Cache.scala 450:9]
    wire _T_363 : {tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _T_364 : UInt<32>
    _T_364 <= io.in.bits.req.addr
    node _T_365 = bits(_T_364, 2, 0) @[Cache.scala 79:45]
    _T_363.byteOffset <= _T_365 @[Cache.scala 79:45]
    node _T_366 = bits(_T_364, 5, 3) @[Cache.scala 79:45]
    _T_363.wordIndex <= _T_366 @[Cache.scala 79:45]
    node _T_367 = bits(_T_364, 12, 6) @[Cache.scala 79:45]
    _T_363.index <= _T_367 @[Cache.scala 79:45]
    node _T_368 = bits(_T_364, 31, 13) @[Cache.scala 79:45]
    _T_363.tag <= _T_368 @[Cache.scala 79:45]
    node _T_369 = cat(io.in.bits.datas[1].data, io.in.bits.datas[0].data) @[Cache.scala 451:465]
    node _T_370 = cat(io.in.bits.datas[3].data, io.in.bits.datas[2].data) @[Cache.scala 451:465]
    node _T_371 = cat(_T_370, _T_369) @[Cache.scala 451:465]
    reg _T_372 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_373 = add(_T_372, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_374 = tail(_T_373, 1) @[GTimer.scala 25:12]
    _T_372 <= _T_374 @[GTimer.scala 25:7]
    wire _T_375 : UInt<1>
    _T_375 <= UInt<1>("h00")
    node _T_376 = and(UInt<1>("h01"), _T_375) @[Debug.scala 55:16]
    when _T_376 : @[Debug.scala 55:31]
      node _T_377 = asUInt(reset) @[Debug.scala 56:24]
      node _T_378 = eq(_T_377, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_378 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage3_1: ", _T_372) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_379 = asUInt(reset) @[Debug.scala 57:13]
      node _T_380 = eq(_T_379, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_380 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), " metaread idx %x waymask %b metas %x%x:%x %x%x:%x %x%x:%x %x%x:%x %x\n", _T_363.index, io.in.bits.waymask, io.in.bits.metas[0].valid, io.in.bits.metas[0].dirty, io.in.bits.metas[0].tag, io.in.bits.metas[1].valid, io.in.bits.metas[1].dirty, io.in.bits.metas[1].tag, io.in.bits.metas[2].valid, io.in.bits.metas[2].dirty, io.in.bits.metas[2].tag, io.in.bits.metas[3].valid, io.in.bits.metas[3].dirty, io.in.bits.metas[3].tag, _T_371) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_381 = and(io.metaWriteBus.req.ready, io.metaWriteBus.req.valid) @[Decoupled.scala 40:37]
    reg _T_382 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_383 = add(_T_382, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_384 = tail(_T_383, 1) @[GTimer.scala 25:12]
    _T_382 <= _T_384 @[GTimer.scala 25:7]
    reg _T_385 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_386 = add(_T_385, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_387 = tail(_T_386, 1) @[GTimer.scala 25:12]
    _T_385 <= _T_387 @[GTimer.scala 25:7]
    wire _T_388 : UInt<1>
    _T_388 <= UInt<1>("h00")
    node _T_389 = and(_T_381, _T_388) @[Debug.scala 55:16]
    when _T_389 : @[Debug.scala 55:31]
      node _T_390 = asUInt(reset) @[Debug.scala 56:24]
      node _T_391 = eq(_T_390, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_391 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage3_1: ", _T_385) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_392 = asUInt(reset) @[Debug.scala 57:13]
      node _T_393 = eq(_T_392, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_393 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "%d: [dcache S3]: metawrite idx %x wmask %b meta %x%x:%x\n", _T_382, io.metaWriteBus.req.bits.setIdx, io.metaWriteBus.req.bits.waymask, io.metaWriteBus.req.bits.data.valid, io.metaWriteBus.req.bits.data.dirty, io.metaWriteBus.req.bits.data.tag) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    reg _T_394 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_395 = add(_T_394, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_396 = tail(_T_395, 1) @[GTimer.scala 25:12]
    _T_394 <= _T_396 @[GTimer.scala 25:7]
    wire _T_397 : UInt<1>
    _T_397 <= UInt<1>("h00")
    node _T_398 = and(UInt<1>("h01"), _T_397) @[Debug.scala 55:16]
    when _T_398 : @[Debug.scala 55:31]
      node _T_399 = asUInt(reset) @[Debug.scala 56:24]
      node _T_400 = eq(_T_399, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_400 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage3_1: ", _T_394) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_401 = asUInt(reset) @[Debug.scala 57:13]
      node _T_402 = eq(_T_401, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_402 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), " in.ready = %d, in.valid = %d, hit = %x, state = %d, addr = %x cmd:%d probe:%d isFinish:%d\n", io.in.ready, io.in.valid, hit, state, io.in.bits.req.addr, io.in.bits.req.cmd, probe, io.isFinish) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    reg _T_403 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_404 = add(_T_403, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_405 = tail(_T_404, 1) @[GTimer.scala 25:12]
    _T_403 <= _T_405 @[GTimer.scala 25:7]
    wire _T_406 : UInt<1>
    _T_406 <= UInt<1>("h00")
    node _T_407 = and(UInt<1>("h01"), _T_406) @[Debug.scala 55:16]
    when _T_407 : @[Debug.scala 55:31]
      node _T_408 = asUInt(reset) @[Debug.scala 56:24]
      node _T_409 = eq(_T_408, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_409 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage3_1: ", _T_403) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_410 = asUInt(reset) @[Debug.scala 57:13]
      node _T_411 = eq(_T_410, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_411 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), " out.valid:%d rdata:%x cmd:%d user:%x id:%x \n", io.out.valid, io.out.bits.rdata, io.out.bits.cmd, UInt<1>("h00"), UInt<1>("h00")) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    reg _T_412 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_413 = add(_T_412, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_414 = tail(_T_413, 1) @[GTimer.scala 25:12]
    _T_412 <= _T_414 @[GTimer.scala 25:7]
    wire _T_415 : UInt<1>
    _T_415 <= UInt<1>("h00")
    node _T_416 = and(UInt<1>("h01"), _T_415) @[Debug.scala 55:16]
    when _T_416 : @[Debug.scala 55:31]
      node _T_417 = asUInt(reset) @[Debug.scala 56:24]
      node _T_418 = eq(_T_417, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_418 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage3_1: ", _T_412) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_419 = asUInt(reset) @[Debug.scala 57:13]
      node _T_420 = eq(_T_419, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_420 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), " DHW: (%d, %d), data:%x setIdx:%x MHW:(%d, %d)\n", dataHitWriteBus.req.valid, dataHitWriteBus.req.ready, dataHitWriteBus.req.bits.data.data, dataHitWriteBus.req.bits.setIdx, metaHitWriteBus.req.valid, metaHitWriteBus.req.ready) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_421 = cat(io.in.bits.datas[1].data, io.in.bits.datas[0].data) @[Cache.scala 456:48]
    node _T_422 = cat(io.in.bits.datas[3].data, io.in.bits.datas[2].data) @[Cache.scala 456:48]
    node _T_423 = cat(_T_422, _T_421) @[Cache.scala 456:48]
    reg _T_424 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_425 = add(_T_424, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_426 = tail(_T_425, 1) @[GTimer.scala 25:12]
    _T_424 <= _T_426 @[GTimer.scala 25:7]
    wire _T_427 : UInt<1>
    _T_427 <= UInt<1>("h00")
    node _T_428 = and(UInt<1>("h01"), _T_427) @[Debug.scala 55:16]
    when _T_428 : @[Debug.scala 55:31]
      node _T_429 = asUInt(reset) @[Debug.scala 56:24]
      node _T_430 = eq(_T_429, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_430 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage3_1: ", _T_424) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_431 = asUInt(reset) @[Debug.scala 57:13]
      node _T_432 = eq(_T_431, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_432 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), " DreadCache: %x \n", _T_423) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    reg _T_433 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_434 = add(_T_433, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_435 = tail(_T_434, 1) @[GTimer.scala 25:12]
    _T_433 <= _T_435 @[GTimer.scala 25:7]
    wire _T_436 : UInt<1>
    _T_436 <= UInt<1>("h00")
    node _T_437 = and(UInt<1>("h01"), _T_436) @[Debug.scala 55:16]
    when _T_437 : @[Debug.scala 55:31]
      node _T_438 = asUInt(reset) @[Debug.scala 56:24]
      node _T_439 = eq(_T_438, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_439 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage3_1: ", _T_433) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_440 = asUInt(reset) @[Debug.scala 57:13]
      node _T_441 = eq(_T_440, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_441 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), " useFD:%d isFD:%d FD:%x DreadArray:%x dataRead:%x inwaymask:%x FDwaymask:%x \n", useForwardData, io.in.bits.isForwardData, io.in.bits.forwardData.data.data, _T_49.data, dataRead, io.in.bits.waymask, io.in.bits.forwardData.waymask) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_442 = and(io.dataWriteBus.req.ready, io.dataWriteBus.req.valid) @[Decoupled.scala 40:37]
    reg _T_443 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_444 = add(_T_443, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_445 = tail(_T_444, 1) @[GTimer.scala 25:12]
    _T_443 <= _T_445 @[GTimer.scala 25:7]
    wire _T_446 : UInt<1>
    _T_446 <= UInt<1>("h00")
    node _T_447 = and(_T_442, _T_446) @[Debug.scala 55:16]
    when _T_447 : @[Debug.scala 55:31]
      node _T_448 = asUInt(reset) @[Debug.scala 56:24]
      node _T_449 = eq(_T_448, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_449 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage3_1: ", _T_443) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_450 = asUInt(reset) @[Debug.scala 57:13]
      node _T_451 = eq(_T_450, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_451 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[WB] waymask: %b data:%x setIdx:%x\n", io.dataWriteBus.req.bits.waymask, io.dataWriteBus.req.bits.data.data, io.dataWriteBus.req.bits.setIdx) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_452 = eq(state, UInt<4>("h03")) @[Cache.scala 460:16]
    node _T_453 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
    node _T_454 = and(_T_452, _T_453) @[Cache.scala 460:35]
    wire _T_455 : {tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _T_456 : UInt<32>
    _T_456 <= io.in.bits.req.addr
    node _T_457 = bits(_T_456, 2, 0) @[Cache.scala 79:45]
    _T_455.byteOffset <= _T_457 @[Cache.scala 79:45]
    node _T_458 = bits(_T_456, 5, 3) @[Cache.scala 79:45]
    _T_455.wordIndex <= _T_458 @[Cache.scala 79:45]
    node _T_459 = bits(_T_456, 12, 6) @[Cache.scala 79:45]
    _T_455.index <= _T_459 @[Cache.scala 79:45]
    node _T_460 = bits(_T_456, 31, 13) @[Cache.scala 79:45]
    _T_455.tag <= _T_460 @[Cache.scala 79:45]
    reg _T_461 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_462 = add(_T_461, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_463 = tail(_T_462, 1) @[GTimer.scala 25:12]
    _T_461 <= _T_463 @[GTimer.scala 25:7]
    wire _T_464 : UInt<1>
    _T_464 <= UInt<1>("h00")
    node _T_465 = and(_T_454, _T_464) @[Debug.scala 55:16]
    when _T_465 : @[Debug.scala 55:31]
      node _T_466 = asUInt(reset) @[Debug.scala 56:24]
      node _T_467 = eq(_T_466, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_467 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage3_1: ", _T_461) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_468 = asUInt(reset) @[Debug.scala 57:13]
      node _T_469 = eq(_T_468, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_469 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[COUTW] cnt %x addr %x data %x cmd %x size %x wmask %x tag %x idx %x waymask %b \n", value_2, io.mem.req.bits.addr, io.mem.req.bits.wdata, io.mem.req.bits.cmd, io.mem.req.bits.size, io.mem.req.bits.wmask, addr.tag, _T_455.index, io.in.bits.waymask) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_470 = eq(state, UInt<4>("h01")) @[Cache.scala 461:16]
    node _T_471 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
    node _T_472 = and(_T_470, _T_471) @[Cache.scala 461:34]
    wire _T_473 : {tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _T_474 : UInt<32>
    _T_474 <= io.in.bits.req.addr
    node _T_475 = bits(_T_474, 2, 0) @[Cache.scala 79:45]
    _T_473.byteOffset <= _T_475 @[Cache.scala 79:45]
    node _T_476 = bits(_T_474, 5, 3) @[Cache.scala 79:45]
    _T_473.wordIndex <= _T_476 @[Cache.scala 79:45]
    node _T_477 = bits(_T_474, 12, 6) @[Cache.scala 79:45]
    _T_473.index <= _T_477 @[Cache.scala 79:45]
    node _T_478 = bits(_T_474, 31, 13) @[Cache.scala 79:45]
    _T_473.tag <= _T_478 @[Cache.scala 79:45]
    reg _T_479 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_480 = add(_T_479, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_481 = tail(_T_480, 1) @[GTimer.scala 25:12]
    _T_479 <= _T_481 @[GTimer.scala 25:7]
    wire _T_482 : UInt<1>
    _T_482 <= UInt<1>("h00")
    node _T_483 = and(_T_472, _T_482) @[Debug.scala 55:16]
    when _T_483 : @[Debug.scala 55:31]
      node _T_484 = asUInt(reset) @[Debug.scala 56:24]
      node _T_485 = eq(_T_484, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_485 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage3_1: ", _T_479) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_486 = asUInt(reset) @[Debug.scala 57:13]
      node _T_487 = eq(_T_486, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_487 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[COUTR] addr %x tag %x idx %x waymask %b \n", io.mem.req.bits.addr, addr.tag, _T_473.index, io.in.bits.waymask) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_488 = eq(state, UInt<4>("h02")) @[Cache.scala 462:16]
    node _T_489 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
    node _T_490 = and(_T_488, _T_489) @[Cache.scala 462:35]
    wire _T_491 : {tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _T_492 : UInt<32>
    _T_492 <= io.in.bits.req.addr
    node _T_493 = bits(_T_492, 2, 0) @[Cache.scala 79:45]
    _T_491.byteOffset <= _T_493 @[Cache.scala 79:45]
    node _T_494 = bits(_T_492, 5, 3) @[Cache.scala 79:45]
    _T_491.wordIndex <= _T_494 @[Cache.scala 79:45]
    node _T_495 = bits(_T_492, 12, 6) @[Cache.scala 79:45]
    _T_491.index <= _T_495 @[Cache.scala 79:45]
    node _T_496 = bits(_T_492, 31, 13) @[Cache.scala 79:45]
    _T_491.tag <= _T_496 @[Cache.scala 79:45]
    reg _T_497 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_498 = add(_T_497, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_499 = tail(_T_498, 1) @[GTimer.scala 25:12]
    _T_497 <= _T_499 @[GTimer.scala 25:7]
    wire _T_500 : UInt<1>
    _T_500 <= UInt<1>("h00")
    node _T_501 = and(_T_490, _T_500) @[Debug.scala 55:16]
    when _T_501 : @[Debug.scala 55:31]
      node _T_502 = asUInt(reset) @[Debug.scala 56:24]
      node _T_503 = eq(_T_502, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_503 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage3_1: ", _T_497) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_504 = asUInt(reset) @[Debug.scala 57:13]
      node _T_505 = eq(_T_504, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_505 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[COUTR] cnt %x data %x tag %x idx %x waymask %b \n", value_1, io.mem.resp.bits.rdata, addr.tag, _T_491.index, io.in.bits.waymask) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    
  module SRAMTemplate_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip r : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<7>}}, flip resp : {data : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4]}}, flip w : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<7>, data : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}}}
    
    smem array : UInt<21>[4][128], undefined @[SRAMTemplate.scala 76:26]
    wire resetState : UInt<1>
    resetState <= UInt<1>("h00")
    wire resetSet : UInt
    resetSet <= UInt<1>("h00")
    reg _T : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[SRAMTemplate.scala 80:30]
    reg _T_1 : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[Counter.scala 29:33]
    wire _T_2 : UInt<1>
    _T_2 <= UInt<1>("h00")
    when _T : @[Counter.scala 67:17]
      node _T_3 = eq(_T_1, UInt<7>("h07f")) @[Counter.scala 38:24]
      node _T_4 = add(_T_1, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_5 = tail(_T_4, 1) @[Counter.scala 39:22]
      _T_1 <= _T_5 @[Counter.scala 39:13]
      _T_2 <= _T_3 @[Counter.scala 67:24]
      skip @[Counter.scala 67:17]
    when _T_2 : @[SRAMTemplate.scala 82:24]
      _T <= UInt<1>("h00") @[SRAMTemplate.scala 82:38]
      skip @[SRAMTemplate.scala 82:24]
    resetState <= _T @[SRAMTemplate.scala 84:16]
    resetSet <= _T_1 @[SRAMTemplate.scala 85:14]
    node wen = or(io.w.req.valid, resetState) @[SRAMTemplate.scala 88:52]
    node _T_6 = eq(wen, UInt<1>("h00")) @[SRAMTemplate.scala 89:41]
    node realRen = and(io.r.req.valid, _T_6) @[SRAMTemplate.scala 89:38]
    node setIdx = mux(resetState, resetSet, io.w.req.bits.setIdx) @[SRAMTemplate.scala 91:19]
    wire _T_7 : UInt<21> @[SRAMTemplate.scala 92:47]
    _T_7 <= UInt<1>("h00") @[SRAMTemplate.scala 92:47]
    node _T_8 = cat(io.w.req.bits.data.tag, io.w.req.bits.data.valid) @[SRAMTemplate.scala 92:78]
    node _T_9 = cat(_T_8, io.w.req.bits.data.dirty) @[SRAMTemplate.scala 92:78]
    node wdataword = mux(resetState, _T_7, _T_9) @[SRAMTemplate.scala 92:22]
    node _T_10 = mux(UInt<1>("h01"), UInt<4>("h0f"), UInt<4>("h00")) @[Bitwise.scala 72:12]
    node waymask = mux(resetState, _T_10, io.w.req.bits.waymask) @[SRAMTemplate.scala 93:20]
    wire wdata : UInt<21>[4] @[SRAMTemplate.scala 94:22]
    wdata[0] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[1] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[2] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[3] <= wdataword @[SRAMTemplate.scala 94:22]
    when wen : @[SRAMTemplate.scala 95:14]
      node _T_11 = bits(waymask, 0, 0) @[SRAMTemplate.scala 95:51]
      node _T_12 = bits(waymask, 1, 1) @[SRAMTemplate.scala 95:51]
      node _T_13 = bits(waymask, 2, 2) @[SRAMTemplate.scala 95:51]
      node _T_14 = bits(waymask, 3, 3) @[SRAMTemplate.scala 95:51]
      node _T_15 = or(setIdx, UInt<7>("h00"))
      node _T_16 = bits(_T_15, 6, 0)
      write mport _T_17 = array[_T_16], clock
      when _T_11 :
        _T_17[0] <= wdata[0]
        skip
      when _T_12 :
        _T_17[1] <= wdata[1]
        skip
      when _T_13 :
        _T_17[2] <= wdata[2]
        skip
      when _T_14 :
        _T_17[3] <= wdata[3]
        skip
      skip @[SRAMTemplate.scala 95:14]
    wire _T_18 : UInt @[SRAMTemplate.scala 98:31]
    _T_18 is invalid @[SRAMTemplate.scala 98:31]
    when realRen : @[SRAMTemplate.scala 98:31]
      _T_18 <= io.r.req.bits.setIdx @[SRAMTemplate.scala 98:31]
      node _T_19 = or(_T_18, UInt<7>("h00")) @[SRAMTemplate.scala 98:31]
      node _T_20 = bits(_T_19, 6, 0) @[SRAMTemplate.scala 98:31]
      read mport _T_21 = array[_T_20], clock @[SRAMTemplate.scala 98:31]
      skip @[SRAMTemplate.scala 98:31]
    wire rdata_0 : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>} @[SRAMTemplate.scala 98:78]
    wire _T_22 : UInt<21>
    _T_22 <= _T_21[0]
    node _T_23 = bits(_T_22, 0, 0) @[SRAMTemplate.scala 98:78]
    rdata_0.dirty <= _T_23 @[SRAMTemplate.scala 98:78]
    node _T_24 = bits(_T_22, 1, 1) @[SRAMTemplate.scala 98:78]
    rdata_0.valid <= _T_24 @[SRAMTemplate.scala 98:78]
    node _T_25 = bits(_T_22, 20, 2) @[SRAMTemplate.scala 98:78]
    rdata_0.tag <= _T_25 @[SRAMTemplate.scala 98:78]
    wire rdata_1 : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>} @[SRAMTemplate.scala 98:78]
    wire _T_26 : UInt<21>
    _T_26 <= _T_21[1]
    node _T_27 = bits(_T_26, 0, 0) @[SRAMTemplate.scala 98:78]
    rdata_1.dirty <= _T_27 @[SRAMTemplate.scala 98:78]
    node _T_28 = bits(_T_26, 1, 1) @[SRAMTemplate.scala 98:78]
    rdata_1.valid <= _T_28 @[SRAMTemplate.scala 98:78]
    node _T_29 = bits(_T_26, 20, 2) @[SRAMTemplate.scala 98:78]
    rdata_1.tag <= _T_29 @[SRAMTemplate.scala 98:78]
    wire rdata_2 : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>} @[SRAMTemplate.scala 98:78]
    wire _T_30 : UInt<21>
    _T_30 <= _T_21[2]
    node _T_31 = bits(_T_30, 0, 0) @[SRAMTemplate.scala 98:78]
    rdata_2.dirty <= _T_31 @[SRAMTemplate.scala 98:78]
    node _T_32 = bits(_T_30, 1, 1) @[SRAMTemplate.scala 98:78]
    rdata_2.valid <= _T_32 @[SRAMTemplate.scala 98:78]
    node _T_33 = bits(_T_30, 20, 2) @[SRAMTemplate.scala 98:78]
    rdata_2.tag <= _T_33 @[SRAMTemplate.scala 98:78]
    wire rdata_3 : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>} @[SRAMTemplate.scala 98:78]
    wire _T_34 : UInt<21>
    _T_34 <= _T_21[3]
    node _T_35 = bits(_T_34, 0, 0) @[SRAMTemplate.scala 98:78]
    rdata_3.dirty <= _T_35 @[SRAMTemplate.scala 98:78]
    node _T_36 = bits(_T_34, 1, 1) @[SRAMTemplate.scala 98:78]
    rdata_3.valid <= _T_36 @[SRAMTemplate.scala 98:78]
    node _T_37 = bits(_T_34, 20, 2) @[SRAMTemplate.scala 98:78]
    rdata_3.tag <= _T_37 @[SRAMTemplate.scala 98:78]
    wire _T_38 : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4] @[SRAMTemplate.scala 99:28]
    _T_38[0].dirty <= rdata_0.dirty @[SRAMTemplate.scala 99:28]
    _T_38[0].valid <= rdata_0.valid @[SRAMTemplate.scala 99:28]
    _T_38[0].tag <= rdata_0.tag @[SRAMTemplate.scala 99:28]
    _T_38[1].dirty <= rdata_1.dirty @[SRAMTemplate.scala 99:28]
    _T_38[1].valid <= rdata_1.valid @[SRAMTemplate.scala 99:28]
    _T_38[1].tag <= rdata_1.tag @[SRAMTemplate.scala 99:28]
    _T_38[2].dirty <= rdata_2.dirty @[SRAMTemplate.scala 99:28]
    _T_38[2].valid <= rdata_2.valid @[SRAMTemplate.scala 99:28]
    _T_38[2].tag <= rdata_2.tag @[SRAMTemplate.scala 99:28]
    _T_38[3].dirty <= rdata_3.dirty @[SRAMTemplate.scala 99:28]
    _T_38[3].valid <= rdata_3.valid @[SRAMTemplate.scala 99:28]
    _T_38[3].tag <= rdata_3.tag @[SRAMTemplate.scala 99:28]
    io.r.resp.data[0].dirty <= _T_38[0].dirty @[SRAMTemplate.scala 99:18]
    io.r.resp.data[0].valid <= _T_38[0].valid @[SRAMTemplate.scala 99:18]
    io.r.resp.data[0].tag <= _T_38[0].tag @[SRAMTemplate.scala 99:18]
    io.r.resp.data[1].dirty <= _T_38[1].dirty @[SRAMTemplate.scala 99:18]
    io.r.resp.data[1].valid <= _T_38[1].valid @[SRAMTemplate.scala 99:18]
    io.r.resp.data[1].tag <= _T_38[1].tag @[SRAMTemplate.scala 99:18]
    io.r.resp.data[2].dirty <= _T_38[2].dirty @[SRAMTemplate.scala 99:18]
    io.r.resp.data[2].valid <= _T_38[2].valid @[SRAMTemplate.scala 99:18]
    io.r.resp.data[2].tag <= _T_38[2].tag @[SRAMTemplate.scala 99:18]
    io.r.resp.data[3].dirty <= _T_38[3].dirty @[SRAMTemplate.scala 99:18]
    io.r.resp.data[3].valid <= _T_38[3].valid @[SRAMTemplate.scala 99:18]
    io.r.resp.data[3].tag <= _T_38[3].tag @[SRAMTemplate.scala 99:18]
    node _T_39 = eq(resetState, UInt<1>("h00")) @[SRAMTemplate.scala 101:21]
    node _T_40 = eq(wen, UInt<1>("h00")) @[SRAMTemplate.scala 101:53]
    node _T_41 = and(_T_39, _T_40) @[SRAMTemplate.scala 101:33]
    io.r.req.ready <= _T_41 @[SRAMTemplate.scala 101:18]
    io.w.req.ready <= UInt<1>("h01") @[SRAMTemplate.scala 102:18]
    
  module Arbiter_7 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<7>}}[1], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<7>}}, chosen : UInt<0>}
    
    io.chosen <= UInt<1>("h00") @[Arbiter.scala 123:13]
    io.out.bits.setIdx <= io.in[0].bits.setIdx @[Arbiter.scala 124:15]
    node _T = and(UInt<1>("h01"), io.out.ready) @[Arbiter.scala 134:19]
    io.in[0].ready <= _T @[Arbiter.scala 134:14]
    node _T_1 = eq(UInt<1>("h01"), UInt<1>("h00")) @[Arbiter.scala 135:19]
    node _T_2 = or(_T_1, io.in[0].valid) @[Arbiter.scala 135:31]
    io.out.valid <= _T_2 @[Arbiter.scala 135:16]
    
  module SRAMTemplateWithArbiter_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip r : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<7>}}, flip resp : {data : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4]}}[1], flip w : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<7>, data : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}}}
    
    inst ram of SRAMTemplate_3 @[SRAMTemplate.scala 121:19]
    ram.clock <= clock
    ram.reset <= reset
    ram.io.w.req.bits.waymask <= io.w.req.bits.waymask @[SRAMTemplate.scala 122:12]
    ram.io.w.req.bits.data.dirty <= io.w.req.bits.data.dirty @[SRAMTemplate.scala 122:12]
    ram.io.w.req.bits.data.valid <= io.w.req.bits.data.valid @[SRAMTemplate.scala 122:12]
    ram.io.w.req.bits.data.tag <= io.w.req.bits.data.tag @[SRAMTemplate.scala 122:12]
    ram.io.w.req.bits.setIdx <= io.w.req.bits.setIdx @[SRAMTemplate.scala 122:12]
    ram.io.w.req.valid <= io.w.req.valid @[SRAMTemplate.scala 122:12]
    io.w.req.ready <= ram.io.w.req.ready @[SRAMTemplate.scala 122:12]
    inst readArb of Arbiter_7 @[SRAMTemplate.scala 124:23]
    readArb.clock <= clock
    readArb.reset <= reset
    readArb.io.in[0].bits.setIdx <= io.r[0].req.bits.setIdx @[SRAMTemplate.scala 125:17]
    readArb.io.in[0].valid <= io.r[0].req.valid @[SRAMTemplate.scala 125:17]
    io.r[0].req.ready <= readArb.io.in[0].ready @[SRAMTemplate.scala 125:17]
    ram.io.r.req.bits.setIdx <= readArb.io.out.bits.setIdx @[SRAMTemplate.scala 126:16]
    ram.io.r.req.valid <= readArb.io.out.valid @[SRAMTemplate.scala 126:16]
    readArb.io.out.ready <= ram.io.r.req.ready @[SRAMTemplate.scala 126:16]
    node _T = and(io.r[0].req.ready, io.r[0].req.valid) @[Decoupled.scala 40:37]
    reg _T_1 : UInt<1>, clock @[SRAMTemplate.scala 130:58]
    _T_1 <= _T @[SRAMTemplate.scala 130:58]
    wire _T_2 : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4] @[Hold.scala 23:81]
    _T_2[0].dirty <= UInt<1>("h00") @[Hold.scala 23:81]
    _T_2[0].valid <= UInt<1>("h00") @[Hold.scala 23:81]
    _T_2[0].tag <= UInt<19>("h00") @[Hold.scala 23:81]
    _T_2[1].dirty <= UInt<1>("h00") @[Hold.scala 23:81]
    _T_2[1].valid <= UInt<1>("h00") @[Hold.scala 23:81]
    _T_2[1].tag <= UInt<19>("h00") @[Hold.scala 23:81]
    _T_2[2].dirty <= UInt<1>("h00") @[Hold.scala 23:81]
    _T_2[2].valid <= UInt<1>("h00") @[Hold.scala 23:81]
    _T_2[2].tag <= UInt<19>("h00") @[Hold.scala 23:81]
    _T_2[3].dirty <= UInt<1>("h00") @[Hold.scala 23:81]
    _T_2[3].valid <= UInt<1>("h00") @[Hold.scala 23:81]
    _T_2[3].tag <= UInt<19>("h00") @[Hold.scala 23:81]
    reg _T_3 : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4], clock with : (reset => (reset, _T_2)) @[Reg.scala 27:20]
    when _T_1 : @[Reg.scala 28:19]
      _T_3[0].dirty <= ram.io.r.resp.data[0].dirty @[Reg.scala 28:23]
      _T_3[0].valid <= ram.io.r.resp.data[0].valid @[Reg.scala 28:23]
      _T_3[0].tag <= ram.io.r.resp.data[0].tag @[Reg.scala 28:23]
      _T_3[1].dirty <= ram.io.r.resp.data[1].dirty @[Reg.scala 28:23]
      _T_3[1].valid <= ram.io.r.resp.data[1].valid @[Reg.scala 28:23]
      _T_3[1].tag <= ram.io.r.resp.data[1].tag @[Reg.scala 28:23]
      _T_3[2].dirty <= ram.io.r.resp.data[2].dirty @[Reg.scala 28:23]
      _T_3[2].valid <= ram.io.r.resp.data[2].valid @[Reg.scala 28:23]
      _T_3[2].tag <= ram.io.r.resp.data[2].tag @[Reg.scala 28:23]
      _T_3[3].dirty <= ram.io.r.resp.data[3].dirty @[Reg.scala 28:23]
      _T_3[3].valid <= ram.io.r.resp.data[3].valid @[Reg.scala 28:23]
      _T_3[3].tag <= ram.io.r.resp.data[3].tag @[Reg.scala 28:23]
      skip @[Reg.scala 28:19]
    node _T_4 = mux(_T_1, ram.io.r.resp.data, _T_3) @[Hold.scala 23:48]
    io.r[0].resp.data[0].dirty <= _T_4[0].dirty @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[0].valid <= _T_4[0].valid @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[0].tag <= _T_4[0].tag @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[1].dirty <= _T_4[1].dirty @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[1].valid <= _T_4[1].valid @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[1].tag <= _T_4[1].tag @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[2].dirty <= _T_4[2].dirty @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[2].valid <= _T_4[2].valid @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[2].tag <= _T_4[2].tag @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[3].dirty <= _T_4[3].dirty @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[3].valid <= _T_4[3].valid @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[3].tag <= _T_4[3].tag @[SRAMTemplate.scala 130:17]
    
  module SRAMTemplate_4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip r : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<10>}}, flip resp : {data : {data : UInt<64>}[4]}}, flip w : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<10>, data : {data : UInt<64>}, waymask : UInt<4>}}}}
    
    smem array : UInt<64>[4][1024], undefined @[SRAMTemplate.scala 76:26]
    wire resetState : UInt<1>
    resetState <= UInt<1>("h00")
    wire resetSet : UInt
    resetSet <= UInt<1>("h00")
    node wen = or(io.w.req.valid, resetState) @[SRAMTemplate.scala 88:52]
    node _T = eq(wen, UInt<1>("h00")) @[SRAMTemplate.scala 89:41]
    node realRen = and(io.r.req.valid, _T) @[SRAMTemplate.scala 89:38]
    node setIdx = mux(resetState, resetSet, io.w.req.bits.setIdx) @[SRAMTemplate.scala 91:19]
    wire _T_1 : UInt<64> @[SRAMTemplate.scala 92:47]
    _T_1 <= UInt<1>("h00") @[SRAMTemplate.scala 92:47]
    node wdataword = mux(resetState, _T_1, io.w.req.bits.data.data) @[SRAMTemplate.scala 92:22]
    node _T_2 = mux(UInt<1>("h01"), UInt<4>("h0f"), UInt<4>("h00")) @[Bitwise.scala 72:12]
    node waymask = mux(resetState, _T_2, io.w.req.bits.waymask) @[SRAMTemplate.scala 93:20]
    wire wdata : UInt<64>[4] @[SRAMTemplate.scala 94:22]
    wdata[0] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[1] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[2] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[3] <= wdataword @[SRAMTemplate.scala 94:22]
    when wen : @[SRAMTemplate.scala 95:14]
      node _T_3 = bits(waymask, 0, 0) @[SRAMTemplate.scala 95:51]
      node _T_4 = bits(waymask, 1, 1) @[SRAMTemplate.scala 95:51]
      node _T_5 = bits(waymask, 2, 2) @[SRAMTemplate.scala 95:51]
      node _T_6 = bits(waymask, 3, 3) @[SRAMTemplate.scala 95:51]
      node _T_7 = or(setIdx, UInt<10>("h00"))
      node _T_8 = bits(_T_7, 9, 0)
      write mport _T_9 = array[_T_8], clock
      when _T_3 :
        _T_9[0] <= wdata[0]
        skip
      when _T_4 :
        _T_9[1] <= wdata[1]
        skip
      when _T_5 :
        _T_9[2] <= wdata[2]
        skip
      when _T_6 :
        _T_9[3] <= wdata[3]
        skip
      skip @[SRAMTemplate.scala 95:14]
    wire _T_10 : UInt @[SRAMTemplate.scala 98:31]
    _T_10 is invalid @[SRAMTemplate.scala 98:31]
    when realRen : @[SRAMTemplate.scala 98:31]
      _T_10 <= io.r.req.bits.setIdx @[SRAMTemplate.scala 98:31]
      node _T_11 = or(_T_10, UInt<10>("h00")) @[SRAMTemplate.scala 98:31]
      node _T_12 = bits(_T_11, 9, 0) @[SRAMTemplate.scala 98:31]
      read mport _T_13 = array[_T_12], clock @[SRAMTemplate.scala 98:31]
      skip @[SRAMTemplate.scala 98:31]
    wire rdata_0 : {data : UInt<64>} @[SRAMTemplate.scala 98:78]
    wire _T_14 : UInt<64>
    _T_14 <= _T_13[0]
    node _T_15 = bits(_T_14, 63, 0) @[SRAMTemplate.scala 98:78]
    rdata_0.data <= _T_15 @[SRAMTemplate.scala 98:78]
    wire rdata_1 : {data : UInt<64>} @[SRAMTemplate.scala 98:78]
    wire _T_16 : UInt<64>
    _T_16 <= _T_13[1]
    node _T_17 = bits(_T_16, 63, 0) @[SRAMTemplate.scala 98:78]
    rdata_1.data <= _T_17 @[SRAMTemplate.scala 98:78]
    wire rdata_2 : {data : UInt<64>} @[SRAMTemplate.scala 98:78]
    wire _T_18 : UInt<64>
    _T_18 <= _T_13[2]
    node _T_19 = bits(_T_18, 63, 0) @[SRAMTemplate.scala 98:78]
    rdata_2.data <= _T_19 @[SRAMTemplate.scala 98:78]
    wire rdata_3 : {data : UInt<64>} @[SRAMTemplate.scala 98:78]
    wire _T_20 : UInt<64>
    _T_20 <= _T_13[3]
    node _T_21 = bits(_T_20, 63, 0) @[SRAMTemplate.scala 98:78]
    rdata_3.data <= _T_21 @[SRAMTemplate.scala 98:78]
    wire _T_22 : {data : UInt<64>}[4] @[SRAMTemplate.scala 99:28]
    _T_22[0].data <= rdata_0.data @[SRAMTemplate.scala 99:28]
    _T_22[1].data <= rdata_1.data @[SRAMTemplate.scala 99:28]
    _T_22[2].data <= rdata_2.data @[SRAMTemplate.scala 99:28]
    _T_22[3].data <= rdata_3.data @[SRAMTemplate.scala 99:28]
    io.r.resp.data[0].data <= _T_22[0].data @[SRAMTemplate.scala 99:18]
    io.r.resp.data[1].data <= _T_22[1].data @[SRAMTemplate.scala 99:18]
    io.r.resp.data[2].data <= _T_22[2].data @[SRAMTemplate.scala 99:18]
    io.r.resp.data[3].data <= _T_22[3].data @[SRAMTemplate.scala 99:18]
    node _T_23 = eq(resetState, UInt<1>("h00")) @[SRAMTemplate.scala 101:21]
    node _T_24 = eq(wen, UInt<1>("h00")) @[SRAMTemplate.scala 101:53]
    node _T_25 = and(_T_23, _T_24) @[SRAMTemplate.scala 101:33]
    io.r.req.ready <= _T_25 @[SRAMTemplate.scala 101:18]
    io.w.req.ready <= UInt<1>("h01") @[SRAMTemplate.scala 102:18]
    
  module Arbiter_8 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<10>}}[2], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<10>}}, chosen : UInt<1>}
    
    io.chosen <= UInt<1>("h01") @[Arbiter.scala 123:13]
    io.out.bits.setIdx <= io.in[1].bits.setIdx @[Arbiter.scala 124:15]
    when io.in[0].valid : @[Arbiter.scala 126:27]
      io.chosen <= UInt<1>("h00") @[Arbiter.scala 127:17]
      io.out.bits.setIdx <= io.in[0].bits.setIdx @[Arbiter.scala 128:19]
      skip @[Arbiter.scala 126:27]
    node grant_1 = eq(io.in[0].valid, UInt<1>("h00")) @[Arbiter.scala 31:78]
    node _T = and(UInt<1>("h01"), io.out.ready) @[Arbiter.scala 134:19]
    io.in[0].ready <= _T @[Arbiter.scala 134:14]
    node _T_1 = and(grant_1, io.out.ready) @[Arbiter.scala 134:19]
    io.in[1].ready <= _T_1 @[Arbiter.scala 134:14]
    node _T_2 = eq(grant_1, UInt<1>("h00")) @[Arbiter.scala 135:19]
    node _T_3 = or(_T_2, io.in[1].valid) @[Arbiter.scala 135:31]
    io.out.valid <= _T_3 @[Arbiter.scala 135:16]
    
  module SRAMTemplateWithArbiter_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip r : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<10>}}, flip resp : {data : {data : UInt<64>}[4]}}[2], flip w : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<10>, data : {data : UInt<64>}, waymask : UInt<4>}}}}
    
    inst ram of SRAMTemplate_4 @[SRAMTemplate.scala 121:19]
    ram.clock <= clock
    ram.reset <= reset
    ram.io.w.req.bits.waymask <= io.w.req.bits.waymask @[SRAMTemplate.scala 122:12]
    ram.io.w.req.bits.data.data <= io.w.req.bits.data.data @[SRAMTemplate.scala 122:12]
    ram.io.w.req.bits.setIdx <= io.w.req.bits.setIdx @[SRAMTemplate.scala 122:12]
    ram.io.w.req.valid <= io.w.req.valid @[SRAMTemplate.scala 122:12]
    io.w.req.ready <= ram.io.w.req.ready @[SRAMTemplate.scala 122:12]
    inst readArb of Arbiter_8 @[SRAMTemplate.scala 124:23]
    readArb.clock <= clock
    readArb.reset <= reset
    readArb.io.in[0].bits.setIdx <= io.r[0].req.bits.setIdx @[SRAMTemplate.scala 125:17]
    readArb.io.in[0].valid <= io.r[0].req.valid @[SRAMTemplate.scala 125:17]
    io.r[0].req.ready <= readArb.io.in[0].ready @[SRAMTemplate.scala 125:17]
    readArb.io.in[1].bits.setIdx <= io.r[1].req.bits.setIdx @[SRAMTemplate.scala 125:17]
    readArb.io.in[1].valid <= io.r[1].req.valid @[SRAMTemplate.scala 125:17]
    io.r[1].req.ready <= readArb.io.in[1].ready @[SRAMTemplate.scala 125:17]
    ram.io.r.req.bits.setIdx <= readArb.io.out.bits.setIdx @[SRAMTemplate.scala 126:16]
    ram.io.r.req.valid <= readArb.io.out.valid @[SRAMTemplate.scala 126:16]
    readArb.io.out.ready <= ram.io.r.req.ready @[SRAMTemplate.scala 126:16]
    node _T = and(io.r[0].req.ready, io.r[0].req.valid) @[Decoupled.scala 40:37]
    reg _T_1 : UInt<1>, clock @[SRAMTemplate.scala 130:58]
    _T_1 <= _T @[SRAMTemplate.scala 130:58]
    wire _T_2 : {data : UInt<64>}[4] @[Hold.scala 23:81]
    _T_2[0].data <= UInt<64>("h00") @[Hold.scala 23:81]
    _T_2[1].data <= UInt<64>("h00") @[Hold.scala 23:81]
    _T_2[2].data <= UInt<64>("h00") @[Hold.scala 23:81]
    _T_2[3].data <= UInt<64>("h00") @[Hold.scala 23:81]
    reg _T_3 : {data : UInt<64>}[4], clock with : (reset => (reset, _T_2)) @[Reg.scala 27:20]
    when _T_1 : @[Reg.scala 28:19]
      _T_3[0].data <= ram.io.r.resp.data[0].data @[Reg.scala 28:23]
      _T_3[1].data <= ram.io.r.resp.data[1].data @[Reg.scala 28:23]
      _T_3[2].data <= ram.io.r.resp.data[2].data @[Reg.scala 28:23]
      _T_3[3].data <= ram.io.r.resp.data[3].data @[Reg.scala 28:23]
      skip @[Reg.scala 28:19]
    node _T_4 = mux(_T_1, ram.io.r.resp.data, _T_3) @[Hold.scala 23:48]
    io.r[0].resp.data[0].data <= _T_4[0].data @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[1].data <= _T_4[1].data @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[2].data <= _T_4[2].data @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[3].data <= _T_4[3].data @[SRAMTemplate.scala 130:17]
    node _T_5 = and(io.r[1].req.ready, io.r[1].req.valid) @[Decoupled.scala 40:37]
    reg _T_6 : UInt<1>, clock @[SRAMTemplate.scala 130:58]
    _T_6 <= _T_5 @[SRAMTemplate.scala 130:58]
    wire _T_7 : {data : UInt<64>}[4] @[Hold.scala 23:81]
    _T_7[0].data <= UInt<64>("h00") @[Hold.scala 23:81]
    _T_7[1].data <= UInt<64>("h00") @[Hold.scala 23:81]
    _T_7[2].data <= UInt<64>("h00") @[Hold.scala 23:81]
    _T_7[3].data <= UInt<64>("h00") @[Hold.scala 23:81]
    reg _T_8 : {data : UInt<64>}[4], clock with : (reset => (reset, _T_7)) @[Reg.scala 27:20]
    when _T_6 : @[Reg.scala 28:19]
      _T_8[0].data <= ram.io.r.resp.data[0].data @[Reg.scala 28:23]
      _T_8[1].data <= ram.io.r.resp.data[1].data @[Reg.scala 28:23]
      _T_8[2].data <= ram.io.r.resp.data[2].data @[Reg.scala 28:23]
      _T_8[3].data <= ram.io.r.resp.data[3].data @[Reg.scala 28:23]
      skip @[Reg.scala 28:19]
    node _T_9 = mux(_T_6, ram.io.r.resp.data, _T_8) @[Hold.scala 23:48]
    io.r[1].resp.data[0].data <= _T_9[0].data @[SRAMTemplate.scala 130:17]
    io.r[1].resp.data[1].data <= _T_9[1].data @[SRAMTemplate.scala 130:17]
    io.r[1].resp.data[2].data <= _T_9[2].data @[SRAMTemplate.scala 130:17]
    io.r[1].resp.data[3].data <= _T_9[3].data @[SRAMTemplate.scala 130:17]
    
  module Arbiter_9 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}[2], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, chosen : UInt<1>}
    
    io.chosen <= UInt<1>("h01") @[Arbiter.scala 123:13]
    io.out.bits.wdata <= io.in[1].bits.wdata @[Arbiter.scala 124:15]
    io.out.bits.wmask <= io.in[1].bits.wmask @[Arbiter.scala 124:15]
    io.out.bits.cmd <= io.in[1].bits.cmd @[Arbiter.scala 124:15]
    io.out.bits.size <= io.in[1].bits.size @[Arbiter.scala 124:15]
    io.out.bits.addr <= io.in[1].bits.addr @[Arbiter.scala 124:15]
    when io.in[0].valid : @[Arbiter.scala 126:27]
      io.chosen <= UInt<1>("h00") @[Arbiter.scala 127:17]
      io.out.bits.wdata <= io.in[0].bits.wdata @[Arbiter.scala 128:19]
      io.out.bits.wmask <= io.in[0].bits.wmask @[Arbiter.scala 128:19]
      io.out.bits.cmd <= io.in[0].bits.cmd @[Arbiter.scala 128:19]
      io.out.bits.size <= io.in[0].bits.size @[Arbiter.scala 128:19]
      io.out.bits.addr <= io.in[0].bits.addr @[Arbiter.scala 128:19]
      skip @[Arbiter.scala 126:27]
    node grant_1 = eq(io.in[0].valid, UInt<1>("h00")) @[Arbiter.scala 31:78]
    node _T = and(UInt<1>("h01"), io.out.ready) @[Arbiter.scala 134:19]
    io.in[0].ready <= _T @[Arbiter.scala 134:14]
    node _T_1 = and(grant_1, io.out.ready) @[Arbiter.scala 134:19]
    io.in[1].ready <= _T_1 @[Arbiter.scala 134:14]
    node _T_2 = eq(grant_1, UInt<1>("h00")) @[Arbiter.scala 135:19]
    node _T_3 = or(_T_2, io.in[1].valid) @[Arbiter.scala 135:31]
    io.out.valid <= _T_3 @[Arbiter.scala 135:16]
    
  module Cache_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}, flip flush : UInt<2>, out : {mem : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}, flip coh : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}}, mmio : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}, empty : UInt<1>}
    
    inst s1 of CacheStage1_1 @[Cache.scala 475:18]
    s1.clock <= clock
    s1.reset <= reset
    inst s2 of CacheStage2_1 @[Cache.scala 476:18]
    s2.clock <= clock
    s2.reset <= reset
    inst s3 of CacheStage3_1 @[Cache.scala 477:18]
    s3.clock <= clock
    s3.reset <= reset
    inst metaArray of SRAMTemplateWithArbiter_2 @[Cache.scala 478:25]
    metaArray.clock <= clock
    metaArray.reset <= reset
    inst dataArray of SRAMTemplateWithArbiter_3 @[Cache.scala 479:25]
    dataArray.clock <= clock
    dataArray.reset <= reset
    inst arb of Arbiter_9 @[Cache.scala 488:19]
    arb.clock <= clock
    arb.reset <= reset
    arb.io.in[1].bits.wdata <= io.in.req.bits.wdata @[Cache.scala 489:28]
    arb.io.in[1].bits.wmask <= io.in.req.bits.wmask @[Cache.scala 489:28]
    arb.io.in[1].bits.cmd <= io.in.req.bits.cmd @[Cache.scala 489:28]
    arb.io.in[1].bits.size <= io.in.req.bits.size @[Cache.scala 489:28]
    arb.io.in[1].bits.addr <= io.in.req.bits.addr @[Cache.scala 489:28]
    arb.io.in[1].valid <= io.in.req.valid @[Cache.scala 489:28]
    io.in.req.ready <= arb.io.in[1].ready @[Cache.scala 489:28]
    s1.io.in.bits.wdata <= arb.io.out.bits.wdata @[Cache.scala 491:12]
    s1.io.in.bits.wmask <= arb.io.out.bits.wmask @[Cache.scala 491:12]
    s1.io.in.bits.cmd <= arb.io.out.bits.cmd @[Cache.scala 491:12]
    s1.io.in.bits.size <= arb.io.out.bits.size @[Cache.scala 491:12]
    s1.io.in.bits.addr <= arb.io.out.bits.addr @[Cache.scala 491:12]
    s1.io.in.valid <= arb.io.out.valid @[Cache.scala 491:12]
    arb.io.out.ready <= s1.io.in.ready @[Cache.scala 491:12]
    node _T = and(s2.io.out.ready, s2.io.out.valid) @[Decoupled.scala 40:37]
    node _T_1 = bits(io.flush, 0, 0) @[Cache.scala 497:66]
    reg _T_2 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Pipeline.scala 24:24]
    when _T : @[Pipeline.scala 25:25]
      _T_2 <= UInt<1>("h00") @[Pipeline.scala 25:33]
      skip @[Pipeline.scala 25:25]
    node _T_3 = and(s1.io.out.valid, s2.io.in.ready) @[Pipeline.scala 26:22]
    when _T_3 : @[Pipeline.scala 26:38]
      _T_2 <= UInt<1>("h01") @[Pipeline.scala 26:46]
      skip @[Pipeline.scala 26:38]
    when _T_1 : @[Pipeline.scala 27:20]
      _T_2 <= UInt<1>("h00") @[Pipeline.scala 27:28]
      skip @[Pipeline.scala 27:20]
    s1.io.out.ready <= s2.io.in.ready @[Pipeline.scala 29:16]
    node _T_4 = and(s1.io.out.valid, s2.io.in.ready) @[Pipeline.scala 30:51]
    reg _T_5 : {req : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, clock @[Reg.scala 15:16]
    when _T_4 : @[Reg.scala 16:19]
      _T_5.req.wdata <= s1.io.out.bits.req.wdata @[Reg.scala 16:23]
      _T_5.req.wmask <= s1.io.out.bits.req.wmask @[Reg.scala 16:23]
      _T_5.req.cmd <= s1.io.out.bits.req.cmd @[Reg.scala 16:23]
      _T_5.req.size <= s1.io.out.bits.req.size @[Reg.scala 16:23]
      _T_5.req.addr <= s1.io.out.bits.req.addr @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    s2.io.in.bits.req.wdata <= _T_5.req.wdata @[Pipeline.scala 30:16]
    s2.io.in.bits.req.wmask <= _T_5.req.wmask @[Pipeline.scala 30:16]
    s2.io.in.bits.req.cmd <= _T_5.req.cmd @[Pipeline.scala 30:16]
    s2.io.in.bits.req.size <= _T_5.req.size @[Pipeline.scala 30:16]
    s2.io.in.bits.req.addr <= _T_5.req.addr @[Pipeline.scala 30:16]
    s2.io.in.valid <= _T_2 @[Pipeline.scala 31:17]
    node _T_6 = bits(io.flush, 1, 1) @[Cache.scala 498:64]
    reg _T_7 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Pipeline.scala 24:24]
    when s3.io.isFinish : @[Pipeline.scala 25:25]
      _T_7 <= UInt<1>("h00") @[Pipeline.scala 25:33]
      skip @[Pipeline.scala 25:25]
    node _T_8 = and(s2.io.out.valid, s3.io.in.ready) @[Pipeline.scala 26:22]
    when _T_8 : @[Pipeline.scala 26:38]
      _T_7 <= UInt<1>("h01") @[Pipeline.scala 26:46]
      skip @[Pipeline.scala 26:38]
    when _T_6 : @[Pipeline.scala 27:20]
      _T_7 <= UInt<1>("h00") @[Pipeline.scala 27:28]
      skip @[Pipeline.scala 27:20]
    s2.io.out.ready <= s3.io.in.ready @[Pipeline.scala 29:16]
    node _T_9 = and(s2.io.out.valid, s3.io.in.ready) @[Pipeline.scala 30:51]
    reg _T_10 : {req : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}, metas : {tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4], datas : {data : UInt<64>}[4], hit : UInt<1>, waymask : UInt<4>, mmio : UInt<1>, isForwardData : UInt<1>, forwardData : {setIdx : UInt<10>, data : {data : UInt<64>}, waymask : UInt<4>}}, clock @[Reg.scala 15:16]
    when _T_9 : @[Reg.scala 16:19]
      _T_10.forwardData.waymask <= s2.io.out.bits.forwardData.waymask @[Reg.scala 16:23]
      _T_10.forwardData.data.data <= s2.io.out.bits.forwardData.data.data @[Reg.scala 16:23]
      _T_10.forwardData.setIdx <= s2.io.out.bits.forwardData.setIdx @[Reg.scala 16:23]
      _T_10.isForwardData <= s2.io.out.bits.isForwardData @[Reg.scala 16:23]
      _T_10.mmio <= s2.io.out.bits.mmio @[Reg.scala 16:23]
      _T_10.waymask <= s2.io.out.bits.waymask @[Reg.scala 16:23]
      _T_10.hit <= s2.io.out.bits.hit @[Reg.scala 16:23]
      _T_10.datas[0].data <= s2.io.out.bits.datas[0].data @[Reg.scala 16:23]
      _T_10.datas[1].data <= s2.io.out.bits.datas[1].data @[Reg.scala 16:23]
      _T_10.datas[2].data <= s2.io.out.bits.datas[2].data @[Reg.scala 16:23]
      _T_10.datas[3].data <= s2.io.out.bits.datas[3].data @[Reg.scala 16:23]
      _T_10.metas[0].dirty <= s2.io.out.bits.metas[0].dirty @[Reg.scala 16:23]
      _T_10.metas[0].valid <= s2.io.out.bits.metas[0].valid @[Reg.scala 16:23]
      _T_10.metas[0].tag <= s2.io.out.bits.metas[0].tag @[Reg.scala 16:23]
      _T_10.metas[1].dirty <= s2.io.out.bits.metas[1].dirty @[Reg.scala 16:23]
      _T_10.metas[1].valid <= s2.io.out.bits.metas[1].valid @[Reg.scala 16:23]
      _T_10.metas[1].tag <= s2.io.out.bits.metas[1].tag @[Reg.scala 16:23]
      _T_10.metas[2].dirty <= s2.io.out.bits.metas[2].dirty @[Reg.scala 16:23]
      _T_10.metas[2].valid <= s2.io.out.bits.metas[2].valid @[Reg.scala 16:23]
      _T_10.metas[2].tag <= s2.io.out.bits.metas[2].tag @[Reg.scala 16:23]
      _T_10.metas[3].dirty <= s2.io.out.bits.metas[3].dirty @[Reg.scala 16:23]
      _T_10.metas[3].valid <= s2.io.out.bits.metas[3].valid @[Reg.scala 16:23]
      _T_10.metas[3].tag <= s2.io.out.bits.metas[3].tag @[Reg.scala 16:23]
      _T_10.req.wdata <= s2.io.out.bits.req.wdata @[Reg.scala 16:23]
      _T_10.req.wmask <= s2.io.out.bits.req.wmask @[Reg.scala 16:23]
      _T_10.req.cmd <= s2.io.out.bits.req.cmd @[Reg.scala 16:23]
      _T_10.req.size <= s2.io.out.bits.req.size @[Reg.scala 16:23]
      _T_10.req.addr <= s2.io.out.bits.req.addr @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    s3.io.in.bits.forwardData.waymask <= _T_10.forwardData.waymask @[Pipeline.scala 30:16]
    s3.io.in.bits.forwardData.data.data <= _T_10.forwardData.data.data @[Pipeline.scala 30:16]
    s3.io.in.bits.forwardData.setIdx <= _T_10.forwardData.setIdx @[Pipeline.scala 30:16]
    s3.io.in.bits.isForwardData <= _T_10.isForwardData @[Pipeline.scala 30:16]
    s3.io.in.bits.mmio <= _T_10.mmio @[Pipeline.scala 30:16]
    s3.io.in.bits.waymask <= _T_10.waymask @[Pipeline.scala 30:16]
    s3.io.in.bits.hit <= _T_10.hit @[Pipeline.scala 30:16]
    s3.io.in.bits.datas[0].data <= _T_10.datas[0].data @[Pipeline.scala 30:16]
    s3.io.in.bits.datas[1].data <= _T_10.datas[1].data @[Pipeline.scala 30:16]
    s3.io.in.bits.datas[2].data <= _T_10.datas[2].data @[Pipeline.scala 30:16]
    s3.io.in.bits.datas[3].data <= _T_10.datas[3].data @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[0].dirty <= _T_10.metas[0].dirty @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[0].valid <= _T_10.metas[0].valid @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[0].tag <= _T_10.metas[0].tag @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[1].dirty <= _T_10.metas[1].dirty @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[1].valid <= _T_10.metas[1].valid @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[1].tag <= _T_10.metas[1].tag @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[2].dirty <= _T_10.metas[2].dirty @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[2].valid <= _T_10.metas[2].valid @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[2].tag <= _T_10.metas[2].tag @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[3].dirty <= _T_10.metas[3].dirty @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[3].valid <= _T_10.metas[3].valid @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[3].tag <= _T_10.metas[3].tag @[Pipeline.scala 30:16]
    s3.io.in.bits.req.wdata <= _T_10.req.wdata @[Pipeline.scala 30:16]
    s3.io.in.bits.req.wmask <= _T_10.req.wmask @[Pipeline.scala 30:16]
    s3.io.in.bits.req.cmd <= _T_10.req.cmd @[Pipeline.scala 30:16]
    s3.io.in.bits.req.size <= _T_10.req.size @[Pipeline.scala 30:16]
    s3.io.in.bits.req.addr <= _T_10.req.addr @[Pipeline.scala 30:16]
    s3.io.in.valid <= _T_7 @[Pipeline.scala 31:17]
    io.in.resp.bits.rdata <= s3.io.out.bits.rdata @[Cache.scala 499:14]
    io.in.resp.bits.cmd <= s3.io.out.bits.cmd @[Cache.scala 499:14]
    io.in.resp.valid <= s3.io.out.valid @[Cache.scala 499:14]
    s3.io.out.ready <= io.in.resp.ready @[Cache.scala 499:14]
    node _T_11 = bits(io.flush, 1, 1) @[Cache.scala 500:26]
    s3.io.flush <= _T_11 @[Cache.scala 500:15]
    s3.io.mem.resp.bits.rdata <= io.out.mem.resp.bits.rdata @[Cache.scala 501:14]
    s3.io.mem.resp.bits.cmd <= io.out.mem.resp.bits.cmd @[Cache.scala 501:14]
    s3.io.mem.resp.valid <= io.out.mem.resp.valid @[Cache.scala 501:14]
    io.out.mem.resp.ready <= s3.io.mem.resp.ready @[Cache.scala 501:14]
    io.out.mem.req.bits.wdata <= s3.io.mem.req.bits.wdata @[Cache.scala 501:14]
    io.out.mem.req.bits.wmask <= s3.io.mem.req.bits.wmask @[Cache.scala 501:14]
    io.out.mem.req.bits.cmd <= s3.io.mem.req.bits.cmd @[Cache.scala 501:14]
    io.out.mem.req.bits.size <= s3.io.mem.req.bits.size @[Cache.scala 501:14]
    io.out.mem.req.bits.addr <= s3.io.mem.req.bits.addr @[Cache.scala 501:14]
    io.out.mem.req.valid <= s3.io.mem.req.valid @[Cache.scala 501:14]
    s3.io.mem.req.ready <= io.out.mem.req.ready @[Cache.scala 501:14]
    s3.io.mmio.resp.bits.rdata <= io.mmio.resp.bits.rdata @[Cache.scala 502:11]
    s3.io.mmio.resp.bits.cmd <= io.mmio.resp.bits.cmd @[Cache.scala 502:11]
    s3.io.mmio.resp.valid <= io.mmio.resp.valid @[Cache.scala 502:11]
    io.mmio.resp.ready <= s3.io.mmio.resp.ready @[Cache.scala 502:11]
    io.mmio.req.bits.wdata <= s3.io.mmio.req.bits.wdata @[Cache.scala 502:11]
    io.mmio.req.bits.wmask <= s3.io.mmio.req.bits.wmask @[Cache.scala 502:11]
    io.mmio.req.bits.cmd <= s3.io.mmio.req.bits.cmd @[Cache.scala 502:11]
    io.mmio.req.bits.size <= s3.io.mmio.req.bits.size @[Cache.scala 502:11]
    io.mmio.req.bits.addr <= s3.io.mmio.req.bits.addr @[Cache.scala 502:11]
    io.mmio.req.valid <= s3.io.mmio.req.valid @[Cache.scala 502:11]
    s3.io.mmio.req.ready <= io.mmio.req.ready @[Cache.scala 502:11]
    node _T_12 = eq(s2.io.in.valid, UInt<1>("h00")) @[Cache.scala 503:15]
    node _T_13 = eq(s3.io.in.valid, UInt<1>("h00")) @[Cache.scala 503:34]
    node _T_14 = and(_T_12, _T_13) @[Cache.scala 503:31]
    io.empty <= _T_14 @[Cache.scala 503:12]
    node _T_15 = eq(s3.io.out.bits.cmd, UInt<3>("h04")) @[SimpleBus.scala 95:26]
    node _T_16 = and(s3.io.out.valid, _T_15) @[Cache.scala 505:43]
    node _T_17 = or(s3.io.out.valid, s3.io.dataReadRespToL1) @[Cache.scala 505:100]
    node _T_18 = mux(_T_16, UInt<1>("h00"), _T_17) @[Cache.scala 505:26]
    io.in.resp.valid <= _T_18 @[Cache.scala 505:20]
    wire _T_19 : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>} @[Cache.scala 510:19]
    _T_19.addr <= io.out.coh.req.bits.addr @[SimpleBus.scala 64:15]
    _T_19.cmd <= io.out.coh.req.bits.cmd @[SimpleBus.scala 65:14]
    _T_19.size <= io.out.coh.req.bits.size @[SimpleBus.scala 66:15]
    _T_19.wdata <= io.out.coh.req.bits.wdata @[SimpleBus.scala 67:16]
    _T_19.wmask <= io.out.coh.req.bits.wmask @[SimpleBus.scala 68:16]
    arb.io.in[0].bits.wdata <= _T_19.wdata @[Cache.scala 512:23]
    arb.io.in[0].bits.wmask <= _T_19.wmask @[Cache.scala 512:23]
    arb.io.in[0].bits.cmd <= _T_19.cmd @[Cache.scala 512:23]
    arb.io.in[0].bits.size <= _T_19.size @[Cache.scala 512:23]
    arb.io.in[0].bits.addr <= _T_19.addr @[Cache.scala 512:23]
    arb.io.in[0].valid <= io.out.coh.req.valid @[Cache.scala 513:24]
    io.out.coh.req.ready <= arb.io.in[0].ready @[Cache.scala 514:26]
    io.out.coh.resp.bits.rdata <= s3.io.cohResp.bits.rdata @[Cache.scala 515:21]
    io.out.coh.resp.bits.cmd <= s3.io.cohResp.bits.cmd @[Cache.scala 515:21]
    io.out.coh.resp.valid <= s3.io.cohResp.valid @[Cache.scala 515:21]
    s3.io.cohResp.ready <= io.out.coh.resp.ready @[Cache.scala 515:21]
    s1.io.metaReadBus.resp.data[0].dirty <= metaArray.io.r[0].resp.data[0].dirty @[Cache.scala 523:21]
    s1.io.metaReadBus.resp.data[0].valid <= metaArray.io.r[0].resp.data[0].valid @[Cache.scala 523:21]
    s1.io.metaReadBus.resp.data[0].tag <= metaArray.io.r[0].resp.data[0].tag @[Cache.scala 523:21]
    s1.io.metaReadBus.resp.data[1].dirty <= metaArray.io.r[0].resp.data[1].dirty @[Cache.scala 523:21]
    s1.io.metaReadBus.resp.data[1].valid <= metaArray.io.r[0].resp.data[1].valid @[Cache.scala 523:21]
    s1.io.metaReadBus.resp.data[1].tag <= metaArray.io.r[0].resp.data[1].tag @[Cache.scala 523:21]
    s1.io.metaReadBus.resp.data[2].dirty <= metaArray.io.r[0].resp.data[2].dirty @[Cache.scala 523:21]
    s1.io.metaReadBus.resp.data[2].valid <= metaArray.io.r[0].resp.data[2].valid @[Cache.scala 523:21]
    s1.io.metaReadBus.resp.data[2].tag <= metaArray.io.r[0].resp.data[2].tag @[Cache.scala 523:21]
    s1.io.metaReadBus.resp.data[3].dirty <= metaArray.io.r[0].resp.data[3].dirty @[Cache.scala 523:21]
    s1.io.metaReadBus.resp.data[3].valid <= metaArray.io.r[0].resp.data[3].valid @[Cache.scala 523:21]
    s1.io.metaReadBus.resp.data[3].tag <= metaArray.io.r[0].resp.data[3].tag @[Cache.scala 523:21]
    metaArray.io.r[0].req.bits.setIdx <= s1.io.metaReadBus.req.bits.setIdx @[Cache.scala 523:21]
    metaArray.io.r[0].req.valid <= s1.io.metaReadBus.req.valid @[Cache.scala 523:21]
    s1.io.metaReadBus.req.ready <= metaArray.io.r[0].req.ready @[Cache.scala 523:21]
    s1.io.dataReadBus.resp.data[0].data <= dataArray.io.r[0].resp.data[0].data @[Cache.scala 524:21]
    s1.io.dataReadBus.resp.data[1].data <= dataArray.io.r[0].resp.data[1].data @[Cache.scala 524:21]
    s1.io.dataReadBus.resp.data[2].data <= dataArray.io.r[0].resp.data[2].data @[Cache.scala 524:21]
    s1.io.dataReadBus.resp.data[3].data <= dataArray.io.r[0].resp.data[3].data @[Cache.scala 524:21]
    dataArray.io.r[0].req.bits.setIdx <= s1.io.dataReadBus.req.bits.setIdx @[Cache.scala 524:21]
    dataArray.io.r[0].req.valid <= s1.io.dataReadBus.req.valid @[Cache.scala 524:21]
    s1.io.dataReadBus.req.ready <= dataArray.io.r[0].req.ready @[Cache.scala 524:21]
    s3.io.dataReadBus.resp.data[0].data <= dataArray.io.r[1].resp.data[0].data @[Cache.scala 525:21]
    s3.io.dataReadBus.resp.data[1].data <= dataArray.io.r[1].resp.data[1].data @[Cache.scala 525:21]
    s3.io.dataReadBus.resp.data[2].data <= dataArray.io.r[1].resp.data[2].data @[Cache.scala 525:21]
    s3.io.dataReadBus.resp.data[3].data <= dataArray.io.r[1].resp.data[3].data @[Cache.scala 525:21]
    dataArray.io.r[1].req.bits.setIdx <= s3.io.dataReadBus.req.bits.setIdx @[Cache.scala 525:21]
    dataArray.io.r[1].req.valid <= s3.io.dataReadBus.req.valid @[Cache.scala 525:21]
    s3.io.dataReadBus.req.ready <= dataArray.io.r[1].req.ready @[Cache.scala 525:21]
    metaArray.io.w.req.bits.waymask <= s3.io.metaWriteBus.req.bits.waymask @[Cache.scala 527:18]
    metaArray.io.w.req.bits.data.dirty <= s3.io.metaWriteBus.req.bits.data.dirty @[Cache.scala 527:18]
    metaArray.io.w.req.bits.data.valid <= s3.io.metaWriteBus.req.bits.data.valid @[Cache.scala 527:18]
    metaArray.io.w.req.bits.data.tag <= s3.io.metaWriteBus.req.bits.data.tag @[Cache.scala 527:18]
    metaArray.io.w.req.bits.setIdx <= s3.io.metaWriteBus.req.bits.setIdx @[Cache.scala 527:18]
    metaArray.io.w.req.valid <= s3.io.metaWriteBus.req.valid @[Cache.scala 527:18]
    s3.io.metaWriteBus.req.ready <= metaArray.io.w.req.ready @[Cache.scala 527:18]
    dataArray.io.w.req.bits.waymask <= s3.io.dataWriteBus.req.bits.waymask @[Cache.scala 528:18]
    dataArray.io.w.req.bits.data.data <= s3.io.dataWriteBus.req.bits.data.data @[Cache.scala 528:18]
    dataArray.io.w.req.bits.setIdx <= s3.io.dataWriteBus.req.bits.setIdx @[Cache.scala 528:18]
    dataArray.io.w.req.valid <= s3.io.dataWriteBus.req.valid @[Cache.scala 528:18]
    s3.io.dataWriteBus.req.ready <= dataArray.io.w.req.ready @[Cache.scala 528:18]
    s2.io.metaReadResp[0].dirty <= s1.io.metaReadBus.resp.data[0].dirty @[Cache.scala 530:22]
    s2.io.metaReadResp[0].valid <= s1.io.metaReadBus.resp.data[0].valid @[Cache.scala 530:22]
    s2.io.metaReadResp[0].tag <= s1.io.metaReadBus.resp.data[0].tag @[Cache.scala 530:22]
    s2.io.metaReadResp[1].dirty <= s1.io.metaReadBus.resp.data[1].dirty @[Cache.scala 530:22]
    s2.io.metaReadResp[1].valid <= s1.io.metaReadBus.resp.data[1].valid @[Cache.scala 530:22]
    s2.io.metaReadResp[1].tag <= s1.io.metaReadBus.resp.data[1].tag @[Cache.scala 530:22]
    s2.io.metaReadResp[2].dirty <= s1.io.metaReadBus.resp.data[2].dirty @[Cache.scala 530:22]
    s2.io.metaReadResp[2].valid <= s1.io.metaReadBus.resp.data[2].valid @[Cache.scala 530:22]
    s2.io.metaReadResp[2].tag <= s1.io.metaReadBus.resp.data[2].tag @[Cache.scala 530:22]
    s2.io.metaReadResp[3].dirty <= s1.io.metaReadBus.resp.data[3].dirty @[Cache.scala 530:22]
    s2.io.metaReadResp[3].valid <= s1.io.metaReadBus.resp.data[3].valid @[Cache.scala 530:22]
    s2.io.metaReadResp[3].tag <= s1.io.metaReadBus.resp.data[3].tag @[Cache.scala 530:22]
    s2.io.dataReadResp[0].data <= s1.io.dataReadBus.resp.data[0].data @[Cache.scala 531:22]
    s2.io.dataReadResp[1].data <= s1.io.dataReadBus.resp.data[1].data @[Cache.scala 531:22]
    s2.io.dataReadResp[2].data <= s1.io.dataReadBus.resp.data[2].data @[Cache.scala 531:22]
    s2.io.dataReadResp[3].data <= s1.io.dataReadBus.resp.data[3].data @[Cache.scala 531:22]
    s2.io.dataWriteBus.req.bits.waymask <= s3.io.dataWriteBus.req.bits.waymask @[Cache.scala 532:22]
    s2.io.dataWriteBus.req.bits.data.data <= s3.io.dataWriteBus.req.bits.data.data @[Cache.scala 532:22]
    s2.io.dataWriteBus.req.bits.setIdx <= s3.io.dataWriteBus.req.bits.setIdx @[Cache.scala 532:22]
    s2.io.dataWriteBus.req.valid <= s3.io.dataWriteBus.req.valid @[Cache.scala 532:22]
    s2.io.dataWriteBus.req.ready <= s3.io.dataWriteBus.req.ready @[Cache.scala 532:22]
    s2.io.metaWriteBus.req.bits.waymask <= s3.io.metaWriteBus.req.bits.waymask @[Cache.scala 533:22]
    s2.io.metaWriteBus.req.bits.data.dirty <= s3.io.metaWriteBus.req.bits.data.dirty @[Cache.scala 533:22]
    s2.io.metaWriteBus.req.bits.data.valid <= s3.io.metaWriteBus.req.bits.data.valid @[Cache.scala 533:22]
    s2.io.metaWriteBus.req.bits.data.tag <= s3.io.metaWriteBus.req.bits.data.tag @[Cache.scala 533:22]
    s2.io.metaWriteBus.req.bits.setIdx <= s3.io.metaWriteBus.req.bits.setIdx @[Cache.scala 533:22]
    s2.io.metaWriteBus.req.valid <= s3.io.metaWriteBus.req.valid @[Cache.scala 533:22]
    s2.io.metaWriteBus.req.ready <= s3.io.metaWriteBus.req.ready @[Cache.scala 533:22]
    reg _T_20 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_21 = add(_T_20, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_22 = tail(_T_21, 1) @[GTimer.scala 25:12]
    _T_20 <= _T_22 @[GTimer.scala 25:7]
    wire _T_23 : UInt<1>
    _T_23 <= UInt<1>("h00")
    node _T_24 = and(UInt<1>("h01"), _T_23) @[Debug.scala 55:16]
    when _T_24 : @[Debug.scala 55:31]
      node _T_25 = asUInt(reset) @[Debug.scala 56:24]
      node _T_26 = eq(_T_25, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_26 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] Cache_1: ", _T_20) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_27 = asUInt(reset) @[Debug.scala 57:13]
      node _T_28 = eq(_T_27, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_28 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "InReq(%d, %d) InResp(%d, %d) \n", io.in.req.valid, io.in.req.ready, io.in.resp.valid, io.in.resp.ready) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    reg _T_29 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_30 = add(_T_29, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_31 = tail(_T_30, 1) @[GTimer.scala 25:12]
    _T_29 <= _T_31 @[GTimer.scala 25:7]
    wire _T_32 : UInt<1>
    _T_32 <= UInt<1>("h00")
    node _T_33 = and(UInt<1>("h01"), _T_32) @[Debug.scala 55:16]
    when _T_33 : @[Debug.scala 55:31]
      node _T_34 = asUInt(reset) @[Debug.scala 56:24]
      node _T_35 = eq(_T_34, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_35 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] Cache_1: ", _T_29) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_36 = asUInt(reset) @[Debug.scala 57:13]
      node _T_37 = eq(_T_36, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_37 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "{IN s1:(%d,%d), s2:(%d,%d), s3:(%d,%d)} {OUT s1:(%d,%d), s2:(%d,%d), s3:(%d,%d)}\n", s1.io.in.valid, s1.io.in.ready, s2.io.in.valid, s2.io.in.ready, s3.io.in.valid, s3.io.in.ready, s1.io.out.valid, s1.io.out.ready, s2.io.out.valid, s2.io.out.ready, s3.io.out.valid, s3.io.out.ready) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    when s1.io.in.valid : @[Cache.scala 543:25]
      reg _T_38 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_39 = add(_T_38, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_40 = tail(_T_39, 1) @[GTimer.scala 25:12]
      _T_38 <= _T_40 @[GTimer.scala 25:7]
      wire _T_41 : UInt<1>
      _T_41 <= UInt<1>("h00")
      node _T_42 = and(UInt<1>("h01"), _T_41) @[Debug.scala 55:16]
      when _T_42 : @[Debug.scala 55:31]
        node _T_43 = asUInt(reset) @[Debug.scala 56:24]
        node _T_44 = eq(_T_43, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_44 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] Cache_1: ", _T_38) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_45 = asUInt(reset) @[Debug.scala 57:13]
        node _T_46 = eq(_T_45, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_46 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[dcache.S1]: addr = 0x%x, cmd = %d, size = %d, wmask = 0x%x, wdata = 0x%x\n", s1.io.in.bits.addr, s1.io.in.bits.cmd, s1.io.in.bits.size, s1.io.in.bits.wmask, s1.io.in.bits.wdata) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      skip @[Cache.scala 543:25]
    when s2.io.in.valid : @[Cache.scala 544:25]
      reg _T_47 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_48 = add(_T_47, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_49 = tail(_T_48, 1) @[GTimer.scala 25:12]
      _T_47 <= _T_49 @[GTimer.scala 25:7]
      wire _T_50 : UInt<1>
      _T_50 <= UInt<1>("h00")
      node _T_51 = and(UInt<1>("h01"), _T_50) @[Debug.scala 55:16]
      when _T_51 : @[Debug.scala 55:31]
        node _T_52 = asUInt(reset) @[Debug.scala 56:24]
        node _T_53 = eq(_T_52, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_53 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] Cache_1: ", _T_47) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_54 = asUInt(reset) @[Debug.scala 57:13]
        node _T_55 = eq(_T_54, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_55 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[dcache.S2]: addr = 0x%x, cmd = %d, size = %d, wmask = 0x%x, wdata = 0x%x\n", s2.io.in.bits.req.addr, s2.io.in.bits.req.cmd, s2.io.in.bits.req.size, s2.io.in.bits.req.wmask, s2.io.in.bits.req.wdata) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      skip @[Cache.scala 544:25]
    when s3.io.in.valid : @[Cache.scala 545:25]
      reg _T_56 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_57 = add(_T_56, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_58 = tail(_T_57, 1) @[GTimer.scala 25:12]
      _T_56 <= _T_58 @[GTimer.scala 25:7]
      wire _T_59 : UInt<1>
      _T_59 <= UInt<1>("h00")
      node _T_60 = and(UInt<1>("h01"), _T_59) @[Debug.scala 55:16]
      when _T_60 : @[Debug.scala 55:31]
        node _T_61 = asUInt(reset) @[Debug.scala 56:24]
        node _T_62 = eq(_T_61, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_62 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] Cache_1: ", _T_56) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_63 = asUInt(reset) @[Debug.scala 57:13]
        node _T_64 = eq(_T_63, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_64 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[dcache.S3]: addr = 0x%x, cmd = %d, size = %d, wmask = 0x%x, wdata = 0x%x\n", s3.io.in.bits.req.addr, s3.io.in.bits.req.cmd, s3.io.in.bits.req.size, s3.io.in.bits.req.wmask, s3.io.in.bits.req.wdata) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      skip @[Cache.scala 545:25]
    
  module NutCore : 
    input clock : Clock
    input reset : Reset
    output io : {imem : {mem : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}, flip coh : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}}, dmem : {mem : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}, flip coh : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}}, mmio : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}, flip frontend : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}}
    
    inst frontend of Frontend_inorder @[NutCore.scala 102:34]
    frontend.clock <= clock
    frontend.reset <= reset
    inst Backend_inorder of Backend_inorder @[NutCore.scala 144:25]
    Backend_inorder.clock <= clock
    Backend_inorder.reset <= reset
    node _T = bits(frontend.io.flushVec, 1, 1) @[NutCore.scala 146:138]
    wire _T_1 : {cf : {instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>}, ctrl : {src1Type : UInt<1>, src2Type : UInt<1>, fuType : UInt<3>, fuOpType : UInt<7>, rfSrc1 : UInt<5>, rfSrc2 : UInt<5>, rfWen : UInt<1>, rfDest : UInt<5>, isNutCoreTrap : UInt<1>, isSrc1Forward : UInt<1>, isSrc2Forward : UInt<1>, noSpecExec : UInt<1>, isBlocked : UInt<1>}, data : {src1 : UInt<64>, src2 : UInt<64>, imm : UInt<64>}} @[PipelineVector.scala 29:71]
    _T_1.data.imm <= UInt<64>("h00") @[PipelineVector.scala 29:71]
    _T_1.data.src2 <= UInt<64>("h00") @[PipelineVector.scala 29:71]
    _T_1.data.src1 <= UInt<64>("h00") @[PipelineVector.scala 29:71]
    _T_1.ctrl.isBlocked <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.ctrl.noSpecExec <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.ctrl.isSrc2Forward <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.ctrl.isSrc1Forward <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.ctrl.isNutCoreTrap <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.ctrl.rfDest <= UInt<5>("h00") @[PipelineVector.scala 29:71]
    _T_1.ctrl.rfWen <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.ctrl.rfSrc2 <= UInt<5>("h00") @[PipelineVector.scala 29:71]
    _T_1.ctrl.rfSrc1 <= UInt<5>("h00") @[PipelineVector.scala 29:71]
    _T_1.ctrl.fuOpType <= UInt<7>("h00") @[PipelineVector.scala 29:71]
    _T_1.ctrl.fuType <= UInt<3>("h00") @[PipelineVector.scala 29:71]
    _T_1.ctrl.src2Type <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.ctrl.src1Type <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.cf.crossPageIPFFix <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.cf.isRVC <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.cf.brIdx <= UInt<4>("h00") @[PipelineVector.scala 29:71]
    _T_1.cf.intrVec[0] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.cf.intrVec[1] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.cf.intrVec[2] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.cf.intrVec[3] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.cf.intrVec[4] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.cf.intrVec[5] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.cf.intrVec[6] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.cf.intrVec[7] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.cf.intrVec[8] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.cf.intrVec[9] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.cf.intrVec[10] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.cf.intrVec[11] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.cf.exceptionVec[0] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.cf.exceptionVec[1] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.cf.exceptionVec[2] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.cf.exceptionVec[3] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.cf.exceptionVec[4] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.cf.exceptionVec[5] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.cf.exceptionVec[6] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.cf.exceptionVec[7] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.cf.exceptionVec[8] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.cf.exceptionVec[9] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.cf.exceptionVec[10] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.cf.exceptionVec[11] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.cf.exceptionVec[12] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.cf.exceptionVec[13] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.cf.exceptionVec[14] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.cf.exceptionVec[15] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.cf.redirect.valid <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.cf.redirect.rtype <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_1.cf.redirect.target <= UInt<39>("h00") @[PipelineVector.scala 29:71]
    _T_1.cf.pnpc <= UInt<39>("h00") @[PipelineVector.scala 29:71]
    _T_1.cf.pc <= UInt<39>("h00") @[PipelineVector.scala 29:71]
    _T_1.cf.instr <= UInt<64>("h00") @[PipelineVector.scala 29:71]
    wire _T_2 : {cf : {instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>}, ctrl : {src1Type : UInt<1>, src2Type : UInt<1>, fuType : UInt<3>, fuOpType : UInt<7>, rfSrc1 : UInt<5>, rfSrc2 : UInt<5>, rfWen : UInt<1>, rfDest : UInt<5>, isNutCoreTrap : UInt<1>, isSrc1Forward : UInt<1>, isSrc2Forward : UInt<1>, noSpecExec : UInt<1>, isBlocked : UInt<1>}, data : {src1 : UInt<64>, src2 : UInt<64>, imm : UInt<64>}} @[PipelineVector.scala 29:71]
    _T_2.data.imm <= UInt<64>("h00") @[PipelineVector.scala 29:71]
    _T_2.data.src2 <= UInt<64>("h00") @[PipelineVector.scala 29:71]
    _T_2.data.src1 <= UInt<64>("h00") @[PipelineVector.scala 29:71]
    _T_2.ctrl.isBlocked <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.ctrl.noSpecExec <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.ctrl.isSrc2Forward <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.ctrl.isSrc1Forward <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.ctrl.isNutCoreTrap <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.ctrl.rfDest <= UInt<5>("h00") @[PipelineVector.scala 29:71]
    _T_2.ctrl.rfWen <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.ctrl.rfSrc2 <= UInt<5>("h00") @[PipelineVector.scala 29:71]
    _T_2.ctrl.rfSrc1 <= UInt<5>("h00") @[PipelineVector.scala 29:71]
    _T_2.ctrl.fuOpType <= UInt<7>("h00") @[PipelineVector.scala 29:71]
    _T_2.ctrl.fuType <= UInt<3>("h00") @[PipelineVector.scala 29:71]
    _T_2.ctrl.src2Type <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.ctrl.src1Type <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.cf.crossPageIPFFix <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.cf.isRVC <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.cf.brIdx <= UInt<4>("h00") @[PipelineVector.scala 29:71]
    _T_2.cf.intrVec[0] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.cf.intrVec[1] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.cf.intrVec[2] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.cf.intrVec[3] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.cf.intrVec[4] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.cf.intrVec[5] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.cf.intrVec[6] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.cf.intrVec[7] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.cf.intrVec[8] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.cf.intrVec[9] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.cf.intrVec[10] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.cf.intrVec[11] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.cf.exceptionVec[0] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.cf.exceptionVec[1] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.cf.exceptionVec[2] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.cf.exceptionVec[3] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.cf.exceptionVec[4] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.cf.exceptionVec[5] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.cf.exceptionVec[6] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.cf.exceptionVec[7] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.cf.exceptionVec[8] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.cf.exceptionVec[9] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.cf.exceptionVec[10] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.cf.exceptionVec[11] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.cf.exceptionVec[12] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.cf.exceptionVec[13] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.cf.exceptionVec[14] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.cf.exceptionVec[15] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.cf.redirect.valid <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.cf.redirect.rtype <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_2.cf.redirect.target <= UInt<39>("h00") @[PipelineVector.scala 29:71]
    _T_2.cf.pnpc <= UInt<39>("h00") @[PipelineVector.scala 29:71]
    _T_2.cf.pc <= UInt<39>("h00") @[PipelineVector.scala 29:71]
    _T_2.cf.instr <= UInt<64>("h00") @[PipelineVector.scala 29:71]
    wire _T_3 : {cf : {instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>}, ctrl : {src1Type : UInt<1>, src2Type : UInt<1>, fuType : UInt<3>, fuOpType : UInt<7>, rfSrc1 : UInt<5>, rfSrc2 : UInt<5>, rfWen : UInt<1>, rfDest : UInt<5>, isNutCoreTrap : UInt<1>, isSrc1Forward : UInt<1>, isSrc2Forward : UInt<1>, noSpecExec : UInt<1>, isBlocked : UInt<1>}, data : {src1 : UInt<64>, src2 : UInt<64>, imm : UInt<64>}} @[PipelineVector.scala 29:71]
    _T_3.data.imm <= UInt<64>("h00") @[PipelineVector.scala 29:71]
    _T_3.data.src2 <= UInt<64>("h00") @[PipelineVector.scala 29:71]
    _T_3.data.src1 <= UInt<64>("h00") @[PipelineVector.scala 29:71]
    _T_3.ctrl.isBlocked <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.ctrl.noSpecExec <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.ctrl.isSrc2Forward <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.ctrl.isSrc1Forward <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.ctrl.isNutCoreTrap <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.ctrl.rfDest <= UInt<5>("h00") @[PipelineVector.scala 29:71]
    _T_3.ctrl.rfWen <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.ctrl.rfSrc2 <= UInt<5>("h00") @[PipelineVector.scala 29:71]
    _T_3.ctrl.rfSrc1 <= UInt<5>("h00") @[PipelineVector.scala 29:71]
    _T_3.ctrl.fuOpType <= UInt<7>("h00") @[PipelineVector.scala 29:71]
    _T_3.ctrl.fuType <= UInt<3>("h00") @[PipelineVector.scala 29:71]
    _T_3.ctrl.src2Type <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.ctrl.src1Type <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.cf.crossPageIPFFix <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.cf.isRVC <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.cf.brIdx <= UInt<4>("h00") @[PipelineVector.scala 29:71]
    _T_3.cf.intrVec[0] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.cf.intrVec[1] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.cf.intrVec[2] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.cf.intrVec[3] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.cf.intrVec[4] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.cf.intrVec[5] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.cf.intrVec[6] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.cf.intrVec[7] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.cf.intrVec[8] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.cf.intrVec[9] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.cf.intrVec[10] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.cf.intrVec[11] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.cf.exceptionVec[0] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.cf.exceptionVec[1] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.cf.exceptionVec[2] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.cf.exceptionVec[3] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.cf.exceptionVec[4] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.cf.exceptionVec[5] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.cf.exceptionVec[6] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.cf.exceptionVec[7] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.cf.exceptionVec[8] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.cf.exceptionVec[9] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.cf.exceptionVec[10] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.cf.exceptionVec[11] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.cf.exceptionVec[12] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.cf.exceptionVec[13] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.cf.exceptionVec[14] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.cf.exceptionVec[15] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.cf.redirect.valid <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.cf.redirect.rtype <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_3.cf.redirect.target <= UInt<39>("h00") @[PipelineVector.scala 29:71]
    _T_3.cf.pnpc <= UInt<39>("h00") @[PipelineVector.scala 29:71]
    _T_3.cf.pc <= UInt<39>("h00") @[PipelineVector.scala 29:71]
    _T_3.cf.instr <= UInt<64>("h00") @[PipelineVector.scala 29:71]
    wire _T_4 : {cf : {instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>}, ctrl : {src1Type : UInt<1>, src2Type : UInt<1>, fuType : UInt<3>, fuOpType : UInt<7>, rfSrc1 : UInt<5>, rfSrc2 : UInt<5>, rfWen : UInt<1>, rfDest : UInt<5>, isNutCoreTrap : UInt<1>, isSrc1Forward : UInt<1>, isSrc2Forward : UInt<1>, noSpecExec : UInt<1>, isBlocked : UInt<1>}, data : {src1 : UInt<64>, src2 : UInt<64>, imm : UInt<64>}} @[PipelineVector.scala 29:71]
    _T_4.data.imm <= UInt<64>("h00") @[PipelineVector.scala 29:71]
    _T_4.data.src2 <= UInt<64>("h00") @[PipelineVector.scala 29:71]
    _T_4.data.src1 <= UInt<64>("h00") @[PipelineVector.scala 29:71]
    _T_4.ctrl.isBlocked <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.ctrl.noSpecExec <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.ctrl.isSrc2Forward <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.ctrl.isSrc1Forward <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.ctrl.isNutCoreTrap <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.ctrl.rfDest <= UInt<5>("h00") @[PipelineVector.scala 29:71]
    _T_4.ctrl.rfWen <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.ctrl.rfSrc2 <= UInt<5>("h00") @[PipelineVector.scala 29:71]
    _T_4.ctrl.rfSrc1 <= UInt<5>("h00") @[PipelineVector.scala 29:71]
    _T_4.ctrl.fuOpType <= UInt<7>("h00") @[PipelineVector.scala 29:71]
    _T_4.ctrl.fuType <= UInt<3>("h00") @[PipelineVector.scala 29:71]
    _T_4.ctrl.src2Type <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.ctrl.src1Type <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.cf.crossPageIPFFix <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.cf.isRVC <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.cf.brIdx <= UInt<4>("h00") @[PipelineVector.scala 29:71]
    _T_4.cf.intrVec[0] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.cf.intrVec[1] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.cf.intrVec[2] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.cf.intrVec[3] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.cf.intrVec[4] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.cf.intrVec[5] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.cf.intrVec[6] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.cf.intrVec[7] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.cf.intrVec[8] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.cf.intrVec[9] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.cf.intrVec[10] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.cf.intrVec[11] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.cf.exceptionVec[0] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.cf.exceptionVec[1] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.cf.exceptionVec[2] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.cf.exceptionVec[3] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.cf.exceptionVec[4] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.cf.exceptionVec[5] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.cf.exceptionVec[6] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.cf.exceptionVec[7] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.cf.exceptionVec[8] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.cf.exceptionVec[9] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.cf.exceptionVec[10] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.cf.exceptionVec[11] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.cf.exceptionVec[12] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.cf.exceptionVec[13] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.cf.exceptionVec[14] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.cf.exceptionVec[15] <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.cf.redirect.valid <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.cf.redirect.rtype <= UInt<1>("h00") @[PipelineVector.scala 29:71]
    _T_4.cf.redirect.target <= UInt<39>("h00") @[PipelineVector.scala 29:71]
    _T_4.cf.pnpc <= UInt<39>("h00") @[PipelineVector.scala 29:71]
    _T_4.cf.pc <= UInt<39>("h00") @[PipelineVector.scala 29:71]
    _T_4.cf.instr <= UInt<64>("h00") @[PipelineVector.scala 29:71]
    wire _T_5 : {cf : {instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>}, ctrl : {src1Type : UInt<1>, src2Type : UInt<1>, fuType : UInt<3>, fuOpType : UInt<7>, rfSrc1 : UInt<5>, rfSrc2 : UInt<5>, rfWen : UInt<1>, rfDest : UInt<5>, isNutCoreTrap : UInt<1>, isSrc1Forward : UInt<1>, isSrc2Forward : UInt<1>, noSpecExec : UInt<1>, isBlocked : UInt<1>}, data : {src1 : UInt<64>, src2 : UInt<64>, imm : UInt<64>}}[4] @[PipelineVector.scala 29:37]
    _T_5[0].data.imm <= _T_1.data.imm @[PipelineVector.scala 29:37]
    _T_5[0].data.src2 <= _T_1.data.src2 @[PipelineVector.scala 29:37]
    _T_5[0].data.src1 <= _T_1.data.src1 @[PipelineVector.scala 29:37]
    _T_5[0].ctrl.isBlocked <= _T_1.ctrl.isBlocked @[PipelineVector.scala 29:37]
    _T_5[0].ctrl.noSpecExec <= _T_1.ctrl.noSpecExec @[PipelineVector.scala 29:37]
    _T_5[0].ctrl.isSrc2Forward <= _T_1.ctrl.isSrc2Forward @[PipelineVector.scala 29:37]
    _T_5[0].ctrl.isSrc1Forward <= _T_1.ctrl.isSrc1Forward @[PipelineVector.scala 29:37]
    _T_5[0].ctrl.isNutCoreTrap <= _T_1.ctrl.isNutCoreTrap @[PipelineVector.scala 29:37]
    _T_5[0].ctrl.rfDest <= _T_1.ctrl.rfDest @[PipelineVector.scala 29:37]
    _T_5[0].ctrl.rfWen <= _T_1.ctrl.rfWen @[PipelineVector.scala 29:37]
    _T_5[0].ctrl.rfSrc2 <= _T_1.ctrl.rfSrc2 @[PipelineVector.scala 29:37]
    _T_5[0].ctrl.rfSrc1 <= _T_1.ctrl.rfSrc1 @[PipelineVector.scala 29:37]
    _T_5[0].ctrl.fuOpType <= _T_1.ctrl.fuOpType @[PipelineVector.scala 29:37]
    _T_5[0].ctrl.fuType <= _T_1.ctrl.fuType @[PipelineVector.scala 29:37]
    _T_5[0].ctrl.src2Type <= _T_1.ctrl.src2Type @[PipelineVector.scala 29:37]
    _T_5[0].ctrl.src1Type <= _T_1.ctrl.src1Type @[PipelineVector.scala 29:37]
    _T_5[0].cf.crossPageIPFFix <= _T_1.cf.crossPageIPFFix @[PipelineVector.scala 29:37]
    _T_5[0].cf.isRVC <= _T_1.cf.isRVC @[PipelineVector.scala 29:37]
    _T_5[0].cf.brIdx <= _T_1.cf.brIdx @[PipelineVector.scala 29:37]
    _T_5[0].cf.intrVec[0] <= _T_1.cf.intrVec[0] @[PipelineVector.scala 29:37]
    _T_5[0].cf.intrVec[1] <= _T_1.cf.intrVec[1] @[PipelineVector.scala 29:37]
    _T_5[0].cf.intrVec[2] <= _T_1.cf.intrVec[2] @[PipelineVector.scala 29:37]
    _T_5[0].cf.intrVec[3] <= _T_1.cf.intrVec[3] @[PipelineVector.scala 29:37]
    _T_5[0].cf.intrVec[4] <= _T_1.cf.intrVec[4] @[PipelineVector.scala 29:37]
    _T_5[0].cf.intrVec[5] <= _T_1.cf.intrVec[5] @[PipelineVector.scala 29:37]
    _T_5[0].cf.intrVec[6] <= _T_1.cf.intrVec[6] @[PipelineVector.scala 29:37]
    _T_5[0].cf.intrVec[7] <= _T_1.cf.intrVec[7] @[PipelineVector.scala 29:37]
    _T_5[0].cf.intrVec[8] <= _T_1.cf.intrVec[8] @[PipelineVector.scala 29:37]
    _T_5[0].cf.intrVec[9] <= _T_1.cf.intrVec[9] @[PipelineVector.scala 29:37]
    _T_5[0].cf.intrVec[10] <= _T_1.cf.intrVec[10] @[PipelineVector.scala 29:37]
    _T_5[0].cf.intrVec[11] <= _T_1.cf.intrVec[11] @[PipelineVector.scala 29:37]
    _T_5[0].cf.exceptionVec[0] <= _T_1.cf.exceptionVec[0] @[PipelineVector.scala 29:37]
    _T_5[0].cf.exceptionVec[1] <= _T_1.cf.exceptionVec[1] @[PipelineVector.scala 29:37]
    _T_5[0].cf.exceptionVec[2] <= _T_1.cf.exceptionVec[2] @[PipelineVector.scala 29:37]
    _T_5[0].cf.exceptionVec[3] <= _T_1.cf.exceptionVec[3] @[PipelineVector.scala 29:37]
    _T_5[0].cf.exceptionVec[4] <= _T_1.cf.exceptionVec[4] @[PipelineVector.scala 29:37]
    _T_5[0].cf.exceptionVec[5] <= _T_1.cf.exceptionVec[5] @[PipelineVector.scala 29:37]
    _T_5[0].cf.exceptionVec[6] <= _T_1.cf.exceptionVec[6] @[PipelineVector.scala 29:37]
    _T_5[0].cf.exceptionVec[7] <= _T_1.cf.exceptionVec[7] @[PipelineVector.scala 29:37]
    _T_5[0].cf.exceptionVec[8] <= _T_1.cf.exceptionVec[8] @[PipelineVector.scala 29:37]
    _T_5[0].cf.exceptionVec[9] <= _T_1.cf.exceptionVec[9] @[PipelineVector.scala 29:37]
    _T_5[0].cf.exceptionVec[10] <= _T_1.cf.exceptionVec[10] @[PipelineVector.scala 29:37]
    _T_5[0].cf.exceptionVec[11] <= _T_1.cf.exceptionVec[11] @[PipelineVector.scala 29:37]
    _T_5[0].cf.exceptionVec[12] <= _T_1.cf.exceptionVec[12] @[PipelineVector.scala 29:37]
    _T_5[0].cf.exceptionVec[13] <= _T_1.cf.exceptionVec[13] @[PipelineVector.scala 29:37]
    _T_5[0].cf.exceptionVec[14] <= _T_1.cf.exceptionVec[14] @[PipelineVector.scala 29:37]
    _T_5[0].cf.exceptionVec[15] <= _T_1.cf.exceptionVec[15] @[PipelineVector.scala 29:37]
    _T_5[0].cf.redirect.valid <= _T_1.cf.redirect.valid @[PipelineVector.scala 29:37]
    _T_5[0].cf.redirect.rtype <= _T_1.cf.redirect.rtype @[PipelineVector.scala 29:37]
    _T_5[0].cf.redirect.target <= _T_1.cf.redirect.target @[PipelineVector.scala 29:37]
    _T_5[0].cf.pnpc <= _T_1.cf.pnpc @[PipelineVector.scala 29:37]
    _T_5[0].cf.pc <= _T_1.cf.pc @[PipelineVector.scala 29:37]
    _T_5[0].cf.instr <= _T_1.cf.instr @[PipelineVector.scala 29:37]
    _T_5[1].data.imm <= _T_2.data.imm @[PipelineVector.scala 29:37]
    _T_5[1].data.src2 <= _T_2.data.src2 @[PipelineVector.scala 29:37]
    _T_5[1].data.src1 <= _T_2.data.src1 @[PipelineVector.scala 29:37]
    _T_5[1].ctrl.isBlocked <= _T_2.ctrl.isBlocked @[PipelineVector.scala 29:37]
    _T_5[1].ctrl.noSpecExec <= _T_2.ctrl.noSpecExec @[PipelineVector.scala 29:37]
    _T_5[1].ctrl.isSrc2Forward <= _T_2.ctrl.isSrc2Forward @[PipelineVector.scala 29:37]
    _T_5[1].ctrl.isSrc1Forward <= _T_2.ctrl.isSrc1Forward @[PipelineVector.scala 29:37]
    _T_5[1].ctrl.isNutCoreTrap <= _T_2.ctrl.isNutCoreTrap @[PipelineVector.scala 29:37]
    _T_5[1].ctrl.rfDest <= _T_2.ctrl.rfDest @[PipelineVector.scala 29:37]
    _T_5[1].ctrl.rfWen <= _T_2.ctrl.rfWen @[PipelineVector.scala 29:37]
    _T_5[1].ctrl.rfSrc2 <= _T_2.ctrl.rfSrc2 @[PipelineVector.scala 29:37]
    _T_5[1].ctrl.rfSrc1 <= _T_2.ctrl.rfSrc1 @[PipelineVector.scala 29:37]
    _T_5[1].ctrl.fuOpType <= _T_2.ctrl.fuOpType @[PipelineVector.scala 29:37]
    _T_5[1].ctrl.fuType <= _T_2.ctrl.fuType @[PipelineVector.scala 29:37]
    _T_5[1].ctrl.src2Type <= _T_2.ctrl.src2Type @[PipelineVector.scala 29:37]
    _T_5[1].ctrl.src1Type <= _T_2.ctrl.src1Type @[PipelineVector.scala 29:37]
    _T_5[1].cf.crossPageIPFFix <= _T_2.cf.crossPageIPFFix @[PipelineVector.scala 29:37]
    _T_5[1].cf.isRVC <= _T_2.cf.isRVC @[PipelineVector.scala 29:37]
    _T_5[1].cf.brIdx <= _T_2.cf.brIdx @[PipelineVector.scala 29:37]
    _T_5[1].cf.intrVec[0] <= _T_2.cf.intrVec[0] @[PipelineVector.scala 29:37]
    _T_5[1].cf.intrVec[1] <= _T_2.cf.intrVec[1] @[PipelineVector.scala 29:37]
    _T_5[1].cf.intrVec[2] <= _T_2.cf.intrVec[2] @[PipelineVector.scala 29:37]
    _T_5[1].cf.intrVec[3] <= _T_2.cf.intrVec[3] @[PipelineVector.scala 29:37]
    _T_5[1].cf.intrVec[4] <= _T_2.cf.intrVec[4] @[PipelineVector.scala 29:37]
    _T_5[1].cf.intrVec[5] <= _T_2.cf.intrVec[5] @[PipelineVector.scala 29:37]
    _T_5[1].cf.intrVec[6] <= _T_2.cf.intrVec[6] @[PipelineVector.scala 29:37]
    _T_5[1].cf.intrVec[7] <= _T_2.cf.intrVec[7] @[PipelineVector.scala 29:37]
    _T_5[1].cf.intrVec[8] <= _T_2.cf.intrVec[8] @[PipelineVector.scala 29:37]
    _T_5[1].cf.intrVec[9] <= _T_2.cf.intrVec[9] @[PipelineVector.scala 29:37]
    _T_5[1].cf.intrVec[10] <= _T_2.cf.intrVec[10] @[PipelineVector.scala 29:37]
    _T_5[1].cf.intrVec[11] <= _T_2.cf.intrVec[11] @[PipelineVector.scala 29:37]
    _T_5[1].cf.exceptionVec[0] <= _T_2.cf.exceptionVec[0] @[PipelineVector.scala 29:37]
    _T_5[1].cf.exceptionVec[1] <= _T_2.cf.exceptionVec[1] @[PipelineVector.scala 29:37]
    _T_5[1].cf.exceptionVec[2] <= _T_2.cf.exceptionVec[2] @[PipelineVector.scala 29:37]
    _T_5[1].cf.exceptionVec[3] <= _T_2.cf.exceptionVec[3] @[PipelineVector.scala 29:37]
    _T_5[1].cf.exceptionVec[4] <= _T_2.cf.exceptionVec[4] @[PipelineVector.scala 29:37]
    _T_5[1].cf.exceptionVec[5] <= _T_2.cf.exceptionVec[5] @[PipelineVector.scala 29:37]
    _T_5[1].cf.exceptionVec[6] <= _T_2.cf.exceptionVec[6] @[PipelineVector.scala 29:37]
    _T_5[1].cf.exceptionVec[7] <= _T_2.cf.exceptionVec[7] @[PipelineVector.scala 29:37]
    _T_5[1].cf.exceptionVec[8] <= _T_2.cf.exceptionVec[8] @[PipelineVector.scala 29:37]
    _T_5[1].cf.exceptionVec[9] <= _T_2.cf.exceptionVec[9] @[PipelineVector.scala 29:37]
    _T_5[1].cf.exceptionVec[10] <= _T_2.cf.exceptionVec[10] @[PipelineVector.scala 29:37]
    _T_5[1].cf.exceptionVec[11] <= _T_2.cf.exceptionVec[11] @[PipelineVector.scala 29:37]
    _T_5[1].cf.exceptionVec[12] <= _T_2.cf.exceptionVec[12] @[PipelineVector.scala 29:37]
    _T_5[1].cf.exceptionVec[13] <= _T_2.cf.exceptionVec[13] @[PipelineVector.scala 29:37]
    _T_5[1].cf.exceptionVec[14] <= _T_2.cf.exceptionVec[14] @[PipelineVector.scala 29:37]
    _T_5[1].cf.exceptionVec[15] <= _T_2.cf.exceptionVec[15] @[PipelineVector.scala 29:37]
    _T_5[1].cf.redirect.valid <= _T_2.cf.redirect.valid @[PipelineVector.scala 29:37]
    _T_5[1].cf.redirect.rtype <= _T_2.cf.redirect.rtype @[PipelineVector.scala 29:37]
    _T_5[1].cf.redirect.target <= _T_2.cf.redirect.target @[PipelineVector.scala 29:37]
    _T_5[1].cf.pnpc <= _T_2.cf.pnpc @[PipelineVector.scala 29:37]
    _T_5[1].cf.pc <= _T_2.cf.pc @[PipelineVector.scala 29:37]
    _T_5[1].cf.instr <= _T_2.cf.instr @[PipelineVector.scala 29:37]
    _T_5[2].data.imm <= _T_3.data.imm @[PipelineVector.scala 29:37]
    _T_5[2].data.src2 <= _T_3.data.src2 @[PipelineVector.scala 29:37]
    _T_5[2].data.src1 <= _T_3.data.src1 @[PipelineVector.scala 29:37]
    _T_5[2].ctrl.isBlocked <= _T_3.ctrl.isBlocked @[PipelineVector.scala 29:37]
    _T_5[2].ctrl.noSpecExec <= _T_3.ctrl.noSpecExec @[PipelineVector.scala 29:37]
    _T_5[2].ctrl.isSrc2Forward <= _T_3.ctrl.isSrc2Forward @[PipelineVector.scala 29:37]
    _T_5[2].ctrl.isSrc1Forward <= _T_3.ctrl.isSrc1Forward @[PipelineVector.scala 29:37]
    _T_5[2].ctrl.isNutCoreTrap <= _T_3.ctrl.isNutCoreTrap @[PipelineVector.scala 29:37]
    _T_5[2].ctrl.rfDest <= _T_3.ctrl.rfDest @[PipelineVector.scala 29:37]
    _T_5[2].ctrl.rfWen <= _T_3.ctrl.rfWen @[PipelineVector.scala 29:37]
    _T_5[2].ctrl.rfSrc2 <= _T_3.ctrl.rfSrc2 @[PipelineVector.scala 29:37]
    _T_5[2].ctrl.rfSrc1 <= _T_3.ctrl.rfSrc1 @[PipelineVector.scala 29:37]
    _T_5[2].ctrl.fuOpType <= _T_3.ctrl.fuOpType @[PipelineVector.scala 29:37]
    _T_5[2].ctrl.fuType <= _T_3.ctrl.fuType @[PipelineVector.scala 29:37]
    _T_5[2].ctrl.src2Type <= _T_3.ctrl.src2Type @[PipelineVector.scala 29:37]
    _T_5[2].ctrl.src1Type <= _T_3.ctrl.src1Type @[PipelineVector.scala 29:37]
    _T_5[2].cf.crossPageIPFFix <= _T_3.cf.crossPageIPFFix @[PipelineVector.scala 29:37]
    _T_5[2].cf.isRVC <= _T_3.cf.isRVC @[PipelineVector.scala 29:37]
    _T_5[2].cf.brIdx <= _T_3.cf.brIdx @[PipelineVector.scala 29:37]
    _T_5[2].cf.intrVec[0] <= _T_3.cf.intrVec[0] @[PipelineVector.scala 29:37]
    _T_5[2].cf.intrVec[1] <= _T_3.cf.intrVec[1] @[PipelineVector.scala 29:37]
    _T_5[2].cf.intrVec[2] <= _T_3.cf.intrVec[2] @[PipelineVector.scala 29:37]
    _T_5[2].cf.intrVec[3] <= _T_3.cf.intrVec[3] @[PipelineVector.scala 29:37]
    _T_5[2].cf.intrVec[4] <= _T_3.cf.intrVec[4] @[PipelineVector.scala 29:37]
    _T_5[2].cf.intrVec[5] <= _T_3.cf.intrVec[5] @[PipelineVector.scala 29:37]
    _T_5[2].cf.intrVec[6] <= _T_3.cf.intrVec[6] @[PipelineVector.scala 29:37]
    _T_5[2].cf.intrVec[7] <= _T_3.cf.intrVec[7] @[PipelineVector.scala 29:37]
    _T_5[2].cf.intrVec[8] <= _T_3.cf.intrVec[8] @[PipelineVector.scala 29:37]
    _T_5[2].cf.intrVec[9] <= _T_3.cf.intrVec[9] @[PipelineVector.scala 29:37]
    _T_5[2].cf.intrVec[10] <= _T_3.cf.intrVec[10] @[PipelineVector.scala 29:37]
    _T_5[2].cf.intrVec[11] <= _T_3.cf.intrVec[11] @[PipelineVector.scala 29:37]
    _T_5[2].cf.exceptionVec[0] <= _T_3.cf.exceptionVec[0] @[PipelineVector.scala 29:37]
    _T_5[2].cf.exceptionVec[1] <= _T_3.cf.exceptionVec[1] @[PipelineVector.scala 29:37]
    _T_5[2].cf.exceptionVec[2] <= _T_3.cf.exceptionVec[2] @[PipelineVector.scala 29:37]
    _T_5[2].cf.exceptionVec[3] <= _T_3.cf.exceptionVec[3] @[PipelineVector.scala 29:37]
    _T_5[2].cf.exceptionVec[4] <= _T_3.cf.exceptionVec[4] @[PipelineVector.scala 29:37]
    _T_5[2].cf.exceptionVec[5] <= _T_3.cf.exceptionVec[5] @[PipelineVector.scala 29:37]
    _T_5[2].cf.exceptionVec[6] <= _T_3.cf.exceptionVec[6] @[PipelineVector.scala 29:37]
    _T_5[2].cf.exceptionVec[7] <= _T_3.cf.exceptionVec[7] @[PipelineVector.scala 29:37]
    _T_5[2].cf.exceptionVec[8] <= _T_3.cf.exceptionVec[8] @[PipelineVector.scala 29:37]
    _T_5[2].cf.exceptionVec[9] <= _T_3.cf.exceptionVec[9] @[PipelineVector.scala 29:37]
    _T_5[2].cf.exceptionVec[10] <= _T_3.cf.exceptionVec[10] @[PipelineVector.scala 29:37]
    _T_5[2].cf.exceptionVec[11] <= _T_3.cf.exceptionVec[11] @[PipelineVector.scala 29:37]
    _T_5[2].cf.exceptionVec[12] <= _T_3.cf.exceptionVec[12] @[PipelineVector.scala 29:37]
    _T_5[2].cf.exceptionVec[13] <= _T_3.cf.exceptionVec[13] @[PipelineVector.scala 29:37]
    _T_5[2].cf.exceptionVec[14] <= _T_3.cf.exceptionVec[14] @[PipelineVector.scala 29:37]
    _T_5[2].cf.exceptionVec[15] <= _T_3.cf.exceptionVec[15] @[PipelineVector.scala 29:37]
    _T_5[2].cf.redirect.valid <= _T_3.cf.redirect.valid @[PipelineVector.scala 29:37]
    _T_5[2].cf.redirect.rtype <= _T_3.cf.redirect.rtype @[PipelineVector.scala 29:37]
    _T_5[2].cf.redirect.target <= _T_3.cf.redirect.target @[PipelineVector.scala 29:37]
    _T_5[2].cf.pnpc <= _T_3.cf.pnpc @[PipelineVector.scala 29:37]
    _T_5[2].cf.pc <= _T_3.cf.pc @[PipelineVector.scala 29:37]
    _T_5[2].cf.instr <= _T_3.cf.instr @[PipelineVector.scala 29:37]
    _T_5[3].data.imm <= _T_4.data.imm @[PipelineVector.scala 29:37]
    _T_5[3].data.src2 <= _T_4.data.src2 @[PipelineVector.scala 29:37]
    _T_5[3].data.src1 <= _T_4.data.src1 @[PipelineVector.scala 29:37]
    _T_5[3].ctrl.isBlocked <= _T_4.ctrl.isBlocked @[PipelineVector.scala 29:37]
    _T_5[3].ctrl.noSpecExec <= _T_4.ctrl.noSpecExec @[PipelineVector.scala 29:37]
    _T_5[3].ctrl.isSrc2Forward <= _T_4.ctrl.isSrc2Forward @[PipelineVector.scala 29:37]
    _T_5[3].ctrl.isSrc1Forward <= _T_4.ctrl.isSrc1Forward @[PipelineVector.scala 29:37]
    _T_5[3].ctrl.isNutCoreTrap <= _T_4.ctrl.isNutCoreTrap @[PipelineVector.scala 29:37]
    _T_5[3].ctrl.rfDest <= _T_4.ctrl.rfDest @[PipelineVector.scala 29:37]
    _T_5[3].ctrl.rfWen <= _T_4.ctrl.rfWen @[PipelineVector.scala 29:37]
    _T_5[3].ctrl.rfSrc2 <= _T_4.ctrl.rfSrc2 @[PipelineVector.scala 29:37]
    _T_5[3].ctrl.rfSrc1 <= _T_4.ctrl.rfSrc1 @[PipelineVector.scala 29:37]
    _T_5[3].ctrl.fuOpType <= _T_4.ctrl.fuOpType @[PipelineVector.scala 29:37]
    _T_5[3].ctrl.fuType <= _T_4.ctrl.fuType @[PipelineVector.scala 29:37]
    _T_5[3].ctrl.src2Type <= _T_4.ctrl.src2Type @[PipelineVector.scala 29:37]
    _T_5[3].ctrl.src1Type <= _T_4.ctrl.src1Type @[PipelineVector.scala 29:37]
    _T_5[3].cf.crossPageIPFFix <= _T_4.cf.crossPageIPFFix @[PipelineVector.scala 29:37]
    _T_5[3].cf.isRVC <= _T_4.cf.isRVC @[PipelineVector.scala 29:37]
    _T_5[3].cf.brIdx <= _T_4.cf.brIdx @[PipelineVector.scala 29:37]
    _T_5[3].cf.intrVec[0] <= _T_4.cf.intrVec[0] @[PipelineVector.scala 29:37]
    _T_5[3].cf.intrVec[1] <= _T_4.cf.intrVec[1] @[PipelineVector.scala 29:37]
    _T_5[3].cf.intrVec[2] <= _T_4.cf.intrVec[2] @[PipelineVector.scala 29:37]
    _T_5[3].cf.intrVec[3] <= _T_4.cf.intrVec[3] @[PipelineVector.scala 29:37]
    _T_5[3].cf.intrVec[4] <= _T_4.cf.intrVec[4] @[PipelineVector.scala 29:37]
    _T_5[3].cf.intrVec[5] <= _T_4.cf.intrVec[5] @[PipelineVector.scala 29:37]
    _T_5[3].cf.intrVec[6] <= _T_4.cf.intrVec[6] @[PipelineVector.scala 29:37]
    _T_5[3].cf.intrVec[7] <= _T_4.cf.intrVec[7] @[PipelineVector.scala 29:37]
    _T_5[3].cf.intrVec[8] <= _T_4.cf.intrVec[8] @[PipelineVector.scala 29:37]
    _T_5[3].cf.intrVec[9] <= _T_4.cf.intrVec[9] @[PipelineVector.scala 29:37]
    _T_5[3].cf.intrVec[10] <= _T_4.cf.intrVec[10] @[PipelineVector.scala 29:37]
    _T_5[3].cf.intrVec[11] <= _T_4.cf.intrVec[11] @[PipelineVector.scala 29:37]
    _T_5[3].cf.exceptionVec[0] <= _T_4.cf.exceptionVec[0] @[PipelineVector.scala 29:37]
    _T_5[3].cf.exceptionVec[1] <= _T_4.cf.exceptionVec[1] @[PipelineVector.scala 29:37]
    _T_5[3].cf.exceptionVec[2] <= _T_4.cf.exceptionVec[2] @[PipelineVector.scala 29:37]
    _T_5[3].cf.exceptionVec[3] <= _T_4.cf.exceptionVec[3] @[PipelineVector.scala 29:37]
    _T_5[3].cf.exceptionVec[4] <= _T_4.cf.exceptionVec[4] @[PipelineVector.scala 29:37]
    _T_5[3].cf.exceptionVec[5] <= _T_4.cf.exceptionVec[5] @[PipelineVector.scala 29:37]
    _T_5[3].cf.exceptionVec[6] <= _T_4.cf.exceptionVec[6] @[PipelineVector.scala 29:37]
    _T_5[3].cf.exceptionVec[7] <= _T_4.cf.exceptionVec[7] @[PipelineVector.scala 29:37]
    _T_5[3].cf.exceptionVec[8] <= _T_4.cf.exceptionVec[8] @[PipelineVector.scala 29:37]
    _T_5[3].cf.exceptionVec[9] <= _T_4.cf.exceptionVec[9] @[PipelineVector.scala 29:37]
    _T_5[3].cf.exceptionVec[10] <= _T_4.cf.exceptionVec[10] @[PipelineVector.scala 29:37]
    _T_5[3].cf.exceptionVec[11] <= _T_4.cf.exceptionVec[11] @[PipelineVector.scala 29:37]
    _T_5[3].cf.exceptionVec[12] <= _T_4.cf.exceptionVec[12] @[PipelineVector.scala 29:37]
    _T_5[3].cf.exceptionVec[13] <= _T_4.cf.exceptionVec[13] @[PipelineVector.scala 29:37]
    _T_5[3].cf.exceptionVec[14] <= _T_4.cf.exceptionVec[14] @[PipelineVector.scala 29:37]
    _T_5[3].cf.exceptionVec[15] <= _T_4.cf.exceptionVec[15] @[PipelineVector.scala 29:37]
    _T_5[3].cf.redirect.valid <= _T_4.cf.redirect.valid @[PipelineVector.scala 29:37]
    _T_5[3].cf.redirect.rtype <= _T_4.cf.redirect.rtype @[PipelineVector.scala 29:37]
    _T_5[3].cf.redirect.target <= _T_4.cf.redirect.target @[PipelineVector.scala 29:37]
    _T_5[3].cf.pnpc <= _T_4.cf.pnpc @[PipelineVector.scala 29:37]
    _T_5[3].cf.pc <= _T_4.cf.pc @[PipelineVector.scala 29:37]
    _T_5[3].cf.instr <= _T_4.cf.instr @[PipelineVector.scala 29:37]
    reg _T_6 : {cf : {instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : {target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>}, ctrl : {src1Type : UInt<1>, src2Type : UInt<1>, fuType : UInt<3>, fuOpType : UInt<7>, rfSrc1 : UInt<5>, rfSrc2 : UInt<5>, rfWen : UInt<1>, rfDest : UInt<5>, isNutCoreTrap : UInt<1>, isSrc1Forward : UInt<1>, isSrc2Forward : UInt<1>, noSpecExec : UInt<1>, isBlocked : UInt<1>}, data : {src1 : UInt<64>, src2 : UInt<64>, imm : UInt<64>}}[4], clock with : (reset => (reset, _T_5)) @[PipelineVector.scala 29:29]
    reg _T_7 : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[PipelineVector.scala 30:33]
    reg _T_8 : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[PipelineVector.scala 31:33]
    node _T_9 = eq(_T_7, _T_8) @[PipelineVector.scala 32:42]
    node _T_10 = add(_T_7, UInt<1>("h01")) @[PipelineVector.scala 33:63]
    node _T_11 = tail(_T_10, 1) @[PipelineVector.scala 33:63]
    node _T_12 = neq(_T_11, _T_8) @[PipelineVector.scala 33:74]
    node _T_13 = add(_T_7, UInt<2>("h02")) @[PipelineVector.scala 33:63]
    node _T_14 = tail(_T_13, 1) @[PipelineVector.scala 33:63]
    node _T_15 = neq(_T_14, _T_8) @[PipelineVector.scala 33:74]
    node _T_16 = and(_T_15, UInt<1>("h01")) @[PipelineVector.scala 33:124]
    node _T_17 = and(_T_12, _T_16) @[PipelineVector.scala 33:124]
    wire _T_18 : UInt<1>[2] @[PipelineVector.scala 36:27]
    _T_18[0] <= frontend.io.out[0].valid @[PipelineVector.scala 37:20]
    _T_18[1] <= frontend.io.out[1].valid @[PipelineVector.scala 38:20]
    node _T_19 = add(_T_18[0], _T_18[1]) @[PipelineVector.scala 40:46]
    node _T_20 = geq(_T_19, UInt<1>("h01")) @[PipelineVector.scala 41:53]
    node _T_21 = geq(_T_19, UInt<2>("h02")) @[PipelineVector.scala 41:53]
    node _T_22 = and(frontend.io.out[0].ready, frontend.io.out[0].valid) @[Decoupled.scala 40:37]
    node _T_23 = and(frontend.io.out[1].ready, frontend.io.out[1].valid) @[Decoupled.scala 40:37]
    node _T_24 = or(_T_22, _T_23) @[PipelineVector.scala 43:26]
    when _T_24 : @[PipelineVector.scala 44:14]
      when _T_20 : @[PipelineVector.scala 45:29]
        node _T_25 = add(UInt<1>("h00"), _T_7) @[PipelineVector.scala 45:45]
        node _T_26 = tail(_T_25, 1) @[PipelineVector.scala 45:45]
        node _T_27 = mux(_T_18[0], frontend.io.out[0].bits, frontend.io.out[1].bits) @[PipelineVector.scala 45:69]
        _T_6[_T_26].data.imm <= _T_27.data.imm @[PipelineVector.scala 45:63]
        _T_6[_T_26].data.src2 <= _T_27.data.src2 @[PipelineVector.scala 45:63]
        _T_6[_T_26].data.src1 <= _T_27.data.src1 @[PipelineVector.scala 45:63]
        _T_6[_T_26].ctrl.isBlocked <= _T_27.ctrl.isBlocked @[PipelineVector.scala 45:63]
        _T_6[_T_26].ctrl.noSpecExec <= _T_27.ctrl.noSpecExec @[PipelineVector.scala 45:63]
        _T_6[_T_26].ctrl.isSrc2Forward <= _T_27.ctrl.isSrc2Forward @[PipelineVector.scala 45:63]
        _T_6[_T_26].ctrl.isSrc1Forward <= _T_27.ctrl.isSrc1Forward @[PipelineVector.scala 45:63]
        _T_6[_T_26].ctrl.isNutCoreTrap <= _T_27.ctrl.isNutCoreTrap @[PipelineVector.scala 45:63]
        _T_6[_T_26].ctrl.rfDest <= _T_27.ctrl.rfDest @[PipelineVector.scala 45:63]
        _T_6[_T_26].ctrl.rfWen <= _T_27.ctrl.rfWen @[PipelineVector.scala 45:63]
        _T_6[_T_26].ctrl.rfSrc2 <= _T_27.ctrl.rfSrc2 @[PipelineVector.scala 45:63]
        _T_6[_T_26].ctrl.rfSrc1 <= _T_27.ctrl.rfSrc1 @[PipelineVector.scala 45:63]
        _T_6[_T_26].ctrl.fuOpType <= _T_27.ctrl.fuOpType @[PipelineVector.scala 45:63]
        _T_6[_T_26].ctrl.fuType <= _T_27.ctrl.fuType @[PipelineVector.scala 45:63]
        _T_6[_T_26].ctrl.src2Type <= _T_27.ctrl.src2Type @[PipelineVector.scala 45:63]
        _T_6[_T_26].ctrl.src1Type <= _T_27.ctrl.src1Type @[PipelineVector.scala 45:63]
        _T_6[_T_26].cf.crossPageIPFFix <= _T_27.cf.crossPageIPFFix @[PipelineVector.scala 45:63]
        _T_6[_T_26].cf.isRVC <= _T_27.cf.isRVC @[PipelineVector.scala 45:63]
        _T_6[_T_26].cf.brIdx <= _T_27.cf.brIdx @[PipelineVector.scala 45:63]
        _T_6[_T_26].cf.intrVec[0] <= _T_27.cf.intrVec[0] @[PipelineVector.scala 45:63]
        _T_6[_T_26].cf.intrVec[1] <= _T_27.cf.intrVec[1] @[PipelineVector.scala 45:63]
        _T_6[_T_26].cf.intrVec[2] <= _T_27.cf.intrVec[2] @[PipelineVector.scala 45:63]
        _T_6[_T_26].cf.intrVec[3] <= _T_27.cf.intrVec[3] @[PipelineVector.scala 45:63]
        _T_6[_T_26].cf.intrVec[4] <= _T_27.cf.intrVec[4] @[PipelineVector.scala 45:63]
        _T_6[_T_26].cf.intrVec[5] <= _T_27.cf.intrVec[5] @[PipelineVector.scala 45:63]
        _T_6[_T_26].cf.intrVec[6] <= _T_27.cf.intrVec[6] @[PipelineVector.scala 45:63]
        _T_6[_T_26].cf.intrVec[7] <= _T_27.cf.intrVec[7] @[PipelineVector.scala 45:63]
        _T_6[_T_26].cf.intrVec[8] <= _T_27.cf.intrVec[8] @[PipelineVector.scala 45:63]
        _T_6[_T_26].cf.intrVec[9] <= _T_27.cf.intrVec[9] @[PipelineVector.scala 45:63]
        _T_6[_T_26].cf.intrVec[10] <= _T_27.cf.intrVec[10] @[PipelineVector.scala 45:63]
        _T_6[_T_26].cf.intrVec[11] <= _T_27.cf.intrVec[11] @[PipelineVector.scala 45:63]
        _T_6[_T_26].cf.exceptionVec[0] <= _T_27.cf.exceptionVec[0] @[PipelineVector.scala 45:63]
        _T_6[_T_26].cf.exceptionVec[1] <= _T_27.cf.exceptionVec[1] @[PipelineVector.scala 45:63]
        _T_6[_T_26].cf.exceptionVec[2] <= _T_27.cf.exceptionVec[2] @[PipelineVector.scala 45:63]
        _T_6[_T_26].cf.exceptionVec[3] <= _T_27.cf.exceptionVec[3] @[PipelineVector.scala 45:63]
        _T_6[_T_26].cf.exceptionVec[4] <= _T_27.cf.exceptionVec[4] @[PipelineVector.scala 45:63]
        _T_6[_T_26].cf.exceptionVec[5] <= _T_27.cf.exceptionVec[5] @[PipelineVector.scala 45:63]
        _T_6[_T_26].cf.exceptionVec[6] <= _T_27.cf.exceptionVec[6] @[PipelineVector.scala 45:63]
        _T_6[_T_26].cf.exceptionVec[7] <= _T_27.cf.exceptionVec[7] @[PipelineVector.scala 45:63]
        _T_6[_T_26].cf.exceptionVec[8] <= _T_27.cf.exceptionVec[8] @[PipelineVector.scala 45:63]
        _T_6[_T_26].cf.exceptionVec[9] <= _T_27.cf.exceptionVec[9] @[PipelineVector.scala 45:63]
        _T_6[_T_26].cf.exceptionVec[10] <= _T_27.cf.exceptionVec[10] @[PipelineVector.scala 45:63]
        _T_6[_T_26].cf.exceptionVec[11] <= _T_27.cf.exceptionVec[11] @[PipelineVector.scala 45:63]
        _T_6[_T_26].cf.exceptionVec[12] <= _T_27.cf.exceptionVec[12] @[PipelineVector.scala 45:63]
        _T_6[_T_26].cf.exceptionVec[13] <= _T_27.cf.exceptionVec[13] @[PipelineVector.scala 45:63]
        _T_6[_T_26].cf.exceptionVec[14] <= _T_27.cf.exceptionVec[14] @[PipelineVector.scala 45:63]
        _T_6[_T_26].cf.exceptionVec[15] <= _T_27.cf.exceptionVec[15] @[PipelineVector.scala 45:63]
        _T_6[_T_26].cf.redirect.valid <= _T_27.cf.redirect.valid @[PipelineVector.scala 45:63]
        _T_6[_T_26].cf.redirect.rtype <= _T_27.cf.redirect.rtype @[PipelineVector.scala 45:63]
        _T_6[_T_26].cf.redirect.target <= _T_27.cf.redirect.target @[PipelineVector.scala 45:63]
        _T_6[_T_26].cf.pnpc <= _T_27.cf.pnpc @[PipelineVector.scala 45:63]
        _T_6[_T_26].cf.pc <= _T_27.cf.pc @[PipelineVector.scala 45:63]
        _T_6[_T_26].cf.instr <= _T_27.cf.instr @[PipelineVector.scala 45:63]
        skip @[PipelineVector.scala 45:29]
      when _T_21 : @[PipelineVector.scala 46:29]
        node _T_28 = add(UInt<1>("h01"), _T_7) @[PipelineVector.scala 46:45]
        node _T_29 = tail(_T_28, 1) @[PipelineVector.scala 46:45]
        _T_6[_T_29].data.imm <= frontend.io.out[1].bits.data.imm @[PipelineVector.scala 46:63]
        _T_6[_T_29].data.src2 <= frontend.io.out[1].bits.data.src2 @[PipelineVector.scala 46:63]
        _T_6[_T_29].data.src1 <= frontend.io.out[1].bits.data.src1 @[PipelineVector.scala 46:63]
        _T_6[_T_29].ctrl.isBlocked <= frontend.io.out[1].bits.ctrl.isBlocked @[PipelineVector.scala 46:63]
        _T_6[_T_29].ctrl.noSpecExec <= frontend.io.out[1].bits.ctrl.noSpecExec @[PipelineVector.scala 46:63]
        _T_6[_T_29].ctrl.isSrc2Forward <= frontend.io.out[1].bits.ctrl.isSrc2Forward @[PipelineVector.scala 46:63]
        _T_6[_T_29].ctrl.isSrc1Forward <= frontend.io.out[1].bits.ctrl.isSrc1Forward @[PipelineVector.scala 46:63]
        _T_6[_T_29].ctrl.isNutCoreTrap <= frontend.io.out[1].bits.ctrl.isNutCoreTrap @[PipelineVector.scala 46:63]
        _T_6[_T_29].ctrl.rfDest <= frontend.io.out[1].bits.ctrl.rfDest @[PipelineVector.scala 46:63]
        _T_6[_T_29].ctrl.rfWen <= frontend.io.out[1].bits.ctrl.rfWen @[PipelineVector.scala 46:63]
        _T_6[_T_29].ctrl.rfSrc2 <= frontend.io.out[1].bits.ctrl.rfSrc2 @[PipelineVector.scala 46:63]
        _T_6[_T_29].ctrl.rfSrc1 <= frontend.io.out[1].bits.ctrl.rfSrc1 @[PipelineVector.scala 46:63]
        _T_6[_T_29].ctrl.fuOpType <= frontend.io.out[1].bits.ctrl.fuOpType @[PipelineVector.scala 46:63]
        _T_6[_T_29].ctrl.fuType <= frontend.io.out[1].bits.ctrl.fuType @[PipelineVector.scala 46:63]
        _T_6[_T_29].ctrl.src2Type <= frontend.io.out[1].bits.ctrl.src2Type @[PipelineVector.scala 46:63]
        _T_6[_T_29].ctrl.src1Type <= frontend.io.out[1].bits.ctrl.src1Type @[PipelineVector.scala 46:63]
        _T_6[_T_29].cf.crossPageIPFFix <= frontend.io.out[1].bits.cf.crossPageIPFFix @[PipelineVector.scala 46:63]
        _T_6[_T_29].cf.isRVC <= frontend.io.out[1].bits.cf.isRVC @[PipelineVector.scala 46:63]
        _T_6[_T_29].cf.brIdx <= frontend.io.out[1].bits.cf.brIdx @[PipelineVector.scala 46:63]
        _T_6[_T_29].cf.intrVec[0] <= frontend.io.out[1].bits.cf.intrVec[0] @[PipelineVector.scala 46:63]
        _T_6[_T_29].cf.intrVec[1] <= frontend.io.out[1].bits.cf.intrVec[1] @[PipelineVector.scala 46:63]
        _T_6[_T_29].cf.intrVec[2] <= frontend.io.out[1].bits.cf.intrVec[2] @[PipelineVector.scala 46:63]
        _T_6[_T_29].cf.intrVec[3] <= frontend.io.out[1].bits.cf.intrVec[3] @[PipelineVector.scala 46:63]
        _T_6[_T_29].cf.intrVec[4] <= frontend.io.out[1].bits.cf.intrVec[4] @[PipelineVector.scala 46:63]
        _T_6[_T_29].cf.intrVec[5] <= frontend.io.out[1].bits.cf.intrVec[5] @[PipelineVector.scala 46:63]
        _T_6[_T_29].cf.intrVec[6] <= frontend.io.out[1].bits.cf.intrVec[6] @[PipelineVector.scala 46:63]
        _T_6[_T_29].cf.intrVec[7] <= frontend.io.out[1].bits.cf.intrVec[7] @[PipelineVector.scala 46:63]
        _T_6[_T_29].cf.intrVec[8] <= frontend.io.out[1].bits.cf.intrVec[8] @[PipelineVector.scala 46:63]
        _T_6[_T_29].cf.intrVec[9] <= frontend.io.out[1].bits.cf.intrVec[9] @[PipelineVector.scala 46:63]
        _T_6[_T_29].cf.intrVec[10] <= frontend.io.out[1].bits.cf.intrVec[10] @[PipelineVector.scala 46:63]
        _T_6[_T_29].cf.intrVec[11] <= frontend.io.out[1].bits.cf.intrVec[11] @[PipelineVector.scala 46:63]
        _T_6[_T_29].cf.exceptionVec[0] <= frontend.io.out[1].bits.cf.exceptionVec[0] @[PipelineVector.scala 46:63]
        _T_6[_T_29].cf.exceptionVec[1] <= frontend.io.out[1].bits.cf.exceptionVec[1] @[PipelineVector.scala 46:63]
        _T_6[_T_29].cf.exceptionVec[2] <= frontend.io.out[1].bits.cf.exceptionVec[2] @[PipelineVector.scala 46:63]
        _T_6[_T_29].cf.exceptionVec[3] <= frontend.io.out[1].bits.cf.exceptionVec[3] @[PipelineVector.scala 46:63]
        _T_6[_T_29].cf.exceptionVec[4] <= frontend.io.out[1].bits.cf.exceptionVec[4] @[PipelineVector.scala 46:63]
        _T_6[_T_29].cf.exceptionVec[5] <= frontend.io.out[1].bits.cf.exceptionVec[5] @[PipelineVector.scala 46:63]
        _T_6[_T_29].cf.exceptionVec[6] <= frontend.io.out[1].bits.cf.exceptionVec[6] @[PipelineVector.scala 46:63]
        _T_6[_T_29].cf.exceptionVec[7] <= frontend.io.out[1].bits.cf.exceptionVec[7] @[PipelineVector.scala 46:63]
        _T_6[_T_29].cf.exceptionVec[8] <= frontend.io.out[1].bits.cf.exceptionVec[8] @[PipelineVector.scala 46:63]
        _T_6[_T_29].cf.exceptionVec[9] <= frontend.io.out[1].bits.cf.exceptionVec[9] @[PipelineVector.scala 46:63]
        _T_6[_T_29].cf.exceptionVec[10] <= frontend.io.out[1].bits.cf.exceptionVec[10] @[PipelineVector.scala 46:63]
        _T_6[_T_29].cf.exceptionVec[11] <= frontend.io.out[1].bits.cf.exceptionVec[11] @[PipelineVector.scala 46:63]
        _T_6[_T_29].cf.exceptionVec[12] <= frontend.io.out[1].bits.cf.exceptionVec[12] @[PipelineVector.scala 46:63]
        _T_6[_T_29].cf.exceptionVec[13] <= frontend.io.out[1].bits.cf.exceptionVec[13] @[PipelineVector.scala 46:63]
        _T_6[_T_29].cf.exceptionVec[14] <= frontend.io.out[1].bits.cf.exceptionVec[14] @[PipelineVector.scala 46:63]
        _T_6[_T_29].cf.exceptionVec[15] <= frontend.io.out[1].bits.cf.exceptionVec[15] @[PipelineVector.scala 46:63]
        _T_6[_T_29].cf.redirect.valid <= frontend.io.out[1].bits.cf.redirect.valid @[PipelineVector.scala 46:63]
        _T_6[_T_29].cf.redirect.rtype <= frontend.io.out[1].bits.cf.redirect.rtype @[PipelineVector.scala 46:63]
        _T_6[_T_29].cf.redirect.target <= frontend.io.out[1].bits.cf.redirect.target @[PipelineVector.scala 46:63]
        _T_6[_T_29].cf.pnpc <= frontend.io.out[1].bits.cf.pnpc @[PipelineVector.scala 46:63]
        _T_6[_T_29].cf.pc <= frontend.io.out[1].bits.cf.pc @[PipelineVector.scala 46:63]
        _T_6[_T_29].cf.instr <= frontend.io.out[1].bits.cf.instr @[PipelineVector.scala 46:63]
        skip @[PipelineVector.scala 46:29]
      node _T_30 = add(_T_7, _T_19) @[PipelineVector.scala 47:42]
      node _T_31 = tail(_T_30, 1) @[PipelineVector.scala 47:42]
      _T_7 <= _T_31 @[PipelineVector.scala 47:24]
      skip @[PipelineVector.scala 44:14]
    node _T_32 = eq(frontend.io.out[0].valid, UInt<1>("h00")) @[PipelineVector.scala 50:39]
    node _T_33 = or(_T_17, _T_32) @[PipelineVector.scala 50:36]
    frontend.io.out[0].ready <= _T_33 @[PipelineVector.scala 50:15]
    node _T_34 = eq(frontend.io.out[1].valid, UInt<1>("h00")) @[PipelineVector.scala 51:39]
    node _T_35 = or(_T_17, _T_34) @[PipelineVector.scala 51:36]
    frontend.io.out[1].ready <= _T_35 @[PipelineVector.scala 51:15]
    Backend_inorder.io.in[0].bits.data.imm <= _T_6[_T_8].data.imm @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.data.src2 <= _T_6[_T_8].data.src2 @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.data.src1 <= _T_6[_T_8].data.src1 @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.ctrl.isBlocked <= _T_6[_T_8].ctrl.isBlocked @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.ctrl.noSpecExec <= _T_6[_T_8].ctrl.noSpecExec @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.ctrl.isSrc2Forward <= _T_6[_T_8].ctrl.isSrc2Forward @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.ctrl.isSrc1Forward <= _T_6[_T_8].ctrl.isSrc1Forward @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.ctrl.isNutCoreTrap <= _T_6[_T_8].ctrl.isNutCoreTrap @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.ctrl.rfDest <= _T_6[_T_8].ctrl.rfDest @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.ctrl.rfWen <= _T_6[_T_8].ctrl.rfWen @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.ctrl.rfSrc2 <= _T_6[_T_8].ctrl.rfSrc2 @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.ctrl.rfSrc1 <= _T_6[_T_8].ctrl.rfSrc1 @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.ctrl.fuOpType <= _T_6[_T_8].ctrl.fuOpType @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.ctrl.fuType <= _T_6[_T_8].ctrl.fuType @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.ctrl.src2Type <= _T_6[_T_8].ctrl.src2Type @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.ctrl.src1Type <= _T_6[_T_8].ctrl.src1Type @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.crossPageIPFFix <= _T_6[_T_8].cf.crossPageIPFFix @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.isRVC <= _T_6[_T_8].cf.isRVC @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.brIdx <= _T_6[_T_8].cf.brIdx @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.intrVec[0] <= _T_6[_T_8].cf.intrVec[0] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.intrVec[1] <= _T_6[_T_8].cf.intrVec[1] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.intrVec[2] <= _T_6[_T_8].cf.intrVec[2] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.intrVec[3] <= _T_6[_T_8].cf.intrVec[3] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.intrVec[4] <= _T_6[_T_8].cf.intrVec[4] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.intrVec[5] <= _T_6[_T_8].cf.intrVec[5] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.intrVec[6] <= _T_6[_T_8].cf.intrVec[6] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.intrVec[7] <= _T_6[_T_8].cf.intrVec[7] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.intrVec[8] <= _T_6[_T_8].cf.intrVec[8] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.intrVec[9] <= _T_6[_T_8].cf.intrVec[9] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.intrVec[10] <= _T_6[_T_8].cf.intrVec[10] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.intrVec[11] <= _T_6[_T_8].cf.intrVec[11] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.exceptionVec[0] <= _T_6[_T_8].cf.exceptionVec[0] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.exceptionVec[1] <= _T_6[_T_8].cf.exceptionVec[1] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.exceptionVec[2] <= _T_6[_T_8].cf.exceptionVec[2] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.exceptionVec[3] <= _T_6[_T_8].cf.exceptionVec[3] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.exceptionVec[4] <= _T_6[_T_8].cf.exceptionVec[4] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.exceptionVec[5] <= _T_6[_T_8].cf.exceptionVec[5] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.exceptionVec[6] <= _T_6[_T_8].cf.exceptionVec[6] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.exceptionVec[7] <= _T_6[_T_8].cf.exceptionVec[7] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.exceptionVec[8] <= _T_6[_T_8].cf.exceptionVec[8] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.exceptionVec[9] <= _T_6[_T_8].cf.exceptionVec[9] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.exceptionVec[10] <= _T_6[_T_8].cf.exceptionVec[10] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.exceptionVec[11] <= _T_6[_T_8].cf.exceptionVec[11] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.exceptionVec[12] <= _T_6[_T_8].cf.exceptionVec[12] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.exceptionVec[13] <= _T_6[_T_8].cf.exceptionVec[13] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.exceptionVec[14] <= _T_6[_T_8].cf.exceptionVec[14] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.exceptionVec[15] <= _T_6[_T_8].cf.exceptionVec[15] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.redirect.valid <= _T_6[_T_8].cf.redirect.valid @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.redirect.rtype <= _T_6[_T_8].cf.redirect.rtype @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.redirect.target <= _T_6[_T_8].cf.redirect.target @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.pnpc <= _T_6[_T_8].cf.pnpc @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.pc <= _T_6[_T_8].cf.pc @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.instr <= _T_6[_T_8].cf.instr @[PipelineVector.scala 55:15]
    node _T_36 = neq(_T_7, _T_8) @[PipelineVector.scala 56:34]
    Backend_inorder.io.in[0].valid <= _T_36 @[PipelineVector.scala 56:16]
    node _T_37 = add(_T_8, UInt<1>("h01")) @[PipelineVector.scala 59:42]
    node _T_38 = tail(_T_37, 1) @[PipelineVector.scala 59:42]
    Backend_inorder.io.in[1].bits.data.imm <= _T_6[_T_38].data.imm @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.data.src2 <= _T_6[_T_38].data.src2 @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.data.src1 <= _T_6[_T_38].data.src1 @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.ctrl.isBlocked <= _T_6[_T_38].ctrl.isBlocked @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.ctrl.noSpecExec <= _T_6[_T_38].ctrl.noSpecExec @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.ctrl.isSrc2Forward <= _T_6[_T_38].ctrl.isSrc2Forward @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.ctrl.isSrc1Forward <= _T_6[_T_38].ctrl.isSrc1Forward @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.ctrl.isNutCoreTrap <= _T_6[_T_38].ctrl.isNutCoreTrap @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.ctrl.rfDest <= _T_6[_T_38].ctrl.rfDest @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.ctrl.rfWen <= _T_6[_T_38].ctrl.rfWen @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.ctrl.rfSrc2 <= _T_6[_T_38].ctrl.rfSrc2 @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.ctrl.rfSrc1 <= _T_6[_T_38].ctrl.rfSrc1 @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.ctrl.fuOpType <= _T_6[_T_38].ctrl.fuOpType @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.ctrl.fuType <= _T_6[_T_38].ctrl.fuType @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.ctrl.src2Type <= _T_6[_T_38].ctrl.src2Type @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.ctrl.src1Type <= _T_6[_T_38].ctrl.src1Type @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.crossPageIPFFix <= _T_6[_T_38].cf.crossPageIPFFix @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.isRVC <= _T_6[_T_38].cf.isRVC @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.brIdx <= _T_6[_T_38].cf.brIdx @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.intrVec[0] <= _T_6[_T_38].cf.intrVec[0] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.intrVec[1] <= _T_6[_T_38].cf.intrVec[1] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.intrVec[2] <= _T_6[_T_38].cf.intrVec[2] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.intrVec[3] <= _T_6[_T_38].cf.intrVec[3] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.intrVec[4] <= _T_6[_T_38].cf.intrVec[4] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.intrVec[5] <= _T_6[_T_38].cf.intrVec[5] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.intrVec[6] <= _T_6[_T_38].cf.intrVec[6] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.intrVec[7] <= _T_6[_T_38].cf.intrVec[7] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.intrVec[8] <= _T_6[_T_38].cf.intrVec[8] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.intrVec[9] <= _T_6[_T_38].cf.intrVec[9] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.intrVec[10] <= _T_6[_T_38].cf.intrVec[10] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.intrVec[11] <= _T_6[_T_38].cf.intrVec[11] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.exceptionVec[0] <= _T_6[_T_38].cf.exceptionVec[0] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.exceptionVec[1] <= _T_6[_T_38].cf.exceptionVec[1] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.exceptionVec[2] <= _T_6[_T_38].cf.exceptionVec[2] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.exceptionVec[3] <= _T_6[_T_38].cf.exceptionVec[3] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.exceptionVec[4] <= _T_6[_T_38].cf.exceptionVec[4] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.exceptionVec[5] <= _T_6[_T_38].cf.exceptionVec[5] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.exceptionVec[6] <= _T_6[_T_38].cf.exceptionVec[6] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.exceptionVec[7] <= _T_6[_T_38].cf.exceptionVec[7] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.exceptionVec[8] <= _T_6[_T_38].cf.exceptionVec[8] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.exceptionVec[9] <= _T_6[_T_38].cf.exceptionVec[9] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.exceptionVec[10] <= _T_6[_T_38].cf.exceptionVec[10] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.exceptionVec[11] <= _T_6[_T_38].cf.exceptionVec[11] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.exceptionVec[12] <= _T_6[_T_38].cf.exceptionVec[12] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.exceptionVec[13] <= _T_6[_T_38].cf.exceptionVec[13] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.exceptionVec[14] <= _T_6[_T_38].cf.exceptionVec[14] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.exceptionVec[15] <= _T_6[_T_38].cf.exceptionVec[15] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.redirect.valid <= _T_6[_T_38].cf.redirect.valid @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.redirect.rtype <= _T_6[_T_38].cf.redirect.rtype @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.redirect.target <= _T_6[_T_38].cf.redirect.target @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.pnpc <= _T_6[_T_38].cf.pnpc @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.pc <= _T_6[_T_38].cf.pc @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.instr <= _T_6[_T_38].cf.instr @[PipelineVector.scala 60:15]
    node _T_39 = neq(_T_7, _T_38) @[PipelineVector.scala 61:34]
    node _T_40 = and(_T_39, Backend_inorder.io.in[0].valid) @[PipelineVector.scala 61:54]
    Backend_inorder.io.in[1].valid <= _T_40 @[PipelineVector.scala 61:16]
    node _T_41 = and(Backend_inorder.io.in[0].ready, Backend_inorder.io.in[0].valid) @[Decoupled.scala 40:37]
    node _T_42 = and(Backend_inorder.io.in[1].ready, Backend_inorder.io.in[1].valid) @[Decoupled.scala 40:37]
    node _T_43 = add(_T_41, _T_42) @[PipelineVector.scala 64:44]
    node _T_44 = gt(_T_43, UInt<1>("h00")) @[PipelineVector.scala 65:35]
    when _T_44 : @[PipelineVector.scala 66:22]
      node _T_45 = add(_T_8, _T_43) @[PipelineVector.scala 67:42]
      node _T_46 = tail(_T_45, 1) @[PipelineVector.scala 67:42]
      _T_8 <= _T_46 @[PipelineVector.scala 67:24]
      skip @[PipelineVector.scala 66:22]
    when _T : @[PipelineVector.scala 71:16]
      _T_7 <= UInt<1>("h00") @[PipelineVector.scala 72:24]
      _T_8 <= UInt<1>("h00") @[PipelineVector.scala 73:24]
      skip @[PipelineVector.scala 71:16]
    wire _T_47 : UInt<1>
    _T_47 <= UInt<1>("h00")
    node _T_48 = and(UInt<1>("h01"), _T_47) @[Debug.scala 80:29]
    when _T_48 : @[Debug.scala 80:52]
      node _T_49 = add(UInt<3>("h04"), _T_7) @[PipelineVector.scala 77:86]
      node _T_50 = sub(_T_49, _T_8) @[PipelineVector.scala 77:113]
      node _T_51 = tail(_T_50, 1) @[PipelineVector.scala 77:113]
      node _T_52 = rem(_T_51, UInt<3>("h04")) @[PipelineVector.scala 77:140]
      node _T_53 = asUInt(reset) @[PipelineVector.scala 77:15]
      node _T_54 = eq(_T_53, UInt<1>("h00")) @[PipelineVector.scala 77:15]
      when _T_54 : @[PipelineVector.scala 77:15]
        printf(clock, UInt<1>(1), "[DPQ] size %x head %x tail %x enq %x deq %x\n", _T_52, _T_7, _T_8, _T_19, _T_43) @[PipelineVector.scala 77:15]
        skip @[PipelineVector.scala 77:15]
      skip @[Debug.scala 80:52]
    inst SimpleBusCrossbarNto1 of SimpleBusCrossbarNto1 @[NutCore.scala 148:26]
    SimpleBusCrossbarNto1.clock <= clock
    SimpleBusCrossbarNto1.reset <= reset
    inst SimpleBusCrossbarNto1_1 of SimpleBusCrossbarNto1_1 @[NutCore.scala 149:26]
    SimpleBusCrossbarNto1_1.clock <= clock
    SimpleBusCrossbarNto1_1.reset <= reset
    node _T_55 = bits(frontend.io.flushVec, 0, 0) @[NutCore.scala 151:104]
    node _T_56 = or(_T_55, frontend.io.bpFlush) @[NutCore.scala 151:108]
    inst EmbeddedTLB of EmbeddedTLB @[EmbeddedTLB.scala 427:23]
    EmbeddedTLB.clock <= clock
    EmbeddedTLB.reset <= reset
    frontend.io.imem.resp.bits.user <= EmbeddedTLB.io.in.resp.bits.user @[EmbeddedTLB.scala 428:17]
    frontend.io.imem.resp.bits.rdata <= EmbeddedTLB.io.in.resp.bits.rdata @[EmbeddedTLB.scala 428:17]
    frontend.io.imem.resp.bits.cmd <= EmbeddedTLB.io.in.resp.bits.cmd @[EmbeddedTLB.scala 428:17]
    frontend.io.imem.resp.valid <= EmbeddedTLB.io.in.resp.valid @[EmbeddedTLB.scala 428:17]
    EmbeddedTLB.io.in.resp.ready <= frontend.io.imem.resp.ready @[EmbeddedTLB.scala 428:17]
    EmbeddedTLB.io.in.req.bits.user <= frontend.io.imem.req.bits.user @[EmbeddedTLB.scala 428:17]
    EmbeddedTLB.io.in.req.bits.wdata <= frontend.io.imem.req.bits.wdata @[EmbeddedTLB.scala 428:17]
    EmbeddedTLB.io.in.req.bits.wmask <= frontend.io.imem.req.bits.wmask @[EmbeddedTLB.scala 428:17]
    EmbeddedTLB.io.in.req.bits.cmd <= frontend.io.imem.req.bits.cmd @[EmbeddedTLB.scala 428:17]
    EmbeddedTLB.io.in.req.bits.size <= frontend.io.imem.req.bits.size @[EmbeddedTLB.scala 428:17]
    EmbeddedTLB.io.in.req.bits.addr <= frontend.io.imem.req.bits.addr @[EmbeddedTLB.scala 428:17]
    EmbeddedTLB.io.in.req.valid <= frontend.io.imem.req.valid @[EmbeddedTLB.scala 428:17]
    frontend.io.imem.req.ready <= EmbeddedTLB.io.in.req.ready @[EmbeddedTLB.scala 428:17]
    EmbeddedTLB.io.mem.resp.bits.rdata <= SimpleBusCrossbarNto1_1.io.in[1].resp.bits.rdata @[EmbeddedTLB.scala 429:18]
    EmbeddedTLB.io.mem.resp.bits.cmd <= SimpleBusCrossbarNto1_1.io.in[1].resp.bits.cmd @[EmbeddedTLB.scala 429:18]
    EmbeddedTLB.io.mem.resp.valid <= SimpleBusCrossbarNto1_1.io.in[1].resp.valid @[EmbeddedTLB.scala 429:18]
    SimpleBusCrossbarNto1_1.io.in[1].resp.ready <= EmbeddedTLB.io.mem.resp.ready @[EmbeddedTLB.scala 429:18]
    SimpleBusCrossbarNto1_1.io.in[1].req.bits.wdata <= EmbeddedTLB.io.mem.req.bits.wdata @[EmbeddedTLB.scala 429:18]
    SimpleBusCrossbarNto1_1.io.in[1].req.bits.wmask <= EmbeddedTLB.io.mem.req.bits.wmask @[EmbeddedTLB.scala 429:18]
    SimpleBusCrossbarNto1_1.io.in[1].req.bits.cmd <= EmbeddedTLB.io.mem.req.bits.cmd @[EmbeddedTLB.scala 429:18]
    SimpleBusCrossbarNto1_1.io.in[1].req.bits.size <= EmbeddedTLB.io.mem.req.bits.size @[EmbeddedTLB.scala 429:18]
    SimpleBusCrossbarNto1_1.io.in[1].req.bits.addr <= EmbeddedTLB.io.mem.req.bits.addr @[EmbeddedTLB.scala 429:18]
    SimpleBusCrossbarNto1_1.io.in[1].req.valid <= EmbeddedTLB.io.mem.req.valid @[EmbeddedTLB.scala 429:18]
    EmbeddedTLB.io.mem.req.ready <= SimpleBusCrossbarNto1_1.io.in[1].req.ready @[EmbeddedTLB.scala 429:18]
    EmbeddedTLB.io.flush <= _T_56 @[EmbeddedTLB.scala 430:20]
    Backend_inorder.io.memMMU.imem.addr <= EmbeddedTLB.io.csrMMU.addr @[EmbeddedTLB.scala 431:21]
    Backend_inorder.io.memMMU.imem.storePF <= EmbeddedTLB.io.csrMMU.storePF @[EmbeddedTLB.scala 431:21]
    Backend_inorder.io.memMMU.imem.loadPF <= EmbeddedTLB.io.csrMMU.loadPF @[EmbeddedTLB.scala 431:21]
    EmbeddedTLB.io.csrMMU.status_mxr <= Backend_inorder.io.memMMU.imem.status_mxr @[EmbeddedTLB.scala 431:21]
    EmbeddedTLB.io.csrMMU.status_sum <= Backend_inorder.io.memMMU.imem.status_sum @[EmbeddedTLB.scala 431:21]
    EmbeddedTLB.io.csrMMU.priviledgeMode <= Backend_inorder.io.memMMU.imem.priviledgeMode @[EmbeddedTLB.scala 431:21]
    frontend.io.ipf <= EmbeddedTLB.io.ipf @[NutCore.scala 152:21]
    node _T_57 = bits(frontend.io.flushVec, 0, 0) @[NutCore.scala 153:107]
    node _T_58 = or(_T_57, frontend.io.bpFlush) @[NutCore.scala 153:111]
    node _T_59 = bits(_T_58, 0, 0) @[Bitwise.scala 72:15]
    node _T_60 = mux(_T_59, UInt<2>("h03"), UInt<2>("h00")) @[Bitwise.scala 72:12]
    inst Cache of Cache @[Cache.scala 678:35]
    Cache.clock <= clock
    Cache.reset <= reset
    Cache.io.flush <= _T_60 @[Cache.scala 683:20]
    EmbeddedTLB.io.out.resp.bits.user <= Cache.io.in.resp.bits.user @[Cache.scala 684:17]
    EmbeddedTLB.io.out.resp.bits.rdata <= Cache.io.in.resp.bits.rdata @[Cache.scala 684:17]
    EmbeddedTLB.io.out.resp.bits.cmd <= Cache.io.in.resp.bits.cmd @[Cache.scala 684:17]
    EmbeddedTLB.io.out.resp.valid <= Cache.io.in.resp.valid @[Cache.scala 684:17]
    Cache.io.in.resp.ready <= EmbeddedTLB.io.out.resp.ready @[Cache.scala 684:17]
    Cache.io.in.req.bits.user <= EmbeddedTLB.io.out.req.bits.user @[Cache.scala 684:17]
    Cache.io.in.req.bits.wdata <= EmbeddedTLB.io.out.req.bits.wdata @[Cache.scala 684:17]
    Cache.io.in.req.bits.wmask <= EmbeddedTLB.io.out.req.bits.wmask @[Cache.scala 684:17]
    Cache.io.in.req.bits.cmd <= EmbeddedTLB.io.out.req.bits.cmd @[Cache.scala 684:17]
    Cache.io.in.req.bits.size <= EmbeddedTLB.io.out.req.bits.size @[Cache.scala 684:17]
    Cache.io.in.req.bits.addr <= EmbeddedTLB.io.out.req.bits.addr @[Cache.scala 684:17]
    Cache.io.in.req.valid <= EmbeddedTLB.io.out.req.valid @[Cache.scala 684:17]
    EmbeddedTLB.io.out.req.ready <= Cache.io.in.req.ready @[Cache.scala 684:17]
    Cache.io.mmio.resp.bits.rdata <= SimpleBusCrossbarNto1.io.in[0].resp.bits.rdata @[Cache.scala 685:13]
    Cache.io.mmio.resp.bits.cmd <= SimpleBusCrossbarNto1.io.in[0].resp.bits.cmd @[Cache.scala 685:13]
    Cache.io.mmio.resp.valid <= SimpleBusCrossbarNto1.io.in[0].resp.valid @[Cache.scala 685:13]
    SimpleBusCrossbarNto1.io.in[0].resp.ready <= Cache.io.mmio.resp.ready @[Cache.scala 685:13]
    SimpleBusCrossbarNto1.io.in[0].req.bits.wdata <= Cache.io.mmio.req.bits.wdata @[Cache.scala 685:13]
    SimpleBusCrossbarNto1.io.in[0].req.bits.wmask <= Cache.io.mmio.req.bits.wmask @[Cache.scala 685:13]
    SimpleBusCrossbarNto1.io.in[0].req.bits.cmd <= Cache.io.mmio.req.bits.cmd @[Cache.scala 685:13]
    SimpleBusCrossbarNto1.io.in[0].req.bits.size <= Cache.io.mmio.req.bits.size @[Cache.scala 685:13]
    SimpleBusCrossbarNto1.io.in[0].req.bits.addr <= Cache.io.mmio.req.bits.addr @[Cache.scala 685:13]
    SimpleBusCrossbarNto1.io.in[0].req.valid <= Cache.io.mmio.req.valid @[Cache.scala 685:13]
    Cache.io.mmio.req.ready <= SimpleBusCrossbarNto1.io.in[0].req.ready @[Cache.scala 685:13]
    EmbeddedTLB.io.cacheEmpty <= Cache.io.empty @[Cache.scala 686:11]
    io.imem.coh.resp.bits.rdata <= Cache.io.out.coh.resp.bits.rdata @[NutCore.scala 153:13]
    io.imem.coh.resp.bits.cmd <= Cache.io.out.coh.resp.bits.cmd @[NutCore.scala 153:13]
    io.imem.coh.resp.valid <= Cache.io.out.coh.resp.valid @[NutCore.scala 153:13]
    Cache.io.out.coh.resp.ready <= io.imem.coh.resp.ready @[NutCore.scala 153:13]
    Cache.io.out.coh.req.bits.wdata <= io.imem.coh.req.bits.wdata @[NutCore.scala 153:13]
    Cache.io.out.coh.req.bits.wmask <= io.imem.coh.req.bits.wmask @[NutCore.scala 153:13]
    Cache.io.out.coh.req.bits.cmd <= io.imem.coh.req.bits.cmd @[NutCore.scala 153:13]
    Cache.io.out.coh.req.bits.size <= io.imem.coh.req.bits.size @[NutCore.scala 153:13]
    Cache.io.out.coh.req.bits.addr <= io.imem.coh.req.bits.addr @[NutCore.scala 153:13]
    Cache.io.out.coh.req.valid <= io.imem.coh.req.valid @[NutCore.scala 153:13]
    io.imem.coh.req.ready <= Cache.io.out.coh.req.ready @[NutCore.scala 153:13]
    Cache.io.out.mem.resp.bits.rdata <= io.imem.mem.resp.bits.rdata @[NutCore.scala 153:13]
    Cache.io.out.mem.resp.bits.cmd <= io.imem.mem.resp.bits.cmd @[NutCore.scala 153:13]
    Cache.io.out.mem.resp.valid <= io.imem.mem.resp.valid @[NutCore.scala 153:13]
    io.imem.mem.resp.ready <= Cache.io.out.mem.resp.ready @[NutCore.scala 153:13]
    io.imem.mem.req.bits.wdata <= Cache.io.out.mem.req.bits.wdata @[NutCore.scala 153:13]
    io.imem.mem.req.bits.wmask <= Cache.io.out.mem.req.bits.wmask @[NutCore.scala 153:13]
    io.imem.mem.req.bits.cmd <= Cache.io.out.mem.req.bits.cmd @[NutCore.scala 153:13]
    io.imem.mem.req.bits.size <= Cache.io.out.mem.req.bits.size @[NutCore.scala 153:13]
    io.imem.mem.req.bits.addr <= Cache.io.out.mem.req.bits.addr @[NutCore.scala 153:13]
    io.imem.mem.req.valid <= Cache.io.out.mem.req.valid @[NutCore.scala 153:13]
    Cache.io.out.mem.req.ready <= io.imem.mem.req.ready @[NutCore.scala 153:13]
    inst EmbeddedTLB_1 of EmbeddedTLB_1 @[EmbeddedTLB.scala 427:23]
    EmbeddedTLB_1.clock <= clock
    EmbeddedTLB_1.reset <= reset
    Backend_inorder.io.dmem.resp.bits.rdata <= EmbeddedTLB_1.io.in.resp.bits.rdata @[EmbeddedTLB.scala 428:17]
    Backend_inorder.io.dmem.resp.bits.cmd <= EmbeddedTLB_1.io.in.resp.bits.cmd @[EmbeddedTLB.scala 428:17]
    Backend_inorder.io.dmem.resp.valid <= EmbeddedTLB_1.io.in.resp.valid @[EmbeddedTLB.scala 428:17]
    EmbeddedTLB_1.io.in.resp.ready <= Backend_inorder.io.dmem.resp.ready @[EmbeddedTLB.scala 428:17]
    EmbeddedTLB_1.io.in.req.bits.wdata <= Backend_inorder.io.dmem.req.bits.wdata @[EmbeddedTLB.scala 428:17]
    EmbeddedTLB_1.io.in.req.bits.wmask <= Backend_inorder.io.dmem.req.bits.wmask @[EmbeddedTLB.scala 428:17]
    EmbeddedTLB_1.io.in.req.bits.cmd <= Backend_inorder.io.dmem.req.bits.cmd @[EmbeddedTLB.scala 428:17]
    EmbeddedTLB_1.io.in.req.bits.size <= Backend_inorder.io.dmem.req.bits.size @[EmbeddedTLB.scala 428:17]
    EmbeddedTLB_1.io.in.req.bits.addr <= Backend_inorder.io.dmem.req.bits.addr @[EmbeddedTLB.scala 428:17]
    EmbeddedTLB_1.io.in.req.valid <= Backend_inorder.io.dmem.req.valid @[EmbeddedTLB.scala 428:17]
    Backend_inorder.io.dmem.req.ready <= EmbeddedTLB_1.io.in.req.ready @[EmbeddedTLB.scala 428:17]
    EmbeddedTLB_1.io.mem.resp.bits.rdata <= SimpleBusCrossbarNto1_1.io.in[2].resp.bits.rdata @[EmbeddedTLB.scala 429:18]
    EmbeddedTLB_1.io.mem.resp.bits.cmd <= SimpleBusCrossbarNto1_1.io.in[2].resp.bits.cmd @[EmbeddedTLB.scala 429:18]
    EmbeddedTLB_1.io.mem.resp.valid <= SimpleBusCrossbarNto1_1.io.in[2].resp.valid @[EmbeddedTLB.scala 429:18]
    SimpleBusCrossbarNto1_1.io.in[2].resp.ready <= EmbeddedTLB_1.io.mem.resp.ready @[EmbeddedTLB.scala 429:18]
    SimpleBusCrossbarNto1_1.io.in[2].req.bits.wdata <= EmbeddedTLB_1.io.mem.req.bits.wdata @[EmbeddedTLB.scala 429:18]
    SimpleBusCrossbarNto1_1.io.in[2].req.bits.wmask <= EmbeddedTLB_1.io.mem.req.bits.wmask @[EmbeddedTLB.scala 429:18]
    SimpleBusCrossbarNto1_1.io.in[2].req.bits.cmd <= EmbeddedTLB_1.io.mem.req.bits.cmd @[EmbeddedTLB.scala 429:18]
    SimpleBusCrossbarNto1_1.io.in[2].req.bits.size <= EmbeddedTLB_1.io.mem.req.bits.size @[EmbeddedTLB.scala 429:18]
    SimpleBusCrossbarNto1_1.io.in[2].req.bits.addr <= EmbeddedTLB_1.io.mem.req.bits.addr @[EmbeddedTLB.scala 429:18]
    SimpleBusCrossbarNto1_1.io.in[2].req.valid <= EmbeddedTLB_1.io.mem.req.valid @[EmbeddedTLB.scala 429:18]
    EmbeddedTLB_1.io.mem.req.ready <= SimpleBusCrossbarNto1_1.io.in[2].req.ready @[EmbeddedTLB.scala 429:18]
    EmbeddedTLB_1.io.flush <= UInt<1>("h00") @[EmbeddedTLB.scala 430:20]
    Backend_inorder.io.memMMU.dmem.addr <= EmbeddedTLB_1.io.csrMMU.addr @[EmbeddedTLB.scala 431:21]
    Backend_inorder.io.memMMU.dmem.storePF <= EmbeddedTLB_1.io.csrMMU.storePF @[EmbeddedTLB.scala 431:21]
    Backend_inorder.io.memMMU.dmem.loadPF <= EmbeddedTLB_1.io.csrMMU.loadPF @[EmbeddedTLB.scala 431:21]
    EmbeddedTLB_1.io.csrMMU.status_mxr <= Backend_inorder.io.memMMU.dmem.status_mxr @[EmbeddedTLB.scala 431:21]
    EmbeddedTLB_1.io.csrMMU.status_sum <= Backend_inorder.io.memMMU.dmem.status_sum @[EmbeddedTLB.scala 431:21]
    EmbeddedTLB_1.io.csrMMU.priviledgeMode <= Backend_inorder.io.memMMU.dmem.priviledgeMode @[EmbeddedTLB.scala 431:21]
    EmbeddedTLB_1.io.out.resp.bits.rdata <= SimpleBusCrossbarNto1_1.io.in[0].resp.bits.rdata @[NutCore.scala 157:23]
    EmbeddedTLB_1.io.out.resp.bits.cmd <= SimpleBusCrossbarNto1_1.io.in[0].resp.bits.cmd @[NutCore.scala 157:23]
    EmbeddedTLB_1.io.out.resp.valid <= SimpleBusCrossbarNto1_1.io.in[0].resp.valid @[NutCore.scala 157:23]
    SimpleBusCrossbarNto1_1.io.in[0].resp.ready <= EmbeddedTLB_1.io.out.resp.ready @[NutCore.scala 157:23]
    SimpleBusCrossbarNto1_1.io.in[0].req.bits.wdata <= EmbeddedTLB_1.io.out.req.bits.wdata @[NutCore.scala 157:23]
    SimpleBusCrossbarNto1_1.io.in[0].req.bits.wmask <= EmbeddedTLB_1.io.out.req.bits.wmask @[NutCore.scala 157:23]
    SimpleBusCrossbarNto1_1.io.in[0].req.bits.cmd <= EmbeddedTLB_1.io.out.req.bits.cmd @[NutCore.scala 157:23]
    SimpleBusCrossbarNto1_1.io.in[0].req.bits.size <= EmbeddedTLB_1.io.out.req.bits.size @[NutCore.scala 157:23]
    SimpleBusCrossbarNto1_1.io.in[0].req.bits.addr <= EmbeddedTLB_1.io.out.req.bits.addr @[NutCore.scala 157:23]
    SimpleBusCrossbarNto1_1.io.in[0].req.valid <= EmbeddedTLB_1.io.out.req.valid @[NutCore.scala 157:23]
    EmbeddedTLB_1.io.out.req.ready <= SimpleBusCrossbarNto1_1.io.in[0].req.ready @[NutCore.scala 157:23]
    inst Cache_1 of Cache_1 @[Cache.scala 678:35]
    Cache_1.clock <= clock
    Cache_1.reset <= reset
    Cache_1.io.flush <= UInt<1>("h00") @[Cache.scala 683:20]
    SimpleBusCrossbarNto1_1.io.out.resp.bits.rdata <= Cache_1.io.in.resp.bits.rdata @[Cache.scala 684:17]
    SimpleBusCrossbarNto1_1.io.out.resp.bits.cmd <= Cache_1.io.in.resp.bits.cmd @[Cache.scala 684:17]
    SimpleBusCrossbarNto1_1.io.out.resp.valid <= Cache_1.io.in.resp.valid @[Cache.scala 684:17]
    Cache_1.io.in.resp.ready <= SimpleBusCrossbarNto1_1.io.out.resp.ready @[Cache.scala 684:17]
    Cache_1.io.in.req.bits.wdata <= SimpleBusCrossbarNto1_1.io.out.req.bits.wdata @[Cache.scala 684:17]
    Cache_1.io.in.req.bits.wmask <= SimpleBusCrossbarNto1_1.io.out.req.bits.wmask @[Cache.scala 684:17]
    Cache_1.io.in.req.bits.cmd <= SimpleBusCrossbarNto1_1.io.out.req.bits.cmd @[Cache.scala 684:17]
    Cache_1.io.in.req.bits.size <= SimpleBusCrossbarNto1_1.io.out.req.bits.size @[Cache.scala 684:17]
    Cache_1.io.in.req.bits.addr <= SimpleBusCrossbarNto1_1.io.out.req.bits.addr @[Cache.scala 684:17]
    Cache_1.io.in.req.valid <= SimpleBusCrossbarNto1_1.io.out.req.valid @[Cache.scala 684:17]
    SimpleBusCrossbarNto1_1.io.out.req.ready <= Cache_1.io.in.req.ready @[Cache.scala 684:17]
    Cache_1.io.mmio.resp.bits.rdata <= SimpleBusCrossbarNto1.io.in[1].resp.bits.rdata @[Cache.scala 685:13]
    Cache_1.io.mmio.resp.bits.cmd <= SimpleBusCrossbarNto1.io.in[1].resp.bits.cmd @[Cache.scala 685:13]
    Cache_1.io.mmio.resp.valid <= SimpleBusCrossbarNto1.io.in[1].resp.valid @[Cache.scala 685:13]
    SimpleBusCrossbarNto1.io.in[1].resp.ready <= Cache_1.io.mmio.resp.ready @[Cache.scala 685:13]
    SimpleBusCrossbarNto1.io.in[1].req.bits.wdata <= Cache_1.io.mmio.req.bits.wdata @[Cache.scala 685:13]
    SimpleBusCrossbarNto1.io.in[1].req.bits.wmask <= Cache_1.io.mmio.req.bits.wmask @[Cache.scala 685:13]
    SimpleBusCrossbarNto1.io.in[1].req.bits.cmd <= Cache_1.io.mmio.req.bits.cmd @[Cache.scala 685:13]
    SimpleBusCrossbarNto1.io.in[1].req.bits.size <= Cache_1.io.mmio.req.bits.size @[Cache.scala 685:13]
    SimpleBusCrossbarNto1.io.in[1].req.bits.addr <= Cache_1.io.mmio.req.bits.addr @[Cache.scala 685:13]
    SimpleBusCrossbarNto1.io.in[1].req.valid <= Cache_1.io.mmio.req.valid @[Cache.scala 685:13]
    Cache_1.io.mmio.req.ready <= SimpleBusCrossbarNto1.io.in[1].req.ready @[Cache.scala 685:13]
    EmbeddedTLB_1.io.cacheEmpty <= Cache_1.io.empty @[Cache.scala 686:11]
    io.dmem.coh.resp.bits.rdata <= Cache_1.io.out.coh.resp.bits.rdata @[NutCore.scala 158:13]
    io.dmem.coh.resp.bits.cmd <= Cache_1.io.out.coh.resp.bits.cmd @[NutCore.scala 158:13]
    io.dmem.coh.resp.valid <= Cache_1.io.out.coh.resp.valid @[NutCore.scala 158:13]
    Cache_1.io.out.coh.resp.ready <= io.dmem.coh.resp.ready @[NutCore.scala 158:13]
    Cache_1.io.out.coh.req.bits.wdata <= io.dmem.coh.req.bits.wdata @[NutCore.scala 158:13]
    Cache_1.io.out.coh.req.bits.wmask <= io.dmem.coh.req.bits.wmask @[NutCore.scala 158:13]
    Cache_1.io.out.coh.req.bits.cmd <= io.dmem.coh.req.bits.cmd @[NutCore.scala 158:13]
    Cache_1.io.out.coh.req.bits.size <= io.dmem.coh.req.bits.size @[NutCore.scala 158:13]
    Cache_1.io.out.coh.req.bits.addr <= io.dmem.coh.req.bits.addr @[NutCore.scala 158:13]
    Cache_1.io.out.coh.req.valid <= io.dmem.coh.req.valid @[NutCore.scala 158:13]
    io.dmem.coh.req.ready <= Cache_1.io.out.coh.req.ready @[NutCore.scala 158:13]
    Cache_1.io.out.mem.resp.bits.rdata <= io.dmem.mem.resp.bits.rdata @[NutCore.scala 158:13]
    Cache_1.io.out.mem.resp.bits.cmd <= io.dmem.mem.resp.bits.cmd @[NutCore.scala 158:13]
    Cache_1.io.out.mem.resp.valid <= io.dmem.mem.resp.valid @[NutCore.scala 158:13]
    io.dmem.mem.resp.ready <= Cache_1.io.out.mem.resp.ready @[NutCore.scala 158:13]
    io.dmem.mem.req.bits.wdata <= Cache_1.io.out.mem.req.bits.wdata @[NutCore.scala 158:13]
    io.dmem.mem.req.bits.wmask <= Cache_1.io.out.mem.req.bits.wmask @[NutCore.scala 158:13]
    io.dmem.mem.req.bits.cmd <= Cache_1.io.out.mem.req.bits.cmd @[NutCore.scala 158:13]
    io.dmem.mem.req.bits.size <= Cache_1.io.out.mem.req.bits.size @[NutCore.scala 158:13]
    io.dmem.mem.req.bits.addr <= Cache_1.io.out.mem.req.bits.addr @[NutCore.scala 158:13]
    io.dmem.mem.req.valid <= Cache_1.io.out.mem.req.valid @[NutCore.scala 158:13]
    Cache_1.io.out.mem.req.ready <= io.dmem.mem.req.ready @[NutCore.scala 158:13]
    frontend.io.redirect.valid <= Backend_inorder.io.redirect.valid @[NutCore.scala 161:26]
    frontend.io.redirect.rtype <= Backend_inorder.io.redirect.rtype @[NutCore.scala 161:26]
    frontend.io.redirect.target <= Backend_inorder.io.redirect.target @[NutCore.scala 161:26]
    node _T_61 = bits(frontend.io.flushVec, 3, 2) @[NutCore.scala 162:45]
    Backend_inorder.io.flush <= _T_61 @[NutCore.scala 162:22]
    io.frontend.resp.bits.rdata <= SimpleBusCrossbarNto1_1.io.in[3].resp.bits.rdata @[NutCore.scala 165:23]
    io.frontend.resp.bits.cmd <= SimpleBusCrossbarNto1_1.io.in[3].resp.bits.cmd @[NutCore.scala 165:23]
    io.frontend.resp.valid <= SimpleBusCrossbarNto1_1.io.in[3].resp.valid @[NutCore.scala 165:23]
    SimpleBusCrossbarNto1_1.io.in[3].resp.ready <= io.frontend.resp.ready @[NutCore.scala 165:23]
    SimpleBusCrossbarNto1_1.io.in[3].req.bits.wdata <= io.frontend.req.bits.wdata @[NutCore.scala 165:23]
    SimpleBusCrossbarNto1_1.io.in[3].req.bits.wmask <= io.frontend.req.bits.wmask @[NutCore.scala 165:23]
    SimpleBusCrossbarNto1_1.io.in[3].req.bits.cmd <= io.frontend.req.bits.cmd @[NutCore.scala 165:23]
    SimpleBusCrossbarNto1_1.io.in[3].req.bits.size <= io.frontend.req.bits.size @[NutCore.scala 165:23]
    SimpleBusCrossbarNto1_1.io.in[3].req.bits.addr <= io.frontend.req.bits.addr @[NutCore.scala 165:23]
    SimpleBusCrossbarNto1_1.io.in[3].req.valid <= io.frontend.req.valid @[NutCore.scala 165:23]
    io.frontend.req.ready <= SimpleBusCrossbarNto1_1.io.in[3].req.ready @[NutCore.scala 165:23]
    SimpleBusCrossbarNto1.io.out.resp.bits.rdata <= io.mmio.resp.bits.rdata @[NutCore.scala 167:13]
    SimpleBusCrossbarNto1.io.out.resp.bits.cmd <= io.mmio.resp.bits.cmd @[NutCore.scala 167:13]
    SimpleBusCrossbarNto1.io.out.resp.valid <= io.mmio.resp.valid @[NutCore.scala 167:13]
    io.mmio.resp.ready <= SimpleBusCrossbarNto1.io.out.resp.ready @[NutCore.scala 167:13]
    io.mmio.req.bits.wdata <= SimpleBusCrossbarNto1.io.out.req.bits.wdata @[NutCore.scala 167:13]
    io.mmio.req.bits.wmask <= SimpleBusCrossbarNto1.io.out.req.bits.wmask @[NutCore.scala 167:13]
    io.mmio.req.bits.cmd <= SimpleBusCrossbarNto1.io.out.req.bits.cmd @[NutCore.scala 167:13]
    io.mmio.req.bits.size <= SimpleBusCrossbarNto1.io.out.req.bits.size @[NutCore.scala 167:13]
    io.mmio.req.bits.addr <= SimpleBusCrossbarNto1.io.out.req.bits.addr @[NutCore.scala 167:13]
    io.mmio.req.valid <= SimpleBusCrossbarNto1.io.out.req.valid @[NutCore.scala 167:13]
    SimpleBusCrossbarNto1.io.out.req.ready <= io.mmio.req.ready @[NutCore.scala 167:13]
    reg _T_62 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_63 = add(_T_62, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_64 = tail(_T_63, 1) @[GTimer.scala 25:12]
    _T_62 <= _T_64 @[GTimer.scala 25:7]
    wire _T_65 : UInt<1>
    _T_65 <= UInt<1>("h00")
    node _T_66 = and(UInt<1>("h01"), _T_65) @[Debug.scala 55:16]
    when _T_66 : @[Debug.scala 55:31]
      node _T_67 = asUInt(reset) @[Debug.scala 56:24]
      node _T_68 = eq(_T_67, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_68 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] NutCore: ", _T_62) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_69 = asUInt(reset) @[Debug.scala 57:13]
      node _T_70 = eq(_T_69, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_70 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "------------------------ BACKEND ------------------------\n") @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    
  module CoherenceManager : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}, out : {mem : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}, coh : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}}}
    
    reg state : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Coherence.scala 45:22]
    node inflight = neq(state, UInt<3>("h00")) @[Coherence.scala 46:24]
    node _T = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_1 = eq(_T, UInt<1>("h00")) @[SimpleBus.scala 73:18]
    node _T_2 = bits(io.in.req.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SimpleBus.scala 73:29]
    node _T_4 = and(_T_1, _T_3) @[SimpleBus.scala 73:26]
    node _T_5 = eq(_T_4, UInt<1>("h00")) @[Coherence.scala 49:29]
    node _T_6 = and(io.in.req.valid, _T_5) @[Coherence.scala 49:26]
    node _T_7 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_8 = eq(_T_7, UInt<1>("h00")) @[Coherence.scala 49:55]
    node _T_9 = and(_T_6, _T_8) @[Coherence.scala 49:52]
    node _T_10 = eq(_T_9, UInt<1>("h00")) @[Coherence.scala 49:10]
    node _T_11 = asUInt(reset) @[Coherence.scala 49:9]
    node _T_12 = or(_T_10, _T_11) @[Coherence.scala 49:9]
    node _T_13 = eq(_T_12, UInt<1>("h00")) @[Coherence.scala 49:9]
    when _T_13 : @[Coherence.scala 49:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at Coherence.scala:49 assert(!(thisReq.valid && !thisReq.bits.isRead() && !thisReq.bits.isWrite()))\n") @[Coherence.scala 49:9]
      stop(clock, UInt<1>(1), 1) @[Coherence.scala 49:9]
      skip @[Coherence.scala 49:9]
    node _T_14 = eq(inflight, UInt<1>("h00")) @[Coherence.scala 52:42]
    node _T_15 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_16 = eq(_T_15, UInt<1>("h00")) @[SimpleBus.scala 73:18]
    node _T_17 = bits(io.in.req.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_18 = eq(_T_17, UInt<1>("h00")) @[SimpleBus.scala 73:29]
    node _T_19 = and(_T_16, _T_18) @[SimpleBus.scala 73:26]
    node _T_20 = and(_T_14, _T_19) @[Coherence.scala 52:52]
    reg reqLatch : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}, clock @[Reg.scala 15:16]
    when _T_20 : @[Reg.scala 16:19]
      reqLatch.wdata <= io.in.req.bits.wdata @[Reg.scala 16:23]
      reqLatch.wmask <= io.in.req.bits.wmask @[Reg.scala 16:23]
      reqLatch.cmd <= io.in.req.bits.cmd @[Reg.scala 16:23]
      reqLatch.size <= io.in.req.bits.size @[Reg.scala 16:23]
      reqLatch.addr <= io.in.req.bits.addr @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    io.out.coh.req.bits.wdata <= io.in.req.bits.wdata @[Coherence.scala 54:16]
    io.out.coh.req.bits.wmask <= io.in.req.bits.wmask @[Coherence.scala 54:16]
    io.out.coh.req.bits.cmd <= io.in.req.bits.cmd @[Coherence.scala 54:16]
    io.out.coh.req.bits.size <= io.in.req.bits.size @[Coherence.scala 54:16]
    io.out.coh.req.bits.addr <= io.in.req.bits.addr @[Coherence.scala 54:16]
    io.out.coh.req.bits.cmd <= UInt<4>("h08") @[Coherence.scala 55:20]
    io.out.coh.resp.ready <= UInt<1>("h01") @[Coherence.scala 56:18]
    io.out.mem.req.bits.wdata <= io.in.req.bits.wdata @[Coherence.scala 59:23]
    io.out.mem.req.bits.wmask <= io.in.req.bits.wmask @[Coherence.scala 59:23]
    io.out.mem.req.bits.cmd <= io.in.req.bits.cmd @[Coherence.scala 59:23]
    io.out.mem.req.bits.size <= io.in.req.bits.size @[Coherence.scala 59:23]
    io.out.mem.req.bits.addr <= io.in.req.bits.addr @[Coherence.scala 59:23]
    io.out.mem.req.valid <= UInt<1>("h00") @[Coherence.scala 61:24]
    io.in.req.ready <= UInt<1>("h00") @[Coherence.scala 62:17]
    io.out.coh.req.valid <= UInt<1>("h00") @[Coherence.scala 63:24]
    node _T_21 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    when _T_21 : @[Coherence.scala 64:61]
      node _T_22 = eq(inflight, UInt<1>("h00")) @[Coherence.scala 65:46]
      node _T_23 = and(io.in.req.valid, _T_22) @[Coherence.scala 65:43]
      io.out.mem.req.valid <= _T_23 @[Coherence.scala 65:26]
      node _T_24 = eq(inflight, UInt<1>("h00")) @[Coherence.scala 66:46]
      node _T_25 = and(io.out.mem.req.ready, _T_24) @[Coherence.scala 66:43]
      io.in.req.ready <= _T_25 @[Coherence.scala 66:19]
      skip @[Coherence.scala 64:61]
    else : @[Coherence.scala 67:39]
      node _T_26 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
      node _T_27 = eq(_T_26, UInt<1>("h00")) @[SimpleBus.scala 73:18]
      node _T_28 = bits(io.in.req.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
      node _T_29 = eq(_T_28, UInt<1>("h00")) @[SimpleBus.scala 73:29]
      node _T_30 = and(_T_27, _T_29) @[SimpleBus.scala 73:26]
      when _T_30 : @[Coherence.scala 67:39]
        node _T_31 = eq(inflight, UInt<1>("h00")) @[Coherence.scala 68:46]
        node _T_32 = and(io.in.req.valid, _T_31) @[Coherence.scala 68:43]
        io.out.coh.req.valid <= _T_32 @[Coherence.scala 68:26]
        node _T_33 = eq(inflight, UInt<1>("h00")) @[Coherence.scala 69:46]
        node _T_34 = and(io.out.coh.req.ready, _T_33) @[Coherence.scala 69:43]
        io.in.req.ready <= _T_34 @[Coherence.scala 69:19]
        skip @[Coherence.scala 67:39]
    io.in.resp.bits.rdata <= io.out.mem.resp.bits.rdata @[Coherence.scala 72:14]
    io.in.resp.bits.cmd <= io.out.mem.resp.bits.cmd @[Coherence.scala 72:14]
    io.in.resp.valid <= io.out.mem.resp.valid @[Coherence.scala 72:14]
    io.out.mem.resp.ready <= io.in.resp.ready @[Coherence.scala 72:14]
    node _T_35 = eq(UInt<3>("h00"), state) @[Conditional.scala 37:30]
    when _T_35 : @[Conditional.scala 40:58]
      node _T_36 = and(io.in.req.ready, io.in.req.valid) @[Decoupled.scala 40:37]
      when _T_36 : @[Coherence.scala 76:29]
        node _T_37 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
        node _T_38 = eq(_T_37, UInt<1>("h00")) @[SimpleBus.scala 73:18]
        node _T_39 = bits(io.in.req.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
        node _T_40 = eq(_T_39, UInt<1>("h00")) @[SimpleBus.scala 73:29]
        node _T_41 = and(_T_38, _T_40) @[SimpleBus.scala 73:26]
        when _T_41 : @[Coherence.scala 77:38]
          node _T_42 = mux(UInt<1>("h01"), UInt<3>("h01"), UInt<3>("h04")) @[Coherence.scala 77:52]
          state <= _T_42 @[Coherence.scala 77:46]
          skip @[Coherence.scala 77:38]
        else : @[Coherence.scala 78:48]
          node _T_43 = eq(io.in.req.bits.cmd, UInt<3>("h07")) @[SimpleBus.scala 78:27]
          when _T_43 : @[Coherence.scala 78:48]
            state <= UInt<3>("h05") @[Coherence.scala 78:56]
            skip @[Coherence.scala 78:48]
        skip @[Coherence.scala 76:29]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_44 = eq(UInt<3>("h01"), state) @[Conditional.scala 37:30]
      when _T_44 : @[Conditional.scala 39:67]
        node _T_45 = and(io.out.coh.resp.ready, io.out.coh.resp.valid) @[Decoupled.scala 40:37]
        when _T_45 : @[Coherence.scala 82:37]
          node _T_46 = eq(io.out.coh.resp.bits.cmd, UInt<4>("h0c")) @[SimpleBus.scala 92:26]
          node _T_47 = mux(_T_46, UInt<3>("h02"), UInt<3>("h03")) @[Coherence.scala 83:21]
          state <= _T_47 @[Coherence.scala 83:15]
          skip @[Coherence.scala 82:37]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_48 = eq(UInt<3>("h02"), state) @[Conditional.scala 37:30]
        when _T_48 : @[Conditional.scala 39:67]
          io.in.resp.bits.rdata <= io.out.coh.resp.bits.rdata @[Coherence.scala 88:16]
          io.in.resp.bits.cmd <= io.out.coh.resp.bits.cmd @[Coherence.scala 88:16]
          io.in.resp.valid <= io.out.coh.resp.valid @[Coherence.scala 88:16]
          io.out.coh.resp.ready <= io.in.resp.ready @[Coherence.scala 88:16]
          node _T_49 = and(io.in.resp.ready, io.in.resp.valid) @[Decoupled.scala 40:37]
          node _T_50 = eq(io.in.resp.bits.cmd, UInt<3>("h06")) @[SimpleBus.scala 91:26]
          node _T_51 = and(_T_49, _T_50) @[Coherence.scala 89:29]
          when _T_51 : @[Coherence.scala 89:60]
            state <= UInt<3>("h00") @[Coherence.scala 89:68]
            skip @[Coherence.scala 89:60]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_52 = eq(UInt<3>("h03"), state) @[Conditional.scala 37:30]
          when _T_52 : @[Conditional.scala 39:67]
            io.out.mem.req.bits.wdata <= reqLatch.wdata @[Coherence.scala 92:27]
            io.out.mem.req.bits.wmask <= reqLatch.wmask @[Coherence.scala 92:27]
            io.out.mem.req.bits.cmd <= reqLatch.cmd @[Coherence.scala 92:27]
            io.out.mem.req.bits.size <= reqLatch.size @[Coherence.scala 92:27]
            io.out.mem.req.bits.addr <= reqLatch.addr @[Coherence.scala 92:27]
            io.out.mem.req.valid <= UInt<1>("h01") @[Coherence.scala 93:28]
            node _T_53 = and(io.out.mem.req.ready, io.out.mem.req.valid) @[Decoupled.scala 40:37]
            when _T_53 : @[Coherence.scala 94:36]
              state <= UInt<3>("h04") @[Coherence.scala 94:44]
              skip @[Coherence.scala 94:36]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_54 = eq(UInt<3>("h04"), state) @[Conditional.scala 37:30]
            when _T_54 : @[Conditional.scala 39:67]
              node _T_55 = and(io.out.mem.resp.ready, io.out.mem.resp.valid) @[Decoupled.scala 40:37]
              node _T_56 = eq(io.out.mem.resp.bits.cmd, UInt<3>("h06")) @[SimpleBus.scala 91:26]
              node _T_57 = and(_T_55, _T_56) @[Coherence.scala 96:55]
              when _T_57 : @[Coherence.scala 96:93]
                state <= UInt<3>("h00") @[Coherence.scala 96:101]
                skip @[Coherence.scala 96:93]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_58 = eq(UInt<3>("h05"), state) @[Conditional.scala 37:30]
              when _T_58 : @[Conditional.scala 39:67]
                node _T_59 = and(io.out.mem.resp.ready, io.out.mem.resp.valid) @[Decoupled.scala 40:37]
                when _T_59 : @[Coherence.scala 97:57]
                  state <= UInt<3>("h00") @[Coherence.scala 97:65]
                  skip @[Coherence.scala 97:57]
                skip @[Conditional.scala 39:67]
    
  module LockingArbiter_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}[2], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, chosen : UInt<1>}
    
    wire choice : UInt
    choice <= UInt<1>("h01")
    io.chosen <= choice @[Arbiter.scala 40:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 41:16]
    io.out.bits.wdata <= io.in[io.chosen].bits.wdata @[Arbiter.scala 42:15]
    io.out.bits.wmask <= io.in[io.chosen].bits.wmask @[Arbiter.scala 42:15]
    io.out.bits.cmd <= io.in[io.chosen].bits.cmd @[Arbiter.scala 42:15]
    io.out.bits.size <= io.in[io.chosen].bits.size @[Arbiter.scala 42:15]
    io.out.bits.addr <= io.in[io.chosen].bits.addr @[Arbiter.scala 42:15]
    reg value : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Counter.scala 29:33]
    reg _T : UInt, clock @[Arbiter.scala 46:22]
    node _T_1 = neq(value, UInt<1>("h00")) @[Arbiter.scala 47:34]
    node _T_2 = bits(io.out.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_3 = bits(io.out.bits.cmd, 1, 1) @[SimpleBus.scala 75:22]
    node _T_4 = and(_T_2, _T_3) @[Crossbar.scala 100:62]
    node _T_5 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_6 = and(_T_5, _T_4) @[Arbiter.scala 50:25]
    when _T_6 : @[Arbiter.scala 50:39]
      _T <= io.chosen @[Arbiter.scala 51:15]
      node _T_7 = eq(value, UInt<3>("h07")) @[Counter.scala 38:24]
      node _T_8 = add(value, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_9 = tail(_T_8, 1) @[Counter.scala 39:22]
      value <= _T_9 @[Counter.scala 39:13]
      skip @[Arbiter.scala 50:39]
    when _T_1 : @[Arbiter.scala 55:19]
      io.chosen <= _T @[Arbiter.scala 55:31]
      skip @[Arbiter.scala 55:19]
    node _T_10 = eq(io.in[0].valid, UInt<1>("h00")) @[Arbiter.scala 31:78]
    node _T_11 = eq(_T, UInt<1>("h00")) @[Arbiter.scala 57:39]
    node _T_12 = mux(_T_1, _T_11, UInt<1>("h01")) @[Arbiter.scala 57:22]
    node _T_13 = and(_T_12, io.out.ready) @[Arbiter.scala 57:56]
    io.in[0].ready <= _T_13 @[Arbiter.scala 57:16]
    node _T_14 = eq(_T, UInt<1>("h01")) @[Arbiter.scala 57:39]
    node _T_15 = mux(_T_1, _T_14, _T_10) @[Arbiter.scala 57:22]
    node _T_16 = and(_T_15, io.out.ready) @[Arbiter.scala 57:56]
    io.in[1].ready <= _T_16 @[Arbiter.scala 57:16]
    when io.in[0].valid : @[Arbiter.scala 88:27]
      choice <= UInt<1>("h00") @[Arbiter.scala 88:36]
      skip @[Arbiter.scala 88:27]
    
  module SimpleBusCrossbarNto1_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}[2], out : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}}
    
    reg state : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Crossbar.scala 98:22]
    inst inputArb of LockingArbiter_2 @[Crossbar.scala 101:24]
    inputArb.clock <= clock
    inputArb.reset <= reset
    inputArb.io.in[0].bits.wdata <= io.in[0].req.bits.wdata @[Crossbar.scala 102:68]
    inputArb.io.in[0].bits.wmask <= io.in[0].req.bits.wmask @[Crossbar.scala 102:68]
    inputArb.io.in[0].bits.cmd <= io.in[0].req.bits.cmd @[Crossbar.scala 102:68]
    inputArb.io.in[0].bits.size <= io.in[0].req.bits.size @[Crossbar.scala 102:68]
    inputArb.io.in[0].bits.addr <= io.in[0].req.bits.addr @[Crossbar.scala 102:68]
    inputArb.io.in[0].valid <= io.in[0].req.valid @[Crossbar.scala 102:68]
    io.in[0].req.ready <= inputArb.io.in[0].ready @[Crossbar.scala 102:68]
    inputArb.io.in[1].bits.wdata <= io.in[1].req.bits.wdata @[Crossbar.scala 102:68]
    inputArb.io.in[1].bits.wmask <= io.in[1].req.bits.wmask @[Crossbar.scala 102:68]
    inputArb.io.in[1].bits.cmd <= io.in[1].req.bits.cmd @[Crossbar.scala 102:68]
    inputArb.io.in[1].bits.size <= io.in[1].req.bits.size @[Crossbar.scala 102:68]
    inputArb.io.in[1].bits.addr <= io.in[1].req.bits.addr @[Crossbar.scala 102:68]
    inputArb.io.in[1].valid <= io.in[1].req.valid @[Crossbar.scala 102:68]
    io.in[1].req.ready <= inputArb.io.in[1].ready @[Crossbar.scala 102:68]
    node _T = bits(inputArb.io.out.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_1 = eq(_T, UInt<1>("h00")) @[SimpleBus.scala 73:18]
    node _T_2 = bits(inputArb.io.out.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SimpleBus.scala 73:29]
    node _T_4 = and(_T_1, _T_3) @[SimpleBus.scala 73:26]
    node _T_5 = eq(_T_4, UInt<1>("h00")) @[Crossbar.scala 104:29]
    node _T_6 = and(inputArb.io.out.valid, _T_5) @[Crossbar.scala 104:26]
    node _T_7 = bits(inputArb.io.out.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_8 = eq(_T_7, UInt<1>("h00")) @[Crossbar.scala 104:55]
    node _T_9 = and(_T_6, _T_8) @[Crossbar.scala 104:52]
    node _T_10 = eq(_T_9, UInt<1>("h00")) @[Crossbar.scala 104:10]
    node _T_11 = asUInt(reset) @[Crossbar.scala 104:9]
    node _T_12 = or(_T_10, _T_11) @[Crossbar.scala 104:9]
    node _T_13 = eq(_T_12, UInt<1>("h00")) @[Crossbar.scala 104:9]
    when _T_13 : @[Crossbar.scala 104:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at Crossbar.scala:104 assert(!(thisReq.valid && !thisReq.bits.isRead() && !thisReq.bits.isWrite()))\n") @[Crossbar.scala 104:9]
      stop(clock, UInt<1>(1), 1) @[Crossbar.scala 104:9]
      skip @[Crossbar.scala 104:9]
    reg inflightSrc : UInt<1>, clock @[Crossbar.scala 105:24]
    io.out.req.bits.wdata <= inputArb.io.out.bits.wdata @[Crossbar.scala 107:19]
    io.out.req.bits.wmask <= inputArb.io.out.bits.wmask @[Crossbar.scala 107:19]
    io.out.req.bits.cmd <= inputArb.io.out.bits.cmd @[Crossbar.scala 107:19]
    io.out.req.bits.size <= inputArb.io.out.bits.size @[Crossbar.scala 107:19]
    io.out.req.bits.addr <= inputArb.io.out.bits.addr @[Crossbar.scala 107:19]
    node _T_14 = eq(state, UInt<2>("h00")) @[Crossbar.scala 109:47]
    node _T_15 = and(inputArb.io.out.valid, _T_14) @[Crossbar.scala 109:37]
    io.out.req.valid <= _T_15 @[Crossbar.scala 109:20]
    node _T_16 = eq(state, UInt<2>("h00")) @[Crossbar.scala 110:47]
    node _T_17 = and(io.out.req.ready, _T_16) @[Crossbar.scala 110:37]
    inputArb.io.out.ready <= _T_17 @[Crossbar.scala 110:17]
    io.in[0].resp.bits.rdata <= io.out.resp.bits.rdata @[Crossbar.scala 112:25]
    io.in[0].resp.bits.cmd <= io.out.resp.bits.cmd @[Crossbar.scala 112:25]
    io.in[1].resp.bits.rdata <= io.out.resp.bits.rdata @[Crossbar.scala 112:25]
    io.in[1].resp.bits.cmd <= io.out.resp.bits.cmd @[Crossbar.scala 112:25]
    io.in[0].resp.valid <= UInt<1>("h00") @[Crossbar.scala 113:26]
    io.in[1].resp.valid <= UInt<1>("h00") @[Crossbar.scala 113:26]
    io.in[inflightSrc].resp.valid <= io.out.resp.valid @[Crossbar.scala 115:13]
    io.out.resp.ready <= io.in[inflightSrc].resp.ready @[Crossbar.scala 116:13]
    node _T_18 = eq(UInt<2>("h00"), state) @[Conditional.scala 37:30]
    when _T_18 : @[Conditional.scala 40:58]
      node _T_19 = and(inputArb.io.out.ready, inputArb.io.out.valid) @[Decoupled.scala 40:37]
      when _T_19 : @[Crossbar.scala 121:29]
        inflightSrc <= inputArb.io.chosen @[Crossbar.scala 122:21]
        node _T_20 = bits(inputArb.io.out.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
        node _T_21 = eq(_T_20, UInt<1>("h00")) @[SimpleBus.scala 73:18]
        node _T_22 = bits(inputArb.io.out.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
        node _T_23 = eq(_T_22, UInt<1>("h00")) @[SimpleBus.scala 73:29]
        node _T_24 = and(_T_21, _T_23) @[SimpleBus.scala 73:26]
        when _T_24 : @[Crossbar.scala 123:38]
          state <= UInt<2>("h01") @[Crossbar.scala 123:46]
          skip @[Crossbar.scala 123:38]
        else : @[Crossbar.scala 124:80]
          node _T_25 = eq(inputArb.io.out.bits.cmd, UInt<3>("h07")) @[SimpleBus.scala 78:27]
          node _T_26 = eq(inputArb.io.out.bits.cmd, UInt<1>("h01")) @[SimpleBus.scala 77:29]
          node _T_27 = or(_T_25, _T_26) @[Crossbar.scala 124:47]
          when _T_27 : @[Crossbar.scala 124:80]
            state <= UInt<2>("h02") @[Crossbar.scala 124:88]
            skip @[Crossbar.scala 124:80]
        skip @[Crossbar.scala 121:29]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_28 = eq(UInt<2>("h01"), state) @[Conditional.scala 37:30]
      when _T_28 : @[Conditional.scala 39:67]
        node _T_29 = and(io.out.resp.ready, io.out.resp.valid) @[Decoupled.scala 40:37]
        node _T_30 = eq(io.out.resp.bits.cmd, UInt<3>("h06")) @[SimpleBus.scala 91:26]
        node _T_31 = and(_T_29, _T_30) @[Crossbar.scala 127:48]
        when _T_31 : @[Crossbar.scala 127:82]
          state <= UInt<2>("h00") @[Crossbar.scala 127:90]
          skip @[Crossbar.scala 127:82]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_32 = eq(UInt<2>("h02"), state) @[Conditional.scala 37:30]
        when _T_32 : @[Conditional.scala 39:67]
          node _T_33 = and(io.out.resp.ready, io.out.resp.valid) @[Decoupled.scala 40:37]
          when _T_33 : @[Crossbar.scala 128:50]
            state <= UInt<2>("h00") @[Crossbar.scala 128:58]
            skip @[Crossbar.scala 128:50]
          skip @[Conditional.scala 39:67]
    
  module AXI42SimpleBusConverter : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, prot : UInt<3>, id : UInt<18>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, strb : UInt<8>, last : UInt<1>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<18>, user : UInt<1>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, prot : UInt<3>, id : UInt<18>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<18>, user : UInt<1>}}}, out : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}}
    
    reg inflight_id_reg : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[ToAXI4.scala 38:32]
    reg inflight_type : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[ToAXI4.scala 40:30]
    wire default_mem : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}} @[ToAXI4.scala 57:33]
    default_mem.resp.bits.rdata <= UInt<64>("h00") @[ToAXI4.scala 57:33]
    default_mem.resp.bits.cmd <= UInt<4>("h00") @[ToAXI4.scala 57:33]
    default_mem.resp.valid <= UInt<1>("h00") @[ToAXI4.scala 57:33]
    default_mem.resp.ready <= UInt<1>("h00") @[ToAXI4.scala 57:33]
    default_mem.req.bits.wdata <= UInt<64>("h00") @[ToAXI4.scala 57:33]
    default_mem.req.bits.wmask <= UInt<8>("h00") @[ToAXI4.scala 57:33]
    default_mem.req.bits.cmd <= UInt<4>("h00") @[ToAXI4.scala 57:33]
    default_mem.req.bits.size <= UInt<3>("h00") @[ToAXI4.scala 57:33]
    default_mem.req.bits.addr <= UInt<32>("h00") @[ToAXI4.scala 57:33]
    default_mem.req.valid <= UInt<1>("h00") @[ToAXI4.scala 57:33]
    default_mem.req.ready <= UInt<1>("h00") @[ToAXI4.scala 57:33]
    wire default_axi : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, prot : UInt<3>, id : UInt<1>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, strb : UInt<8>, last : UInt<1>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<1>, user : UInt<1>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, prot : UInt<3>, id : UInt<1>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<1>, user : UInt<1>}}} @[ToAXI4.scala 58:33]
    default_axi.r.bits.user <= UInt<1>("h00") @[ToAXI4.scala 58:33]
    default_axi.r.bits.id <= UInt<1>("h00") @[ToAXI4.scala 58:33]
    default_axi.r.bits.last <= UInt<1>("h00") @[ToAXI4.scala 58:33]
    default_axi.r.bits.data <= UInt<64>("h00") @[ToAXI4.scala 58:33]
    default_axi.r.bits.resp <= UInt<2>("h00") @[ToAXI4.scala 58:33]
    default_axi.r.valid <= UInt<1>("h00") @[ToAXI4.scala 58:33]
    default_axi.r.ready <= UInt<1>("h00") @[ToAXI4.scala 58:33]
    default_axi.ar.bits.qos <= UInt<4>("h00") @[ToAXI4.scala 58:33]
    default_axi.ar.bits.cache <= UInt<4>("h00") @[ToAXI4.scala 58:33]
    default_axi.ar.bits.lock <= UInt<1>("h00") @[ToAXI4.scala 58:33]
    default_axi.ar.bits.burst <= UInt<2>("h00") @[ToAXI4.scala 58:33]
    default_axi.ar.bits.size <= UInt<3>("h00") @[ToAXI4.scala 58:33]
    default_axi.ar.bits.len <= UInt<8>("h00") @[ToAXI4.scala 58:33]
    default_axi.ar.bits.user <= UInt<1>("h00") @[ToAXI4.scala 58:33]
    default_axi.ar.bits.id <= UInt<1>("h00") @[ToAXI4.scala 58:33]
    default_axi.ar.bits.prot <= UInt<3>("h00") @[ToAXI4.scala 58:33]
    default_axi.ar.bits.addr <= UInt<32>("h00") @[ToAXI4.scala 58:33]
    default_axi.ar.valid <= UInt<1>("h00") @[ToAXI4.scala 58:33]
    default_axi.ar.ready <= UInt<1>("h00") @[ToAXI4.scala 58:33]
    default_axi.b.bits.user <= UInt<1>("h00") @[ToAXI4.scala 58:33]
    default_axi.b.bits.id <= UInt<1>("h00") @[ToAXI4.scala 58:33]
    default_axi.b.bits.resp <= UInt<2>("h00") @[ToAXI4.scala 58:33]
    default_axi.b.valid <= UInt<1>("h00") @[ToAXI4.scala 58:33]
    default_axi.b.ready <= UInt<1>("h00") @[ToAXI4.scala 58:33]
    default_axi.w.bits.last <= UInt<1>("h00") @[ToAXI4.scala 58:33]
    default_axi.w.bits.strb <= UInt<8>("h00") @[ToAXI4.scala 58:33]
    default_axi.w.bits.data <= UInt<64>("h00") @[ToAXI4.scala 58:33]
    default_axi.w.valid <= UInt<1>("h00") @[ToAXI4.scala 58:33]
    default_axi.w.ready <= UInt<1>("h00") @[ToAXI4.scala 58:33]
    default_axi.aw.bits.qos <= UInt<4>("h00") @[ToAXI4.scala 58:33]
    default_axi.aw.bits.cache <= UInt<4>("h00") @[ToAXI4.scala 58:33]
    default_axi.aw.bits.lock <= UInt<1>("h00") @[ToAXI4.scala 58:33]
    default_axi.aw.bits.burst <= UInt<2>("h00") @[ToAXI4.scala 58:33]
    default_axi.aw.bits.size <= UInt<3>("h00") @[ToAXI4.scala 58:33]
    default_axi.aw.bits.len <= UInt<8>("h00") @[ToAXI4.scala 58:33]
    default_axi.aw.bits.user <= UInt<1>("h00") @[ToAXI4.scala 58:33]
    default_axi.aw.bits.id <= UInt<1>("h00") @[ToAXI4.scala 58:33]
    default_axi.aw.bits.prot <= UInt<3>("h00") @[ToAXI4.scala 58:33]
    default_axi.aw.bits.addr <= UInt<32>("h00") @[ToAXI4.scala 58:33]
    default_axi.aw.valid <= UInt<1>("h00") @[ToAXI4.scala 58:33]
    default_axi.aw.ready <= UInt<1>("h00") @[ToAXI4.scala 58:33]
    io.out.req.bits.wdata <= default_mem.req.bits.wdata @[ToAXI4.scala 59:7]
    io.out.req.bits.wmask <= default_mem.req.bits.wmask @[ToAXI4.scala 59:7]
    io.out.req.bits.cmd <= default_mem.req.bits.cmd @[ToAXI4.scala 59:7]
    io.out.req.bits.size <= default_mem.req.bits.size @[ToAXI4.scala 59:7]
    io.out.req.bits.addr <= default_mem.req.bits.addr @[ToAXI4.scala 59:7]
    io.in.r.bits.user <= default_axi.r.bits.user @[ToAXI4.scala 60:5]
    io.in.r.bits.id <= default_axi.r.bits.id @[ToAXI4.scala 60:5]
    io.in.r.bits.last <= default_axi.r.bits.last @[ToAXI4.scala 60:5]
    io.in.r.bits.data <= default_axi.r.bits.data @[ToAXI4.scala 60:5]
    io.in.r.bits.resp <= default_axi.r.bits.resp @[ToAXI4.scala 60:5]
    io.in.b.bits.user <= default_axi.b.bits.user @[ToAXI4.scala 61:5]
    io.in.b.bits.id <= default_axi.b.bits.id @[ToAXI4.scala 61:5]
    io.in.b.bits.resp <= default_axi.b.bits.resp @[ToAXI4.scala 61:5]
    node _T = eq(inflight_type, UInt<2>("h00")) @[ToAXI4.scala 50:19]
    node _T_1 = eq(_T, UInt<1>("h00")) @[ToAXI4.scala 53:5]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[ToAXI4.scala 64:9]
    node _T_3 = and(_T_2, io.in.ar.valid) @[ToAXI4.scala 64:23]
    when _T_3 : @[ToAXI4.scala 64:40]
      io.out.req.valid <= UInt<1>("h01") @[ToAXI4.scala 65:19]
      io.out.req.bits.addr <= io.in.ar.bits.addr @[ToAXI4.scala 66:14]
      node _T_4 = eq(io.in.ar.bits.len, UInt<1>("h00")) @[ToAXI4.scala 67:27]
      node _T_5 = mux(_T_4, UInt<1>("h00"), UInt<2>("h02")) @[ToAXI4.scala 67:19]
      io.out.req.bits.cmd <= _T_5 @[ToAXI4.scala 67:13]
      io.out.req.bits.size <= io.in.ar.bits.size @[ToAXI4.scala 69:14]
      io.out.req.bits.wmask <= UInt<1>("h00") @[ToAXI4.scala 71:15]
      io.out.req.bits.wdata <= UInt<1>("h00") @[ToAXI4.scala 72:15]
      node _T_6 = and(io.out.req.ready, io.out.req.valid) @[Decoupled.scala 40:37]
      when _T_6 : @[ToAXI4.scala 74:25]
        inflight_id_reg <= io.in.ar.bits.id @[ToAXI4.scala 42:21]
        inflight_type <= UInt<2>("h01") @[ToAXI4.scala 43:19]
        skip @[ToAXI4.scala 74:25]
      skip @[ToAXI4.scala 64:40]
    node _T_7 = eq(inflight_type, UInt<2>("h01")) @[ToAXI4.scala 50:19]
    node _T_8 = and(_T_7, io.out.resp.valid) @[ToAXI4.scala 79:27]
    when _T_8 : @[ToAXI4.scala 79:46]
      io.in.r.valid <= UInt<1>("h01") @[ToAXI4.scala 80:17]
      io.in.r.bits.data <= io.out.resp.bits.rdata @[ToAXI4.scala 81:12]
      io.in.r.bits.id <= inflight_id_reg @[ToAXI4.scala 82:10]
      io.in.r.bits.resp <= UInt<2>("h00") @[ToAXI4.scala 84:12]
      node _T_9 = eq(io.out.resp.bits.cmd, UInt<3>("h06")) @[SimpleBus.scala 91:26]
      io.in.r.bits.last <= _T_9 @[ToAXI4.scala 85:12]
      node _T_10 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
      node _T_11 = eq(io.out.resp.bits.cmd, UInt<3>("h06")) @[SimpleBus.scala 91:26]
      node _T_12 = and(_T_10, _T_11) @[ToAXI4.scala 88:22]
      when _T_12 : @[ToAXI4.scala 88:42]
        inflight_type <= UInt<2>("h00") @[ToAXI4.scala 46:19]
        inflight_id_reg <= UInt<1>("h00") @[ToAXI4.scala 47:21]
        skip @[ToAXI4.scala 88:42]
      skip @[ToAXI4.scala 79:46]
    reg aw_reg : {addr : UInt<32>, prot : UInt<3>, id : UInt<18>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}, clock @[ToAXI4.scala 94:19]
    reg bresp_en : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ToAXI4.scala 95:25]
    node _T_13 = eq(inflight_type, UInt<2>("h00")) @[ToAXI4.scala 50:19]
    node _T_14 = eq(_T_13, UInt<1>("h00")) @[ToAXI4.scala 53:5]
    node _T_15 = eq(_T_14, UInt<1>("h00")) @[ToAXI4.scala 97:9]
    node _T_16 = and(_T_15, io.in.aw.valid) @[ToAXI4.scala 97:23]
    node _T_17 = eq(io.in.ar.valid, UInt<1>("h00")) @[ToAXI4.scala 97:42]
    node _T_18 = and(_T_16, _T_17) @[ToAXI4.scala 97:39]
    when _T_18 : @[ToAXI4.scala 97:57]
      aw_reg.qos <= io.in.aw.bits.qos @[ToAXI4.scala 98:12]
      aw_reg.cache <= io.in.aw.bits.cache @[ToAXI4.scala 98:12]
      aw_reg.lock <= io.in.aw.bits.lock @[ToAXI4.scala 98:12]
      aw_reg.burst <= io.in.aw.bits.burst @[ToAXI4.scala 98:12]
      aw_reg.size <= io.in.aw.bits.size @[ToAXI4.scala 98:12]
      aw_reg.len <= io.in.aw.bits.len @[ToAXI4.scala 98:12]
      aw_reg.user <= io.in.aw.bits.user @[ToAXI4.scala 98:12]
      aw_reg.id <= io.in.aw.bits.id @[ToAXI4.scala 98:12]
      aw_reg.prot <= io.in.aw.bits.prot @[ToAXI4.scala 98:12]
      aw_reg.addr <= io.in.aw.bits.addr @[ToAXI4.scala 98:12]
      node _T_19 = and(io.in.aw.ready, io.in.aw.valid) @[Decoupled.scala 40:37]
      when _T_19 : @[ToAXI4.scala 100:24]
        inflight_id_reg <= io.in.aw.bits.id @[ToAXI4.scala 42:21]
        inflight_type <= UInt<2>("h02") @[ToAXI4.scala 43:19]
        skip @[ToAXI4.scala 100:24]
      skip @[ToAXI4.scala 97:57]
    node _T_20 = eq(inflight_type, UInt<2>("h02")) @[ToAXI4.scala 50:19]
    node _T_21 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 40:37]
    node _T_22 = and(_T_20, _T_21) @[ToAXI4.scala 105:28]
    when _T_22 : @[ToAXI4.scala 105:45]
      io.out.req.valid <= UInt<1>("h01") @[ToAXI4.scala 106:19]
      node _T_23 = eq(aw_reg.len, UInt<1>("h00")) @[ToAXI4.scala 107:31]
      node _T_24 = mux(io.in.w.bits.last, UInt<3>("h07"), UInt<2>("h03")) @[ToAXI4.scala 108:10]
      node _T_25 = mux(_T_23, UInt<1>("h01"), _T_24) @[ToAXI4.scala 107:19]
      io.out.req.bits.cmd <= _T_25 @[ToAXI4.scala 107:13]
      io.out.req.bits.addr <= aw_reg.addr @[ToAXI4.scala 109:14]
      io.out.req.bits.size <= aw_reg.size @[ToAXI4.scala 110:14]
      io.out.req.bits.wmask <= io.in.w.bits.strb @[ToAXI4.scala 111:15]
      io.out.req.bits.wdata <= io.in.w.bits.data @[ToAXI4.scala 112:15]
      when io.in.w.bits.last : @[ToAXI4.scala 115:19]
        bresp_en <= UInt<1>("h01") @[ToAXI4.scala 116:16]
        skip @[ToAXI4.scala 115:19]
      skip @[ToAXI4.scala 105:45]
    node _T_26 = and(io.in.b.ready, io.in.b.valid) @[Decoupled.scala 40:37]
    when _T_26 : @[ToAXI4.scala 120:21]
      bresp_en <= UInt<1>("h00") @[ToAXI4.scala 121:14]
      inflight_type <= UInt<2>("h00") @[ToAXI4.scala 46:19]
      inflight_id_reg <= UInt<1>("h00") @[ToAXI4.scala 47:21]
      skip @[ToAXI4.scala 120:21]
    node _T_27 = eq(inflight_type, UInt<2>("h00")) @[ToAXI4.scala 50:19]
    node _T_28 = eq(_T_27, UInt<1>("h00")) @[ToAXI4.scala 53:5]
    node _T_29 = eq(_T_28, UInt<1>("h00")) @[ToAXI4.scala 127:21]
    node _T_30 = and(_T_29, io.in.ar.valid) @[ToAXI4.scala 127:35]
    node _T_31 = eq(inflight_type, UInt<2>("h02")) @[ToAXI4.scala 50:19]
    node _T_32 = and(_T_31, io.in.w.valid) @[ToAXI4.scala 127:75]
    node _T_33 = or(_T_30, _T_32) @[ToAXI4.scala 127:52]
    io.out.req.valid <= _T_33 @[ToAXI4.scala 127:17]
    node _T_34 = eq(inflight_type, UInt<2>("h00")) @[ToAXI4.scala 50:19]
    node _T_35 = eq(_T_34, UInt<1>("h00")) @[ToAXI4.scala 53:5]
    node _T_36 = eq(_T_35, UInt<1>("h00")) @[ToAXI4.scala 128:21]
    node _T_37 = eq(inflight_type, UInt<2>("h01")) @[ToAXI4.scala 50:19]
    node _T_38 = and(_T_37, io.in.r.ready) @[ToAXI4.scala 128:57]
    node _T_39 = or(_T_36, _T_38) @[ToAXI4.scala 128:35]
    node _T_40 = eq(inflight_type, UInt<2>("h02")) @[ToAXI4.scala 50:19]
    node _T_41 = and(_T_40, io.in.b.ready) @[ToAXI4.scala 128:96]
    node _T_42 = or(_T_39, _T_41) @[ToAXI4.scala 128:73]
    io.out.resp.ready <= _T_42 @[ToAXI4.scala 128:18]
    node _T_43 = eq(inflight_type, UInt<2>("h00")) @[ToAXI4.scala 50:19]
    node _T_44 = eq(_T_43, UInt<1>("h00")) @[ToAXI4.scala 53:5]
    node _T_45 = eq(_T_44, UInt<1>("h00")) @[ToAXI4.scala 129:19]
    node _T_46 = and(_T_45, io.out.req.ready) @[ToAXI4.scala 129:33]
    io.in.ar.ready <= _T_46 @[ToAXI4.scala 129:16]
    node _T_47 = eq(inflight_type, UInt<2>("h01")) @[ToAXI4.scala 50:19]
    node _T_48 = and(_T_47, io.out.resp.valid) @[ToAXI4.scala 130:36]
    io.in.r.valid <= _T_48 @[ToAXI4.scala 130:15]
    node _T_49 = eq(inflight_type, UInt<2>("h00")) @[ToAXI4.scala 50:19]
    node _T_50 = eq(_T_49, UInt<1>("h00")) @[ToAXI4.scala 53:5]
    node _T_51 = eq(_T_50, UInt<1>("h00")) @[ToAXI4.scala 132:19]
    node _T_52 = eq(io.in.ar.valid, UInt<1>("h00")) @[ToAXI4.scala 132:36]
    node _T_53 = and(_T_51, _T_52) @[ToAXI4.scala 132:33]
    io.in.aw.ready <= _T_53 @[ToAXI4.scala 132:16]
    node _T_54 = eq(inflight_type, UInt<2>("h02")) @[ToAXI4.scala 50:19]
    node _T_55 = and(_T_54, io.out.req.ready) @[ToAXI4.scala 133:38]
    io.in.w.ready <= _T_55 @[ToAXI4.scala 133:16]
    node _T_56 = and(bresp_en, io.out.resp.valid) @[ToAXI4.scala 134:27]
    io.in.b.valid <= _T_56 @[ToAXI4.scala 134:15]
    io.in.b.bits.resp <= UInt<2>("h00") @[ToAXI4.scala 135:19]
    node _T_57 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    when _T_57 : @[ToAXI4.scala 137:24]
      node _T_58 = and(io.out.req.ready, io.out.req.valid) @[Decoupled.scala 40:37]
      node _T_59 = eq(inflight_type, UInt<2>("h00")) @[ToAXI4.scala 50:19]
      node _T_60 = eq(_T_59, UInt<1>("h00")) @[ToAXI4.scala 53:5]
      node _T_61 = eq(_T_60, UInt<1>("h00")) @[ToAXI4.scala 137:51]
      node _T_62 = and(_T_58, _T_61) @[ToAXI4.scala 137:48]
      node _T_63 = asUInt(reset) @[ToAXI4.scala 137:32]
      node _T_64 = or(_T_62, _T_63) @[ToAXI4.scala 137:32]
      node _T_65 = eq(_T_64, UInt<1>("h00")) @[ToAXI4.scala 137:32]
      when _T_65 : @[ToAXI4.scala 137:32]
        printf(clock, UInt<1>(1), "Assertion failed\n    at ToAXI4.scala:137 when (axi.ar.fire()) { assert(mem.req.fire() && !isInflight()); }\n") @[ToAXI4.scala 137:32]
        stop(clock, UInt<1>(1), 1) @[ToAXI4.scala 137:32]
        skip @[ToAXI4.scala 137:32]
      skip @[ToAXI4.scala 137:24]
    node _T_66 = and(io.in.aw.ready, io.in.aw.valid) @[Decoupled.scala 40:37]
    when _T_66 : @[ToAXI4.scala 138:24]
      node _T_67 = eq(inflight_type, UInt<2>("h00")) @[ToAXI4.scala 50:19]
      node _T_68 = eq(_T_67, UInt<1>("h00")) @[ToAXI4.scala 53:5]
      node _T_69 = eq(_T_68, UInt<1>("h00")) @[ToAXI4.scala 138:33]
      node _T_70 = asUInt(reset) @[ToAXI4.scala 138:32]
      node _T_71 = or(_T_69, _T_70) @[ToAXI4.scala 138:32]
      node _T_72 = eq(_T_71, UInt<1>("h00")) @[ToAXI4.scala 138:32]
      when _T_72 : @[ToAXI4.scala 138:32]
        printf(clock, UInt<1>(1), "Assertion failed\n    at ToAXI4.scala:138 when (axi.aw.fire()) { assert(!isInflight()); }\n") @[ToAXI4.scala 138:32]
        stop(clock, UInt<1>(1), 1) @[ToAXI4.scala 138:32]
        skip @[ToAXI4.scala 138:32]
      skip @[ToAXI4.scala 138:24]
    node _T_73 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 40:37]
    when _T_73 : @[ToAXI4.scala 139:23]
      node _T_74 = and(io.out.req.ready, io.out.req.valid) @[Decoupled.scala 40:37]
      node _T_75 = eq(inflight_type, UInt<2>("h02")) @[ToAXI4.scala 50:19]
      node _T_76 = and(_T_74, _T_75) @[ToAXI4.scala 139:48]
      node _T_77 = asUInt(reset) @[ToAXI4.scala 139:31]
      node _T_78 = or(_T_76, _T_77) @[ToAXI4.scala 139:31]
      node _T_79 = eq(_T_78, UInt<1>("h00")) @[ToAXI4.scala 139:31]
      when _T_79 : @[ToAXI4.scala 139:31]
        printf(clock, UInt<1>(1), "Assertion failed\n    at ToAXI4.scala:139 when (axi.w.fire()) { assert(mem.req .fire() && isState(axi_write)); }\n") @[ToAXI4.scala 139:31]
        stop(clock, UInt<1>(1), 1) @[ToAXI4.scala 139:31]
        skip @[ToAXI4.scala 139:31]
      skip @[ToAXI4.scala 139:23]
    node _T_80 = and(io.in.b.ready, io.in.b.valid) @[Decoupled.scala 40:37]
    when _T_80 : @[ToAXI4.scala 140:23]
      node _T_81 = and(io.out.resp.ready, io.out.resp.valid) @[Decoupled.scala 40:37]
      node _T_82 = eq(inflight_type, UInt<2>("h02")) @[ToAXI4.scala 50:19]
      node _T_83 = and(_T_81, _T_82) @[ToAXI4.scala 140:48]
      node _T_84 = asUInt(reset) @[ToAXI4.scala 140:31]
      node _T_85 = or(_T_83, _T_84) @[ToAXI4.scala 140:31]
      node _T_86 = eq(_T_85, UInt<1>("h00")) @[ToAXI4.scala 140:31]
      when _T_86 : @[ToAXI4.scala 140:31]
        printf(clock, UInt<1>(1), "Assertion failed\n    at ToAXI4.scala:140 when (axi.b.fire()) { assert(mem.resp.fire() && isState(axi_write)); }\n") @[ToAXI4.scala 140:31]
        stop(clock, UInt<1>(1), 1) @[ToAXI4.scala 140:31]
        skip @[ToAXI4.scala 140:31]
      skip @[ToAXI4.scala 140:23]
    node _T_87 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    when _T_87 : @[ToAXI4.scala 141:23]
      node _T_88 = and(io.out.resp.ready, io.out.resp.valid) @[Decoupled.scala 40:37]
      node _T_89 = eq(inflight_type, UInt<2>("h01")) @[ToAXI4.scala 50:19]
      node _T_90 = and(_T_88, _T_89) @[ToAXI4.scala 141:48]
      node _T_91 = asUInt(reset) @[ToAXI4.scala 141:31]
      node _T_92 = or(_T_90, _T_91) @[ToAXI4.scala 141:31]
      node _T_93 = eq(_T_92, UInt<1>("h00")) @[ToAXI4.scala 141:31]
      when _T_93 : @[ToAXI4.scala 141:31]
        printf(clock, UInt<1>(1), "Assertion failed\n    at ToAXI4.scala:141 when (axi.r.fire()) { assert(mem.resp.fire() && isState(axi_read)); }\n") @[ToAXI4.scala 141:31]
        stop(clock, UInt<1>(1), 1) @[ToAXI4.scala 141:31]
        skip @[ToAXI4.scala 141:31]
      skip @[ToAXI4.scala 141:23]
    
  module SimpleBus2MemPortConverter : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}, out : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, data : UInt<32>, fcn : UInt<1>, typ : UInt<3>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<32>}}}}
    
    io.in.req.ready <= io.out.req.ready @[ToMemPort.scala 34:19]
    io.in.resp.valid <= io.out.resp.valid @[ToMemPort.scala 35:20]
    io.out.req.valid <= io.in.req.valid @[ToMemPort.scala 36:20]
    io.out.resp.ready <= io.in.resp.ready @[ToMemPort.scala 37:21]
    io.out.req.bits.addr <= io.in.req.bits.addr @[ToMemPort.scala 39:24]
    io.out.req.bits.data <= io.in.req.bits.wdata @[ToMemPort.scala 40:24]
    node _T = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_1 = eq(_T, UInt<1>("h00")) @[SimpleBus.scala 73:18]
    node _T_2 = bits(io.in.req.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[SimpleBus.scala 73:29]
    node _T_4 = and(_T_1, _T_3) @[SimpleBus.scala 73:26]
    node _T_5 = mux(_T_4, UInt<1>("h00"), UInt<1>("h01")) @[ToMemPort.scala 41:29]
    io.out.req.bits.fcn <= _T_5 @[ToMemPort.scala 41:23]
    io.out.req.bits.typ <= UInt<3>("h03") @[ToMemPort.scala 42:23]
    io.in.resp.bits.rdata <= io.out.resp.bits.data @[ToMemPort.scala 44:25]
    io.in.resp.bits.cmd <= UInt<3>("h06") @[ToMemPort.scala 45:23]
    
  module Prefetcher : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}}
    
    reg getNewReq : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Prefetcher.scala 37:26]
    reg prefetchReq : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}, clock @[Prefetcher.scala 38:28]
    prefetchReq.wdata <= io.in.bits.wdata @[Prefetcher.scala 38:28]
    prefetchReq.wmask <= io.in.bits.wmask @[Prefetcher.scala 38:28]
    prefetchReq.cmd <= io.in.bits.cmd @[Prefetcher.scala 38:28]
    prefetchReq.size <= io.in.bits.size @[Prefetcher.scala 38:28]
    prefetchReq.addr <= io.in.bits.addr @[Prefetcher.scala 38:28]
    prefetchReq.cmd <= UInt<3>("h04") @[Prefetcher.scala 39:19]
    node _T = add(io.in.bits.addr, UInt<7>("h040")) @[Prefetcher.scala 40:39]
    node _T_1 = tail(_T, 1) @[Prefetcher.scala 40:39]
    prefetchReq.addr <= _T_1 @[Prefetcher.scala 40:20]
    reg lastReqAddr : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[Prefetcher.scala 44:28]
    node _T_2 = and(io.in.ready, io.in.valid) @[Decoupled.scala 40:37]
    when _T_2 : @[Prefetcher.scala 45:23]
      lastReqAddr <= io.in.bits.addr @[Prefetcher.scala 46:18]
      skip @[Prefetcher.scala 45:23]
    node _T_3 = mux(UInt<1>("h01"), UInt<58>("h03ffffffffffffff"), UInt<58>("h00")) @[Bitwise.scala 72:12]
    node lineMask = cat(_T_3, UInt<6>("h00")) @[Cat.scala 29:58]
    node _T_4 = and(io.in.bits.addr, lineMask) @[Prefetcher.scala 50:30]
    node _T_5 = and(lastReqAddr, lineMask) @[Prefetcher.scala 50:59]
    node neqAddr = neq(_T_4, _T_5) @[Prefetcher.scala 50:42]
    node _T_6 = eq(getNewReq, UInt<1>("h00")) @[Prefetcher.scala 52:9]
    when _T_6 : @[Prefetcher.scala 52:21]
      io.out.bits.wdata <= io.in.bits.wdata @[Prefetcher.scala 53:17]
      io.out.bits.wmask <= io.in.bits.wmask @[Prefetcher.scala 53:17]
      io.out.bits.cmd <= io.in.bits.cmd @[Prefetcher.scala 53:17]
      io.out.bits.size <= io.in.bits.size @[Prefetcher.scala 53:17]
      io.out.bits.addr <= io.in.bits.addr @[Prefetcher.scala 53:17]
      io.out.valid <= io.in.valid @[Prefetcher.scala 54:18]
      node _T_7 = eq(io.in.valid, UInt<1>("h00")) @[Prefetcher.scala 55:20]
      node _T_8 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
      node _T_9 = or(_T_7, _T_8) @[Prefetcher.scala 55:33]
      io.in.ready <= _T_9 @[Prefetcher.scala 55:17]
      node _T_10 = and(io.in.ready, io.in.valid) @[Decoupled.scala 40:37]
      node _T_11 = bits(io.in.bits.cmd, 1, 1) @[SimpleBus.scala 75:22]
      node _T_12 = and(_T_10, _T_11) @[Prefetcher.scala 56:31]
      node _T_13 = and(_T_12, neqAddr) @[Prefetcher.scala 56:55]
      getNewReq <= _T_13 @[Prefetcher.scala 56:15]
      skip @[Prefetcher.scala 52:21]
    else : @[Prefetcher.scala 57:15]
      io.out.bits.wdata <= prefetchReq.wdata @[Prefetcher.scala 58:17]
      io.out.bits.wmask <= prefetchReq.wmask @[Prefetcher.scala 58:17]
      io.out.bits.cmd <= prefetchReq.cmd @[Prefetcher.scala 58:17]
      io.out.bits.size <= prefetchReq.size @[Prefetcher.scala 58:17]
      io.out.bits.addr <= prefetchReq.addr @[Prefetcher.scala 58:17]
      node _T_14 = xor(prefetchReq.addr, UInt<30>("h030000000")) @[NutCore.scala 86:11]
      node _T_15 = bits(_T_14, 31, 28) @[NutCore.scala 86:24]
      node _T_16 = eq(_T_15, UInt<1>("h00")) @[NutCore.scala 86:44]
      node _T_17 = xor(prefetchReq.addr, UInt<31>("h040600000")) @[NutCore.scala 86:11]
      node _T_18 = bits(_T_17, 31, 24) @[NutCore.scala 86:24]
      node _T_19 = eq(_T_18, UInt<1>("h00")) @[NutCore.scala 86:44]
      node _T_20 = or(_T_16, _T_19) @[NutCore.scala 87:15]
      node _T_21 = eq(_T_20, UInt<1>("h00")) @[Prefetcher.scala 59:21]
      io.out.valid <= _T_21 @[Prefetcher.scala 59:18]
      io.in.ready <= UInt<1>("h00") @[Prefetcher.scala 60:17]
      node _T_22 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
      node _T_23 = xor(prefetchReq.addr, UInt<30>("h030000000")) @[NutCore.scala 86:11]
      node _T_24 = bits(_T_23, 31, 28) @[NutCore.scala 86:24]
      node _T_25 = eq(_T_24, UInt<1>("h00")) @[NutCore.scala 86:44]
      node _T_26 = xor(prefetchReq.addr, UInt<31>("h040600000")) @[NutCore.scala 86:11]
      node _T_27 = bits(_T_26, 31, 24) @[NutCore.scala 86:24]
      node _T_28 = eq(_T_27, UInt<1>("h00")) @[NutCore.scala 86:44]
      node _T_29 = or(_T_25, _T_28) @[NutCore.scala 87:15]
      node _T_30 = or(_T_22, _T_29) @[Prefetcher.scala 61:34]
      node _T_31 = eq(_T_30, UInt<1>("h00")) @[Prefetcher.scala 61:18]
      getNewReq <= _T_31 @[Prefetcher.scala 61:15]
      skip @[Prefetcher.scala 57:15]
    wire _T_32 : UInt<1>
    _T_32 <= UInt<1>("h00")
    node _T_33 = and(UInt<1>("h01"), _T_32) @[Debug.scala 80:29]
    when _T_33 : @[Debug.scala 80:52]
      reg _T_34 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_35 = add(_T_34, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_36 = tail(_T_35, 1) @[GTimer.scala 25:12]
      _T_34 <= _T_36 @[GTimer.scala 25:7]
      node _T_37 = asUInt(reset) @[Prefetcher.scala 65:11]
      node _T_38 = eq(_T_37, UInt<1>("h00")) @[Prefetcher.scala 65:11]
      when _T_38 : @[Prefetcher.scala 65:11]
        printf(clock, UInt<1>(1), "%d: [Prefetcher]: in(%d,%d), out(%d,%d), in.bits.addr = %x\n", _T_34, io.in.valid, io.in.ready, io.out.valid, io.out.ready, io.in.bits.addr) @[Prefetcher.scala 65:11]
        skip @[Prefetcher.scala 65:11]
      skip @[Debug.scala 80:52]
    
  module CacheStage1_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {req : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}}, metaReadBus : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<9>}}, flip resp : {data : {tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}[4]}}, dataReadBus : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<12>}}, flip resp : {data : {data : UInt<64>}[4]}}}
    
    node _T = and(io.in.ready, io.in.valid) @[Decoupled.scala 40:37]
    reg _T_1 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_2 = add(_T_1, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_3 = tail(_T_2, 1) @[GTimer.scala 25:12]
    _T_1 <= _T_3 @[GTimer.scala 25:7]
    wire _T_4 : UInt<1>
    _T_4 <= UInt<1>("h00")
    node _T_5 = and(_T, _T_4) @[Debug.scala 55:16]
    when _T_5 : @[Debug.scala 55:31]
      node _T_6 = asUInt(reset) @[Debug.scala 56:24]
      node _T_7 = eq(_T_6, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_7 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage1_2: ", _T_1) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_8 = asUInt(reset) @[Debug.scala 57:13]
      node _T_9 = eq(_T_8, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_9 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[L1$] cache stage1, addr in: %x, user: %x id: %x\n", io.in.bits.addr, UInt<1>("h00"), UInt<1>("h00")) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node readBusValid = and(io.in.valid, io.out.ready) @[Cache.scala 128:34]
    wire _T_10 : {tag : UInt<17>, index : UInt<9>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _T_11 : UInt<32>
    _T_11 <= io.in.bits.addr
    node _T_12 = bits(_T_11, 2, 0) @[Cache.scala 79:45]
    _T_10.byteOffset <= _T_12 @[Cache.scala 79:45]
    node _T_13 = bits(_T_11, 5, 3) @[Cache.scala 79:45]
    _T_10.wordIndex <= _T_13 @[Cache.scala 79:45]
    node _T_14 = bits(_T_11, 14, 6) @[Cache.scala 79:45]
    _T_10.index <= _T_14 @[Cache.scala 79:45]
    node _T_15 = bits(_T_11, 31, 15) @[Cache.scala 79:45]
    _T_10.tag <= _T_15 @[Cache.scala 79:45]
    io.metaReadBus.req.bits.setIdx <= _T_10.index @[SRAMTemplate.scala 26:17]
    io.metaReadBus.req.valid <= readBusValid @[SRAMTemplate.scala 53:20]
    wire _T_16 : {tag : UInt<17>, index : UInt<9>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 80:49]
    wire _T_17 : UInt<32>
    _T_17 <= io.in.bits.addr
    node _T_18 = bits(_T_17, 2, 0) @[Cache.scala 80:49]
    _T_16.byteOffset <= _T_18 @[Cache.scala 80:49]
    node _T_19 = bits(_T_17, 5, 3) @[Cache.scala 80:49]
    _T_16.wordIndex <= _T_19 @[Cache.scala 80:49]
    node _T_20 = bits(_T_17, 14, 6) @[Cache.scala 80:49]
    _T_16.index <= _T_20 @[Cache.scala 80:49]
    node _T_21 = bits(_T_17, 31, 15) @[Cache.scala 80:49]
    _T_16.tag <= _T_21 @[Cache.scala 80:49]
    wire _T_22 : {tag : UInt<17>, index : UInt<9>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 80:82]
    wire _T_23 : UInt<32>
    _T_23 <= io.in.bits.addr
    node _T_24 = bits(_T_23, 2, 0) @[Cache.scala 80:82]
    _T_22.byteOffset <= _T_24 @[Cache.scala 80:82]
    node _T_25 = bits(_T_23, 5, 3) @[Cache.scala 80:82]
    _T_22.wordIndex <= _T_25 @[Cache.scala 80:82]
    node _T_26 = bits(_T_23, 14, 6) @[Cache.scala 80:82]
    _T_22.index <= _T_26 @[Cache.scala 80:82]
    node _T_27 = bits(_T_23, 31, 15) @[Cache.scala 80:82]
    _T_22.tag <= _T_27 @[Cache.scala 80:82]
    node _T_28 = cat(_T_16.index, _T_22.wordIndex) @[Cat.scala 29:58]
    io.dataReadBus.req.bits.setIdx <= _T_28 @[SRAMTemplate.scala 26:17]
    io.dataReadBus.req.valid <= readBusValid @[SRAMTemplate.scala 53:20]
    io.out.bits.req.wdata <= io.in.bits.wdata @[Cache.scala 132:19]
    io.out.bits.req.wmask <= io.in.bits.wmask @[Cache.scala 132:19]
    io.out.bits.req.cmd <= io.in.bits.cmd @[Cache.scala 132:19]
    io.out.bits.req.size <= io.in.bits.size @[Cache.scala 132:19]
    io.out.bits.req.addr <= io.in.bits.addr @[Cache.scala 132:19]
    node _T_29 = and(io.in.valid, io.metaReadBus.req.ready) @[Cache.scala 133:31]
    node _T_30 = and(_T_29, io.dataReadBus.req.ready) @[Cache.scala 133:59]
    io.out.valid <= _T_30 @[Cache.scala 133:16]
    node _T_31 = eq(io.in.valid, UInt<1>("h00")) @[Cache.scala 134:19]
    node _T_32 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_33 = or(_T_31, _T_32) @[Cache.scala 134:32]
    node _T_34 = and(_T_33, io.metaReadBus.req.ready) @[Cache.scala 134:50]
    node _T_35 = and(_T_34, io.dataReadBus.req.ready) @[Cache.scala 134:78]
    io.in.ready <= _T_35 @[Cache.scala 134:15]
    reg _T_36 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_37 = add(_T_36, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_38 = tail(_T_37, 1) @[GTimer.scala 25:12]
    _T_36 <= _T_38 @[GTimer.scala 25:7]
    wire _T_39 : UInt<1>
    _T_39 <= UInt<1>("h00")
    node _T_40 = and(UInt<1>("h01"), _T_39) @[Debug.scala 55:16]
    when _T_40 : @[Debug.scala 55:31]
      node _T_41 = asUInt(reset) @[Debug.scala 56:24]
      node _T_42 = eq(_T_41, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_42 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage1_2: ", _T_36) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_43 = asUInt(reset) @[Debug.scala 57:13]
      node _T_44 = eq(_T_43, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_44 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "in.ready = %d, in.valid = %d, out.valid = %d, out.ready = %d, addr = %x, cmd = %x, dataReadBus.req.valid = %d\n", io.in.ready, io.in.valid, io.out.valid, io.out.ready, io.in.bits.addr, io.in.bits.cmd, io.dataReadBus.req.valid) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    
  module CacheStage2_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {req : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {req : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}, metas : {tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}[4], datas : {data : UInt<64>}[4], hit : UInt<1>, waymask : UInt<4>, mmio : UInt<1>, isForwardData : UInt<1>, forwardData : {setIdx : UInt<12>, data : {data : UInt<64>}, waymask : UInt<4>}}}, flip metaReadResp : {tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}[4], flip dataReadResp : {data : UInt<64>}[4], flip metaWriteBus : {req : {ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<9>, data : {tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}}, flip dataWriteBus : {req : {ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<12>, data : {data : UInt<64>}, waymask : UInt<4>}}}}
    
    wire addr : {tag : UInt<17>, index : UInt<9>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 162:31]
    wire _T : UInt<32>
    _T <= io.in.bits.req.addr
    node _T_1 = bits(_T, 2, 0) @[Cache.scala 162:31]
    addr.byteOffset <= _T_1 @[Cache.scala 162:31]
    node _T_2 = bits(_T, 5, 3) @[Cache.scala 162:31]
    addr.wordIndex <= _T_2 @[Cache.scala 162:31]
    node _T_3 = bits(_T, 14, 6) @[Cache.scala 162:31]
    addr.index <= _T_3 @[Cache.scala 162:31]
    node _T_4 = bits(_T, 31, 15) @[Cache.scala 162:31]
    addr.tag <= _T_4 @[Cache.scala 162:31]
    node _T_5 = and(io.in.valid, io.metaWriteBus.req.valid) @[Cache.scala 164:35]
    wire _T_6 : {tag : UInt<17>, index : UInt<9>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _T_7 : UInt<32>
    _T_7 <= io.in.bits.req.addr
    node _T_8 = bits(_T_7, 2, 0) @[Cache.scala 79:45]
    _T_6.byteOffset <= _T_8 @[Cache.scala 79:45]
    node _T_9 = bits(_T_7, 5, 3) @[Cache.scala 79:45]
    _T_6.wordIndex <= _T_9 @[Cache.scala 79:45]
    node _T_10 = bits(_T_7, 14, 6) @[Cache.scala 79:45]
    _T_6.index <= _T_10 @[Cache.scala 79:45]
    node _T_11 = bits(_T_7, 31, 15) @[Cache.scala 79:45]
    _T_6.tag <= _T_11 @[Cache.scala 79:45]
    node _T_12 = eq(io.metaWriteBus.req.bits.setIdx, _T_6.index) @[Cache.scala 164:99]
    node isForwardMeta = and(_T_5, _T_12) @[Cache.scala 164:64]
    reg isForwardMetaReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Cache.scala 165:33]
    when isForwardMeta : @[Cache.scala 166:24]
      isForwardMetaReg <= UInt<1>("h01") @[Cache.scala 166:43]
      skip @[Cache.scala 166:24]
    node _T_13 = and(io.in.ready, io.in.valid) @[Decoupled.scala 40:37]
    node _T_14 = eq(io.in.valid, UInt<1>("h00")) @[Cache.scala 167:25]
    node _T_15 = or(_T_13, _T_14) @[Cache.scala 167:22]
    when _T_15 : @[Cache.scala 167:39]
      isForwardMetaReg <= UInt<1>("h00") @[Cache.scala 167:58]
      skip @[Cache.scala 167:39]
    reg forwardMetaReg : {setIdx : UInt<9>, data : {tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}, clock @[Reg.scala 15:16]
    when isForwardMeta : @[Reg.scala 16:19]
      forwardMetaReg.waymask <= io.metaWriteBus.req.bits.waymask @[Reg.scala 16:23]
      forwardMetaReg.data.dirty <= io.metaWriteBus.req.bits.data.dirty @[Reg.scala 16:23]
      forwardMetaReg.data.valid <= io.metaWriteBus.req.bits.data.valid @[Reg.scala 16:23]
      forwardMetaReg.data.tag <= io.metaWriteBus.req.bits.data.tag @[Reg.scala 16:23]
      forwardMetaReg.setIdx <= io.metaWriteBus.req.bits.setIdx @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    wire metaWay : {tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}[4] @[Cache.scala 170:21]
    node pickForwardMeta = or(isForwardMetaReg, isForwardMeta) @[Cache.scala 171:42]
    node forwardMeta = mux(isForwardMeta, io.metaWriteBus.req.bits, forwardMetaReg) @[Cache.scala 172:24]
    node forwardWaymask_0 = bits(forwardMeta.waymask, 0, 0) @[Cache.scala 173:61]
    node forwardWaymask_1 = bits(forwardMeta.waymask, 1, 1) @[Cache.scala 173:61]
    node forwardWaymask_2 = bits(forwardMeta.waymask, 2, 2) @[Cache.scala 173:61]
    node forwardWaymask_3 = bits(forwardMeta.waymask, 3, 3) @[Cache.scala 173:61]
    node _T_16 = and(pickForwardMeta, forwardWaymask_0) @[Cache.scala 175:39]
    node _T_17 = mux(_T_16, forwardMeta.data, io.metaReadResp[0]) @[Cache.scala 175:22]
    metaWay[0].dirty <= _T_17.dirty @[Cache.scala 175:16]
    metaWay[0].valid <= _T_17.valid @[Cache.scala 175:16]
    metaWay[0].tag <= _T_17.tag @[Cache.scala 175:16]
    node _T_18 = and(pickForwardMeta, forwardWaymask_1) @[Cache.scala 175:39]
    node _T_19 = mux(_T_18, forwardMeta.data, io.metaReadResp[1]) @[Cache.scala 175:22]
    metaWay[1].dirty <= _T_19.dirty @[Cache.scala 175:16]
    metaWay[1].valid <= _T_19.valid @[Cache.scala 175:16]
    metaWay[1].tag <= _T_19.tag @[Cache.scala 175:16]
    node _T_20 = and(pickForwardMeta, forwardWaymask_2) @[Cache.scala 175:39]
    node _T_21 = mux(_T_20, forwardMeta.data, io.metaReadResp[2]) @[Cache.scala 175:22]
    metaWay[2].dirty <= _T_21.dirty @[Cache.scala 175:16]
    metaWay[2].valid <= _T_21.valid @[Cache.scala 175:16]
    metaWay[2].tag <= _T_21.tag @[Cache.scala 175:16]
    node _T_22 = and(pickForwardMeta, forwardWaymask_3) @[Cache.scala 175:39]
    node _T_23 = mux(_T_22, forwardMeta.data, io.metaReadResp[3]) @[Cache.scala 175:22]
    metaWay[3].dirty <= _T_23.dirty @[Cache.scala 175:16]
    metaWay[3].valid <= _T_23.valid @[Cache.scala 175:16]
    metaWay[3].tag <= _T_23.tag @[Cache.scala 175:16]
    node _T_24 = eq(metaWay[0].tag, addr.tag) @[Cache.scala 178:59]
    node _T_25 = and(metaWay[0].valid, _T_24) @[Cache.scala 178:49]
    node _T_26 = and(_T_25, io.in.valid) @[Cache.scala 178:73]
    node _T_27 = eq(metaWay[1].tag, addr.tag) @[Cache.scala 178:59]
    node _T_28 = and(metaWay[1].valid, _T_27) @[Cache.scala 178:49]
    node _T_29 = and(_T_28, io.in.valid) @[Cache.scala 178:73]
    node _T_30 = eq(metaWay[2].tag, addr.tag) @[Cache.scala 178:59]
    node _T_31 = and(metaWay[2].valid, _T_30) @[Cache.scala 178:49]
    node _T_32 = and(_T_31, io.in.valid) @[Cache.scala 178:73]
    node _T_33 = eq(metaWay[3].tag, addr.tag) @[Cache.scala 178:59]
    node _T_34 = and(metaWay[3].valid, _T_33) @[Cache.scala 178:49]
    node _T_35 = and(_T_34, io.in.valid) @[Cache.scala 178:73]
    wire _T_36 : UInt<1>[4] @[Cache.scala 178:23]
    _T_36[0] <= _T_26 @[Cache.scala 178:23]
    _T_36[1] <= _T_29 @[Cache.scala 178:23]
    _T_36[2] <= _T_32 @[Cache.scala 178:23]
    _T_36[3] <= _T_35 @[Cache.scala 178:23]
    node _T_37 = cat(_T_36[1], _T_36[0]) @[Cache.scala 178:90]
    node _T_38 = cat(_T_36[3], _T_36[2]) @[Cache.scala 178:90]
    node hitVec = cat(_T_38, _T_37) @[Cache.scala 178:90]
    reg _T_39 : UInt<64>, clock with : (reset => (reset, UInt<64>("h01234567887654321"))) @[LFSR64.scala 25:23]
    node _T_40 = bits(_T_39, 0, 0) @[LFSR64.scala 26:19]
    node _T_41 = bits(_T_39, 1, 1) @[LFSR64.scala 26:29]
    node _T_42 = xor(_T_40, _T_41) @[LFSR64.scala 26:23]
    node _T_43 = bits(_T_39, 3, 3) @[LFSR64.scala 26:39]
    node _T_44 = xor(_T_42, _T_43) @[LFSR64.scala 26:33]
    node _T_45 = bits(_T_39, 4, 4) @[LFSR64.scala 26:49]
    node _T_46 = xor(_T_44, _T_45) @[LFSR64.scala 26:43]
    when UInt<1>("h01") : @[LFSR64.scala 27:22]
      node _T_47 = eq(_T_39, UInt<1>("h00")) @[LFSR64.scala 28:24]
      node _T_48 = bits(_T_39, 63, 1) @[LFSR64.scala 28:51]
      node _T_49 = cat(_T_46, _T_48) @[Cat.scala 29:58]
      node _T_50 = mux(_T_47, UInt<1>("h01"), _T_49) @[LFSR64.scala 28:18]
      _T_39 <= _T_50 @[LFSR64.scala 28:12]
      skip @[LFSR64.scala 27:22]
    node _T_51 = bits(_T_39, 1, 0) @[Cache.scala 179:53]
    node victimWaymask = dshl(UInt<1>("h01"), _T_51) @[Cache.scala 179:42]
    node _T_52 = eq(metaWay[0].valid, UInt<1>("h00")) @[Cache.scala 181:45]
    node _T_53 = eq(metaWay[1].valid, UInt<1>("h00")) @[Cache.scala 181:45]
    node _T_54 = eq(metaWay[2].valid, UInt<1>("h00")) @[Cache.scala 181:45]
    node _T_55 = eq(metaWay[3].valid, UInt<1>("h00")) @[Cache.scala 181:45]
    wire _T_56 : UInt<1>[4] @[Cache.scala 181:27]
    _T_56[0] <= _T_52 @[Cache.scala 181:27]
    _T_56[1] <= _T_53 @[Cache.scala 181:27]
    _T_56[2] <= _T_54 @[Cache.scala 181:27]
    _T_56[3] <= _T_55 @[Cache.scala 181:27]
    node _T_57 = cat(_T_56[1], _T_56[0]) @[Cache.scala 181:56]
    node _T_58 = cat(_T_56[3], _T_56[2]) @[Cache.scala 181:56]
    node invalidVec = cat(_T_58, _T_57) @[Cache.scala 181:56]
    node hasInvalidWay = orr(invalidVec) @[Cache.scala 182:34]
    node _T_59 = geq(invalidVec, UInt<4>("h08")) @[Cache.scala 183:45]
    node _T_60 = geq(invalidVec, UInt<3>("h04")) @[Cache.scala 184:20]
    node _T_61 = geq(invalidVec, UInt<2>("h02")) @[Cache.scala 185:20]
    node _T_62 = mux(_T_61, UInt<2>("h02"), UInt<1>("h01")) @[Cache.scala 185:8]
    node _T_63 = mux(_T_60, UInt<3>("h04"), _T_62) @[Cache.scala 184:8]
    node refillInvalidWaymask = mux(_T_59, UInt<4>("h08"), _T_63) @[Cache.scala 183:33]
    node _T_64 = mux(hasInvalidWay, refillInvalidWaymask, victimWaymask) @[Cache.scala 188:49]
    node waymask = mux(io.out.bits.hit, hitVec, _T_64) @[Cache.scala 188:20]
    node _T_65 = bits(waymask, 0, 0) @[Bitwise.scala 49:65]
    node _T_66 = bits(waymask, 1, 1) @[Bitwise.scala 49:65]
    node _T_67 = bits(waymask, 2, 2) @[Bitwise.scala 49:65]
    node _T_68 = bits(waymask, 3, 3) @[Bitwise.scala 49:65]
    node _T_69 = add(_T_65, _T_66) @[Bitwise.scala 47:55]
    node _T_70 = bits(_T_69, 1, 0) @[Bitwise.scala 47:55]
    node _T_71 = add(_T_67, _T_68) @[Bitwise.scala 47:55]
    node _T_72 = bits(_T_71, 1, 0) @[Bitwise.scala 47:55]
    node _T_73 = add(_T_70, _T_72) @[Bitwise.scala 47:55]
    node _T_74 = bits(_T_73, 2, 0) @[Bitwise.scala 47:55]
    node _T_75 = gt(_T_74, UInt<1>("h01")) @[Cache.scala 189:26]
    when _T_75 : @[Cache.scala 189:32]
      reg _T_76 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_77 = add(_T_76, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_78 = tail(_T_77, 1) @[GTimer.scala 25:12]
      _T_76 <= _T_78 @[GTimer.scala 25:7]
      wire _T_79 : UInt<1>
      _T_79 <= UInt<1>("h00")
      node _T_80 = and(UInt<1>("h01"), _T_79) @[Debug.scala 55:16]
      when _T_80 : @[Debug.scala 55:31]
        node _T_81 = asUInt(reset) @[Debug.scala 56:24]
        node _T_82 = eq(_T_81, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_82 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] CacheStage2_2: ", _T_76) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_83 = asUInt(reset) @[Debug.scala 57:13]
        node _T_84 = eq(_T_83, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_84 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[ERROR] metaWay %x metat %x reqt %x\n", metaWay[0].valid, metaWay[0].tag, addr.tag) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      reg _T_85 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_86 = add(_T_85, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_87 = tail(_T_86, 1) @[GTimer.scala 25:12]
      _T_85 <= _T_87 @[GTimer.scala 25:7]
      wire _T_88 : UInt<1>
      _T_88 <= UInt<1>("h00")
      node _T_89 = and(UInt<1>("h01"), _T_88) @[Debug.scala 55:16]
      when _T_89 : @[Debug.scala 55:31]
        node _T_90 = asUInt(reset) @[Debug.scala 56:24]
        node _T_91 = eq(_T_90, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_91 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] CacheStage2_2: ", _T_85) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_92 = asUInt(reset) @[Debug.scala 57:13]
        node _T_93 = eq(_T_92, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_93 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[ERROR] metaWay %x metat %x reqt %x\n", metaWay[1].valid, metaWay[1].tag, addr.tag) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      reg _T_94 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_95 = add(_T_94, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_96 = tail(_T_95, 1) @[GTimer.scala 25:12]
      _T_94 <= _T_96 @[GTimer.scala 25:7]
      wire _T_97 : UInt<1>
      _T_97 <= UInt<1>("h00")
      node _T_98 = and(UInt<1>("h01"), _T_97) @[Debug.scala 55:16]
      when _T_98 : @[Debug.scala 55:31]
        node _T_99 = asUInt(reset) @[Debug.scala 56:24]
        node _T_100 = eq(_T_99, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_100 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] CacheStage2_2: ", _T_94) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_101 = asUInt(reset) @[Debug.scala 57:13]
        node _T_102 = eq(_T_101, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_102 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[ERROR] metaWay %x metat %x reqt %x\n", metaWay[2].valid, metaWay[2].tag, addr.tag) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      reg _T_103 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_104 = add(_T_103, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_105 = tail(_T_104, 1) @[GTimer.scala 25:12]
      _T_103 <= _T_105 @[GTimer.scala 25:7]
      wire _T_106 : UInt<1>
      _T_106 <= UInt<1>("h00")
      node _T_107 = and(UInt<1>("h01"), _T_106) @[Debug.scala 55:16]
      when _T_107 : @[Debug.scala 55:31]
        node _T_108 = asUInt(reset) @[Debug.scala 56:24]
        node _T_109 = eq(_T_108, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_109 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] CacheStage2_2: ", _T_103) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_110 = asUInt(reset) @[Debug.scala 57:13]
        node _T_111 = eq(_T_110, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_111 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[ERROR] metaWay %x metat %x reqt %x\n", metaWay[3].valid, metaWay[3].tag, addr.tag) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      reg _T_112 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_113 = add(_T_112, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_114 = tail(_T_113, 1) @[GTimer.scala 25:12]
      _T_112 <= _T_114 @[GTimer.scala 25:7]
      wire _T_115 : UInt<1>
      _T_115 <= UInt<1>("h00")
      node _T_116 = and(UInt<1>("h01"), _T_115) @[Debug.scala 55:16]
      when _T_116 : @[Debug.scala 55:31]
        node _T_117 = asUInt(reset) @[Debug.scala 56:24]
        node _T_118 = eq(_T_117, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_118 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] CacheStage2_2: ", _T_112) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_119 = asUInt(reset) @[Debug.scala 57:13]
        node _T_120 = eq(_T_119, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_120 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[ERROR] metaReadResp %x metat %x reqt %x\n", io.metaReadResp[0].valid, io.metaReadResp[0].tag, addr.tag) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      reg _T_121 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_122 = add(_T_121, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_123 = tail(_T_122, 1) @[GTimer.scala 25:12]
      _T_121 <= _T_123 @[GTimer.scala 25:7]
      wire _T_124 : UInt<1>
      _T_124 <= UInt<1>("h00")
      node _T_125 = and(UInt<1>("h01"), _T_124) @[Debug.scala 55:16]
      when _T_125 : @[Debug.scala 55:31]
        node _T_126 = asUInt(reset) @[Debug.scala 56:24]
        node _T_127 = eq(_T_126, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_127 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] CacheStage2_2: ", _T_121) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_128 = asUInt(reset) @[Debug.scala 57:13]
        node _T_129 = eq(_T_128, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_129 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[ERROR] metaReadResp %x metat %x reqt %x\n", io.metaReadResp[1].valid, io.metaReadResp[1].tag, addr.tag) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      reg _T_130 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_131 = add(_T_130, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_132 = tail(_T_131, 1) @[GTimer.scala 25:12]
      _T_130 <= _T_132 @[GTimer.scala 25:7]
      wire _T_133 : UInt<1>
      _T_133 <= UInt<1>("h00")
      node _T_134 = and(UInt<1>("h01"), _T_133) @[Debug.scala 55:16]
      when _T_134 : @[Debug.scala 55:31]
        node _T_135 = asUInt(reset) @[Debug.scala 56:24]
        node _T_136 = eq(_T_135, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_136 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] CacheStage2_2: ", _T_130) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_137 = asUInt(reset) @[Debug.scala 57:13]
        node _T_138 = eq(_T_137, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_138 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[ERROR] metaReadResp %x metat %x reqt %x\n", io.metaReadResp[2].valid, io.metaReadResp[2].tag, addr.tag) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      reg _T_139 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_140 = add(_T_139, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_141 = tail(_T_140, 1) @[GTimer.scala 25:12]
      _T_139 <= _T_141 @[GTimer.scala 25:7]
      wire _T_142 : UInt<1>
      _T_142 <= UInt<1>("h00")
      node _T_143 = and(UInt<1>("h01"), _T_142) @[Debug.scala 55:16]
      when _T_143 : @[Debug.scala 55:31]
        node _T_144 = asUInt(reset) @[Debug.scala 56:24]
        node _T_145 = eq(_T_144, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_145 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] CacheStage2_2: ", _T_139) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_146 = asUInt(reset) @[Debug.scala 57:13]
        node _T_147 = eq(_T_146, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_147 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[ERROR] metaReadResp %x metat %x reqt %x\n", io.metaReadResp[3].valid, io.metaReadResp[3].tag, addr.tag) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      reg _T_148 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_149 = add(_T_148, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_150 = tail(_T_149, 1) @[GTimer.scala 25:12]
      _T_148 <= _T_150 @[GTimer.scala 25:7]
      wire _T_151 : UInt<1>
      _T_151 <= UInt<1>("h00")
      node _T_152 = and(UInt<1>("h01"), _T_151) @[Debug.scala 55:16]
      when _T_152 : @[Debug.scala 55:31]
        node _T_153 = asUInt(reset) @[Debug.scala 56:24]
        node _T_154 = eq(_T_153, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_154 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] CacheStage2_2: ", _T_148) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_155 = asUInt(reset) @[Debug.scala 57:13]
        node _T_156 = eq(_T_155, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_156 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[ERROR] forwardMetaReg isForwardMetaReg %x %x metat %x wm %b\n", isForwardMetaReg, forwardMetaReg.data.valid, forwardMetaReg.data.tag, forwardMetaReg.waymask) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      reg _T_157 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_158 = add(_T_157, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_159 = tail(_T_158, 1) @[GTimer.scala 25:12]
      _T_157 <= _T_159 @[GTimer.scala 25:7]
      wire _T_160 : UInt<1>
      _T_160 <= UInt<1>("h00")
      node _T_161 = and(UInt<1>("h01"), _T_160) @[Debug.scala 55:16]
      when _T_161 : @[Debug.scala 55:31]
        node _T_162 = asUInt(reset) @[Debug.scala 56:24]
        node _T_163 = eq(_T_162, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_163 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] CacheStage2_2: ", _T_157) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_164 = asUInt(reset) @[Debug.scala 57:13]
        node _T_165 = eq(_T_164, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_165 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[ERROR] forwardMeta isForwardMeta %x %x metat %x wm %b\n", isForwardMeta, io.metaWriteBus.req.bits.data.valid, io.metaWriteBus.req.bits.data.tag, io.metaWriteBus.req.bits.waymask) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      skip @[Cache.scala 189:32]
    node _T_166 = bits(waymask, 0, 0) @[Bitwise.scala 49:65]
    node _T_167 = bits(waymask, 1, 1) @[Bitwise.scala 49:65]
    node _T_168 = bits(waymask, 2, 2) @[Bitwise.scala 49:65]
    node _T_169 = bits(waymask, 3, 3) @[Bitwise.scala 49:65]
    node _T_170 = add(_T_166, _T_167) @[Bitwise.scala 47:55]
    node _T_171 = bits(_T_170, 1, 0) @[Bitwise.scala 47:55]
    node _T_172 = add(_T_168, _T_169) @[Bitwise.scala 47:55]
    node _T_173 = bits(_T_172, 1, 0) @[Bitwise.scala 47:55]
    node _T_174 = add(_T_171, _T_173) @[Bitwise.scala 47:55]
    node _T_175 = bits(_T_174, 2, 0) @[Bitwise.scala 47:55]
    node _T_176 = gt(_T_175, UInt<1>("h01")) @[Cache.scala 195:26]
    when _T_176 : @[Cache.scala 195:32]
      reg _T_177 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_178 = add(_T_177, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_179 = tail(_T_178, 1) @[GTimer.scala 25:12]
      _T_177 <= _T_179 @[GTimer.scala 25:7]
      wire _T_180 : UInt<1>
      _T_180 <= UInt<1>("h00")
      node _T_181 = and(UInt<1>("h01"), _T_180) @[Debug.scala 55:16]
      when _T_181 : @[Debug.scala 55:31]
        node _T_182 = asUInt(reset) @[Debug.scala 56:24]
        node _T_183 = eq(_T_182, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_183 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] CacheStage2_2: ", _T_177) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_184 = asUInt(reset) @[Debug.scala 57:13]
        node _T_185 = eq(_T_184, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_185 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[ERROR] hit %b wmask %b hitvec %b\n", io.out.bits.hit, forwardMeta.waymask, hitVec) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      skip @[Cache.scala 195:32]
    node _T_186 = bits(waymask, 0, 0) @[Bitwise.scala 49:65]
    node _T_187 = bits(waymask, 1, 1) @[Bitwise.scala 49:65]
    node _T_188 = bits(waymask, 2, 2) @[Bitwise.scala 49:65]
    node _T_189 = bits(waymask, 3, 3) @[Bitwise.scala 49:65]
    node _T_190 = add(_T_186, _T_187) @[Bitwise.scala 47:55]
    node _T_191 = bits(_T_190, 1, 0) @[Bitwise.scala 47:55]
    node _T_192 = add(_T_188, _T_189) @[Bitwise.scala 47:55]
    node _T_193 = bits(_T_192, 1, 0) @[Bitwise.scala 47:55]
    node _T_194 = add(_T_191, _T_193) @[Bitwise.scala 47:55]
    node _T_195 = bits(_T_194, 2, 0) @[Bitwise.scala 47:55]
    node _T_196 = gt(_T_195, UInt<1>("h01")) @[Cache.scala 196:45]
    node _T_197 = and(io.in.valid, _T_196) @[Cache.scala 196:24]
    node _T_198 = eq(_T_197, UInt<1>("h00")) @[Cache.scala 196:10]
    node _T_199 = asUInt(reset) @[Cache.scala 196:9]
    node _T_200 = or(_T_198, _T_199) @[Cache.scala 196:9]
    node _T_201 = eq(_T_200, UInt<1>("h00")) @[Cache.scala 196:9]
    when _T_201 : @[Cache.scala 196:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at Cache.scala:196 assert(!(io.in.valid && PopCount(waymask) > 1.U))\n") @[Cache.scala 196:9]
      stop(clock, UInt<1>(1), 1) @[Cache.scala 196:9]
      skip @[Cache.scala 196:9]
    io.out.bits.metas[0].dirty <= metaWay[0].dirty @[Cache.scala 198:21]
    io.out.bits.metas[0].valid <= metaWay[0].valid @[Cache.scala 198:21]
    io.out.bits.metas[0].tag <= metaWay[0].tag @[Cache.scala 198:21]
    io.out.bits.metas[1].dirty <= metaWay[1].dirty @[Cache.scala 198:21]
    io.out.bits.metas[1].valid <= metaWay[1].valid @[Cache.scala 198:21]
    io.out.bits.metas[1].tag <= metaWay[1].tag @[Cache.scala 198:21]
    io.out.bits.metas[2].dirty <= metaWay[2].dirty @[Cache.scala 198:21]
    io.out.bits.metas[2].valid <= metaWay[2].valid @[Cache.scala 198:21]
    io.out.bits.metas[2].tag <= metaWay[2].tag @[Cache.scala 198:21]
    io.out.bits.metas[3].dirty <= metaWay[3].dirty @[Cache.scala 198:21]
    io.out.bits.metas[3].valid <= metaWay[3].valid @[Cache.scala 198:21]
    io.out.bits.metas[3].tag <= metaWay[3].tag @[Cache.scala 198:21]
    node _T_202 = orr(hitVec) @[Cache.scala 199:44]
    node _T_203 = and(io.in.valid, _T_202) @[Cache.scala 199:34]
    io.out.bits.hit <= _T_203 @[Cache.scala 199:19]
    io.out.bits.waymask <= waymask @[Cache.scala 200:23]
    io.out.bits.datas[0].data <= io.dataReadResp[0].data @[Cache.scala 201:21]
    io.out.bits.datas[1].data <= io.dataReadResp[1].data @[Cache.scala 201:21]
    io.out.bits.datas[2].data <= io.dataReadResp[2].data @[Cache.scala 201:21]
    io.out.bits.datas[3].data <= io.dataReadResp[3].data @[Cache.scala 201:21]
    node _T_204 = xor(io.in.bits.req.addr, UInt<30>("h030000000")) @[NutCore.scala 86:11]
    node _T_205 = bits(_T_204, 31, 28) @[NutCore.scala 86:24]
    node _T_206 = eq(_T_205, UInt<1>("h00")) @[NutCore.scala 86:44]
    node _T_207 = xor(io.in.bits.req.addr, UInt<31>("h040600000")) @[NutCore.scala 86:11]
    node _T_208 = bits(_T_207, 31, 24) @[NutCore.scala 86:24]
    node _T_209 = eq(_T_208, UInt<1>("h00")) @[NutCore.scala 86:44]
    node _T_210 = or(_T_206, _T_209) @[NutCore.scala 87:15]
    io.out.bits.mmio <= _T_210 @[Cache.scala 202:20]
    wire _T_211 : {tag : UInt<17>, index : UInt<9>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 80:49]
    wire _T_212 : UInt<32>
    _T_212 <= io.in.bits.req.addr
    node _T_213 = bits(_T_212, 2, 0) @[Cache.scala 80:49]
    _T_211.byteOffset <= _T_213 @[Cache.scala 80:49]
    node _T_214 = bits(_T_212, 5, 3) @[Cache.scala 80:49]
    _T_211.wordIndex <= _T_214 @[Cache.scala 80:49]
    node _T_215 = bits(_T_212, 14, 6) @[Cache.scala 80:49]
    _T_211.index <= _T_215 @[Cache.scala 80:49]
    node _T_216 = bits(_T_212, 31, 15) @[Cache.scala 80:49]
    _T_211.tag <= _T_216 @[Cache.scala 80:49]
    wire _T_217 : {tag : UInt<17>, index : UInt<9>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 80:82]
    wire _T_218 : UInt<32>
    _T_218 <= io.in.bits.req.addr
    node _T_219 = bits(_T_218, 2, 0) @[Cache.scala 80:82]
    _T_217.byteOffset <= _T_219 @[Cache.scala 80:82]
    node _T_220 = bits(_T_218, 5, 3) @[Cache.scala 80:82]
    _T_217.wordIndex <= _T_220 @[Cache.scala 80:82]
    node _T_221 = bits(_T_218, 14, 6) @[Cache.scala 80:82]
    _T_217.index <= _T_221 @[Cache.scala 80:82]
    node _T_222 = bits(_T_218, 31, 15) @[Cache.scala 80:82]
    _T_217.tag <= _T_222 @[Cache.scala 80:82]
    node _T_223 = cat(_T_211.index, _T_217.wordIndex) @[Cat.scala 29:58]
    node _T_224 = eq(io.dataWriteBus.req.bits.setIdx, _T_223) @[Cache.scala 205:30]
    node _T_225 = and(io.dataWriteBus.req.valid, _T_224) @[Cache.scala 205:13]
    node isForwardData = and(io.in.valid, _T_225) @[Cache.scala 204:35]
    reg isForwardDataReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Cache.scala 207:33]
    when isForwardData : @[Cache.scala 208:24]
      isForwardDataReg <= UInt<1>("h01") @[Cache.scala 208:43]
      skip @[Cache.scala 208:24]
    node _T_226 = and(io.in.ready, io.in.valid) @[Decoupled.scala 40:37]
    node _T_227 = eq(io.in.valid, UInt<1>("h00")) @[Cache.scala 209:25]
    node _T_228 = or(_T_226, _T_227) @[Cache.scala 209:22]
    when _T_228 : @[Cache.scala 209:39]
      isForwardDataReg <= UInt<1>("h00") @[Cache.scala 209:58]
      skip @[Cache.scala 209:39]
    reg forwardDataReg : {setIdx : UInt<12>, data : {data : UInt<64>}, waymask : UInt<4>}, clock @[Reg.scala 15:16]
    when isForwardData : @[Reg.scala 16:19]
      forwardDataReg.waymask <= io.dataWriteBus.req.bits.waymask @[Reg.scala 16:23]
      forwardDataReg.data.data <= io.dataWriteBus.req.bits.data.data @[Reg.scala 16:23]
      forwardDataReg.setIdx <= io.dataWriteBus.req.bits.setIdx @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _T_229 = or(isForwardDataReg, isForwardData) @[Cache.scala 211:49]
    io.out.bits.isForwardData <= _T_229 @[Cache.scala 211:29]
    node _T_230 = mux(isForwardData, io.dataWriteBus.req.bits, forwardDataReg) @[Cache.scala 212:33]
    io.out.bits.forwardData.waymask <= _T_230.waymask @[Cache.scala 212:27]
    io.out.bits.forwardData.data.data <= _T_230.data.data @[Cache.scala 212:27]
    io.out.bits.forwardData.setIdx <= _T_230.setIdx @[Cache.scala 212:27]
    io.out.bits.req.wdata <= io.in.bits.req.wdata @[Cache.scala 214:19]
    io.out.bits.req.wmask <= io.in.bits.req.wmask @[Cache.scala 214:19]
    io.out.bits.req.cmd <= io.in.bits.req.cmd @[Cache.scala 214:19]
    io.out.bits.req.size <= io.in.bits.req.size @[Cache.scala 214:19]
    io.out.bits.req.addr <= io.in.bits.req.addr @[Cache.scala 214:19]
    io.out.valid <= io.in.valid @[Cache.scala 215:16]
    node _T_231 = eq(io.in.valid, UInt<1>("h00")) @[Cache.scala 216:18]
    node _T_232 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_233 = or(_T_231, _T_232) @[Cache.scala 216:31]
    io.in.ready <= _T_233 @[Cache.scala 216:15]
    node _T_234 = and(io.in.ready, io.in.valid) @[Decoupled.scala 40:37]
    reg _T_235 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_236 = add(_T_235, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_237 = tail(_T_236, 1) @[GTimer.scala 25:12]
    _T_235 <= _T_237 @[GTimer.scala 25:7]
    wire _T_238 : UInt<1>
    _T_238 <= UInt<1>("h00")
    node _T_239 = and(UInt<1>("h01"), _T_238) @[Debug.scala 55:16]
    when _T_239 : @[Debug.scala 55:31]
      node _T_240 = asUInt(reset) @[Debug.scala 56:24]
      node _T_241 = eq(_T_240, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_241 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage2_2: ", _T_235) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_242 = asUInt(reset) @[Debug.scala 57:13]
      node _T_243 = eq(_T_242, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_243 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[isFD:%d isFDreg:%d inFire:%d invalid:%d \n", isForwardData, isForwardDataReg, _T_234, io.in.valid) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    wire _T_244 : {tag : UInt<17>, index : UInt<9>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _T_245 : UInt<32>
    _T_245 <= io.in.bits.req.addr
    node _T_246 = bits(_T_245, 2, 0) @[Cache.scala 79:45]
    _T_244.byteOffset <= _T_246 @[Cache.scala 79:45]
    node _T_247 = bits(_T_245, 5, 3) @[Cache.scala 79:45]
    _T_244.wordIndex <= _T_247 @[Cache.scala 79:45]
    node _T_248 = bits(_T_245, 14, 6) @[Cache.scala 79:45]
    _T_244.index <= _T_248 @[Cache.scala 79:45]
    node _T_249 = bits(_T_245, 31, 15) @[Cache.scala 79:45]
    _T_244.tag <= _T_249 @[Cache.scala 79:45]
    reg _T_250 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_251 = add(_T_250, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_252 = tail(_T_251, 1) @[GTimer.scala 25:12]
    _T_250 <= _T_252 @[GTimer.scala 25:7]
    wire _T_253 : UInt<1>
    _T_253 <= UInt<1>("h00")
    node _T_254 = and(UInt<1>("h01"), _T_253) @[Debug.scala 55:16]
    when _T_254 : @[Debug.scala 55:31]
      node _T_255 = asUInt(reset) @[Debug.scala 56:24]
      node _T_256 = eq(_T_255, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_256 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage2_2: ", _T_250) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_257 = asUInt(reset) @[Debug.scala 57:13]
      node _T_258 = eq(_T_257, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_258 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[isFM:%d isFMreg:%d metawreq:%x widx:%x ridx:%x \n", isForwardMeta, isForwardMetaReg, io.metaWriteBus.req.valid, io.metaWriteBus.req.bits.setIdx, _T_244.index) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    
  module Arbiter_10 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<9>, data : {tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}[2], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<9>, data : {tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}, chosen : UInt<1>}
    
    io.chosen <= UInt<1>("h01") @[Arbiter.scala 123:13]
    io.out.bits.waymask <= io.in[1].bits.waymask @[Arbiter.scala 124:15]
    io.out.bits.data.dirty <= io.in[1].bits.data.dirty @[Arbiter.scala 124:15]
    io.out.bits.data.valid <= io.in[1].bits.data.valid @[Arbiter.scala 124:15]
    io.out.bits.data.tag <= io.in[1].bits.data.tag @[Arbiter.scala 124:15]
    io.out.bits.setIdx <= io.in[1].bits.setIdx @[Arbiter.scala 124:15]
    when io.in[0].valid : @[Arbiter.scala 126:27]
      io.chosen <= UInt<1>("h00") @[Arbiter.scala 127:17]
      io.out.bits.waymask <= io.in[0].bits.waymask @[Arbiter.scala 128:19]
      io.out.bits.data.dirty <= io.in[0].bits.data.dirty @[Arbiter.scala 128:19]
      io.out.bits.data.valid <= io.in[0].bits.data.valid @[Arbiter.scala 128:19]
      io.out.bits.data.tag <= io.in[0].bits.data.tag @[Arbiter.scala 128:19]
      io.out.bits.setIdx <= io.in[0].bits.setIdx @[Arbiter.scala 128:19]
      skip @[Arbiter.scala 126:27]
    node grant_1 = eq(io.in[0].valid, UInt<1>("h00")) @[Arbiter.scala 31:78]
    node _T = and(UInt<1>("h01"), io.out.ready) @[Arbiter.scala 134:19]
    io.in[0].ready <= _T @[Arbiter.scala 134:14]
    node _T_1 = and(grant_1, io.out.ready) @[Arbiter.scala 134:19]
    io.in[1].ready <= _T_1 @[Arbiter.scala 134:14]
    node _T_2 = eq(grant_1, UInt<1>("h00")) @[Arbiter.scala 135:19]
    node _T_3 = or(_T_2, io.in[1].valid) @[Arbiter.scala 135:31]
    io.out.valid <= _T_3 @[Arbiter.scala 135:16]
    
  module Arbiter_11 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<12>, data : {data : UInt<64>}, waymask : UInt<4>}}[2], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<12>, data : {data : UInt<64>}, waymask : UInt<4>}}, chosen : UInt<1>}
    
    io.chosen <= UInt<1>("h01") @[Arbiter.scala 123:13]
    io.out.bits.waymask <= io.in[1].bits.waymask @[Arbiter.scala 124:15]
    io.out.bits.data.data <= io.in[1].bits.data.data @[Arbiter.scala 124:15]
    io.out.bits.setIdx <= io.in[1].bits.setIdx @[Arbiter.scala 124:15]
    when io.in[0].valid : @[Arbiter.scala 126:27]
      io.chosen <= UInt<1>("h00") @[Arbiter.scala 127:17]
      io.out.bits.waymask <= io.in[0].bits.waymask @[Arbiter.scala 128:19]
      io.out.bits.data.data <= io.in[0].bits.data.data @[Arbiter.scala 128:19]
      io.out.bits.setIdx <= io.in[0].bits.setIdx @[Arbiter.scala 128:19]
      skip @[Arbiter.scala 126:27]
    node grant_1 = eq(io.in[0].valid, UInt<1>("h00")) @[Arbiter.scala 31:78]
    node _T = and(UInt<1>("h01"), io.out.ready) @[Arbiter.scala 134:19]
    io.in[0].ready <= _T @[Arbiter.scala 134:14]
    node _T_1 = and(grant_1, io.out.ready) @[Arbiter.scala 134:19]
    io.in[1].ready <= _T_1 @[Arbiter.scala 134:14]
    node _T_2 = eq(grant_1, UInt<1>("h00")) @[Arbiter.scala 135:19]
    node _T_3 = or(_T_2, io.in[1].valid) @[Arbiter.scala 135:31]
    io.out.valid <= _T_3 @[Arbiter.scala 135:16]
    
  module CacheStage3_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {req : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}, metas : {tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}[4], datas : {data : UInt<64>}[4], hit : UInt<1>, waymask : UInt<4>, mmio : UInt<1>, isForwardData : UInt<1>, forwardData : {setIdx : UInt<12>, data : {data : UInt<64>}, waymask : UInt<4>}}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}, isFinish : UInt<1>, flip flush : UInt<1>, dataReadBus : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<12>}}, flip resp : {data : {data : UInt<64>}[4]}}, dataWriteBus : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<12>, data : {data : UInt<64>}, waymask : UInt<4>}}}, metaWriteBus : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<9>, data : {tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}}, mem : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}, mmio : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}, cohResp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}, dataReadRespToL1 : UInt<1>}
    
    inst metaWriteArb of Arbiter_10 @[Cache.scala 241:28]
    metaWriteArb.clock <= clock
    metaWriteArb.reset <= reset
    inst dataWriteArb of Arbiter_11 @[Cache.scala 242:28]
    dataWriteArb.clock <= clock
    dataWriteArb.reset <= reset
    wire addr : {tag : UInt<17>, index : UInt<9>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 245:31]
    wire _T : UInt<32>
    _T <= io.in.bits.req.addr
    node _T_1 = bits(_T, 2, 0) @[Cache.scala 245:31]
    addr.byteOffset <= _T_1 @[Cache.scala 245:31]
    node _T_2 = bits(_T, 5, 3) @[Cache.scala 245:31]
    addr.wordIndex <= _T_2 @[Cache.scala 245:31]
    node _T_3 = bits(_T, 14, 6) @[Cache.scala 245:31]
    addr.index <= _T_3 @[Cache.scala 245:31]
    node _T_4 = bits(_T, 31, 15) @[Cache.scala 245:31]
    addr.tag <= _T_4 @[Cache.scala 245:31]
    node mmio = and(io.in.valid, io.in.bits.mmio) @[Cache.scala 246:26]
    node hit = and(io.in.valid, io.in.bits.hit) @[Cache.scala 247:25]
    node _T_5 = eq(io.in.bits.hit, UInt<1>("h00")) @[Cache.scala 248:29]
    node miss = and(io.in.valid, _T_5) @[Cache.scala 248:26]
    node _T_6 = and(io.in.valid, UInt<1>("h01")) @[Cache.scala 249:27]
    node _T_7 = eq(io.in.bits.req.cmd, UInt<4>("h08")) @[SimpleBus.scala 79:23]
    node probe = and(_T_6, _T_7) @[Cache.scala 249:39]
    node _T_8 = eq(io.in.bits.req.cmd, UInt<2>("h02")) @[SimpleBus.scala 76:27]
    node hitReadBurst = and(hit, _T_8) @[Cache.scala 250:26]
    node _T_9 = bits(io.in.bits.waymask, 0, 0) @[Mux.scala 29:36]
    node _T_10 = bits(io.in.bits.waymask, 1, 1) @[Mux.scala 29:36]
    node _T_11 = bits(io.in.bits.waymask, 2, 2) @[Mux.scala 29:36]
    node _T_12 = bits(io.in.bits.waymask, 3, 3) @[Mux.scala 29:36]
    node _T_13 = cat(io.in.bits.metas[0].tag, io.in.bits.metas[0].valid) @[Mux.scala 27:72]
    node _T_14 = cat(_T_13, io.in.bits.metas[0].dirty) @[Mux.scala 27:72]
    node _T_15 = mux(_T_9, _T_14, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_16 = cat(io.in.bits.metas[1].tag, io.in.bits.metas[1].valid) @[Mux.scala 27:72]
    node _T_17 = cat(_T_16, io.in.bits.metas[1].dirty) @[Mux.scala 27:72]
    node _T_18 = mux(_T_10, _T_17, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_19 = cat(io.in.bits.metas[2].tag, io.in.bits.metas[2].valid) @[Mux.scala 27:72]
    node _T_20 = cat(_T_19, io.in.bits.metas[2].dirty) @[Mux.scala 27:72]
    node _T_21 = mux(_T_11, _T_20, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_22 = cat(io.in.bits.metas[3].tag, io.in.bits.metas[3].valid) @[Mux.scala 27:72]
    node _T_23 = cat(_T_22, io.in.bits.metas[3].dirty) @[Mux.scala 27:72]
    node _T_24 = mux(_T_12, _T_23, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_25 = or(_T_15, _T_18) @[Mux.scala 27:72]
    node _T_26 = or(_T_25, _T_21) @[Mux.scala 27:72]
    node _T_27 = or(_T_26, _T_24) @[Mux.scala 27:72]
    wire meta : {tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>} @[Mux.scala 27:72]
    wire _T_28 : UInt<19>
    _T_28 <= _T_27
    node _T_29 = bits(_T_28, 0, 0) @[Mux.scala 27:72]
    meta.dirty <= _T_29 @[Mux.scala 27:72]
    node _T_30 = bits(_T_28, 1, 1) @[Mux.scala 27:72]
    meta.valid <= _T_30 @[Mux.scala 27:72]
    node _T_31 = bits(_T_28, 18, 2) @[Mux.scala 27:72]
    meta.tag <= _T_31 @[Mux.scala 27:72]
    node _T_32 = and(mmio, hit) @[Cache.scala 252:17]
    node _T_33 = eq(_T_32, UInt<1>("h00")) @[Cache.scala 252:10]
    node _T_34 = asUInt(reset) @[Cache.scala 252:9]
    node _T_35 = or(_T_33, _T_34) @[Cache.scala 252:9]
    node _T_36 = eq(_T_35, UInt<1>("h00")) @[Cache.scala 252:9]
    when _T_36 : @[Cache.scala 252:9]
      printf(clock, UInt<1>(1), "Assertion failed: MMIO request should not hit in cache\n    at Cache.scala:252 assert(!(mmio && hit), \"MMIO request should not hit in cache\")\n") @[Cache.scala 252:9]
      stop(clock, UInt<1>(1), 1) @[Cache.scala 252:9]
      skip @[Cache.scala 252:9]
    node _T_37 = eq(io.in.bits.waymask, io.in.bits.forwardData.waymask) @[Cache.scala 260:71]
    node useForwardData = and(io.in.bits.isForwardData, _T_37) @[Cache.scala 260:49]
    node _T_38 = bits(io.in.bits.waymask, 0, 0) @[Mux.scala 29:36]
    node _T_39 = bits(io.in.bits.waymask, 1, 1) @[Mux.scala 29:36]
    node _T_40 = bits(io.in.bits.waymask, 2, 2) @[Mux.scala 29:36]
    node _T_41 = bits(io.in.bits.waymask, 3, 3) @[Mux.scala 29:36]
    node _T_42 = mux(_T_38, io.in.bits.datas[0].data, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_43 = mux(_T_39, io.in.bits.datas[1].data, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_44 = mux(_T_40, io.in.bits.datas[2].data, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_45 = mux(_T_41, io.in.bits.datas[3].data, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_46 = or(_T_42, _T_43) @[Mux.scala 27:72]
    node _T_47 = or(_T_46, _T_44) @[Mux.scala 27:72]
    node _T_48 = or(_T_47, _T_45) @[Mux.scala 27:72]
    wire _T_49 : {data : UInt<64>} @[Mux.scala 27:72]
    wire _T_50 : UInt<64>
    _T_50 <= _T_48
    node _T_51 = bits(_T_50, 63, 0) @[Mux.scala 27:72]
    _T_49.data <= _T_51 @[Mux.scala 27:72]
    node dataRead = mux(useForwardData, io.in.bits.forwardData.data.data, _T_49.data) @[Cache.scala 262:21]
    node _T_52 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Cache.scala 263:22]
    node _T_53 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_54 = and(_T_52, _T_53) @[Cache.scala 263:28]
    node _T_55 = bits(io.in.bits.req.wmask, 0, 0) @[BitUtils.scala 27:29]
    node _T_56 = bits(io.in.bits.req.wmask, 1, 1) @[BitUtils.scala 27:29]
    node _T_57 = bits(io.in.bits.req.wmask, 2, 2) @[BitUtils.scala 27:29]
    node _T_58 = bits(io.in.bits.req.wmask, 3, 3) @[BitUtils.scala 27:29]
    node _T_59 = bits(io.in.bits.req.wmask, 4, 4) @[BitUtils.scala 27:29]
    node _T_60 = bits(io.in.bits.req.wmask, 5, 5) @[BitUtils.scala 27:29]
    node _T_61 = bits(io.in.bits.req.wmask, 6, 6) @[BitUtils.scala 27:29]
    node _T_62 = bits(io.in.bits.req.wmask, 7, 7) @[BitUtils.scala 27:29]
    node _T_63 = bits(_T_55, 0, 0) @[Bitwise.scala 72:15]
    node _T_64 = mux(_T_63, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_65 = bits(_T_56, 0, 0) @[Bitwise.scala 72:15]
    node _T_66 = mux(_T_65, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_67 = bits(_T_57, 0, 0) @[Bitwise.scala 72:15]
    node _T_68 = mux(_T_67, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_69 = bits(_T_58, 0, 0) @[Bitwise.scala 72:15]
    node _T_70 = mux(_T_69, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_71 = bits(_T_59, 0, 0) @[Bitwise.scala 72:15]
    node _T_72 = mux(_T_71, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_73 = bits(_T_60, 0, 0) @[Bitwise.scala 72:15]
    node _T_74 = mux(_T_73, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_75 = bits(_T_61, 0, 0) @[Bitwise.scala 72:15]
    node _T_76 = mux(_T_75, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_77 = bits(_T_62, 0, 0) @[Bitwise.scala 72:15]
    node _T_78 = mux(_T_77, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_79 = cat(_T_66, _T_64) @[Cat.scala 29:58]
    node _T_80 = cat(_T_70, _T_68) @[Cat.scala 29:58]
    node _T_81 = cat(_T_80, _T_79) @[Cat.scala 29:58]
    node _T_82 = cat(_T_74, _T_72) @[Cat.scala 29:58]
    node _T_83 = cat(_T_78, _T_76) @[Cat.scala 29:58]
    node _T_84 = cat(_T_83, _T_82) @[Cat.scala 29:58]
    node _T_85 = cat(_T_84, _T_81) @[Cat.scala 29:58]
    node wordMask = mux(_T_54, _T_85, UInt<64>("h00")) @[Cache.scala 263:21]
    reg value : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Counter.scala 29:33]
    node _T_86 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_87 = eq(io.in.bits.req.cmd, UInt<2>("h03")) @[Cache.scala 266:34]
    node _T_88 = eq(io.in.bits.req.cmd, UInt<3>("h07")) @[SimpleBus.scala 78:27]
    node _T_89 = or(_T_87, _T_88) @[Cache.scala 266:62]
    node _T_90 = and(_T_86, _T_89) @[Cache.scala 266:22]
    when _T_90 : @[Cache.scala 266:85]
      node _T_91 = eq(value, UInt<3>("h07")) @[Counter.scala 38:24]
      node _T_92 = add(value, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_93 = tail(_T_92, 1) @[Counter.scala 39:22]
      value <= _T_93 @[Counter.scala 39:13]
      skip @[Cache.scala 266:85]
    node _T_94 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node hitWrite = and(hit, _T_94) @[Cache.scala 270:22]
    wire dataHitWriteBus : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<12>, data : {data : UInt<64>}, waymask : UInt<4>}}} @[Cache.scala 271:29]
    wire _T_95 : {data : UInt<64>} @[Cache.scala 272:16]
    node _T_96 = and(io.in.bits.req.wdata, wordMask) @[BitUtils.scala 32:13]
    node _T_97 = not(wordMask) @[BitUtils.scala 32:38]
    node _T_98 = and(dataRead, _T_97) @[BitUtils.scala 32:36]
    node _T_99 = or(_T_96, _T_98) @[BitUtils.scala 32:25]
    _T_95.data <= _T_99 @[Cache.scala 106:15]
    node _T_100 = eq(io.in.bits.req.cmd, UInt<2>("h03")) @[Cache.scala 273:60]
    node _T_101 = eq(io.in.bits.req.cmd, UInt<3>("h07")) @[SimpleBus.scala 78:27]
    node _T_102 = or(_T_100, _T_101) @[Cache.scala 273:88]
    node _T_103 = mux(_T_102, value, addr.wordIndex) @[Cache.scala 273:51]
    node _T_104 = cat(addr.index, _T_103) @[Cat.scala 29:58]
    dataHitWriteBus.req.bits.setIdx <= _T_104 @[SRAMTemplate.scala 26:17]
    dataHitWriteBus.req.bits.data.data <= _T_95.data @[SRAMTemplate.scala 37:15]
    dataHitWriteBus.req.bits.waymask <= io.in.bits.waymask @[SRAMTemplate.scala 38:24]
    dataHitWriteBus.req.valid <= hitWrite @[SRAMTemplate.scala 63:20]
    wire metaHitWriteBus : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<9>, data : {tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}} @[Cache.scala 275:29]
    node _T_105 = eq(meta.dirty, UInt<1>("h00")) @[Cache.scala 276:25]
    node _T_106 = and(hitWrite, _T_105) @[Cache.scala 276:22]
    wire _T_107 : {tag : UInt<17>, index : UInt<9>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _T_108 : UInt<32>
    _T_108 <= io.in.bits.req.addr
    node _T_109 = bits(_T_108, 2, 0) @[Cache.scala 79:45]
    _T_107.byteOffset <= _T_109 @[Cache.scala 79:45]
    node _T_110 = bits(_T_108, 5, 3) @[Cache.scala 79:45]
    _T_107.wordIndex <= _T_110 @[Cache.scala 79:45]
    node _T_111 = bits(_T_108, 14, 6) @[Cache.scala 79:45]
    _T_107.index <= _T_111 @[Cache.scala 79:45]
    node _T_112 = bits(_T_108, 31, 15) @[Cache.scala 79:45]
    _T_107.tag <= _T_112 @[Cache.scala 79:45]
    wire _T_113 : {tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>} @[Cache.scala 277:16]
    _T_113.tag <= meta.tag @[Cache.scala 95:14]
    _T_113.valid <= UInt<1>("h01") @[Cache.scala 96:16]
    _T_113.dirty <= UInt<1>("h01") @[Cache.scala 97:16]
    metaHitWriteBus.req.bits.setIdx <= _T_107.index @[SRAMTemplate.scala 26:17]
    metaHitWriteBus.req.bits.data.dirty <= _T_113.dirty @[SRAMTemplate.scala 37:15]
    metaHitWriteBus.req.bits.data.valid <= _T_113.valid @[SRAMTemplate.scala 37:15]
    metaHitWriteBus.req.bits.data.tag <= _T_113.tag @[SRAMTemplate.scala 37:15]
    metaHitWriteBus.req.bits.waymask <= io.in.bits.waymask @[SRAMTemplate.scala 38:24]
    metaHitWriteBus.req.valid <= _T_106 @[SRAMTemplate.scala 63:20]
    reg state : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[Cache.scala 281:22]
    reg needFlush : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Cache.scala 282:26]
    node _T_114 = neq(state, UInt<4>("h00")) @[Cache.scala 284:28]
    node _T_115 = and(io.flush, _T_114) @[Cache.scala 284:18]
    when _T_115 : @[Cache.scala 284:41]
      needFlush <= UInt<1>("h01") @[Cache.scala 284:53]
      skip @[Cache.scala 284:41]
    node _T_116 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_117 = and(_T_116, needFlush) @[Cache.scala 285:23]
    when _T_117 : @[Cache.scala 285:37]
      needFlush <= UInt<1>("h00") @[Cache.scala 285:49]
      skip @[Cache.scala 285:37]
    reg value_1 : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Counter.scala 29:33]
    reg value_2 : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Counter.scala 29:33]
    reg state2 : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Cache.scala 291:23]
    node _T_118 = eq(state, UInt<4>("h03")) @[Cache.scala 293:39]
    node _T_119 = eq(state, UInt<4>("h08")) @[Cache.scala 293:66]
    node _T_120 = or(_T_118, _T_119) @[Cache.scala 293:57]
    node _T_121 = eq(state2, UInt<2>("h00")) @[Cache.scala 293:92]
    node _T_122 = and(_T_120, _T_121) @[Cache.scala 293:81]
    node _T_123 = eq(state, UInt<4>("h08")) @[Cache.scala 294:40]
    node _T_124 = mux(_T_123, value_1, value_2) @[Cache.scala 294:33]
    node _T_125 = cat(addr.index, _T_124) @[Cat.scala 29:58]
    io.dataReadBus.req.bits.setIdx <= _T_125 @[SRAMTemplate.scala 26:17]
    io.dataReadBus.req.valid <= _T_122 @[SRAMTemplate.scala 53:20]
    node _T_126 = eq(state2, UInt<2>("h01")) @[Cache.scala 295:60]
    reg dataWay : {data : UInt<64>}[4], clock @[Reg.scala 15:16]
    when _T_126 : @[Reg.scala 16:19]
      dataWay[0].data <= io.dataReadBus.resp.data[0].data @[Reg.scala 16:23]
      dataWay[1].data <= io.dataReadBus.resp.data[1].data @[Reg.scala 16:23]
      dataWay[2].data <= io.dataReadBus.resp.data[2].data @[Reg.scala 16:23]
      dataWay[3].data <= io.dataReadBus.resp.data[3].data @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _T_127 = bits(io.in.bits.waymask, 0, 0) @[Mux.scala 29:36]
    node _T_128 = bits(io.in.bits.waymask, 1, 1) @[Mux.scala 29:36]
    node _T_129 = bits(io.in.bits.waymask, 2, 2) @[Mux.scala 29:36]
    node _T_130 = bits(io.in.bits.waymask, 3, 3) @[Mux.scala 29:36]
    node _T_131 = mux(_T_127, dataWay[0].data, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_132 = mux(_T_128, dataWay[1].data, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_133 = mux(_T_129, dataWay[2].data, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_134 = mux(_T_130, dataWay[3].data, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_135 = or(_T_131, _T_132) @[Mux.scala 27:72]
    node _T_136 = or(_T_135, _T_133) @[Mux.scala 27:72]
    node _T_137 = or(_T_136, _T_134) @[Mux.scala 27:72]
    wire _T_138 : {data : UInt<64>} @[Mux.scala 27:72]
    wire _T_139 : UInt<64>
    _T_139 <= _T_137
    node _T_140 = bits(_T_139, 63, 0) @[Mux.scala 27:72]
    _T_138.data <= _T_140 @[Mux.scala 27:72]
    node _T_141 = eq(UInt<2>("h00"), state2) @[Conditional.scala 37:30]
    when _T_141 : @[Conditional.scala 40:58]
      node _T_142 = and(io.dataReadBus.req.ready, io.dataReadBus.req.valid) @[Decoupled.scala 40:37]
      when _T_142 : @[Cache.scala 299:53]
        state2 <= UInt<2>("h01") @[Cache.scala 299:62]
        skip @[Cache.scala 299:53]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_143 = eq(UInt<2>("h01"), state2) @[Conditional.scala 37:30]
      when _T_143 : @[Conditional.scala 39:67]
        state2 <= UInt<2>("h02") @[Cache.scala 300:35]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_144 = eq(UInt<2>("h02"), state2) @[Conditional.scala 37:30]
        when _T_144 : @[Conditional.scala 39:67]
          node _T_145 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
          node _T_146 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 40:37]
          node _T_147 = or(_T_145, _T_146) @[Cache.scala 301:46]
          node _T_148 = and(hitReadBurst, io.out.ready) @[Cache.scala 301:83]
          node _T_149 = or(_T_147, _T_148) @[Cache.scala 301:67]
          when _T_149 : @[Cache.scala 301:100]
            state2 <= UInt<2>("h00") @[Cache.scala 301:109]
            skip @[Cache.scala 301:100]
          skip @[Conditional.scala 39:67]
    node _T_150 = bits(io.in.bits.req.addr, 31, 3) @[Cache.scala 305:44]
    node raddr = cat(_T_150, UInt<3>("h00")) @[Cat.scala 29:58]
    node _T_151 = cat(meta.tag, addr.index) @[Cat.scala 29:58]
    node waddr = cat(_T_151, UInt<6>("h00")) @[Cat.scala 29:58]
    node _T_152 = eq(state, UInt<4>("h01")) @[Cache.scala 309:23]
    node _T_153 = eq(value_2, UInt<3>("h07")) @[Cache.scala 310:29]
    node _T_154 = mux(_T_153, UInt<3>("h07"), UInt<2>("h03")) @[Cache.scala 310:8]
    node cmd = mux(_T_152, UInt<2>("h02"), _T_154) @[Cache.scala 309:16]
    node _T_155 = eq(state, UInt<4>("h01")) @[Cache.scala 311:42]
    node _T_156 = mux(_T_155, raddr, waddr) @[Cache.scala 311:35]
    node _T_157 = mux(UInt<1>("h01"), UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    io.mem.req.bits.addr <= _T_156 @[SimpleBus.scala 64:15]
    io.mem.req.bits.cmd <= cmd @[SimpleBus.scala 65:14]
    io.mem.req.bits.size <= UInt<2>("h03") @[SimpleBus.scala 66:15]
    io.mem.req.bits.wdata <= _T_138.data @[SimpleBus.scala 67:16]
    io.mem.req.bits.wmask <= _T_157 @[SimpleBus.scala 68:16]
    io.mem.resp.ready <= UInt<1>("h01") @[Cache.scala 315:21]
    node _T_158 = eq(state, UInt<4>("h01")) @[Cache.scala 316:30]
    node _T_159 = eq(state, UInt<4>("h03")) @[Cache.scala 316:59]
    node _T_160 = eq(state2, UInt<2>("h02")) @[Cache.scala 316:89]
    node _T_161 = and(_T_159, _T_160) @[Cache.scala 316:78]
    node _T_162 = or(_T_158, _T_161) @[Cache.scala 316:48]
    io.mem.req.valid <= _T_162 @[Cache.scala 316:20]
    io.mmio.req.bits.wdata <= io.in.bits.req.wdata @[Cache.scala 319:20]
    io.mmio.req.bits.wmask <= io.in.bits.req.wmask @[Cache.scala 319:20]
    io.mmio.req.bits.cmd <= io.in.bits.req.cmd @[Cache.scala 319:20]
    io.mmio.req.bits.size <= io.in.bits.req.size @[Cache.scala 319:20]
    io.mmio.req.bits.addr <= io.in.bits.req.addr @[Cache.scala 319:20]
    io.mmio.resp.ready <= UInt<1>("h01") @[Cache.scala 320:22]
    node _T_163 = eq(state, UInt<4>("h05")) @[Cache.scala 321:31]
    io.mmio.req.valid <= _T_163 @[Cache.scala 321:21]
    reg afterFirstRead : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Cache.scala 323:31]
    node _T_164 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    reg alreadyOutFire : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Reg.scala 27:20]
    when _T_164 : @[Reg.scala 28:19]
      alreadyOutFire <= UInt<1>("h01") @[Reg.scala 28:23]
      skip @[Reg.scala 28:19]
    node _T_165 = eq(afterFirstRead, UInt<1>("h00")) @[Cache.scala 325:22]
    node _T_166 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
    node _T_167 = and(_T_165, _T_166) @[Cache.scala 325:38]
    node _T_168 = eq(state, UInt<4>("h02")) @[Cache.scala 325:70]
    node readingFirst = and(_T_167, _T_168) @[Cache.scala 325:60]
    node _T_169 = mux(mmio, io.mmio.resp.bits.rdata, io.mem.resp.bits.rdata) @[Cache.scala 326:39]
    node _T_170 = eq(state, UInt<4>("h06")) @[Cache.scala 327:52]
    node _T_171 = mux(mmio, _T_170, readingFirst) @[Cache.scala 327:39]
    reg inRdataRegDemand : UInt<64>, clock @[Reg.scala 15:16]
    when _T_171 : @[Reg.scala 16:19]
      inRdataRegDemand <= _T_169 @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _T_172 = eq(state, UInt<4>("h00")) @[Cache.scala 330:31]
    node _T_173 = and(_T_172, probe) @[Cache.scala 330:43]
    node _T_174 = eq(state, UInt<4>("h08")) @[Cache.scala 331:31]
    node _T_175 = eq(state2, UInt<2>("h02")) @[Cache.scala 331:57]
    node _T_176 = and(_T_174, _T_175) @[Cache.scala 331:46]
    node _T_177 = or(_T_173, _T_176) @[Cache.scala 330:53]
    io.cohResp.valid <= _T_177 @[Cache.scala 330:20]
    io.cohResp.bits.rdata <= _T_138.data @[Cache.scala 332:25]
    node _T_178 = eq(state, UInt<4>("h08")) @[Cache.scala 333:35]
    node _T_179 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 40:37]
    node _T_180 = and(_T_178, _T_179) @[Cache.scala 333:49]
    reg _T_181 : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Counter.scala 29:33]
    wire releaseLast : UInt<1>
    releaseLast <= UInt<1>("h00")
    when _T_180 : @[Counter.scala 67:17]
      node _T_182 = eq(_T_181, UInt<3>("h07")) @[Counter.scala 38:24]
      node _T_183 = add(_T_181, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_184 = tail(_T_183, 1) @[Counter.scala 39:22]
      _T_181 <= _T_184 @[Counter.scala 39:13]
      releaseLast <= _T_182 @[Counter.scala 67:24]
      skip @[Counter.scala 67:17]
    node _T_185 = eq(state, UInt<4>("h08")) @[Cache.scala 334:36]
    node _T_186 = mux(releaseLast, UInt<3>("h06"), UInt<1>("h00")) @[Cache.scala 334:54]
    node _T_187 = mux(hit, UInt<4>("h0c"), UInt<4>("h08")) @[Cache.scala 335:8]
    node _T_188 = mux(_T_185, _T_186, _T_187) @[Cache.scala 334:29]
    io.cohResp.bits.cmd <= _T_188 @[Cache.scala 334:23]
    node _T_189 = and(hitReadBurst, io.out.ready) @[Cache.scala 337:35]
    node _T_190 = eq(state2, UInt<2>("h02")) @[Cache.scala 337:61]
    node respToL1Fire = and(_T_189, _T_190) @[Cache.scala 337:51]
    node _T_191 = eq(state, UInt<4>("h00")) @[Cache.scala 338:37]
    node _T_192 = eq(state, UInt<4>("h08")) @[Cache.scala 338:57]
    node _T_193 = eq(state2, UInt<2>("h02")) @[Cache.scala 338:81]
    node _T_194 = and(_T_192, _T_193) @[Cache.scala 338:71]
    node _T_195 = or(_T_191, _T_194) @[Cache.scala 338:48]
    node _T_196 = and(_T_195, hitReadBurst) @[Cache.scala 338:96]
    node _T_197 = and(_T_196, io.out.ready) @[Cache.scala 338:112]
    reg _T_198 : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Counter.scala 29:33]
    wire respToL1Last : UInt<1>
    respToL1Last <= UInt<1>("h00")
    when _T_197 : @[Counter.scala 67:17]
      node _T_199 = eq(_T_198, UInt<3>("h07")) @[Counter.scala 38:24]
      node _T_200 = add(_T_198, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_201 = tail(_T_200, 1) @[Counter.scala 39:22]
      _T_198 <= _T_201 @[Counter.scala 39:13]
      respToL1Last <= _T_199 @[Counter.scala 67:24]
      skip @[Counter.scala 67:17]
    node _T_202 = eq(UInt<4>("h00"), state) @[Conditional.scala 37:30]
    when _T_202 : @[Conditional.scala 40:58]
      afterFirstRead <= UInt<1>("h00") @[Cache.scala 342:22]
      alreadyOutFire <= UInt<1>("h00") @[Cache.scala 343:22]
      when probe : @[Cache.scala 345:20]
        node _T_203 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 40:37]
        when _T_203 : @[Cache.scala 346:34]
          node _T_204 = mux(hit, UInt<4>("h08"), UInt<4>("h00")) @[Cache.scala 347:23]
          state <= _T_204 @[Cache.scala 347:17]
          value_1 <= addr.wordIndex @[Cache.scala 348:29]
          skip @[Cache.scala 346:34]
        skip @[Cache.scala 345:20]
      else : @[Cache.scala 350:50]
        node _T_205 = and(hitReadBurst, io.out.ready) @[Cache.scala 350:33]
        when _T_205 : @[Cache.scala 350:50]
          state <= UInt<4>("h08") @[Cache.scala 351:15]
          node _T_206 = eq(addr.wordIndex, UInt<3>("h07")) @[Cache.scala 352:49]
          node _T_207 = add(addr.wordIndex, UInt<1>("h01")) @[Cache.scala 352:93]
          node _T_208 = tail(_T_207, 1) @[Cache.scala 352:93]
          node _T_209 = mux(_T_206, UInt<1>("h00"), _T_208) @[Cache.scala 352:33]
          value_1 <= _T_209 @[Cache.scala 352:27]
          skip @[Cache.scala 350:50]
        else : @[Cache.scala 353:49]
          node _T_210 = or(miss, mmio) @[Cache.scala 353:26]
          node _T_211 = eq(io.flush, UInt<1>("h00")) @[Cache.scala 353:38]
          node _T_212 = and(_T_210, _T_211) @[Cache.scala 353:35]
          when _T_212 : @[Cache.scala 353:49]
            node _T_213 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Cache.scala 354:43]
            node _T_214 = and(_T_213, meta.dirty) @[Cache.scala 354:49]
            node _T_215 = mux(_T_214, UInt<4>("h03"), UInt<4>("h01")) @[Cache.scala 354:42]
            node _T_216 = mux(mmio, UInt<4>("h05"), _T_215) @[Cache.scala 354:21]
            state <= _T_216 @[Cache.scala 354:15]
            skip @[Cache.scala 353:49]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_217 = eq(UInt<4>("h05"), state) @[Conditional.scala 37:30]
      when _T_217 : @[Conditional.scala 39:67]
        node _T_218 = and(io.mmio.req.ready, io.mmio.req.valid) @[Decoupled.scala 40:37]
        when _T_218 : @[Cache.scala 358:48]
          state <= UInt<4>("h06") @[Cache.scala 358:56]
          skip @[Cache.scala 358:48]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_219 = eq(UInt<4>("h06"), state) @[Conditional.scala 37:30]
        when _T_219 : @[Conditional.scala 39:67]
          node _T_220 = and(io.mmio.resp.ready, io.mmio.resp.valid) @[Decoupled.scala 40:37]
          when _T_220 : @[Cache.scala 359:50]
            state <= UInt<4>("h07") @[Cache.scala 359:58]
            skip @[Cache.scala 359:50]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_221 = eq(UInt<4>("h08"), state) @[Conditional.scala 37:30]
          when _T_221 : @[Conditional.scala 39:67]
            node _T_222 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 40:37]
            node _T_223 = or(_T_222, respToL1Fire) @[Cache.scala 362:31]
            when _T_223 : @[Cache.scala 362:48]
              node _T_224 = eq(value_1, UInt<3>("h07")) @[Counter.scala 38:24]
              node _T_225 = add(value_1, UInt<1>("h01")) @[Counter.scala 39:22]
              node _T_226 = tail(_T_225, 1) @[Counter.scala 39:22]
              value_1 <= _T_226 @[Counter.scala 39:13]
              skip @[Cache.scala 362:48]
            node _T_227 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 40:37]
            node _T_228 = and(probe, _T_227) @[Cache.scala 363:19]
            node _T_229 = and(_T_228, releaseLast) @[Cache.scala 363:40]
            node _T_230 = and(respToL1Fire, respToL1Last) @[Cache.scala 363:71]
            node _T_231 = or(_T_229, _T_230) @[Cache.scala 363:55]
            when _T_231 : @[Cache.scala 363:88]
              state <= UInt<4>("h00") @[Cache.scala 363:96]
              skip @[Cache.scala 363:88]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_232 = eq(UInt<4>("h01"), state) @[Conditional.scala 37:30]
            when _T_232 : @[Conditional.scala 39:67]
              node _T_233 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
              when _T_233 : @[Cache.scala 366:50]
                state <= UInt<4>("h02") @[Cache.scala 367:13]
                value_1 <= addr.wordIndex @[Cache.scala 368:25]
                skip @[Cache.scala 366:50]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_234 = eq(UInt<4>("h02"), state) @[Conditional.scala 37:30]
              when _T_234 : @[Conditional.scala 39:67]
                node _T_235 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
                when _T_235 : @[Cache.scala 372:33]
                  afterFirstRead <= UInt<1>("h01") @[Cache.scala 373:24]
                  node _T_236 = eq(value_1, UInt<3>("h07")) @[Counter.scala 38:24]
                  node _T_237 = add(value_1, UInt<1>("h01")) @[Counter.scala 39:22]
                  node _T_238 = tail(_T_237, 1) @[Counter.scala 39:22]
                  value_1 <= _T_238 @[Counter.scala 39:13]
                  node _T_239 = eq(io.in.bits.req.cmd, UInt<2>("h03")) @[Cache.scala 375:23]
                  when _T_239 : @[Cache.scala 375:52]
                    value <= UInt<1>("h00") @[Cache.scala 375:75]
                    skip @[Cache.scala 375:52]
                  node _T_240 = eq(io.mem.resp.bits.cmd, UInt<3>("h06")) @[SimpleBus.scala 91:26]
                  when _T_240 : @[Cache.scala 376:46]
                    state <= UInt<4>("h07") @[Cache.scala 376:54]
                    skip @[Cache.scala 376:46]
                  skip @[Cache.scala 372:33]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_241 = eq(UInt<4>("h03"), state) @[Conditional.scala 37:30]
                when _T_241 : @[Conditional.scala 39:67]
                  node _T_242 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
                  when _T_242 : @[Cache.scala 381:32]
                    node _T_243 = eq(value_2, UInt<3>("h07")) @[Counter.scala 38:24]
                    node _T_244 = add(value_2, UInt<1>("h01")) @[Counter.scala 39:22]
                    node _T_245 = tail(_T_244, 1) @[Counter.scala 39:22]
                    value_2 <= _T_245 @[Counter.scala 39:13]
                    skip @[Cache.scala 381:32]
                  node _T_246 = eq(io.mem.req.bits.cmd, UInt<3>("h07")) @[SimpleBus.scala 78:27]
                  node _T_247 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
                  node _T_248 = and(_T_246, _T_247) @[Cache.scala 382:43]
                  when _T_248 : @[Cache.scala 382:65]
                    state <= UInt<4>("h04") @[Cache.scala 382:73]
                    skip @[Cache.scala 382:65]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_249 = eq(UInt<4>("h04"), state) @[Conditional.scala 37:30]
                  when _T_249 : @[Conditional.scala 39:67]
                    node _T_250 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
                    when _T_250 : @[Cache.scala 385:53]
                      state <= UInt<4>("h01") @[Cache.scala 385:61]
                      skip @[Cache.scala 385:53]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_251 = eq(UInt<4>("h07"), state) @[Conditional.scala 37:30]
                    when _T_251 : @[Conditional.scala 39:67]
                      node _T_252 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
                      node _T_253 = or(_T_252, needFlush) @[Cache.scala 386:44]
                      node _T_254 = or(_T_253, alreadyOutFire) @[Cache.scala 386:57]
                      when _T_254 : @[Cache.scala 386:76]
                        state <= UInt<4>("h00") @[Cache.scala 386:84]
                        skip @[Cache.scala 386:76]
                      skip @[Conditional.scala 39:67]
    node _T_255 = mux(readingFirst, wordMask, UInt<64>("h00")) @[Cache.scala 389:67]
    node _T_256 = and(io.in.bits.req.wdata, _T_255) @[BitUtils.scala 32:13]
    node _T_257 = not(_T_255) @[BitUtils.scala 32:38]
    node _T_258 = and(io.mem.resp.bits.rdata, _T_257) @[BitUtils.scala 32:36]
    node dataRefill = or(_T_256, _T_258) @[BitUtils.scala 32:25]
    wire dataRefillWriteBus : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<12>, data : {data : UInt<64>}, waymask : UInt<4>}}} @[Cache.scala 390:32]
    node _T_259 = eq(state, UInt<4>("h02")) @[Cache.scala 391:20]
    node _T_260 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
    node _T_261 = and(_T_259, _T_260) @[Cache.scala 391:39]
    node _T_262 = cat(addr.index, value_1) @[Cat.scala 29:58]
    wire _T_263 : {data : UInt<64>} @[Cache.scala 392:16]
    _T_263.data <= dataRefill @[Cache.scala 106:15]
    dataRefillWriteBus.req.bits.setIdx <= _T_262 @[SRAMTemplate.scala 26:17]
    dataRefillWriteBus.req.bits.data.data <= _T_263.data @[SRAMTemplate.scala 37:15]
    dataRefillWriteBus.req.bits.waymask <= io.in.bits.waymask @[SRAMTemplate.scala 38:24]
    dataRefillWriteBus.req.valid <= _T_261 @[SRAMTemplate.scala 63:20]
    dataWriteArb.io.in[0].bits.waymask <= dataHitWriteBus.req.bits.waymask @[Cache.scala 394:25]
    dataWriteArb.io.in[0].bits.data.data <= dataHitWriteBus.req.bits.data.data @[Cache.scala 394:25]
    dataWriteArb.io.in[0].bits.setIdx <= dataHitWriteBus.req.bits.setIdx @[Cache.scala 394:25]
    dataWriteArb.io.in[0].valid <= dataHitWriteBus.req.valid @[Cache.scala 394:25]
    dataHitWriteBus.req.ready <= dataWriteArb.io.in[0].ready @[Cache.scala 394:25]
    dataWriteArb.io.in[1].bits.waymask <= dataRefillWriteBus.req.bits.waymask @[Cache.scala 395:25]
    dataWriteArb.io.in[1].bits.data.data <= dataRefillWriteBus.req.bits.data.data @[Cache.scala 395:25]
    dataWriteArb.io.in[1].bits.setIdx <= dataRefillWriteBus.req.bits.setIdx @[Cache.scala 395:25]
    dataWriteArb.io.in[1].valid <= dataRefillWriteBus.req.valid @[Cache.scala 395:25]
    dataRefillWriteBus.req.ready <= dataWriteArb.io.in[1].ready @[Cache.scala 395:25]
    io.dataWriteBus.req.bits.waymask <= dataWriteArb.io.out.bits.waymask @[Cache.scala 396:23]
    io.dataWriteBus.req.bits.data.data <= dataWriteArb.io.out.bits.data.data @[Cache.scala 396:23]
    io.dataWriteBus.req.bits.setIdx <= dataWriteArb.io.out.bits.setIdx @[Cache.scala 396:23]
    io.dataWriteBus.req.valid <= dataWriteArb.io.out.valid @[Cache.scala 396:23]
    dataWriteArb.io.out.ready <= io.dataWriteBus.req.ready @[Cache.scala 396:23]
    wire metaRefillWriteBus : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<9>, data : {tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}} @[Cache.scala 398:32]
    node _T_264 = eq(state, UInt<4>("h02")) @[Cache.scala 399:20]
    node _T_265 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
    node _T_266 = and(_T_264, _T_265) @[Cache.scala 399:39]
    node _T_267 = eq(io.mem.resp.bits.cmd, UInt<3>("h06")) @[SimpleBus.scala 91:26]
    node _T_268 = and(_T_266, _T_267) @[Cache.scala 399:61]
    wire _T_269 : {tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>} @[Cache.scala 400:16]
    node _T_270 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Cache.scala 400:79]
    node _T_271 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_272 = and(_T_270, _T_271) @[Cache.scala 400:85]
    _T_269.tag <= addr.tag @[Cache.scala 95:14]
    _T_269.valid <= UInt<1>("h01") @[Cache.scala 96:16]
    _T_269.dirty <= _T_272 @[Cache.scala 97:16]
    wire _T_273 : {tag : UInt<17>, index : UInt<9>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _T_274 : UInt<32>
    _T_274 <= io.in.bits.req.addr
    node _T_275 = bits(_T_274, 2, 0) @[Cache.scala 79:45]
    _T_273.byteOffset <= _T_275 @[Cache.scala 79:45]
    node _T_276 = bits(_T_274, 5, 3) @[Cache.scala 79:45]
    _T_273.wordIndex <= _T_276 @[Cache.scala 79:45]
    node _T_277 = bits(_T_274, 14, 6) @[Cache.scala 79:45]
    _T_273.index <= _T_277 @[Cache.scala 79:45]
    node _T_278 = bits(_T_274, 31, 15) @[Cache.scala 79:45]
    _T_273.tag <= _T_278 @[Cache.scala 79:45]
    metaRefillWriteBus.req.bits.setIdx <= _T_273.index @[SRAMTemplate.scala 26:17]
    metaRefillWriteBus.req.bits.data.dirty <= _T_269.dirty @[SRAMTemplate.scala 37:15]
    metaRefillWriteBus.req.bits.data.valid <= _T_269.valid @[SRAMTemplate.scala 37:15]
    metaRefillWriteBus.req.bits.data.tag <= _T_269.tag @[SRAMTemplate.scala 37:15]
    metaRefillWriteBus.req.bits.waymask <= io.in.bits.waymask @[SRAMTemplate.scala 38:24]
    metaRefillWriteBus.req.valid <= _T_268 @[SRAMTemplate.scala 63:20]
    metaWriteArb.io.in[0].bits.waymask <= metaHitWriteBus.req.bits.waymask @[Cache.scala 404:25]
    metaWriteArb.io.in[0].bits.data.dirty <= metaHitWriteBus.req.bits.data.dirty @[Cache.scala 404:25]
    metaWriteArb.io.in[0].bits.data.valid <= metaHitWriteBus.req.bits.data.valid @[Cache.scala 404:25]
    metaWriteArb.io.in[0].bits.data.tag <= metaHitWriteBus.req.bits.data.tag @[Cache.scala 404:25]
    metaWriteArb.io.in[0].bits.setIdx <= metaHitWriteBus.req.bits.setIdx @[Cache.scala 404:25]
    metaWriteArb.io.in[0].valid <= metaHitWriteBus.req.valid @[Cache.scala 404:25]
    metaHitWriteBus.req.ready <= metaWriteArb.io.in[0].ready @[Cache.scala 404:25]
    metaWriteArb.io.in[1].bits.waymask <= metaRefillWriteBus.req.bits.waymask @[Cache.scala 405:25]
    metaWriteArb.io.in[1].bits.data.dirty <= metaRefillWriteBus.req.bits.data.dirty @[Cache.scala 405:25]
    metaWriteArb.io.in[1].bits.data.valid <= metaRefillWriteBus.req.bits.data.valid @[Cache.scala 405:25]
    metaWriteArb.io.in[1].bits.data.tag <= metaRefillWriteBus.req.bits.data.tag @[Cache.scala 405:25]
    metaWriteArb.io.in[1].bits.setIdx <= metaRefillWriteBus.req.bits.setIdx @[Cache.scala 405:25]
    metaWriteArb.io.in[1].valid <= metaRefillWriteBus.req.valid @[Cache.scala 405:25]
    metaRefillWriteBus.req.ready <= metaWriteArb.io.in[1].ready @[Cache.scala 405:25]
    io.metaWriteBus.req.bits.waymask <= metaWriteArb.io.out.bits.waymask @[Cache.scala 406:23]
    io.metaWriteBus.req.bits.data.dirty <= metaWriteArb.io.out.bits.data.dirty @[Cache.scala 406:23]
    io.metaWriteBus.req.bits.data.valid <= metaWriteArb.io.out.bits.data.valid @[Cache.scala 406:23]
    io.metaWriteBus.req.bits.data.tag <= metaWriteArb.io.out.bits.data.tag @[Cache.scala 406:23]
    io.metaWriteBus.req.bits.setIdx <= metaWriteArb.io.out.bits.setIdx @[Cache.scala 406:23]
    io.metaWriteBus.req.valid <= metaWriteArb.io.out.valid @[Cache.scala 406:23]
    metaWriteArb.io.out.ready <= io.metaWriteBus.req.ready @[Cache.scala 406:23]
    node _T_279 = eq(state, UInt<4>("h02")) @[Cache.scala 409:18]
    node _T_280 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
    node _T_281 = and(_T_279, _T_280) @[Cache.scala 409:37]
    node _T_282 = eq(io.in.bits.req.cmd, UInt<2>("h02")) @[SimpleBus.scala 76:27]
    node _T_283 = and(_T_281, _T_282) @[Cache.scala 409:59]
    when _T_283 : @[Cache.scala 409:81]
      io.out.bits.rdata <= dataRefill @[Cache.scala 411:25]
      node _T_284 = eq(io.mem.resp.bits.cmd, UInt<3>("h06")) @[SimpleBus.scala 91:26]
      node _T_285 = mux(_T_284, UInt<3>("h06"), UInt<2>("h02")) @[Cache.scala 412:29]
      io.out.bits.cmd <= _T_285 @[Cache.scala 412:23]
      skip @[Cache.scala 409:81]
    else : @[Cache.scala 413:75]
      node _T_286 = eq(io.in.bits.req.cmd, UInt<3>("h07")) @[SimpleBus.scala 78:27]
      node _T_287 = eq(io.in.bits.req.cmd, UInt<2>("h03")) @[Cache.scala 413:46]
      node _T_288 = or(_T_286, _T_287) @[Cache.scala 413:35]
      when _T_288 : @[Cache.scala 413:75]
        node _T_289 = mux(hit, dataRead, inRdataRegDemand) @[Cache.scala 415:31]
        io.out.bits.rdata <= _T_289 @[Cache.scala 415:25]
        io.out.bits.cmd is invalid @[Cache.scala 416:23]
        skip @[Cache.scala 413:75]
      else : @[Cache.scala 417:54]
        node _T_290 = eq(state, UInt<4>("h08")) @[Cache.scala 417:39]
        node _T_291 = and(hitReadBurst, _T_290) @[Cache.scala 417:30]
        when _T_291 : @[Cache.scala 417:54]
          io.out.bits.rdata <= _T_138.data @[Cache.scala 419:25]
          node _T_292 = mux(respToL1Last, UInt<3>("h06"), UInt<2>("h02")) @[Cache.scala 420:29]
          io.out.bits.cmd <= _T_292 @[Cache.scala 420:23]
          skip @[Cache.scala 417:54]
        else : @[Cache.scala 421:17]
          node _T_293 = mux(hit, dataRead, inRdataRegDemand) @[Cache.scala 422:31]
          io.out.bits.rdata <= _T_293 @[Cache.scala 422:25]
          io.out.bits.cmd <= io.in.bits.req.cmd @[Cache.scala 423:23]
          skip @[Cache.scala 421:17]
    node _T_294 = bits(io.in.bits.req.cmd, 1, 1) @[SimpleBus.scala 75:22]
    node _T_295 = and(_T_294, UInt<1>("h01")) @[Cache.scala 432:52]
    node _T_296 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_297 = eq(hit, UInt<1>("h00")) @[Cache.scala 433:34]
    node _T_298 = eq(state, UInt<4>("h07")) @[Cache.scala 433:48]
    node _T_299 = and(_T_297, _T_298) @[Cache.scala 433:39]
    node _T_300 = or(hit, _T_299) @[Cache.scala 433:31]
    node _T_301 = and(_T_296, _T_300) @[Cache.scala 433:23]
    node _T_302 = eq(state, UInt<4>("h02")) @[Cache.scala 433:81]
    node _T_303 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
    node _T_304 = and(_T_302, _T_303) @[Cache.scala 433:99]
    node _T_305 = eq(io.in.bits.req.cmd, UInt<2>("h02")) @[Cache.scala 433:132]
    node _T_306 = and(_T_304, _T_305) @[Cache.scala 433:121]
    node _T_307 = mux(_T_301, UInt<1>("h01"), _T_306) @[Cache.scala 433:8]
    node _T_308 = and(respToL1Fire, respToL1Last) @[Cache.scala 433:178]
    node _T_309 = eq(state, UInt<4>("h08")) @[Cache.scala 433:203]
    node _T_310 = and(_T_308, _T_309) @[Cache.scala 433:194]
    node _T_311 = or(_T_307, _T_310) @[Cache.scala 433:161]
    node _T_312 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_313 = or(_T_312, mmio) @[Cache.scala 434:60]
    node _T_314 = eq(state, UInt<4>("h07")) @[Cache.scala 434:75]
    node _T_315 = eq(alreadyOutFire, UInt<1>("h00")) @[Cache.scala 434:110]
    node _T_316 = and(afterFirstRead, _T_315) @[Cache.scala 434:107]
    node _T_317 = mux(_T_313, _T_314, _T_316) @[Cache.scala 434:45]
    node _T_318 = mux(hit, UInt<1>("h01"), _T_317) @[Cache.scala 434:28]
    node _T_319 = mux(probe, UInt<1>("h00"), _T_318) @[Cache.scala 434:8]
    node _T_320 = mux(_T_295, _T_311, _T_319) @[Cache.scala 432:37]
    node _T_321 = and(io.in.valid, _T_320) @[Cache.scala 432:31]
    io.out.valid <= _T_321 @[Cache.scala 432:16]
    node _T_322 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 40:37]
    node _T_323 = eq(state, UInt<4>("h00")) @[Cache.scala 441:66]
    node _T_324 = eq(state, UInt<4>("h08")) @[Cache.scala 441:85]
    node _T_325 = and(_T_324, releaseLast) @[Cache.scala 441:100]
    node _T_326 = mux(miss, _T_323, _T_325) @[Cache.scala 441:53]
    node _T_327 = and(_T_322, _T_326) @[Cache.scala 441:47]
    node _T_328 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_329 = or(hit, _T_328) @[Cache.scala 442:13]
    node _T_330 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_331 = eq(state, UInt<4>("h07")) @[Cache.scala 442:53]
    node _T_332 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_333 = or(_T_332, alreadyOutFire) @[Cache.scala 442:88]
    node _T_334 = and(_T_331, _T_333) @[Cache.scala 442:70]
    node _T_335 = mux(_T_329, _T_330, _T_334) @[Cache.scala 442:8]
    node _T_336 = mux(probe, _T_327, _T_335) @[Cache.scala 441:21]
    io.isFinish <= _T_336 @[Cache.scala 441:15]
    node _T_337 = eq(state, UInt<4>("h00")) @[Cache.scala 445:41]
    node _T_338 = eq(hitReadBurst, UInt<1>("h00")) @[Cache.scala 445:55]
    node _T_339 = and(_T_337, _T_338) @[Cache.scala 445:52]
    node _T_340 = and(io.out.ready, _T_339) @[Cache.scala 445:31]
    node _T_341 = eq(miss, UInt<1>("h00")) @[Cache.scala 445:73]
    node _T_342 = and(_T_340, _T_341) @[Cache.scala 445:70]
    node _T_343 = eq(probe, UInt<1>("h00")) @[Cache.scala 445:82]
    node _T_344 = and(_T_342, _T_343) @[Cache.scala 445:79]
    io.in.ready <= _T_344 @[Cache.scala 445:15]
    node _T_345 = eq(state, UInt<4>("h00")) @[Cache.scala 446:49]
    node _T_346 = and(_T_345, io.out.ready) @[Cache.scala 446:60]
    node _T_347 = eq(state, UInt<4>("h08")) @[Cache.scala 446:85]
    node _T_348 = eq(state2, UInt<2>("h02")) @[Cache.scala 446:109]
    node _T_349 = and(_T_347, _T_348) @[Cache.scala 446:99]
    node _T_350 = or(_T_346, _T_349) @[Cache.scala 446:76]
    node _T_351 = and(hitReadBurst, _T_350) @[Cache.scala 446:39]
    io.dataReadRespToL1 <= _T_351 @[Cache.scala 446:23]
    node _T_352 = and(metaHitWriteBus.req.valid, metaRefillWriteBus.req.valid) @[Cache.scala 448:38]
    node _T_353 = eq(_T_352, UInt<1>("h00")) @[Cache.scala 448:10]
    node _T_354 = asUInt(reset) @[Cache.scala 448:9]
    node _T_355 = or(_T_353, _T_354) @[Cache.scala 448:9]
    node _T_356 = eq(_T_355, UInt<1>("h00")) @[Cache.scala 448:9]
    when _T_356 : @[Cache.scala 448:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at Cache.scala:448 assert(!(metaHitWriteBus.req.valid && metaRefillWriteBus.req.valid))\n") @[Cache.scala 448:9]
      stop(clock, UInt<1>(1), 1) @[Cache.scala 448:9]
      skip @[Cache.scala 448:9]
    node _T_357 = and(dataHitWriteBus.req.valid, dataRefillWriteBus.req.valid) @[Cache.scala 449:38]
    node _T_358 = eq(_T_357, UInt<1>("h00")) @[Cache.scala 449:10]
    node _T_359 = asUInt(reset) @[Cache.scala 449:9]
    node _T_360 = or(_T_358, _T_359) @[Cache.scala 449:9]
    node _T_361 = eq(_T_360, UInt<1>("h00")) @[Cache.scala 449:9]
    when _T_361 : @[Cache.scala 449:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at Cache.scala:449 assert(!(dataHitWriteBus.req.valid && dataRefillWriteBus.req.valid))\n") @[Cache.scala 449:9]
      stop(clock, UInt<1>(1), 1) @[Cache.scala 449:9]
      skip @[Cache.scala 449:9]
    node _T_362 = eq(UInt<1>("h00"), UInt<1>("h00")) @[Cache.scala 450:12]
    node _T_363 = and(_T_362, io.flush) @[Cache.scala 450:18]
    node _T_364 = eq(_T_363, UInt<1>("h00")) @[Cache.scala 450:10]
    node _T_365 = asUInt(reset) @[Cache.scala 450:9]
    node _T_366 = or(_T_364, _T_365) @[Cache.scala 450:9]
    node _T_367 = eq(_T_366, UInt<1>("h00")) @[Cache.scala 450:9]
    when _T_367 : @[Cache.scala 450:9]
      printf(clock, UInt<1>(1), "Assertion failed: only allow to flush icache\n    at Cache.scala:450 assert(!(!ro.B && io.flush), \"only allow to flush icache\")\n") @[Cache.scala 450:9]
      stop(clock, UInt<1>(1), 1) @[Cache.scala 450:9]
      skip @[Cache.scala 450:9]
    wire _T_368 : {tag : UInt<17>, index : UInt<9>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _T_369 : UInt<32>
    _T_369 <= io.in.bits.req.addr
    node _T_370 = bits(_T_369, 2, 0) @[Cache.scala 79:45]
    _T_368.byteOffset <= _T_370 @[Cache.scala 79:45]
    node _T_371 = bits(_T_369, 5, 3) @[Cache.scala 79:45]
    _T_368.wordIndex <= _T_371 @[Cache.scala 79:45]
    node _T_372 = bits(_T_369, 14, 6) @[Cache.scala 79:45]
    _T_368.index <= _T_372 @[Cache.scala 79:45]
    node _T_373 = bits(_T_369, 31, 15) @[Cache.scala 79:45]
    _T_368.tag <= _T_373 @[Cache.scala 79:45]
    node _T_374 = cat(io.in.bits.datas[1].data, io.in.bits.datas[0].data) @[Cache.scala 451:465]
    node _T_375 = cat(io.in.bits.datas[3].data, io.in.bits.datas[2].data) @[Cache.scala 451:465]
    node _T_376 = cat(_T_375, _T_374) @[Cache.scala 451:465]
    reg _T_377 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_378 = add(_T_377, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_379 = tail(_T_378, 1) @[GTimer.scala 25:12]
    _T_377 <= _T_379 @[GTimer.scala 25:7]
    wire _T_380 : UInt<1>
    _T_380 <= UInt<1>("h00")
    node _T_381 = and(UInt<1>("h01"), _T_380) @[Debug.scala 55:16]
    when _T_381 : @[Debug.scala 55:31]
      node _T_382 = asUInt(reset) @[Debug.scala 56:24]
      node _T_383 = eq(_T_382, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_383 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage3_2: ", _T_377) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_384 = asUInt(reset) @[Debug.scala 57:13]
      node _T_385 = eq(_T_384, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_385 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), " metaread idx %x waymask %b metas %x%x:%x %x%x:%x %x%x:%x %x%x:%x %x\n", _T_368.index, io.in.bits.waymask, io.in.bits.metas[0].valid, io.in.bits.metas[0].dirty, io.in.bits.metas[0].tag, io.in.bits.metas[1].valid, io.in.bits.metas[1].dirty, io.in.bits.metas[1].tag, io.in.bits.metas[2].valid, io.in.bits.metas[2].dirty, io.in.bits.metas[2].tag, io.in.bits.metas[3].valid, io.in.bits.metas[3].dirty, io.in.bits.metas[3].tag, _T_376) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_386 = and(io.metaWriteBus.req.ready, io.metaWriteBus.req.valid) @[Decoupled.scala 40:37]
    reg _T_387 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_388 = add(_T_387, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_389 = tail(_T_388, 1) @[GTimer.scala 25:12]
    _T_387 <= _T_389 @[GTimer.scala 25:7]
    reg _T_390 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_391 = add(_T_390, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_392 = tail(_T_391, 1) @[GTimer.scala 25:12]
    _T_390 <= _T_392 @[GTimer.scala 25:7]
    wire _T_393 : UInt<1>
    _T_393 <= UInt<1>("h00")
    node _T_394 = and(_T_386, _T_393) @[Debug.scala 55:16]
    when _T_394 : @[Debug.scala 55:31]
      node _T_395 = asUInt(reset) @[Debug.scala 56:24]
      node _T_396 = eq(_T_395, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_396 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage3_2: ", _T_390) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_397 = asUInt(reset) @[Debug.scala 57:13]
      node _T_398 = eq(_T_397, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_398 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "%d: [l2cache S3]: metawrite idx %x wmask %b meta %x%x:%x\n", _T_387, io.metaWriteBus.req.bits.setIdx, io.metaWriteBus.req.bits.waymask, io.metaWriteBus.req.bits.data.valid, io.metaWriteBus.req.bits.data.dirty, io.metaWriteBus.req.bits.data.tag) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    reg _T_399 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_400 = add(_T_399, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_401 = tail(_T_400, 1) @[GTimer.scala 25:12]
    _T_399 <= _T_401 @[GTimer.scala 25:7]
    wire _T_402 : UInt<1>
    _T_402 <= UInt<1>("h00")
    node _T_403 = and(UInt<1>("h01"), _T_402) @[Debug.scala 55:16]
    when _T_403 : @[Debug.scala 55:31]
      node _T_404 = asUInt(reset) @[Debug.scala 56:24]
      node _T_405 = eq(_T_404, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_405 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage3_2: ", _T_399) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_406 = asUInt(reset) @[Debug.scala 57:13]
      node _T_407 = eq(_T_406, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_407 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), " in.ready = %d, in.valid = %d, hit = %x, state = %d, addr = %x cmd:%d probe:%d isFinish:%d\n", io.in.ready, io.in.valid, hit, state, io.in.bits.req.addr, io.in.bits.req.cmd, probe, io.isFinish) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    reg _T_408 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_409 = add(_T_408, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_410 = tail(_T_409, 1) @[GTimer.scala 25:12]
    _T_408 <= _T_410 @[GTimer.scala 25:7]
    wire _T_411 : UInt<1>
    _T_411 <= UInt<1>("h00")
    node _T_412 = and(UInt<1>("h01"), _T_411) @[Debug.scala 55:16]
    when _T_412 : @[Debug.scala 55:31]
      node _T_413 = asUInt(reset) @[Debug.scala 56:24]
      node _T_414 = eq(_T_413, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_414 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage3_2: ", _T_408) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_415 = asUInt(reset) @[Debug.scala 57:13]
      node _T_416 = eq(_T_415, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_416 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), " out.valid:%d rdata:%x cmd:%d user:%x id:%x \n", io.out.valid, io.out.bits.rdata, io.out.bits.cmd, UInt<1>("h00"), UInt<1>("h00")) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    reg _T_417 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_418 = add(_T_417, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_419 = tail(_T_418, 1) @[GTimer.scala 25:12]
    _T_417 <= _T_419 @[GTimer.scala 25:7]
    wire _T_420 : UInt<1>
    _T_420 <= UInt<1>("h00")
    node _T_421 = and(UInt<1>("h01"), _T_420) @[Debug.scala 55:16]
    when _T_421 : @[Debug.scala 55:31]
      node _T_422 = asUInt(reset) @[Debug.scala 56:24]
      node _T_423 = eq(_T_422, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_423 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage3_2: ", _T_417) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_424 = asUInt(reset) @[Debug.scala 57:13]
      node _T_425 = eq(_T_424, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_425 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), " DHW: (%d, %d), data:%x setIdx:%x MHW:(%d, %d)\n", dataHitWriteBus.req.valid, dataHitWriteBus.req.ready, dataHitWriteBus.req.bits.data.data, dataHitWriteBus.req.bits.setIdx, metaHitWriteBus.req.valid, metaHitWriteBus.req.ready) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_426 = cat(io.in.bits.datas[1].data, io.in.bits.datas[0].data) @[Cache.scala 456:48]
    node _T_427 = cat(io.in.bits.datas[3].data, io.in.bits.datas[2].data) @[Cache.scala 456:48]
    node _T_428 = cat(_T_427, _T_426) @[Cache.scala 456:48]
    reg _T_429 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_430 = add(_T_429, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_431 = tail(_T_430, 1) @[GTimer.scala 25:12]
    _T_429 <= _T_431 @[GTimer.scala 25:7]
    wire _T_432 : UInt<1>
    _T_432 <= UInt<1>("h00")
    node _T_433 = and(UInt<1>("h01"), _T_432) @[Debug.scala 55:16]
    when _T_433 : @[Debug.scala 55:31]
      node _T_434 = asUInt(reset) @[Debug.scala 56:24]
      node _T_435 = eq(_T_434, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_435 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage3_2: ", _T_429) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_436 = asUInt(reset) @[Debug.scala 57:13]
      node _T_437 = eq(_T_436, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_437 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), " DreadCache: %x \n", _T_428) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    reg _T_438 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_439 = add(_T_438, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_440 = tail(_T_439, 1) @[GTimer.scala 25:12]
    _T_438 <= _T_440 @[GTimer.scala 25:7]
    wire _T_441 : UInt<1>
    _T_441 <= UInt<1>("h00")
    node _T_442 = and(UInt<1>("h01"), _T_441) @[Debug.scala 55:16]
    when _T_442 : @[Debug.scala 55:31]
      node _T_443 = asUInt(reset) @[Debug.scala 56:24]
      node _T_444 = eq(_T_443, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_444 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage3_2: ", _T_438) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_445 = asUInt(reset) @[Debug.scala 57:13]
      node _T_446 = eq(_T_445, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_446 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), " useFD:%d isFD:%d FD:%x DreadArray:%x dataRead:%x inwaymask:%x FDwaymask:%x \n", useForwardData, io.in.bits.isForwardData, io.in.bits.forwardData.data.data, _T_49.data, dataRead, io.in.bits.waymask, io.in.bits.forwardData.waymask) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_447 = and(io.dataWriteBus.req.ready, io.dataWriteBus.req.valid) @[Decoupled.scala 40:37]
    reg _T_448 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_449 = add(_T_448, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_450 = tail(_T_449, 1) @[GTimer.scala 25:12]
    _T_448 <= _T_450 @[GTimer.scala 25:7]
    wire _T_451 : UInt<1>
    _T_451 <= UInt<1>("h00")
    node _T_452 = and(_T_447, _T_451) @[Debug.scala 55:16]
    when _T_452 : @[Debug.scala 55:31]
      node _T_453 = asUInt(reset) @[Debug.scala 56:24]
      node _T_454 = eq(_T_453, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_454 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage3_2: ", _T_448) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_455 = asUInt(reset) @[Debug.scala 57:13]
      node _T_456 = eq(_T_455, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_456 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[WB] waymask: %b data:%x setIdx:%x\n", io.dataWriteBus.req.bits.waymask, io.dataWriteBus.req.bits.data.data, io.dataWriteBus.req.bits.setIdx) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_457 = eq(state, UInt<4>("h03")) @[Cache.scala 460:16]
    node _T_458 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
    node _T_459 = and(_T_457, _T_458) @[Cache.scala 460:35]
    wire _T_460 : {tag : UInt<17>, index : UInt<9>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _T_461 : UInt<32>
    _T_461 <= io.in.bits.req.addr
    node _T_462 = bits(_T_461, 2, 0) @[Cache.scala 79:45]
    _T_460.byteOffset <= _T_462 @[Cache.scala 79:45]
    node _T_463 = bits(_T_461, 5, 3) @[Cache.scala 79:45]
    _T_460.wordIndex <= _T_463 @[Cache.scala 79:45]
    node _T_464 = bits(_T_461, 14, 6) @[Cache.scala 79:45]
    _T_460.index <= _T_464 @[Cache.scala 79:45]
    node _T_465 = bits(_T_461, 31, 15) @[Cache.scala 79:45]
    _T_460.tag <= _T_465 @[Cache.scala 79:45]
    reg _T_466 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_467 = add(_T_466, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_468 = tail(_T_467, 1) @[GTimer.scala 25:12]
    _T_466 <= _T_468 @[GTimer.scala 25:7]
    wire _T_469 : UInt<1>
    _T_469 <= UInt<1>("h00")
    node _T_470 = and(_T_459, _T_469) @[Debug.scala 55:16]
    when _T_470 : @[Debug.scala 55:31]
      node _T_471 = asUInt(reset) @[Debug.scala 56:24]
      node _T_472 = eq(_T_471, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_472 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage3_2: ", _T_466) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_473 = asUInt(reset) @[Debug.scala 57:13]
      node _T_474 = eq(_T_473, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_474 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[COUTW] cnt %x addr %x data %x cmd %x size %x wmask %x tag %x idx %x waymask %b \n", value_2, io.mem.req.bits.addr, io.mem.req.bits.wdata, io.mem.req.bits.cmd, io.mem.req.bits.size, io.mem.req.bits.wmask, addr.tag, _T_460.index, io.in.bits.waymask) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_475 = eq(state, UInt<4>("h01")) @[Cache.scala 461:16]
    node _T_476 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
    node _T_477 = and(_T_475, _T_476) @[Cache.scala 461:34]
    wire _T_478 : {tag : UInt<17>, index : UInt<9>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _T_479 : UInt<32>
    _T_479 <= io.in.bits.req.addr
    node _T_480 = bits(_T_479, 2, 0) @[Cache.scala 79:45]
    _T_478.byteOffset <= _T_480 @[Cache.scala 79:45]
    node _T_481 = bits(_T_479, 5, 3) @[Cache.scala 79:45]
    _T_478.wordIndex <= _T_481 @[Cache.scala 79:45]
    node _T_482 = bits(_T_479, 14, 6) @[Cache.scala 79:45]
    _T_478.index <= _T_482 @[Cache.scala 79:45]
    node _T_483 = bits(_T_479, 31, 15) @[Cache.scala 79:45]
    _T_478.tag <= _T_483 @[Cache.scala 79:45]
    reg _T_484 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_485 = add(_T_484, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_486 = tail(_T_485, 1) @[GTimer.scala 25:12]
    _T_484 <= _T_486 @[GTimer.scala 25:7]
    wire _T_487 : UInt<1>
    _T_487 <= UInt<1>("h00")
    node _T_488 = and(_T_477, _T_487) @[Debug.scala 55:16]
    when _T_488 : @[Debug.scala 55:31]
      node _T_489 = asUInt(reset) @[Debug.scala 56:24]
      node _T_490 = eq(_T_489, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_490 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage3_2: ", _T_484) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_491 = asUInt(reset) @[Debug.scala 57:13]
      node _T_492 = eq(_T_491, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_492 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[COUTR] addr %x tag %x idx %x waymask %b \n", io.mem.req.bits.addr, addr.tag, _T_478.index, io.in.bits.waymask) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    node _T_493 = eq(state, UInt<4>("h02")) @[Cache.scala 462:16]
    node _T_494 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
    node _T_495 = and(_T_493, _T_494) @[Cache.scala 462:35]
    wire _T_496 : {tag : UInt<17>, index : UInt<9>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _T_497 : UInt<32>
    _T_497 <= io.in.bits.req.addr
    node _T_498 = bits(_T_497, 2, 0) @[Cache.scala 79:45]
    _T_496.byteOffset <= _T_498 @[Cache.scala 79:45]
    node _T_499 = bits(_T_497, 5, 3) @[Cache.scala 79:45]
    _T_496.wordIndex <= _T_499 @[Cache.scala 79:45]
    node _T_500 = bits(_T_497, 14, 6) @[Cache.scala 79:45]
    _T_496.index <= _T_500 @[Cache.scala 79:45]
    node _T_501 = bits(_T_497, 31, 15) @[Cache.scala 79:45]
    _T_496.tag <= _T_501 @[Cache.scala 79:45]
    reg _T_502 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_503 = add(_T_502, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_504 = tail(_T_503, 1) @[GTimer.scala 25:12]
    _T_502 <= _T_504 @[GTimer.scala 25:7]
    wire _T_505 : UInt<1>
    _T_505 <= UInt<1>("h00")
    node _T_506 = and(_T_495, _T_505) @[Debug.scala 55:16]
    when _T_506 : @[Debug.scala 55:31]
      node _T_507 = asUInt(reset) @[Debug.scala 56:24]
      node _T_508 = eq(_T_507, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_508 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] CacheStage3_2: ", _T_502) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_509 = asUInt(reset) @[Debug.scala 57:13]
      node _T_510 = eq(_T_509, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_510 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "[COUTR] cnt %x data %x tag %x idx %x waymask %b \n", value_1, io.mem.resp.bits.rdata, addr.tag, _T_496.index, io.in.bits.waymask) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    
  module SRAMTemplate_5 : 
    input clock : Clock
    input reset : Reset
    output io : {flip r : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<9>}}, flip resp : {data : {tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}[4]}}, flip w : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<9>, data : {tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}}}
    
    smem array : UInt<19>[4][512], undefined @[SRAMTemplate.scala 76:26]
    wire resetState : UInt<1>
    resetState <= UInt<1>("h00")
    wire resetSet : UInt
    resetSet <= UInt<1>("h00")
    reg _T : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[SRAMTemplate.scala 80:30]
    reg _T_1 : UInt<9>, clock with : (reset => (reset, UInt<9>("h00"))) @[Counter.scala 29:33]
    wire _T_2 : UInt<1>
    _T_2 <= UInt<1>("h00")
    when _T : @[Counter.scala 67:17]
      node _T_3 = eq(_T_1, UInt<9>("h01ff")) @[Counter.scala 38:24]
      node _T_4 = add(_T_1, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_5 = tail(_T_4, 1) @[Counter.scala 39:22]
      _T_1 <= _T_5 @[Counter.scala 39:13]
      _T_2 <= _T_3 @[Counter.scala 67:24]
      skip @[Counter.scala 67:17]
    when _T_2 : @[SRAMTemplate.scala 82:24]
      _T <= UInt<1>("h00") @[SRAMTemplate.scala 82:38]
      skip @[SRAMTemplate.scala 82:24]
    resetState <= _T @[SRAMTemplate.scala 84:16]
    resetSet <= _T_1 @[SRAMTemplate.scala 85:14]
    node wen = or(io.w.req.valid, resetState) @[SRAMTemplate.scala 88:52]
    node _T_6 = eq(wen, UInt<1>("h00")) @[SRAMTemplate.scala 89:41]
    node realRen = and(io.r.req.valid, _T_6) @[SRAMTemplate.scala 89:38]
    node setIdx = mux(resetState, resetSet, io.w.req.bits.setIdx) @[SRAMTemplate.scala 91:19]
    wire _T_7 : UInt<19> @[SRAMTemplate.scala 92:47]
    _T_7 <= UInt<1>("h00") @[SRAMTemplate.scala 92:47]
    node _T_8 = cat(io.w.req.bits.data.tag, io.w.req.bits.data.valid) @[SRAMTemplate.scala 92:78]
    node _T_9 = cat(_T_8, io.w.req.bits.data.dirty) @[SRAMTemplate.scala 92:78]
    node wdataword = mux(resetState, _T_7, _T_9) @[SRAMTemplate.scala 92:22]
    node _T_10 = mux(UInt<1>("h01"), UInt<4>("h0f"), UInt<4>("h00")) @[Bitwise.scala 72:12]
    node waymask = mux(resetState, _T_10, io.w.req.bits.waymask) @[SRAMTemplate.scala 93:20]
    wire wdata : UInt<19>[4] @[SRAMTemplate.scala 94:22]
    wdata[0] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[1] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[2] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[3] <= wdataword @[SRAMTemplate.scala 94:22]
    when wen : @[SRAMTemplate.scala 95:14]
      node _T_11 = bits(waymask, 0, 0) @[SRAMTemplate.scala 95:51]
      node _T_12 = bits(waymask, 1, 1) @[SRAMTemplate.scala 95:51]
      node _T_13 = bits(waymask, 2, 2) @[SRAMTemplate.scala 95:51]
      node _T_14 = bits(waymask, 3, 3) @[SRAMTemplate.scala 95:51]
      node _T_15 = or(setIdx, UInt<9>("h00"))
      node _T_16 = bits(_T_15, 8, 0)
      write mport _T_17 = array[_T_16], clock
      when _T_11 :
        _T_17[0] <= wdata[0]
        skip
      when _T_12 :
        _T_17[1] <= wdata[1]
        skip
      when _T_13 :
        _T_17[2] <= wdata[2]
        skip
      when _T_14 :
        _T_17[3] <= wdata[3]
        skip
      skip @[SRAMTemplate.scala 95:14]
    wire _T_18 : UInt @[SRAMTemplate.scala 98:31]
    _T_18 is invalid @[SRAMTemplate.scala 98:31]
    when realRen : @[SRAMTemplate.scala 98:31]
      _T_18 <= io.r.req.bits.setIdx @[SRAMTemplate.scala 98:31]
      node _T_19 = or(_T_18, UInt<9>("h00")) @[SRAMTemplate.scala 98:31]
      node _T_20 = bits(_T_19, 8, 0) @[SRAMTemplate.scala 98:31]
      read mport _T_21 = array[_T_20], clock @[SRAMTemplate.scala 98:31]
      skip @[SRAMTemplate.scala 98:31]
    wire rdata_0 : {tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>} @[SRAMTemplate.scala 98:78]
    wire _T_22 : UInt<19>
    _T_22 <= _T_21[0]
    node _T_23 = bits(_T_22, 0, 0) @[SRAMTemplate.scala 98:78]
    rdata_0.dirty <= _T_23 @[SRAMTemplate.scala 98:78]
    node _T_24 = bits(_T_22, 1, 1) @[SRAMTemplate.scala 98:78]
    rdata_0.valid <= _T_24 @[SRAMTemplate.scala 98:78]
    node _T_25 = bits(_T_22, 18, 2) @[SRAMTemplate.scala 98:78]
    rdata_0.tag <= _T_25 @[SRAMTemplate.scala 98:78]
    wire rdata_1 : {tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>} @[SRAMTemplate.scala 98:78]
    wire _T_26 : UInt<19>
    _T_26 <= _T_21[1]
    node _T_27 = bits(_T_26, 0, 0) @[SRAMTemplate.scala 98:78]
    rdata_1.dirty <= _T_27 @[SRAMTemplate.scala 98:78]
    node _T_28 = bits(_T_26, 1, 1) @[SRAMTemplate.scala 98:78]
    rdata_1.valid <= _T_28 @[SRAMTemplate.scala 98:78]
    node _T_29 = bits(_T_26, 18, 2) @[SRAMTemplate.scala 98:78]
    rdata_1.tag <= _T_29 @[SRAMTemplate.scala 98:78]
    wire rdata_2 : {tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>} @[SRAMTemplate.scala 98:78]
    wire _T_30 : UInt<19>
    _T_30 <= _T_21[2]
    node _T_31 = bits(_T_30, 0, 0) @[SRAMTemplate.scala 98:78]
    rdata_2.dirty <= _T_31 @[SRAMTemplate.scala 98:78]
    node _T_32 = bits(_T_30, 1, 1) @[SRAMTemplate.scala 98:78]
    rdata_2.valid <= _T_32 @[SRAMTemplate.scala 98:78]
    node _T_33 = bits(_T_30, 18, 2) @[SRAMTemplate.scala 98:78]
    rdata_2.tag <= _T_33 @[SRAMTemplate.scala 98:78]
    wire rdata_3 : {tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>} @[SRAMTemplate.scala 98:78]
    wire _T_34 : UInt<19>
    _T_34 <= _T_21[3]
    node _T_35 = bits(_T_34, 0, 0) @[SRAMTemplate.scala 98:78]
    rdata_3.dirty <= _T_35 @[SRAMTemplate.scala 98:78]
    node _T_36 = bits(_T_34, 1, 1) @[SRAMTemplate.scala 98:78]
    rdata_3.valid <= _T_36 @[SRAMTemplate.scala 98:78]
    node _T_37 = bits(_T_34, 18, 2) @[SRAMTemplate.scala 98:78]
    rdata_3.tag <= _T_37 @[SRAMTemplate.scala 98:78]
    wire _T_38 : {tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}[4] @[SRAMTemplate.scala 99:28]
    _T_38[0].dirty <= rdata_0.dirty @[SRAMTemplate.scala 99:28]
    _T_38[0].valid <= rdata_0.valid @[SRAMTemplate.scala 99:28]
    _T_38[0].tag <= rdata_0.tag @[SRAMTemplate.scala 99:28]
    _T_38[1].dirty <= rdata_1.dirty @[SRAMTemplate.scala 99:28]
    _T_38[1].valid <= rdata_1.valid @[SRAMTemplate.scala 99:28]
    _T_38[1].tag <= rdata_1.tag @[SRAMTemplate.scala 99:28]
    _T_38[2].dirty <= rdata_2.dirty @[SRAMTemplate.scala 99:28]
    _T_38[2].valid <= rdata_2.valid @[SRAMTemplate.scala 99:28]
    _T_38[2].tag <= rdata_2.tag @[SRAMTemplate.scala 99:28]
    _T_38[3].dirty <= rdata_3.dirty @[SRAMTemplate.scala 99:28]
    _T_38[3].valid <= rdata_3.valid @[SRAMTemplate.scala 99:28]
    _T_38[3].tag <= rdata_3.tag @[SRAMTemplate.scala 99:28]
    io.r.resp.data[0].dirty <= _T_38[0].dirty @[SRAMTemplate.scala 99:18]
    io.r.resp.data[0].valid <= _T_38[0].valid @[SRAMTemplate.scala 99:18]
    io.r.resp.data[0].tag <= _T_38[0].tag @[SRAMTemplate.scala 99:18]
    io.r.resp.data[1].dirty <= _T_38[1].dirty @[SRAMTemplate.scala 99:18]
    io.r.resp.data[1].valid <= _T_38[1].valid @[SRAMTemplate.scala 99:18]
    io.r.resp.data[1].tag <= _T_38[1].tag @[SRAMTemplate.scala 99:18]
    io.r.resp.data[2].dirty <= _T_38[2].dirty @[SRAMTemplate.scala 99:18]
    io.r.resp.data[2].valid <= _T_38[2].valid @[SRAMTemplate.scala 99:18]
    io.r.resp.data[2].tag <= _T_38[2].tag @[SRAMTemplate.scala 99:18]
    io.r.resp.data[3].dirty <= _T_38[3].dirty @[SRAMTemplate.scala 99:18]
    io.r.resp.data[3].valid <= _T_38[3].valid @[SRAMTemplate.scala 99:18]
    io.r.resp.data[3].tag <= _T_38[3].tag @[SRAMTemplate.scala 99:18]
    node _T_39 = eq(resetState, UInt<1>("h00")) @[SRAMTemplate.scala 101:21]
    node _T_40 = eq(wen, UInt<1>("h00")) @[SRAMTemplate.scala 101:53]
    node _T_41 = and(_T_39, _T_40) @[SRAMTemplate.scala 101:33]
    io.r.req.ready <= _T_41 @[SRAMTemplate.scala 101:18]
    io.w.req.ready <= UInt<1>("h01") @[SRAMTemplate.scala 102:18]
    
  module Arbiter_12 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<9>}}[1], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<9>}}, chosen : UInt<0>}
    
    io.chosen <= UInt<1>("h00") @[Arbiter.scala 123:13]
    io.out.bits.setIdx <= io.in[0].bits.setIdx @[Arbiter.scala 124:15]
    node _T = and(UInt<1>("h01"), io.out.ready) @[Arbiter.scala 134:19]
    io.in[0].ready <= _T @[Arbiter.scala 134:14]
    node _T_1 = eq(UInt<1>("h01"), UInt<1>("h00")) @[Arbiter.scala 135:19]
    node _T_2 = or(_T_1, io.in[0].valid) @[Arbiter.scala 135:31]
    io.out.valid <= _T_2 @[Arbiter.scala 135:16]
    
  module SRAMTemplateWithArbiter_4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip r : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<9>}}, flip resp : {data : {tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}[4]}}[1], flip w : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<9>, data : {tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}}}
    
    inst ram of SRAMTemplate_5 @[SRAMTemplate.scala 121:19]
    ram.clock <= clock
    ram.reset <= reset
    ram.io.w.req.bits.waymask <= io.w.req.bits.waymask @[SRAMTemplate.scala 122:12]
    ram.io.w.req.bits.data.dirty <= io.w.req.bits.data.dirty @[SRAMTemplate.scala 122:12]
    ram.io.w.req.bits.data.valid <= io.w.req.bits.data.valid @[SRAMTemplate.scala 122:12]
    ram.io.w.req.bits.data.tag <= io.w.req.bits.data.tag @[SRAMTemplate.scala 122:12]
    ram.io.w.req.bits.setIdx <= io.w.req.bits.setIdx @[SRAMTemplate.scala 122:12]
    ram.io.w.req.valid <= io.w.req.valid @[SRAMTemplate.scala 122:12]
    io.w.req.ready <= ram.io.w.req.ready @[SRAMTemplate.scala 122:12]
    inst readArb of Arbiter_12 @[SRAMTemplate.scala 124:23]
    readArb.clock <= clock
    readArb.reset <= reset
    readArb.io.in[0].bits.setIdx <= io.r[0].req.bits.setIdx @[SRAMTemplate.scala 125:17]
    readArb.io.in[0].valid <= io.r[0].req.valid @[SRAMTemplate.scala 125:17]
    io.r[0].req.ready <= readArb.io.in[0].ready @[SRAMTemplate.scala 125:17]
    ram.io.r.req.bits.setIdx <= readArb.io.out.bits.setIdx @[SRAMTemplate.scala 126:16]
    ram.io.r.req.valid <= readArb.io.out.valid @[SRAMTemplate.scala 126:16]
    readArb.io.out.ready <= ram.io.r.req.ready @[SRAMTemplate.scala 126:16]
    node _T = and(io.r[0].req.ready, io.r[0].req.valid) @[Decoupled.scala 40:37]
    reg _T_1 : UInt<1>, clock @[SRAMTemplate.scala 130:58]
    _T_1 <= _T @[SRAMTemplate.scala 130:58]
    wire _T_2 : {tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}[4] @[Hold.scala 23:81]
    _T_2[0].dirty <= UInt<1>("h00") @[Hold.scala 23:81]
    _T_2[0].valid <= UInt<1>("h00") @[Hold.scala 23:81]
    _T_2[0].tag <= UInt<17>("h00") @[Hold.scala 23:81]
    _T_2[1].dirty <= UInt<1>("h00") @[Hold.scala 23:81]
    _T_2[1].valid <= UInt<1>("h00") @[Hold.scala 23:81]
    _T_2[1].tag <= UInt<17>("h00") @[Hold.scala 23:81]
    _T_2[2].dirty <= UInt<1>("h00") @[Hold.scala 23:81]
    _T_2[2].valid <= UInt<1>("h00") @[Hold.scala 23:81]
    _T_2[2].tag <= UInt<17>("h00") @[Hold.scala 23:81]
    _T_2[3].dirty <= UInt<1>("h00") @[Hold.scala 23:81]
    _T_2[3].valid <= UInt<1>("h00") @[Hold.scala 23:81]
    _T_2[3].tag <= UInt<17>("h00") @[Hold.scala 23:81]
    reg _T_3 : {tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}[4], clock with : (reset => (reset, _T_2)) @[Reg.scala 27:20]
    when _T_1 : @[Reg.scala 28:19]
      _T_3[0].dirty <= ram.io.r.resp.data[0].dirty @[Reg.scala 28:23]
      _T_3[0].valid <= ram.io.r.resp.data[0].valid @[Reg.scala 28:23]
      _T_3[0].tag <= ram.io.r.resp.data[0].tag @[Reg.scala 28:23]
      _T_3[1].dirty <= ram.io.r.resp.data[1].dirty @[Reg.scala 28:23]
      _T_3[1].valid <= ram.io.r.resp.data[1].valid @[Reg.scala 28:23]
      _T_3[1].tag <= ram.io.r.resp.data[1].tag @[Reg.scala 28:23]
      _T_3[2].dirty <= ram.io.r.resp.data[2].dirty @[Reg.scala 28:23]
      _T_3[2].valid <= ram.io.r.resp.data[2].valid @[Reg.scala 28:23]
      _T_3[2].tag <= ram.io.r.resp.data[2].tag @[Reg.scala 28:23]
      _T_3[3].dirty <= ram.io.r.resp.data[3].dirty @[Reg.scala 28:23]
      _T_3[3].valid <= ram.io.r.resp.data[3].valid @[Reg.scala 28:23]
      _T_3[3].tag <= ram.io.r.resp.data[3].tag @[Reg.scala 28:23]
      skip @[Reg.scala 28:19]
    node _T_4 = mux(_T_1, ram.io.r.resp.data, _T_3) @[Hold.scala 23:48]
    io.r[0].resp.data[0].dirty <= _T_4[0].dirty @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[0].valid <= _T_4[0].valid @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[0].tag <= _T_4[0].tag @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[1].dirty <= _T_4[1].dirty @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[1].valid <= _T_4[1].valid @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[1].tag <= _T_4[1].tag @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[2].dirty <= _T_4[2].dirty @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[2].valid <= _T_4[2].valid @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[2].tag <= _T_4[2].tag @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[3].dirty <= _T_4[3].dirty @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[3].valid <= _T_4[3].valid @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[3].tag <= _T_4[3].tag @[SRAMTemplate.scala 130:17]
    
  module SRAMTemplate_6 : 
    input clock : Clock
    input reset : Reset
    output io : {flip r : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<12>}}, flip resp : {data : {data : UInt<64>}[4]}}, flip w : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<12>, data : {data : UInt<64>}, waymask : UInt<4>}}}}
    
    smem array : UInt<64>[4][4096], undefined @[SRAMTemplate.scala 76:26]
    wire resetState : UInt<1>
    resetState <= UInt<1>("h00")
    wire resetSet : UInt
    resetSet <= UInt<1>("h00")
    node wen = or(io.w.req.valid, resetState) @[SRAMTemplate.scala 88:52]
    node _T = eq(wen, UInt<1>("h00")) @[SRAMTemplate.scala 89:41]
    node realRen = and(io.r.req.valid, _T) @[SRAMTemplate.scala 89:38]
    node setIdx = mux(resetState, resetSet, io.w.req.bits.setIdx) @[SRAMTemplate.scala 91:19]
    wire _T_1 : UInt<64> @[SRAMTemplate.scala 92:47]
    _T_1 <= UInt<1>("h00") @[SRAMTemplate.scala 92:47]
    node wdataword = mux(resetState, _T_1, io.w.req.bits.data.data) @[SRAMTemplate.scala 92:22]
    node _T_2 = mux(UInt<1>("h01"), UInt<4>("h0f"), UInt<4>("h00")) @[Bitwise.scala 72:12]
    node waymask = mux(resetState, _T_2, io.w.req.bits.waymask) @[SRAMTemplate.scala 93:20]
    wire wdata : UInt<64>[4] @[SRAMTemplate.scala 94:22]
    wdata[0] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[1] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[2] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[3] <= wdataword @[SRAMTemplate.scala 94:22]
    when wen : @[SRAMTemplate.scala 95:14]
      node _T_3 = bits(waymask, 0, 0) @[SRAMTemplate.scala 95:51]
      node _T_4 = bits(waymask, 1, 1) @[SRAMTemplate.scala 95:51]
      node _T_5 = bits(waymask, 2, 2) @[SRAMTemplate.scala 95:51]
      node _T_6 = bits(waymask, 3, 3) @[SRAMTemplate.scala 95:51]
      node _T_7 = or(setIdx, UInt<12>("h00"))
      node _T_8 = bits(_T_7, 11, 0)
      write mport _T_9 = array[_T_8], clock
      when _T_3 :
        _T_9[0] <= wdata[0]
        skip
      when _T_4 :
        _T_9[1] <= wdata[1]
        skip
      when _T_5 :
        _T_9[2] <= wdata[2]
        skip
      when _T_6 :
        _T_9[3] <= wdata[3]
        skip
      skip @[SRAMTemplate.scala 95:14]
    wire _T_10 : UInt @[SRAMTemplate.scala 98:31]
    _T_10 is invalid @[SRAMTemplate.scala 98:31]
    when realRen : @[SRAMTemplate.scala 98:31]
      _T_10 <= io.r.req.bits.setIdx @[SRAMTemplate.scala 98:31]
      node _T_11 = or(_T_10, UInt<12>("h00")) @[SRAMTemplate.scala 98:31]
      node _T_12 = bits(_T_11, 11, 0) @[SRAMTemplate.scala 98:31]
      read mport _T_13 = array[_T_12], clock @[SRAMTemplate.scala 98:31]
      skip @[SRAMTemplate.scala 98:31]
    wire rdata_0 : {data : UInt<64>} @[SRAMTemplate.scala 98:78]
    wire _T_14 : UInt<64>
    _T_14 <= _T_13[0]
    node _T_15 = bits(_T_14, 63, 0) @[SRAMTemplate.scala 98:78]
    rdata_0.data <= _T_15 @[SRAMTemplate.scala 98:78]
    wire rdata_1 : {data : UInt<64>} @[SRAMTemplate.scala 98:78]
    wire _T_16 : UInt<64>
    _T_16 <= _T_13[1]
    node _T_17 = bits(_T_16, 63, 0) @[SRAMTemplate.scala 98:78]
    rdata_1.data <= _T_17 @[SRAMTemplate.scala 98:78]
    wire rdata_2 : {data : UInt<64>} @[SRAMTemplate.scala 98:78]
    wire _T_18 : UInt<64>
    _T_18 <= _T_13[2]
    node _T_19 = bits(_T_18, 63, 0) @[SRAMTemplate.scala 98:78]
    rdata_2.data <= _T_19 @[SRAMTemplate.scala 98:78]
    wire rdata_3 : {data : UInt<64>} @[SRAMTemplate.scala 98:78]
    wire _T_20 : UInt<64>
    _T_20 <= _T_13[3]
    node _T_21 = bits(_T_20, 63, 0) @[SRAMTemplate.scala 98:78]
    rdata_3.data <= _T_21 @[SRAMTemplate.scala 98:78]
    wire _T_22 : {data : UInt<64>}[4] @[SRAMTemplate.scala 99:28]
    _T_22[0].data <= rdata_0.data @[SRAMTemplate.scala 99:28]
    _T_22[1].data <= rdata_1.data @[SRAMTemplate.scala 99:28]
    _T_22[2].data <= rdata_2.data @[SRAMTemplate.scala 99:28]
    _T_22[3].data <= rdata_3.data @[SRAMTemplate.scala 99:28]
    io.r.resp.data[0].data <= _T_22[0].data @[SRAMTemplate.scala 99:18]
    io.r.resp.data[1].data <= _T_22[1].data @[SRAMTemplate.scala 99:18]
    io.r.resp.data[2].data <= _T_22[2].data @[SRAMTemplate.scala 99:18]
    io.r.resp.data[3].data <= _T_22[3].data @[SRAMTemplate.scala 99:18]
    node _T_23 = eq(resetState, UInt<1>("h00")) @[SRAMTemplate.scala 101:21]
    node _T_24 = eq(wen, UInt<1>("h00")) @[SRAMTemplate.scala 101:53]
    node _T_25 = and(_T_23, _T_24) @[SRAMTemplate.scala 101:33]
    io.r.req.ready <= _T_25 @[SRAMTemplate.scala 101:18]
    io.w.req.ready <= UInt<1>("h01") @[SRAMTemplate.scala 102:18]
    
  module Arbiter_13 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<12>}}[2], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<12>}}, chosen : UInt<1>}
    
    io.chosen <= UInt<1>("h01") @[Arbiter.scala 123:13]
    io.out.bits.setIdx <= io.in[1].bits.setIdx @[Arbiter.scala 124:15]
    when io.in[0].valid : @[Arbiter.scala 126:27]
      io.chosen <= UInt<1>("h00") @[Arbiter.scala 127:17]
      io.out.bits.setIdx <= io.in[0].bits.setIdx @[Arbiter.scala 128:19]
      skip @[Arbiter.scala 126:27]
    node grant_1 = eq(io.in[0].valid, UInt<1>("h00")) @[Arbiter.scala 31:78]
    node _T = and(UInt<1>("h01"), io.out.ready) @[Arbiter.scala 134:19]
    io.in[0].ready <= _T @[Arbiter.scala 134:14]
    node _T_1 = and(grant_1, io.out.ready) @[Arbiter.scala 134:19]
    io.in[1].ready <= _T_1 @[Arbiter.scala 134:14]
    node _T_2 = eq(grant_1, UInt<1>("h00")) @[Arbiter.scala 135:19]
    node _T_3 = or(_T_2, io.in[1].valid) @[Arbiter.scala 135:31]
    io.out.valid <= _T_3 @[Arbiter.scala 135:16]
    
  module SRAMTemplateWithArbiter_5 : 
    input clock : Clock
    input reset : Reset
    output io : {flip r : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<12>}}, flip resp : {data : {data : UInt<64>}[4]}}[2], flip w : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {setIdx : UInt<12>, data : {data : UInt<64>}, waymask : UInt<4>}}}}
    
    inst ram of SRAMTemplate_6 @[SRAMTemplate.scala 121:19]
    ram.clock <= clock
    ram.reset <= reset
    ram.io.w.req.bits.waymask <= io.w.req.bits.waymask @[SRAMTemplate.scala 122:12]
    ram.io.w.req.bits.data.data <= io.w.req.bits.data.data @[SRAMTemplate.scala 122:12]
    ram.io.w.req.bits.setIdx <= io.w.req.bits.setIdx @[SRAMTemplate.scala 122:12]
    ram.io.w.req.valid <= io.w.req.valid @[SRAMTemplate.scala 122:12]
    io.w.req.ready <= ram.io.w.req.ready @[SRAMTemplate.scala 122:12]
    inst readArb of Arbiter_13 @[SRAMTemplate.scala 124:23]
    readArb.clock <= clock
    readArb.reset <= reset
    readArb.io.in[0].bits.setIdx <= io.r[0].req.bits.setIdx @[SRAMTemplate.scala 125:17]
    readArb.io.in[0].valid <= io.r[0].req.valid @[SRAMTemplate.scala 125:17]
    io.r[0].req.ready <= readArb.io.in[0].ready @[SRAMTemplate.scala 125:17]
    readArb.io.in[1].bits.setIdx <= io.r[1].req.bits.setIdx @[SRAMTemplate.scala 125:17]
    readArb.io.in[1].valid <= io.r[1].req.valid @[SRAMTemplate.scala 125:17]
    io.r[1].req.ready <= readArb.io.in[1].ready @[SRAMTemplate.scala 125:17]
    ram.io.r.req.bits.setIdx <= readArb.io.out.bits.setIdx @[SRAMTemplate.scala 126:16]
    ram.io.r.req.valid <= readArb.io.out.valid @[SRAMTemplate.scala 126:16]
    readArb.io.out.ready <= ram.io.r.req.ready @[SRAMTemplate.scala 126:16]
    node _T = and(io.r[0].req.ready, io.r[0].req.valid) @[Decoupled.scala 40:37]
    reg _T_1 : UInt<1>, clock @[SRAMTemplate.scala 130:58]
    _T_1 <= _T @[SRAMTemplate.scala 130:58]
    wire _T_2 : {data : UInt<64>}[4] @[Hold.scala 23:81]
    _T_2[0].data <= UInt<64>("h00") @[Hold.scala 23:81]
    _T_2[1].data <= UInt<64>("h00") @[Hold.scala 23:81]
    _T_2[2].data <= UInt<64>("h00") @[Hold.scala 23:81]
    _T_2[3].data <= UInt<64>("h00") @[Hold.scala 23:81]
    reg _T_3 : {data : UInt<64>}[4], clock with : (reset => (reset, _T_2)) @[Reg.scala 27:20]
    when _T_1 : @[Reg.scala 28:19]
      _T_3[0].data <= ram.io.r.resp.data[0].data @[Reg.scala 28:23]
      _T_3[1].data <= ram.io.r.resp.data[1].data @[Reg.scala 28:23]
      _T_3[2].data <= ram.io.r.resp.data[2].data @[Reg.scala 28:23]
      _T_3[3].data <= ram.io.r.resp.data[3].data @[Reg.scala 28:23]
      skip @[Reg.scala 28:19]
    node _T_4 = mux(_T_1, ram.io.r.resp.data, _T_3) @[Hold.scala 23:48]
    io.r[0].resp.data[0].data <= _T_4[0].data @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[1].data <= _T_4[1].data @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[2].data <= _T_4[2].data @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[3].data <= _T_4[3].data @[SRAMTemplate.scala 130:17]
    node _T_5 = and(io.r[1].req.ready, io.r[1].req.valid) @[Decoupled.scala 40:37]
    reg _T_6 : UInt<1>, clock @[SRAMTemplate.scala 130:58]
    _T_6 <= _T_5 @[SRAMTemplate.scala 130:58]
    wire _T_7 : {data : UInt<64>}[4] @[Hold.scala 23:81]
    _T_7[0].data <= UInt<64>("h00") @[Hold.scala 23:81]
    _T_7[1].data <= UInt<64>("h00") @[Hold.scala 23:81]
    _T_7[2].data <= UInt<64>("h00") @[Hold.scala 23:81]
    _T_7[3].data <= UInt<64>("h00") @[Hold.scala 23:81]
    reg _T_8 : {data : UInt<64>}[4], clock with : (reset => (reset, _T_7)) @[Reg.scala 27:20]
    when _T_6 : @[Reg.scala 28:19]
      _T_8[0].data <= ram.io.r.resp.data[0].data @[Reg.scala 28:23]
      _T_8[1].data <= ram.io.r.resp.data[1].data @[Reg.scala 28:23]
      _T_8[2].data <= ram.io.r.resp.data[2].data @[Reg.scala 28:23]
      _T_8[3].data <= ram.io.r.resp.data[3].data @[Reg.scala 28:23]
      skip @[Reg.scala 28:19]
    node _T_9 = mux(_T_6, ram.io.r.resp.data, _T_8) @[Hold.scala 23:48]
    io.r[1].resp.data[0].data <= _T_9[0].data @[SRAMTemplate.scala 130:17]
    io.r[1].resp.data[1].data <= _T_9[1].data @[SRAMTemplate.scala 130:17]
    io.r[1].resp.data[2].data <= _T_9[2].data @[SRAMTemplate.scala 130:17]
    io.r[1].resp.data[3].data <= _T_9[3].data @[SRAMTemplate.scala 130:17]
    
  module Arbiter_14 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}[2], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, chosen : UInt<1>}
    
    io.chosen <= UInt<1>("h01") @[Arbiter.scala 123:13]
    io.out.bits.wdata <= io.in[1].bits.wdata @[Arbiter.scala 124:15]
    io.out.bits.wmask <= io.in[1].bits.wmask @[Arbiter.scala 124:15]
    io.out.bits.cmd <= io.in[1].bits.cmd @[Arbiter.scala 124:15]
    io.out.bits.size <= io.in[1].bits.size @[Arbiter.scala 124:15]
    io.out.bits.addr <= io.in[1].bits.addr @[Arbiter.scala 124:15]
    when io.in[0].valid : @[Arbiter.scala 126:27]
      io.chosen <= UInt<1>("h00") @[Arbiter.scala 127:17]
      io.out.bits.wdata <= io.in[0].bits.wdata @[Arbiter.scala 128:19]
      io.out.bits.wmask <= io.in[0].bits.wmask @[Arbiter.scala 128:19]
      io.out.bits.cmd <= io.in[0].bits.cmd @[Arbiter.scala 128:19]
      io.out.bits.size <= io.in[0].bits.size @[Arbiter.scala 128:19]
      io.out.bits.addr <= io.in[0].bits.addr @[Arbiter.scala 128:19]
      skip @[Arbiter.scala 126:27]
    node grant_1 = eq(io.in[0].valid, UInt<1>("h00")) @[Arbiter.scala 31:78]
    node _T = and(UInt<1>("h01"), io.out.ready) @[Arbiter.scala 134:19]
    io.in[0].ready <= _T @[Arbiter.scala 134:14]
    node _T_1 = and(grant_1, io.out.ready) @[Arbiter.scala 134:19]
    io.in[1].ready <= _T_1 @[Arbiter.scala 134:14]
    node _T_2 = eq(grant_1, UInt<1>("h00")) @[Arbiter.scala 135:19]
    node _T_3 = or(_T_2, io.in[1].valid) @[Arbiter.scala 135:31]
    io.out.valid <= _T_3 @[Arbiter.scala 135:16]
    
  module Cache_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}, flip flush : UInt<2>, out : {mem : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}, flip coh : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}}, mmio : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}, empty : UInt<1>}
    
    inst s1 of CacheStage1_2 @[Cache.scala 475:18]
    s1.clock <= clock
    s1.reset <= reset
    inst s2 of CacheStage2_2 @[Cache.scala 476:18]
    s2.clock <= clock
    s2.reset <= reset
    inst s3 of CacheStage3_2 @[Cache.scala 477:18]
    s3.clock <= clock
    s3.reset <= reset
    inst metaArray of SRAMTemplateWithArbiter_4 @[Cache.scala 478:25]
    metaArray.clock <= clock
    metaArray.reset <= reset
    inst dataArray of SRAMTemplateWithArbiter_5 @[Cache.scala 479:25]
    dataArray.clock <= clock
    dataArray.reset <= reset
    inst arb of Arbiter_14 @[Cache.scala 488:19]
    arb.clock <= clock
    arb.reset <= reset
    arb.io.in[1].bits.wdata <= io.in.req.bits.wdata @[Cache.scala 489:28]
    arb.io.in[1].bits.wmask <= io.in.req.bits.wmask @[Cache.scala 489:28]
    arb.io.in[1].bits.cmd <= io.in.req.bits.cmd @[Cache.scala 489:28]
    arb.io.in[1].bits.size <= io.in.req.bits.size @[Cache.scala 489:28]
    arb.io.in[1].bits.addr <= io.in.req.bits.addr @[Cache.scala 489:28]
    arb.io.in[1].valid <= io.in.req.valid @[Cache.scala 489:28]
    io.in.req.ready <= arb.io.in[1].ready @[Cache.scala 489:28]
    s1.io.in.bits.wdata <= arb.io.out.bits.wdata @[Cache.scala 491:12]
    s1.io.in.bits.wmask <= arb.io.out.bits.wmask @[Cache.scala 491:12]
    s1.io.in.bits.cmd <= arb.io.out.bits.cmd @[Cache.scala 491:12]
    s1.io.in.bits.size <= arb.io.out.bits.size @[Cache.scala 491:12]
    s1.io.in.bits.addr <= arb.io.out.bits.addr @[Cache.scala 491:12]
    s1.io.in.valid <= arb.io.out.valid @[Cache.scala 491:12]
    arb.io.out.ready <= s1.io.in.ready @[Cache.scala 491:12]
    node _T = and(s2.io.out.ready, s2.io.out.valid) @[Decoupled.scala 40:37]
    node _T_1 = bits(io.flush, 0, 0) @[Cache.scala 497:66]
    reg _T_2 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Pipeline.scala 24:24]
    when _T : @[Pipeline.scala 25:25]
      _T_2 <= UInt<1>("h00") @[Pipeline.scala 25:33]
      skip @[Pipeline.scala 25:25]
    node _T_3 = and(s1.io.out.valid, s2.io.in.ready) @[Pipeline.scala 26:22]
    when _T_3 : @[Pipeline.scala 26:38]
      _T_2 <= UInt<1>("h01") @[Pipeline.scala 26:46]
      skip @[Pipeline.scala 26:38]
    when _T_1 : @[Pipeline.scala 27:20]
      _T_2 <= UInt<1>("h00") @[Pipeline.scala 27:28]
      skip @[Pipeline.scala 27:20]
    s1.io.out.ready <= s2.io.in.ready @[Pipeline.scala 29:16]
    node _T_4 = and(s1.io.out.valid, s2.io.in.ready) @[Pipeline.scala 30:51]
    reg _T_5 : {req : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, clock @[Reg.scala 15:16]
    when _T_4 : @[Reg.scala 16:19]
      _T_5.req.wdata <= s1.io.out.bits.req.wdata @[Reg.scala 16:23]
      _T_5.req.wmask <= s1.io.out.bits.req.wmask @[Reg.scala 16:23]
      _T_5.req.cmd <= s1.io.out.bits.req.cmd @[Reg.scala 16:23]
      _T_5.req.size <= s1.io.out.bits.req.size @[Reg.scala 16:23]
      _T_5.req.addr <= s1.io.out.bits.req.addr @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    s2.io.in.bits.req.wdata <= _T_5.req.wdata @[Pipeline.scala 30:16]
    s2.io.in.bits.req.wmask <= _T_5.req.wmask @[Pipeline.scala 30:16]
    s2.io.in.bits.req.cmd <= _T_5.req.cmd @[Pipeline.scala 30:16]
    s2.io.in.bits.req.size <= _T_5.req.size @[Pipeline.scala 30:16]
    s2.io.in.bits.req.addr <= _T_5.req.addr @[Pipeline.scala 30:16]
    s2.io.in.valid <= _T_2 @[Pipeline.scala 31:17]
    node _T_6 = bits(io.flush, 1, 1) @[Cache.scala 498:64]
    reg _T_7 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Pipeline.scala 24:24]
    when s3.io.isFinish : @[Pipeline.scala 25:25]
      _T_7 <= UInt<1>("h00") @[Pipeline.scala 25:33]
      skip @[Pipeline.scala 25:25]
    node _T_8 = and(s2.io.out.valid, s3.io.in.ready) @[Pipeline.scala 26:22]
    when _T_8 : @[Pipeline.scala 26:38]
      _T_7 <= UInt<1>("h01") @[Pipeline.scala 26:46]
      skip @[Pipeline.scala 26:38]
    when _T_6 : @[Pipeline.scala 27:20]
      _T_7 <= UInt<1>("h00") @[Pipeline.scala 27:28]
      skip @[Pipeline.scala 27:20]
    s2.io.out.ready <= s3.io.in.ready @[Pipeline.scala 29:16]
    node _T_9 = and(s2.io.out.valid, s3.io.in.ready) @[Pipeline.scala 30:51]
    reg _T_10 : {req : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}, metas : {tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}[4], datas : {data : UInt<64>}[4], hit : UInt<1>, waymask : UInt<4>, mmio : UInt<1>, isForwardData : UInt<1>, forwardData : {setIdx : UInt<12>, data : {data : UInt<64>}, waymask : UInt<4>}}, clock @[Reg.scala 15:16]
    when _T_9 : @[Reg.scala 16:19]
      _T_10.forwardData.waymask <= s2.io.out.bits.forwardData.waymask @[Reg.scala 16:23]
      _T_10.forwardData.data.data <= s2.io.out.bits.forwardData.data.data @[Reg.scala 16:23]
      _T_10.forwardData.setIdx <= s2.io.out.bits.forwardData.setIdx @[Reg.scala 16:23]
      _T_10.isForwardData <= s2.io.out.bits.isForwardData @[Reg.scala 16:23]
      _T_10.mmio <= s2.io.out.bits.mmio @[Reg.scala 16:23]
      _T_10.waymask <= s2.io.out.bits.waymask @[Reg.scala 16:23]
      _T_10.hit <= s2.io.out.bits.hit @[Reg.scala 16:23]
      _T_10.datas[0].data <= s2.io.out.bits.datas[0].data @[Reg.scala 16:23]
      _T_10.datas[1].data <= s2.io.out.bits.datas[1].data @[Reg.scala 16:23]
      _T_10.datas[2].data <= s2.io.out.bits.datas[2].data @[Reg.scala 16:23]
      _T_10.datas[3].data <= s2.io.out.bits.datas[3].data @[Reg.scala 16:23]
      _T_10.metas[0].dirty <= s2.io.out.bits.metas[0].dirty @[Reg.scala 16:23]
      _T_10.metas[0].valid <= s2.io.out.bits.metas[0].valid @[Reg.scala 16:23]
      _T_10.metas[0].tag <= s2.io.out.bits.metas[0].tag @[Reg.scala 16:23]
      _T_10.metas[1].dirty <= s2.io.out.bits.metas[1].dirty @[Reg.scala 16:23]
      _T_10.metas[1].valid <= s2.io.out.bits.metas[1].valid @[Reg.scala 16:23]
      _T_10.metas[1].tag <= s2.io.out.bits.metas[1].tag @[Reg.scala 16:23]
      _T_10.metas[2].dirty <= s2.io.out.bits.metas[2].dirty @[Reg.scala 16:23]
      _T_10.metas[2].valid <= s2.io.out.bits.metas[2].valid @[Reg.scala 16:23]
      _T_10.metas[2].tag <= s2.io.out.bits.metas[2].tag @[Reg.scala 16:23]
      _T_10.metas[3].dirty <= s2.io.out.bits.metas[3].dirty @[Reg.scala 16:23]
      _T_10.metas[3].valid <= s2.io.out.bits.metas[3].valid @[Reg.scala 16:23]
      _T_10.metas[3].tag <= s2.io.out.bits.metas[3].tag @[Reg.scala 16:23]
      _T_10.req.wdata <= s2.io.out.bits.req.wdata @[Reg.scala 16:23]
      _T_10.req.wmask <= s2.io.out.bits.req.wmask @[Reg.scala 16:23]
      _T_10.req.cmd <= s2.io.out.bits.req.cmd @[Reg.scala 16:23]
      _T_10.req.size <= s2.io.out.bits.req.size @[Reg.scala 16:23]
      _T_10.req.addr <= s2.io.out.bits.req.addr @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    s3.io.in.bits.forwardData.waymask <= _T_10.forwardData.waymask @[Pipeline.scala 30:16]
    s3.io.in.bits.forwardData.data.data <= _T_10.forwardData.data.data @[Pipeline.scala 30:16]
    s3.io.in.bits.forwardData.setIdx <= _T_10.forwardData.setIdx @[Pipeline.scala 30:16]
    s3.io.in.bits.isForwardData <= _T_10.isForwardData @[Pipeline.scala 30:16]
    s3.io.in.bits.mmio <= _T_10.mmio @[Pipeline.scala 30:16]
    s3.io.in.bits.waymask <= _T_10.waymask @[Pipeline.scala 30:16]
    s3.io.in.bits.hit <= _T_10.hit @[Pipeline.scala 30:16]
    s3.io.in.bits.datas[0].data <= _T_10.datas[0].data @[Pipeline.scala 30:16]
    s3.io.in.bits.datas[1].data <= _T_10.datas[1].data @[Pipeline.scala 30:16]
    s3.io.in.bits.datas[2].data <= _T_10.datas[2].data @[Pipeline.scala 30:16]
    s3.io.in.bits.datas[3].data <= _T_10.datas[3].data @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[0].dirty <= _T_10.metas[0].dirty @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[0].valid <= _T_10.metas[0].valid @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[0].tag <= _T_10.metas[0].tag @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[1].dirty <= _T_10.metas[1].dirty @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[1].valid <= _T_10.metas[1].valid @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[1].tag <= _T_10.metas[1].tag @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[2].dirty <= _T_10.metas[2].dirty @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[2].valid <= _T_10.metas[2].valid @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[2].tag <= _T_10.metas[2].tag @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[3].dirty <= _T_10.metas[3].dirty @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[3].valid <= _T_10.metas[3].valid @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[3].tag <= _T_10.metas[3].tag @[Pipeline.scala 30:16]
    s3.io.in.bits.req.wdata <= _T_10.req.wdata @[Pipeline.scala 30:16]
    s3.io.in.bits.req.wmask <= _T_10.req.wmask @[Pipeline.scala 30:16]
    s3.io.in.bits.req.cmd <= _T_10.req.cmd @[Pipeline.scala 30:16]
    s3.io.in.bits.req.size <= _T_10.req.size @[Pipeline.scala 30:16]
    s3.io.in.bits.req.addr <= _T_10.req.addr @[Pipeline.scala 30:16]
    s3.io.in.valid <= _T_7 @[Pipeline.scala 31:17]
    io.in.resp.bits.rdata <= s3.io.out.bits.rdata @[Cache.scala 499:14]
    io.in.resp.bits.cmd <= s3.io.out.bits.cmd @[Cache.scala 499:14]
    io.in.resp.valid <= s3.io.out.valid @[Cache.scala 499:14]
    s3.io.out.ready <= io.in.resp.ready @[Cache.scala 499:14]
    node _T_11 = bits(io.flush, 1, 1) @[Cache.scala 500:26]
    s3.io.flush <= _T_11 @[Cache.scala 500:15]
    s3.io.mem.resp.bits.rdata <= io.out.mem.resp.bits.rdata @[Cache.scala 501:14]
    s3.io.mem.resp.bits.cmd <= io.out.mem.resp.bits.cmd @[Cache.scala 501:14]
    s3.io.mem.resp.valid <= io.out.mem.resp.valid @[Cache.scala 501:14]
    io.out.mem.resp.ready <= s3.io.mem.resp.ready @[Cache.scala 501:14]
    io.out.mem.req.bits.wdata <= s3.io.mem.req.bits.wdata @[Cache.scala 501:14]
    io.out.mem.req.bits.wmask <= s3.io.mem.req.bits.wmask @[Cache.scala 501:14]
    io.out.mem.req.bits.cmd <= s3.io.mem.req.bits.cmd @[Cache.scala 501:14]
    io.out.mem.req.bits.size <= s3.io.mem.req.bits.size @[Cache.scala 501:14]
    io.out.mem.req.bits.addr <= s3.io.mem.req.bits.addr @[Cache.scala 501:14]
    io.out.mem.req.valid <= s3.io.mem.req.valid @[Cache.scala 501:14]
    s3.io.mem.req.ready <= io.out.mem.req.ready @[Cache.scala 501:14]
    s3.io.mmio.resp.bits.rdata <= io.mmio.resp.bits.rdata @[Cache.scala 502:11]
    s3.io.mmio.resp.bits.cmd <= io.mmio.resp.bits.cmd @[Cache.scala 502:11]
    s3.io.mmio.resp.valid <= io.mmio.resp.valid @[Cache.scala 502:11]
    io.mmio.resp.ready <= s3.io.mmio.resp.ready @[Cache.scala 502:11]
    io.mmio.req.bits.wdata <= s3.io.mmio.req.bits.wdata @[Cache.scala 502:11]
    io.mmio.req.bits.wmask <= s3.io.mmio.req.bits.wmask @[Cache.scala 502:11]
    io.mmio.req.bits.cmd <= s3.io.mmio.req.bits.cmd @[Cache.scala 502:11]
    io.mmio.req.bits.size <= s3.io.mmio.req.bits.size @[Cache.scala 502:11]
    io.mmio.req.bits.addr <= s3.io.mmio.req.bits.addr @[Cache.scala 502:11]
    io.mmio.req.valid <= s3.io.mmio.req.valid @[Cache.scala 502:11]
    s3.io.mmio.req.ready <= io.mmio.req.ready @[Cache.scala 502:11]
    node _T_12 = eq(s2.io.in.valid, UInt<1>("h00")) @[Cache.scala 503:15]
    node _T_13 = eq(s3.io.in.valid, UInt<1>("h00")) @[Cache.scala 503:34]
    node _T_14 = and(_T_12, _T_13) @[Cache.scala 503:31]
    io.empty <= _T_14 @[Cache.scala 503:12]
    node _T_15 = eq(s3.io.out.bits.cmd, UInt<3>("h04")) @[SimpleBus.scala 95:26]
    node _T_16 = and(s3.io.out.valid, _T_15) @[Cache.scala 505:43]
    node _T_17 = or(s3.io.out.valid, s3.io.dataReadRespToL1) @[Cache.scala 505:100]
    node _T_18 = mux(_T_16, UInt<1>("h00"), _T_17) @[Cache.scala 505:26]
    io.in.resp.valid <= _T_18 @[Cache.scala 505:20]
    wire _T_19 : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>} @[Cache.scala 510:19]
    _T_19.addr <= io.out.coh.req.bits.addr @[SimpleBus.scala 64:15]
    _T_19.cmd <= io.out.coh.req.bits.cmd @[SimpleBus.scala 65:14]
    _T_19.size <= io.out.coh.req.bits.size @[SimpleBus.scala 66:15]
    _T_19.wdata <= io.out.coh.req.bits.wdata @[SimpleBus.scala 67:16]
    _T_19.wmask <= io.out.coh.req.bits.wmask @[SimpleBus.scala 68:16]
    arb.io.in[0].bits.wdata <= _T_19.wdata @[Cache.scala 512:23]
    arb.io.in[0].bits.wmask <= _T_19.wmask @[Cache.scala 512:23]
    arb.io.in[0].bits.cmd <= _T_19.cmd @[Cache.scala 512:23]
    arb.io.in[0].bits.size <= _T_19.size @[Cache.scala 512:23]
    arb.io.in[0].bits.addr <= _T_19.addr @[Cache.scala 512:23]
    arb.io.in[0].valid <= io.out.coh.req.valid @[Cache.scala 513:24]
    io.out.coh.req.ready <= arb.io.in[0].ready @[Cache.scala 514:26]
    io.out.coh.resp.bits.rdata <= s3.io.cohResp.bits.rdata @[Cache.scala 515:21]
    io.out.coh.resp.bits.cmd <= s3.io.cohResp.bits.cmd @[Cache.scala 515:21]
    io.out.coh.resp.valid <= s3.io.cohResp.valid @[Cache.scala 515:21]
    s3.io.cohResp.ready <= io.out.coh.resp.ready @[Cache.scala 515:21]
    s1.io.metaReadBus.resp.data[0].dirty <= metaArray.io.r[0].resp.data[0].dirty @[Cache.scala 523:21]
    s1.io.metaReadBus.resp.data[0].valid <= metaArray.io.r[0].resp.data[0].valid @[Cache.scala 523:21]
    s1.io.metaReadBus.resp.data[0].tag <= metaArray.io.r[0].resp.data[0].tag @[Cache.scala 523:21]
    s1.io.metaReadBus.resp.data[1].dirty <= metaArray.io.r[0].resp.data[1].dirty @[Cache.scala 523:21]
    s1.io.metaReadBus.resp.data[1].valid <= metaArray.io.r[0].resp.data[1].valid @[Cache.scala 523:21]
    s1.io.metaReadBus.resp.data[1].tag <= metaArray.io.r[0].resp.data[1].tag @[Cache.scala 523:21]
    s1.io.metaReadBus.resp.data[2].dirty <= metaArray.io.r[0].resp.data[2].dirty @[Cache.scala 523:21]
    s1.io.metaReadBus.resp.data[2].valid <= metaArray.io.r[0].resp.data[2].valid @[Cache.scala 523:21]
    s1.io.metaReadBus.resp.data[2].tag <= metaArray.io.r[0].resp.data[2].tag @[Cache.scala 523:21]
    s1.io.metaReadBus.resp.data[3].dirty <= metaArray.io.r[0].resp.data[3].dirty @[Cache.scala 523:21]
    s1.io.metaReadBus.resp.data[3].valid <= metaArray.io.r[0].resp.data[3].valid @[Cache.scala 523:21]
    s1.io.metaReadBus.resp.data[3].tag <= metaArray.io.r[0].resp.data[3].tag @[Cache.scala 523:21]
    metaArray.io.r[0].req.bits.setIdx <= s1.io.metaReadBus.req.bits.setIdx @[Cache.scala 523:21]
    metaArray.io.r[0].req.valid <= s1.io.metaReadBus.req.valid @[Cache.scala 523:21]
    s1.io.metaReadBus.req.ready <= metaArray.io.r[0].req.ready @[Cache.scala 523:21]
    s1.io.dataReadBus.resp.data[0].data <= dataArray.io.r[0].resp.data[0].data @[Cache.scala 524:21]
    s1.io.dataReadBus.resp.data[1].data <= dataArray.io.r[0].resp.data[1].data @[Cache.scala 524:21]
    s1.io.dataReadBus.resp.data[2].data <= dataArray.io.r[0].resp.data[2].data @[Cache.scala 524:21]
    s1.io.dataReadBus.resp.data[3].data <= dataArray.io.r[0].resp.data[3].data @[Cache.scala 524:21]
    dataArray.io.r[0].req.bits.setIdx <= s1.io.dataReadBus.req.bits.setIdx @[Cache.scala 524:21]
    dataArray.io.r[0].req.valid <= s1.io.dataReadBus.req.valid @[Cache.scala 524:21]
    s1.io.dataReadBus.req.ready <= dataArray.io.r[0].req.ready @[Cache.scala 524:21]
    s3.io.dataReadBus.resp.data[0].data <= dataArray.io.r[1].resp.data[0].data @[Cache.scala 525:21]
    s3.io.dataReadBus.resp.data[1].data <= dataArray.io.r[1].resp.data[1].data @[Cache.scala 525:21]
    s3.io.dataReadBus.resp.data[2].data <= dataArray.io.r[1].resp.data[2].data @[Cache.scala 525:21]
    s3.io.dataReadBus.resp.data[3].data <= dataArray.io.r[1].resp.data[3].data @[Cache.scala 525:21]
    dataArray.io.r[1].req.bits.setIdx <= s3.io.dataReadBus.req.bits.setIdx @[Cache.scala 525:21]
    dataArray.io.r[1].req.valid <= s3.io.dataReadBus.req.valid @[Cache.scala 525:21]
    s3.io.dataReadBus.req.ready <= dataArray.io.r[1].req.ready @[Cache.scala 525:21]
    metaArray.io.w.req.bits.waymask <= s3.io.metaWriteBus.req.bits.waymask @[Cache.scala 527:18]
    metaArray.io.w.req.bits.data.dirty <= s3.io.metaWriteBus.req.bits.data.dirty @[Cache.scala 527:18]
    metaArray.io.w.req.bits.data.valid <= s3.io.metaWriteBus.req.bits.data.valid @[Cache.scala 527:18]
    metaArray.io.w.req.bits.data.tag <= s3.io.metaWriteBus.req.bits.data.tag @[Cache.scala 527:18]
    metaArray.io.w.req.bits.setIdx <= s3.io.metaWriteBus.req.bits.setIdx @[Cache.scala 527:18]
    metaArray.io.w.req.valid <= s3.io.metaWriteBus.req.valid @[Cache.scala 527:18]
    s3.io.metaWriteBus.req.ready <= metaArray.io.w.req.ready @[Cache.scala 527:18]
    dataArray.io.w.req.bits.waymask <= s3.io.dataWriteBus.req.bits.waymask @[Cache.scala 528:18]
    dataArray.io.w.req.bits.data.data <= s3.io.dataWriteBus.req.bits.data.data @[Cache.scala 528:18]
    dataArray.io.w.req.bits.setIdx <= s3.io.dataWriteBus.req.bits.setIdx @[Cache.scala 528:18]
    dataArray.io.w.req.valid <= s3.io.dataWriteBus.req.valid @[Cache.scala 528:18]
    s3.io.dataWriteBus.req.ready <= dataArray.io.w.req.ready @[Cache.scala 528:18]
    s2.io.metaReadResp[0].dirty <= s1.io.metaReadBus.resp.data[0].dirty @[Cache.scala 530:22]
    s2.io.metaReadResp[0].valid <= s1.io.metaReadBus.resp.data[0].valid @[Cache.scala 530:22]
    s2.io.metaReadResp[0].tag <= s1.io.metaReadBus.resp.data[0].tag @[Cache.scala 530:22]
    s2.io.metaReadResp[1].dirty <= s1.io.metaReadBus.resp.data[1].dirty @[Cache.scala 530:22]
    s2.io.metaReadResp[1].valid <= s1.io.metaReadBus.resp.data[1].valid @[Cache.scala 530:22]
    s2.io.metaReadResp[1].tag <= s1.io.metaReadBus.resp.data[1].tag @[Cache.scala 530:22]
    s2.io.metaReadResp[2].dirty <= s1.io.metaReadBus.resp.data[2].dirty @[Cache.scala 530:22]
    s2.io.metaReadResp[2].valid <= s1.io.metaReadBus.resp.data[2].valid @[Cache.scala 530:22]
    s2.io.metaReadResp[2].tag <= s1.io.metaReadBus.resp.data[2].tag @[Cache.scala 530:22]
    s2.io.metaReadResp[3].dirty <= s1.io.metaReadBus.resp.data[3].dirty @[Cache.scala 530:22]
    s2.io.metaReadResp[3].valid <= s1.io.metaReadBus.resp.data[3].valid @[Cache.scala 530:22]
    s2.io.metaReadResp[3].tag <= s1.io.metaReadBus.resp.data[3].tag @[Cache.scala 530:22]
    s2.io.dataReadResp[0].data <= s1.io.dataReadBus.resp.data[0].data @[Cache.scala 531:22]
    s2.io.dataReadResp[1].data <= s1.io.dataReadBus.resp.data[1].data @[Cache.scala 531:22]
    s2.io.dataReadResp[2].data <= s1.io.dataReadBus.resp.data[2].data @[Cache.scala 531:22]
    s2.io.dataReadResp[3].data <= s1.io.dataReadBus.resp.data[3].data @[Cache.scala 531:22]
    s2.io.dataWriteBus.req.bits.waymask <= s3.io.dataWriteBus.req.bits.waymask @[Cache.scala 532:22]
    s2.io.dataWriteBus.req.bits.data.data <= s3.io.dataWriteBus.req.bits.data.data @[Cache.scala 532:22]
    s2.io.dataWriteBus.req.bits.setIdx <= s3.io.dataWriteBus.req.bits.setIdx @[Cache.scala 532:22]
    s2.io.dataWriteBus.req.valid <= s3.io.dataWriteBus.req.valid @[Cache.scala 532:22]
    s2.io.dataWriteBus.req.ready <= s3.io.dataWriteBus.req.ready @[Cache.scala 532:22]
    s2.io.metaWriteBus.req.bits.waymask <= s3.io.metaWriteBus.req.bits.waymask @[Cache.scala 533:22]
    s2.io.metaWriteBus.req.bits.data.dirty <= s3.io.metaWriteBus.req.bits.data.dirty @[Cache.scala 533:22]
    s2.io.metaWriteBus.req.bits.data.valid <= s3.io.metaWriteBus.req.bits.data.valid @[Cache.scala 533:22]
    s2.io.metaWriteBus.req.bits.data.tag <= s3.io.metaWriteBus.req.bits.data.tag @[Cache.scala 533:22]
    s2.io.metaWriteBus.req.bits.setIdx <= s3.io.metaWriteBus.req.bits.setIdx @[Cache.scala 533:22]
    s2.io.metaWriteBus.req.valid <= s3.io.metaWriteBus.req.valid @[Cache.scala 533:22]
    s2.io.metaWriteBus.req.ready <= s3.io.metaWriteBus.req.ready @[Cache.scala 533:22]
    reg _T_20 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_21 = add(_T_20, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_22 = tail(_T_21, 1) @[GTimer.scala 25:12]
    _T_20 <= _T_22 @[GTimer.scala 25:7]
    wire _T_23 : UInt<1>
    _T_23 <= UInt<1>("h00")
    node _T_24 = and(UInt<1>("h01"), _T_23) @[Debug.scala 55:16]
    when _T_24 : @[Debug.scala 55:31]
      node _T_25 = asUInt(reset) @[Debug.scala 56:24]
      node _T_26 = eq(_T_25, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_26 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] Cache_2: ", _T_20) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_27 = asUInt(reset) @[Debug.scala 57:13]
      node _T_28 = eq(_T_27, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_28 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "InReq(%d, %d) InResp(%d, %d) \n", io.in.req.valid, io.in.req.ready, io.in.resp.valid, io.in.resp.ready) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    reg _T_29 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
    node _T_30 = add(_T_29, UInt<1>("h01")) @[GTimer.scala 25:12]
    node _T_31 = tail(_T_30, 1) @[GTimer.scala 25:12]
    _T_29 <= _T_31 @[GTimer.scala 25:7]
    wire _T_32 : UInt<1>
    _T_32 <= UInt<1>("h00")
    node _T_33 = and(UInt<1>("h01"), _T_32) @[Debug.scala 55:16]
    when _T_33 : @[Debug.scala 55:31]
      node _T_34 = asUInt(reset) @[Debug.scala 56:24]
      node _T_35 = eq(_T_34, UInt<1>("h00")) @[Debug.scala 56:24]
      when _T_35 : @[Debug.scala 56:24]
        printf(clock, UInt<1>(1), "[%d] Cache_2: ", _T_29) @[Debug.scala 56:24]
        skip @[Debug.scala 56:24]
      node _T_36 = asUInt(reset) @[Debug.scala 57:13]
      node _T_37 = eq(_T_36, UInt<1>("h00")) @[Debug.scala 57:13]
      when _T_37 : @[Debug.scala 57:13]
        printf(clock, UInt<1>(1), "{IN s1:(%d,%d), s2:(%d,%d), s3:(%d,%d)} {OUT s1:(%d,%d), s2:(%d,%d), s3:(%d,%d)}\n", s1.io.in.valid, s1.io.in.ready, s2.io.in.valid, s2.io.in.ready, s3.io.in.valid, s3.io.in.ready, s1.io.out.valid, s1.io.out.ready, s2.io.out.valid, s2.io.out.ready, s3.io.out.valid, s3.io.out.ready) @[Debug.scala 57:13]
        skip @[Debug.scala 57:13]
      skip @[Debug.scala 55:31]
    when s1.io.in.valid : @[Cache.scala 543:25]
      reg _T_38 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_39 = add(_T_38, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_40 = tail(_T_39, 1) @[GTimer.scala 25:12]
      _T_38 <= _T_40 @[GTimer.scala 25:7]
      wire _T_41 : UInt<1>
      _T_41 <= UInt<1>("h00")
      node _T_42 = and(UInt<1>("h01"), _T_41) @[Debug.scala 55:16]
      when _T_42 : @[Debug.scala 55:31]
        node _T_43 = asUInt(reset) @[Debug.scala 56:24]
        node _T_44 = eq(_T_43, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_44 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] Cache_2: ", _T_38) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_45 = asUInt(reset) @[Debug.scala 57:13]
        node _T_46 = eq(_T_45, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_46 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[l2cache.S1]: addr = 0x%x, cmd = %d, size = %d, wmask = 0x%x, wdata = 0x%x\n", s1.io.in.bits.addr, s1.io.in.bits.cmd, s1.io.in.bits.size, s1.io.in.bits.wmask, s1.io.in.bits.wdata) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      skip @[Cache.scala 543:25]
    when s2.io.in.valid : @[Cache.scala 544:25]
      reg _T_47 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_48 = add(_T_47, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_49 = tail(_T_48, 1) @[GTimer.scala 25:12]
      _T_47 <= _T_49 @[GTimer.scala 25:7]
      wire _T_50 : UInt<1>
      _T_50 <= UInt<1>("h00")
      node _T_51 = and(UInt<1>("h01"), _T_50) @[Debug.scala 55:16]
      when _T_51 : @[Debug.scala 55:31]
        node _T_52 = asUInt(reset) @[Debug.scala 56:24]
        node _T_53 = eq(_T_52, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_53 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] Cache_2: ", _T_47) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_54 = asUInt(reset) @[Debug.scala 57:13]
        node _T_55 = eq(_T_54, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_55 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[l2cache.S2]: addr = 0x%x, cmd = %d, size = %d, wmask = 0x%x, wdata = 0x%x\n", s2.io.in.bits.req.addr, s2.io.in.bits.req.cmd, s2.io.in.bits.req.size, s2.io.in.bits.req.wmask, s2.io.in.bits.req.wdata) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      skip @[Cache.scala 544:25]
    when s3.io.in.valid : @[Cache.scala 545:25]
      reg _T_56 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
      node _T_57 = add(_T_56, UInt<1>("h01")) @[GTimer.scala 25:12]
      node _T_58 = tail(_T_57, 1) @[GTimer.scala 25:12]
      _T_56 <= _T_58 @[GTimer.scala 25:7]
      wire _T_59 : UInt<1>
      _T_59 <= UInt<1>("h00")
      node _T_60 = and(UInt<1>("h01"), _T_59) @[Debug.scala 55:16]
      when _T_60 : @[Debug.scala 55:31]
        node _T_61 = asUInt(reset) @[Debug.scala 56:24]
        node _T_62 = eq(_T_61, UInt<1>("h00")) @[Debug.scala 56:24]
        when _T_62 : @[Debug.scala 56:24]
          printf(clock, UInt<1>(1), "[%d] Cache_2: ", _T_56) @[Debug.scala 56:24]
          skip @[Debug.scala 56:24]
        node _T_63 = asUInt(reset) @[Debug.scala 57:13]
        node _T_64 = eq(_T_63, UInt<1>("h00")) @[Debug.scala 57:13]
        when _T_64 : @[Debug.scala 57:13]
          printf(clock, UInt<1>(1), "[l2cache.S3]: addr = 0x%x, cmd = %d, size = %d, wmask = 0x%x, wdata = 0x%x\n", s3.io.in.bits.req.addr, s3.io.in.bits.req.cmd, s3.io.in.bits.req.size, s3.io.in.bits.req.wmask, s3.io.in.bits.req.wdata) @[Debug.scala 57:13]
          skip @[Debug.scala 57:13]
        skip @[Debug.scala 55:31]
      skip @[Cache.scala 545:25]
    
  module SimpleBusAddressMapper : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}, out : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}}
    
    io.in.resp.bits.rdata <= io.out.resp.bits.rdata @[AddressMapper.scala 31:10]
    io.in.resp.bits.cmd <= io.out.resp.bits.cmd @[AddressMapper.scala 31:10]
    io.in.resp.valid <= io.out.resp.valid @[AddressMapper.scala 31:10]
    io.out.resp.ready <= io.in.resp.ready @[AddressMapper.scala 31:10]
    io.out.req.bits.wdata <= io.in.req.bits.wdata @[AddressMapper.scala 31:10]
    io.out.req.bits.wmask <= io.in.req.bits.wmask @[AddressMapper.scala 31:10]
    io.out.req.bits.cmd <= io.in.req.bits.cmd @[AddressMapper.scala 31:10]
    io.out.req.bits.size <= io.in.req.bits.size @[AddressMapper.scala 31:10]
    io.out.req.bits.addr <= io.in.req.bits.addr @[AddressMapper.scala 31:10]
    io.out.req.valid <= io.in.req.valid @[AddressMapper.scala 31:10]
    io.in.req.ready <= io.out.req.ready @[AddressMapper.scala 31:10]
    node _T = bits(io.in.req.bits.addr, 27, 0) @[AddressMapper.scala 34:85]
    node _T_1 = cat(UInt<4>("h08"), _T) @[Cat.scala 29:58]
    io.out.req.bits.addr <= _T_1 @[AddressMapper.scala 34:26]
    
  module SimpleBus2AXI4Converter : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}, out : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, prot : UInt<3>, id : UInt<1>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, strb : UInt<8>, last : UInt<1>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<1>, user : UInt<1>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, prot : UInt<3>, id : UInt<1>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<1>, user : UInt<1>}}}}
    
    node _T = bits(io.in.req.bits.cmd, 1, 1) @[SimpleBus.scala 75:22]
    node _T_1 = and(io.in.req.valid, _T) @[ToAXI4.scala 151:38]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[ToAXI4.scala 151:20]
    node toAXI4Lite = and(_T_2, UInt<1>("h00")) @[ToAXI4.scala 151:67]
    node _T_3 = or(toAXI4Lite, UInt<1>("h01")) @[ToAXI4.scala 153:21]
    node _T_4 = asUInt(reset) @[ToAXI4.scala 153:9]
    node _T_5 = or(_T_3, _T_4) @[ToAXI4.scala 153:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[ToAXI4.scala 153:9]
    when _T_6 : @[ToAXI4.scala 153:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at ToAXI4.scala:153 assert(toAXI4Lite || toAXI4)\n") @[ToAXI4.scala 153:9]
      stop(clock, UInt<1>(1), 1) @[ToAXI4.scala 153:9]
      skip @[ToAXI4.scala 153:9]
    io.out.ar.bits.addr <= io.in.req.bits.addr @[ToAXI4.scala 158:12]
    io.out.ar.bits.prot <= UInt<3>("h01") @[ToAXI4.scala 159:12]
    io.out.w.bits.data <= io.in.req.bits.wdata @[ToAXI4.scala 160:10]
    io.out.w.bits.strb <= io.in.req.bits.wmask @[ToAXI4.scala 161:10]
    wire wlast : UInt<1>
    wlast <= UInt<1>("h01")
    wire rlast : UInt<1>
    rlast <= UInt<1>("h01")
    io.out.ar.bits.id <= UInt<1>("h00") @[ToAXI4.scala 168:24]
    node _T_7 = bits(io.in.req.bits.cmd, 1, 1) @[SimpleBus.scala 75:22]
    node _T_8 = mux(_T_7, UInt<3>("h07"), UInt<1>("h00")) @[ToAXI4.scala 169:30]
    io.out.ar.bits.len <= _T_8 @[ToAXI4.scala 169:24]
    io.out.ar.bits.size <= io.in.req.bits.size @[ToAXI4.scala 170:24]
    io.out.ar.bits.burst <= UInt<2>("h02") @[ToAXI4.scala 171:24]
    io.out.ar.bits.lock <= UInt<1>("h00") @[ToAXI4.scala 173:24]
    io.out.ar.bits.cache <= UInt<1>("h00") @[ToAXI4.scala 174:24]
    io.out.ar.bits.qos <= UInt<1>("h00") @[ToAXI4.scala 175:24]
    io.out.ar.bits.user <= UInt<1>("h00") @[ToAXI4.scala 176:24]
    node _T_9 = eq(io.in.req.bits.cmd, UInt<3>("h07")) @[SimpleBus.scala 78:27]
    node _T_10 = eq(io.in.req.bits.cmd, UInt<1>("h01")) @[SimpleBus.scala 77:29]
    node _T_11 = or(_T_9, _T_10) @[ToAXI4.scala 177:54]
    io.out.w.bits.last <= _T_11 @[ToAXI4.scala 177:24]
    wlast <= io.out.w.bits.last @[ToAXI4.scala 178:11]
    rlast <= io.out.r.bits.last @[ToAXI4.scala 179:11]
    io.out.aw.bits.qos <= io.out.ar.bits.qos @[ToAXI4.scala 182:6]
    io.out.aw.bits.cache <= io.out.ar.bits.cache @[ToAXI4.scala 182:6]
    io.out.aw.bits.lock <= io.out.ar.bits.lock @[ToAXI4.scala 182:6]
    io.out.aw.bits.burst <= io.out.ar.bits.burst @[ToAXI4.scala 182:6]
    io.out.aw.bits.size <= io.out.ar.bits.size @[ToAXI4.scala 182:6]
    io.out.aw.bits.len <= io.out.ar.bits.len @[ToAXI4.scala 182:6]
    io.out.aw.bits.user <= io.out.ar.bits.user @[ToAXI4.scala 182:6]
    io.out.aw.bits.id <= io.out.ar.bits.id @[ToAXI4.scala 182:6]
    io.out.aw.bits.prot <= io.out.ar.bits.prot @[ToAXI4.scala 182:6]
    io.out.aw.bits.addr <= io.out.ar.bits.addr @[ToAXI4.scala 182:6]
    io.in.resp.bits.rdata <= io.out.r.bits.data @[ToAXI4.scala 183:23]
    node _T_12 = mux(rlast, UInt<3>("h06"), UInt<1>("h00")) @[ToAXI4.scala 184:28]
    io.in.resp.bits.cmd <= _T_12 @[ToAXI4.scala 184:22]
    wire wSend : UInt<1> @[ToAXI4.scala 186:19]
    node _T_13 = and(io.out.aw.ready, io.out.aw.valid) @[Decoupled.scala 40:37]
    reg awAck : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[StopWatch.scala 24:20]
    when _T_13 : @[StopWatch.scala 30:20]
      awAck <= UInt<1>("h01") @[StopWatch.scala 30:24]
      skip @[StopWatch.scala 30:20]
    when wSend : @[StopWatch.scala 31:19]
      awAck <= UInt<1>("h00") @[StopWatch.scala 31:23]
      skip @[StopWatch.scala 31:19]
    node _T_14 = and(io.out.w.ready, io.out.w.valid) @[Decoupled.scala 40:37]
    node _T_15 = and(_T_14, wlast) @[ToAXI4.scala 188:41]
    reg wAck : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[StopWatch.scala 24:20]
    when _T_15 : @[StopWatch.scala 30:20]
      wAck <= UInt<1>("h01") @[StopWatch.scala 30:24]
      skip @[StopWatch.scala 30:20]
    when wSend : @[StopWatch.scala 31:19]
      wAck <= UInt<1>("h00") @[StopWatch.scala 31:23]
      skip @[StopWatch.scala 31:19]
    node _T_16 = and(io.out.aw.ready, io.out.aw.valid) @[Decoupled.scala 40:37]
    node _T_17 = and(io.out.w.ready, io.out.w.valid) @[Decoupled.scala 40:37]
    node _T_18 = and(_T_16, _T_17) @[ToAXI4.scala 189:27]
    node _T_19 = and(_T_18, wlast) @[ToAXI4.scala 189:43]
    node _T_20 = and(awAck, wAck) @[ToAXI4.scala 189:63]
    node _T_21 = or(_T_19, _T_20) @[ToAXI4.scala 189:53]
    wSend <= _T_21 @[ToAXI4.scala 189:9]
    node _T_22 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_23 = and(io.in.req.ready, io.in.req.valid) @[Decoupled.scala 40:37]
    reg wen : UInt<1>, clock @[Reg.scala 15:16]
    when _T_23 : @[Reg.scala 16:19]
      wen <= _T_22 @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _T_24 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_25 = eq(_T_24, UInt<1>("h00")) @[SimpleBus.scala 73:18]
    node _T_26 = bits(io.in.req.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_27 = eq(_T_26, UInt<1>("h00")) @[SimpleBus.scala 73:29]
    node _T_28 = and(_T_25, _T_27) @[SimpleBus.scala 73:26]
    node _T_29 = and(io.in.req.valid, _T_28) @[SimpleBus.scala 104:29]
    io.out.ar.valid <= _T_29 @[ToAXI4.scala 192:16]
    node _T_30 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_31 = and(io.in.req.valid, _T_30) @[SimpleBus.scala 103:29]
    node _T_32 = eq(awAck, UInt<1>("h00")) @[ToAXI4.scala 193:36]
    node _T_33 = and(_T_31, _T_32) @[ToAXI4.scala 193:33]
    io.out.aw.valid <= _T_33 @[ToAXI4.scala 193:16]
    node _T_34 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_35 = and(io.in.req.valid, _T_34) @[SimpleBus.scala 103:29]
    node _T_36 = eq(wAck, UInt<1>("h00")) @[ToAXI4.scala 194:36]
    node _T_37 = and(_T_35, _T_36) @[ToAXI4.scala 194:33]
    io.out.w.valid <= _T_37 @[ToAXI4.scala 194:16]
    node _T_38 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_39 = eq(wAck, UInt<1>("h00")) @[ToAXI4.scala 195:49]
    node _T_40 = and(_T_39, io.out.w.ready) @[ToAXI4.scala 195:55]
    node _T_41 = mux(_T_38, _T_40, io.out.ar.ready) @[ToAXI4.scala 195:24]
    io.in.req.ready <= _T_41 @[ToAXI4.scala 195:18]
    io.out.r.ready <= io.in.resp.ready @[ToAXI4.scala 197:16]
    io.out.b.ready <= io.in.resp.ready @[ToAXI4.scala 198:16]
    node _T_42 = mux(wen, io.out.b.valid, io.out.r.valid) @[ToAXI4.scala 199:25]
    io.in.resp.valid <= _T_42 @[ToAXI4.scala 199:19]
    
  module SimpleBusCrossbar1toN : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}, out : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}[3]}
    
    reg state : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Crossbar.scala 31:22]
    node _T = geq(io.in.req.bits.addr, UInt<31>("h040600000")) @[Crossbar.scala 36:20]
    node _T_1 = lt(io.in.req.bits.addr, UInt<31>("h041600000")) @[Crossbar.scala 36:42]
    node _T_2 = and(_T, _T_1) @[Crossbar.scala 36:34]
    node _T_3 = geq(io.in.req.bits.addr, UInt<30>("h038000000")) @[Crossbar.scala 36:20]
    node _T_4 = lt(io.in.req.bits.addr, UInt<30>("h038010000")) @[Crossbar.scala 36:42]
    node _T_5 = and(_T_3, _T_4) @[Crossbar.scala 36:34]
    node _T_6 = geq(io.in.req.bits.addr, UInt<30>("h03c000000")) @[Crossbar.scala 36:20]
    node _T_7 = lt(io.in.req.bits.addr, UInt<31>("h040000000")) @[Crossbar.scala 36:42]
    node _T_8 = and(_T_6, _T_7) @[Crossbar.scala 36:34]
    wire outSelVec : UInt<1>[3] @[Crossbar.scala 35:26]
    outSelVec[0] <= _T_2 @[Crossbar.scala 35:26]
    outSelVec[1] <= _T_5 @[Crossbar.scala 35:26]
    outSelVec[2] <= _T_8 @[Crossbar.scala 35:26]
    node _T_9 = mux(outSelVec[1], UInt<1>("h01"), UInt<2>("h02")) @[Mux.scala 47:69]
    node outSelIdx = mux(outSelVec[0], UInt<1>("h00"), _T_9) @[Mux.scala 47:69]
    node _T_10 = and(io.out[outSelIdx].req.ready, io.out[outSelIdx].req.valid) @[Decoupled.scala 40:37]
    node _T_11 = eq(state, UInt<2>("h00")) @[Crossbar.scala 39:72]
    node _T_12 = and(_T_10, _T_11) @[Crossbar.scala 39:62]
    reg outSelIdxResp : UInt<2>, clock @[Reg.scala 15:16]
    when _T_12 : @[Reg.scala 16:19]
      outSelIdxResp <= outSelIdx @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _T_13 = cat(outSelVec[2], outSelVec[1]) @[Crossbar.scala 41:54]
    node _T_14 = cat(_T_13, outSelVec[0]) @[Crossbar.scala 41:54]
    node _T_15 = orr(_T_14) @[Crossbar.scala 41:61]
    node _T_16 = eq(_T_15, UInt<1>("h00")) @[Crossbar.scala 41:43]
    node reqInvalidAddr = and(io.in.req.valid, _T_16) @[Crossbar.scala 41:40]
    node _T_17 = cat(outSelVec[2], outSelVec[1]) @[Crossbar.scala 43:39]
    node _T_18 = cat(_T_17, outSelVec[0]) @[Crossbar.scala 43:39]
    node _T_19 = orr(_T_18) @[Crossbar.scala 43:46]
    node _T_20 = eq(_T_19, UInt<1>("h00")) @[Crossbar.scala 43:28]
    node _T_21 = and(io.in.req.valid, _T_20) @[Crossbar.scala 43:25]
    node _T_22 = cat(outSelVec[2], outSelVec[1]) @[Crossbar.scala 43:84]
    node _T_23 = cat(_T_22, outSelVec[0]) @[Crossbar.scala 43:84]
    node _T_24 = andr(_T_23) @[Crossbar.scala 43:91]
    node _T_25 = and(io.in.req.valid, _T_24) @[Crossbar.scala 43:71]
    node _T_26 = or(_T_21, _T_25) @[Crossbar.scala 43:51]
    when _T_26 : @[Crossbar.scala 43:97]
      wire _T_27 : UInt<1>
      _T_27 <= UInt<1>("h00")
      node _T_28 = and(UInt<1>("h01"), _T_27) @[Debug.scala 80:29]
      when _T_28 : @[Debug.scala 80:52]
        reg _T_29 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
        node _T_30 = add(_T_29, UInt<1>("h01")) @[GTimer.scala 25:12]
        node _T_31 = tail(_T_30, 1) @[GTimer.scala 25:12]
        _T_29 <= _T_31 @[GTimer.scala 25:7]
        node _T_32 = asUInt(reset) @[Crossbar.scala 45:13]
        node _T_33 = eq(_T_32, UInt<1>("h00")) @[Crossbar.scala 45:13]
        when _T_33 : @[Crossbar.scala 45:13]
          printf(clock, UInt<1>(1), "crossbar access bad addr %x, time %d\n", io.in.req.bits.addr, _T_29) @[Crossbar.scala 45:13]
          skip @[Crossbar.scala 45:13]
        skip @[Debug.scala 80:52]
      skip @[Crossbar.scala 43:97]
    node _T_34 = cat(outSelVec[2], outSelVec[1]) @[Crossbar.scala 49:41]
    node _T_35 = cat(_T_34, outSelVec[0]) @[Crossbar.scala 49:41]
    node _T_36 = andr(_T_35) @[Crossbar.scala 49:48]
    node _T_37 = and(io.in.req.valid, _T_36) @[Crossbar.scala 49:28]
    node _T_38 = eq(_T_37, UInt<1>("h00")) @[Crossbar.scala 49:10]
    node _T_39 = asUInt(reset) @[Crossbar.scala 49:9]
    node _T_40 = or(_T_38, _T_39) @[Crossbar.scala 49:9]
    node _T_41 = eq(_T_40, UInt<1>("h00")) @[Crossbar.scala 49:9]
    when _T_41 : @[Crossbar.scala 49:9]
      printf(clock, UInt<1>(1), "Assertion failed: address decode error, bad addr = 0x%x\n\n    at Crossbar.scala:49 assert(!(io.in.req.valid && outSelVec.asUInt.andR), \"address decode error, bad addr = 0x%%x\\n\", addr)\n", io.in.req.bits.addr) @[Crossbar.scala 49:9]
      stop(clock, UInt<1>(1), 1) @[Crossbar.scala 49:9]
      skip @[Crossbar.scala 49:9]
    io.out[0].req.bits.wdata <= io.in.req.bits.wdata @[Crossbar.scala 53:16]
    io.out[0].req.bits.wmask <= io.in.req.bits.wmask @[Crossbar.scala 53:16]
    io.out[0].req.bits.cmd <= io.in.req.bits.cmd @[Crossbar.scala 53:16]
    io.out[0].req.bits.size <= io.in.req.bits.size @[Crossbar.scala 53:16]
    io.out[0].req.bits.addr <= io.in.req.bits.addr @[Crossbar.scala 53:16]
    node _T_42 = eq(state, UInt<2>("h00")) @[Crossbar.scala 54:52]
    node _T_43 = and(io.in.req.valid, _T_42) @[Crossbar.scala 54:42]
    node _T_44 = and(outSelVec[0], _T_43) @[Crossbar.scala 54:22]
    io.out[0].req.valid <= _T_44 @[Crossbar.scala 54:17]
    io.out[0].resp.ready <= outSelVec[0] @[Crossbar.scala 55:18]
    io.out[1].req.bits.wdata <= io.in.req.bits.wdata @[Crossbar.scala 53:16]
    io.out[1].req.bits.wmask <= io.in.req.bits.wmask @[Crossbar.scala 53:16]
    io.out[1].req.bits.cmd <= io.in.req.bits.cmd @[Crossbar.scala 53:16]
    io.out[1].req.bits.size <= io.in.req.bits.size @[Crossbar.scala 53:16]
    io.out[1].req.bits.addr <= io.in.req.bits.addr @[Crossbar.scala 53:16]
    node _T_45 = eq(state, UInt<2>("h00")) @[Crossbar.scala 54:52]
    node _T_46 = and(io.in.req.valid, _T_45) @[Crossbar.scala 54:42]
    node _T_47 = and(outSelVec[1], _T_46) @[Crossbar.scala 54:22]
    io.out[1].req.valid <= _T_47 @[Crossbar.scala 54:17]
    io.out[1].resp.ready <= outSelVec[1] @[Crossbar.scala 55:18]
    io.out[2].req.bits.wdata <= io.in.req.bits.wdata @[Crossbar.scala 53:16]
    io.out[2].req.bits.wmask <= io.in.req.bits.wmask @[Crossbar.scala 53:16]
    io.out[2].req.bits.cmd <= io.in.req.bits.cmd @[Crossbar.scala 53:16]
    io.out[2].req.bits.size <= io.in.req.bits.size @[Crossbar.scala 53:16]
    io.out[2].req.bits.addr <= io.in.req.bits.addr @[Crossbar.scala 53:16]
    node _T_48 = eq(state, UInt<2>("h00")) @[Crossbar.scala 54:52]
    node _T_49 = and(io.in.req.valid, _T_48) @[Crossbar.scala 54:42]
    node _T_50 = and(outSelVec[2], _T_49) @[Crossbar.scala 54:22]
    io.out[2].req.valid <= _T_50 @[Crossbar.scala 54:17]
    io.out[2].resp.ready <= outSelVec[2] @[Crossbar.scala 55:18]
    node _T_51 = eq(UInt<2>("h00"), state) @[Conditional.scala 37:30]
    when _T_51 : @[Conditional.scala 40:58]
      node _T_52 = and(io.out[outSelIdx].req.ready, io.out[outSelIdx].req.valid) @[Decoupled.scala 40:37]
      when _T_52 : @[Crossbar.scala 60:32]
        state <= UInt<2>("h01") @[Crossbar.scala 60:40]
        skip @[Crossbar.scala 60:32]
      when reqInvalidAddr : @[Crossbar.scala 61:29]
        state <= UInt<2>("h02") @[Crossbar.scala 61:37]
        skip @[Crossbar.scala 61:29]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_53 = eq(UInt<2>("h01"), state) @[Conditional.scala 37:30]
      when _T_53 : @[Conditional.scala 39:67]
        node _T_54 = and(io.out[outSelIdxResp].resp.ready, io.out[outSelIdxResp].resp.valid) @[Decoupled.scala 40:37]
        when _T_54 : @[Crossbar.scala 63:49]
          state <= UInt<2>("h00") @[Crossbar.scala 63:57]
          skip @[Crossbar.scala 63:49]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_55 = eq(UInt<2>("h02"), state) @[Conditional.scala 37:30]
        when _T_55 : @[Conditional.scala 39:67]
          node _T_56 = and(io.in.resp.ready, io.in.resp.valid) @[Decoupled.scala 40:37]
          when _T_56 : @[Crossbar.scala 64:43]
            state <= UInt<2>("h00") @[Crossbar.scala 64:51]
            skip @[Crossbar.scala 64:43]
          skip @[Conditional.scala 39:67]
    node _T_57 = and(io.out[outSelIdxResp].resp.ready, io.out[outSelIdxResp].resp.valid) @[Decoupled.scala 40:37]
    node _T_58 = eq(state, UInt<2>("h02")) @[Crossbar.scala 67:55]
    node _T_59 = or(_T_57, _T_58) @[Crossbar.scala 67:46]
    io.in.resp.valid <= _T_59 @[Crossbar.scala 67:20]
    io.in.resp.bits.rdata <= io.out[outSelIdxResp].resp.bits.rdata @[Crossbar.scala 68:19]
    io.in.resp.bits.cmd <= io.out[outSelIdxResp].resp.bits.cmd @[Crossbar.scala 68:19]
    io.out[outSelIdxResp].resp.ready <= io.in.resp.ready @[Crossbar.scala 70:25]
    node _T_60 = or(io.out[outSelIdx].req.ready, reqInvalidAddr) @[Crossbar.scala 71:39]
    io.in.req.ready <= _T_60 @[Crossbar.scala 71:19]
    wire _T_61 : UInt<1>
    _T_61 <= UInt<1>("h00")
    node _T_62 = and(UInt<1>("h01"), _T_61) @[Debug.scala 80:29]
    when _T_62 : @[Debug.scala 80:52]
      node _T_63 = eq(state, UInt<2>("h00")) @[Crossbar.scala 74:17]
      node _T_64 = and(_T_63, io.in.req.valid) @[Crossbar.scala 74:28]
      when _T_64 : @[Crossbar.scala 74:48]
        reg _T_65 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
        node _T_66 = add(_T_65, UInt<1>("h01")) @[GTimer.scala 25:12]
        node _T_67 = tail(_T_66, 1) @[GTimer.scala 25:12]
        _T_65 <= _T_67 @[GTimer.scala 25:7]
        node _T_68 = asUInt(reset) @[Crossbar.scala 75:13]
        node _T_69 = eq(_T_68, UInt<1>("h00")) @[Crossbar.scala 75:13]
        when _T_69 : @[Crossbar.scala 75:13]
          printf(clock, UInt<1>(1), "%d: xbar: in.req: addr = 0x%x, cmd = %d, size = %d, wmask = 0x%x, wdata = 0x%x\n", _T_65, io.in.req.bits.addr, io.in.req.bits.cmd, io.in.req.bits.size, io.in.req.bits.wmask, io.in.req.bits.wdata) @[Crossbar.scala 75:13]
          skip @[Crossbar.scala 75:13]
        skip @[Crossbar.scala 74:48]
      node _T_70 = and(io.out[outSelIdx].req.ready, io.out[outSelIdx].req.valid) @[Decoupled.scala 40:37]
      when _T_70 : @[Crossbar.scala 78:30]
        reg _T_71 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
        node _T_72 = add(_T_71, UInt<1>("h01")) @[GTimer.scala 25:12]
        node _T_73 = tail(_T_72, 1) @[GTimer.scala 25:12]
        _T_71 <= _T_73 @[GTimer.scala 25:7]
        node _T_74 = asUInt(reset) @[Crossbar.scala 79:13]
        node _T_75 = eq(_T_74, UInt<1>("h00")) @[Crossbar.scala 79:13]
        when _T_75 : @[Crossbar.scala 79:13]
          printf(clock, UInt<1>(1), "%d: xbar: outSelIdx = %d, outSel.req: addr = 0x%x, cmd = %d, size = %d, wmask = 0x%x, wdata = 0x%x\n", _T_71, outSelIdx, io.out[outSelIdx].req.bits.addr, io.out[outSelIdx].req.bits.cmd, io.out[outSelIdx].req.bits.size, io.out[outSelIdx].req.bits.wmask, io.out[outSelIdx].req.bits.wdata) @[Crossbar.scala 79:13]
          skip @[Crossbar.scala 79:13]
        skip @[Crossbar.scala 78:30]
      node _T_76 = and(io.out[outSelIdx].resp.ready, io.out[outSelIdx].resp.valid) @[Decoupled.scala 40:37]
      when _T_76 : @[Crossbar.scala 81:31]
        reg _T_77 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
        node _T_78 = add(_T_77, UInt<1>("h01")) @[GTimer.scala 25:12]
        node _T_79 = tail(_T_78, 1) @[GTimer.scala 25:12]
        _T_77 <= _T_79 @[GTimer.scala 25:7]
        node _T_80 = asUInt(reset) @[Crossbar.scala 82:13]
        node _T_81 = eq(_T_80, UInt<1>("h00")) @[Crossbar.scala 82:13]
        when _T_81 : @[Crossbar.scala 82:13]
          printf(clock, UInt<1>(1), "%d: xbar: outSelIdx= %d, outSel.resp: rdata = %x, cmd = %d\n", _T_77, outSelIdx, io.out[outSelIdx].resp.bits.rdata, io.out[outSelIdx].resp.bits.cmd) @[Crossbar.scala 82:13]
          skip @[Crossbar.scala 82:13]
        skip @[Crossbar.scala 81:31]
      node _T_82 = and(io.in.resp.ready, io.in.resp.valid) @[Decoupled.scala 40:37]
      when _T_82 : @[Crossbar.scala 85:30]
        reg _T_83 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[GTimer.scala 24:20]
        node _T_84 = add(_T_83, UInt<1>("h01")) @[GTimer.scala 25:12]
        node _T_85 = tail(_T_84, 1) @[GTimer.scala 25:12]
        _T_83 <= _T_85 @[GTimer.scala 25:7]
        node _T_86 = asUInt(reset) @[Crossbar.scala 86:13]
        node _T_87 = eq(_T_86, UInt<1>("h00")) @[Crossbar.scala 86:13]
        when _T_87 : @[Crossbar.scala 86:13]
          printf(clock, UInt<1>(1), "%d: xbar: in.resp: rdata = %x, cmd = %d\n", _T_83, io.in.resp.bits.rdata, io.in.resp.bits.cmd) @[Crossbar.scala 86:13]
          skip @[Crossbar.scala 86:13]
        skip @[Crossbar.scala 85:30]
      skip @[Debug.scala 80:52]
    
  module SimpleBus2AXI4Converter_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}, out : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, prot : UInt<3>, id : UInt<1>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, strb : UInt<8>, last : UInt<1>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<1>, user : UInt<1>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, prot : UInt<3>, id : UInt<1>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<1>, user : UInt<1>}}}}
    
    node _T = bits(io.in.req.bits.cmd, 1, 1) @[SimpleBus.scala 75:22]
    node _T_1 = and(io.in.req.valid, _T) @[ToAXI4.scala 151:38]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[ToAXI4.scala 151:20]
    node toAXI4Lite = and(_T_2, UInt<1>("h00")) @[ToAXI4.scala 151:67]
    node _T_3 = or(toAXI4Lite, UInt<1>("h01")) @[ToAXI4.scala 153:21]
    node _T_4 = asUInt(reset) @[ToAXI4.scala 153:9]
    node _T_5 = or(_T_3, _T_4) @[ToAXI4.scala 153:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[ToAXI4.scala 153:9]
    when _T_6 : @[ToAXI4.scala 153:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at ToAXI4.scala:153 assert(toAXI4Lite || toAXI4)\n") @[ToAXI4.scala 153:9]
      stop(clock, UInt<1>(1), 1) @[ToAXI4.scala 153:9]
      skip @[ToAXI4.scala 153:9]
    io.out.ar.bits.addr <= io.in.req.bits.addr @[ToAXI4.scala 158:12]
    io.out.ar.bits.prot <= UInt<3>("h01") @[ToAXI4.scala 159:12]
    io.out.w.bits.data <= io.in.req.bits.wdata @[ToAXI4.scala 160:10]
    io.out.w.bits.strb <= io.in.req.bits.wmask @[ToAXI4.scala 161:10]
    wire wlast : UInt<1>
    wlast <= UInt<1>("h01")
    wire rlast : UInt<1>
    rlast <= UInt<1>("h01")
    io.out.ar.bits.id <= UInt<1>("h00") @[ToAXI4.scala 168:24]
    node _T_7 = bits(io.in.req.bits.cmd, 1, 1) @[SimpleBus.scala 75:22]
    node _T_8 = mux(_T_7, UInt<3>("h07"), UInt<1>("h00")) @[ToAXI4.scala 169:30]
    io.out.ar.bits.len <= _T_8 @[ToAXI4.scala 169:24]
    io.out.ar.bits.size <= io.in.req.bits.size @[ToAXI4.scala 170:24]
    io.out.ar.bits.burst <= UInt<2>("h01") @[ToAXI4.scala 171:24]
    io.out.ar.bits.lock <= UInt<1>("h00") @[ToAXI4.scala 173:24]
    io.out.ar.bits.cache <= UInt<1>("h00") @[ToAXI4.scala 174:24]
    io.out.ar.bits.qos <= UInt<1>("h00") @[ToAXI4.scala 175:24]
    io.out.ar.bits.user <= UInt<1>("h00") @[ToAXI4.scala 176:24]
    node _T_9 = eq(io.in.req.bits.cmd, UInt<3>("h07")) @[SimpleBus.scala 78:27]
    node _T_10 = eq(io.in.req.bits.cmd, UInt<1>("h01")) @[SimpleBus.scala 77:29]
    node _T_11 = or(_T_9, _T_10) @[ToAXI4.scala 177:54]
    io.out.w.bits.last <= _T_11 @[ToAXI4.scala 177:24]
    wlast <= io.out.w.bits.last @[ToAXI4.scala 178:11]
    rlast <= io.out.r.bits.last @[ToAXI4.scala 179:11]
    io.out.aw.bits.qos <= io.out.ar.bits.qos @[ToAXI4.scala 182:6]
    io.out.aw.bits.cache <= io.out.ar.bits.cache @[ToAXI4.scala 182:6]
    io.out.aw.bits.lock <= io.out.ar.bits.lock @[ToAXI4.scala 182:6]
    io.out.aw.bits.burst <= io.out.ar.bits.burst @[ToAXI4.scala 182:6]
    io.out.aw.bits.size <= io.out.ar.bits.size @[ToAXI4.scala 182:6]
    io.out.aw.bits.len <= io.out.ar.bits.len @[ToAXI4.scala 182:6]
    io.out.aw.bits.user <= io.out.ar.bits.user @[ToAXI4.scala 182:6]
    io.out.aw.bits.id <= io.out.ar.bits.id @[ToAXI4.scala 182:6]
    io.out.aw.bits.prot <= io.out.ar.bits.prot @[ToAXI4.scala 182:6]
    io.out.aw.bits.addr <= io.out.ar.bits.addr @[ToAXI4.scala 182:6]
    io.in.resp.bits.rdata <= io.out.r.bits.data @[ToAXI4.scala 183:23]
    node _T_12 = mux(rlast, UInt<3>("h06"), UInt<1>("h00")) @[ToAXI4.scala 184:28]
    io.in.resp.bits.cmd <= _T_12 @[ToAXI4.scala 184:22]
    wire wSend : UInt<1> @[ToAXI4.scala 186:19]
    node _T_13 = and(io.out.aw.ready, io.out.aw.valid) @[Decoupled.scala 40:37]
    reg awAck : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[StopWatch.scala 24:20]
    when _T_13 : @[StopWatch.scala 30:20]
      awAck <= UInt<1>("h01") @[StopWatch.scala 30:24]
      skip @[StopWatch.scala 30:20]
    when wSend : @[StopWatch.scala 31:19]
      awAck <= UInt<1>("h00") @[StopWatch.scala 31:23]
      skip @[StopWatch.scala 31:19]
    node _T_14 = and(io.out.w.ready, io.out.w.valid) @[Decoupled.scala 40:37]
    node _T_15 = and(_T_14, wlast) @[ToAXI4.scala 188:41]
    reg wAck : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[StopWatch.scala 24:20]
    when _T_15 : @[StopWatch.scala 30:20]
      wAck <= UInt<1>("h01") @[StopWatch.scala 30:24]
      skip @[StopWatch.scala 30:20]
    when wSend : @[StopWatch.scala 31:19]
      wAck <= UInt<1>("h00") @[StopWatch.scala 31:23]
      skip @[StopWatch.scala 31:19]
    node _T_16 = and(io.out.aw.ready, io.out.aw.valid) @[Decoupled.scala 40:37]
    node _T_17 = and(io.out.w.ready, io.out.w.valid) @[Decoupled.scala 40:37]
    node _T_18 = and(_T_16, _T_17) @[ToAXI4.scala 189:27]
    node _T_19 = and(_T_18, wlast) @[ToAXI4.scala 189:43]
    node _T_20 = and(awAck, wAck) @[ToAXI4.scala 189:63]
    node _T_21 = or(_T_19, _T_20) @[ToAXI4.scala 189:53]
    wSend <= _T_21 @[ToAXI4.scala 189:9]
    node _T_22 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_23 = and(io.in.req.ready, io.in.req.valid) @[Decoupled.scala 40:37]
    reg wen : UInt<1>, clock @[Reg.scala 15:16]
    when _T_23 : @[Reg.scala 16:19]
      wen <= _T_22 @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _T_24 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_25 = eq(_T_24, UInt<1>("h00")) @[SimpleBus.scala 73:18]
    node _T_26 = bits(io.in.req.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_27 = eq(_T_26, UInt<1>("h00")) @[SimpleBus.scala 73:29]
    node _T_28 = and(_T_25, _T_27) @[SimpleBus.scala 73:26]
    node _T_29 = and(io.in.req.valid, _T_28) @[SimpleBus.scala 104:29]
    io.out.ar.valid <= _T_29 @[ToAXI4.scala 192:16]
    node _T_30 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_31 = and(io.in.req.valid, _T_30) @[SimpleBus.scala 103:29]
    node _T_32 = eq(awAck, UInt<1>("h00")) @[ToAXI4.scala 193:36]
    node _T_33 = and(_T_31, _T_32) @[ToAXI4.scala 193:33]
    io.out.aw.valid <= _T_33 @[ToAXI4.scala 193:16]
    node _T_34 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_35 = and(io.in.req.valid, _T_34) @[SimpleBus.scala 103:29]
    node _T_36 = eq(wAck, UInt<1>("h00")) @[ToAXI4.scala 194:36]
    node _T_37 = and(_T_35, _T_36) @[ToAXI4.scala 194:33]
    io.out.w.valid <= _T_37 @[ToAXI4.scala 194:16]
    node _T_38 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_39 = eq(wAck, UInt<1>("h00")) @[ToAXI4.scala 195:49]
    node _T_40 = and(_T_39, io.out.w.ready) @[ToAXI4.scala 195:55]
    node _T_41 = mux(_T_38, _T_40, io.out.ar.ready) @[ToAXI4.scala 195:24]
    io.in.req.ready <= _T_41 @[ToAXI4.scala 195:18]
    io.out.r.ready <= io.in.resp.ready @[ToAXI4.scala 197:16]
    io.out.b.ready <= io.in.resp.ready @[ToAXI4.scala 198:16]
    node _T_42 = mux(wen, io.out.b.valid, io.out.r.valid) @[ToAXI4.scala 199:25]
    io.in.resp.valid <= _T_42 @[ToAXI4.scala 199:19]
    
  module AXI4CLINT : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, prot : UInt<3>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, strb : UInt<8>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, prot : UInt<3>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>}}}, extra : {mtip : UInt<1>, msip : UInt<1>}}
    
    node _T = bits(io.in.w.bits.strb, 0, 0) @[BitUtils.scala 27:29]
    node _T_1 = bits(io.in.w.bits.strb, 1, 1) @[BitUtils.scala 27:29]
    node _T_2 = bits(io.in.w.bits.strb, 2, 2) @[BitUtils.scala 27:29]
    node _T_3 = bits(io.in.w.bits.strb, 3, 3) @[BitUtils.scala 27:29]
    node _T_4 = bits(io.in.w.bits.strb, 4, 4) @[BitUtils.scala 27:29]
    node _T_5 = bits(io.in.w.bits.strb, 5, 5) @[BitUtils.scala 27:29]
    node _T_6 = bits(io.in.w.bits.strb, 6, 6) @[BitUtils.scala 27:29]
    node _T_7 = bits(io.in.w.bits.strb, 7, 7) @[BitUtils.scala 27:29]
    node _T_8 = bits(_T, 0, 0) @[Bitwise.scala 72:15]
    node _T_9 = mux(_T_8, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_10 = bits(_T_1, 0, 0) @[Bitwise.scala 72:15]
    node _T_11 = mux(_T_10, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_12 = bits(_T_2, 0, 0) @[Bitwise.scala 72:15]
    node _T_13 = mux(_T_12, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_14 = bits(_T_3, 0, 0) @[Bitwise.scala 72:15]
    node _T_15 = mux(_T_14, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_16 = bits(_T_4, 0, 0) @[Bitwise.scala 72:15]
    node _T_17 = mux(_T_16, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_18 = bits(_T_5, 0, 0) @[Bitwise.scala 72:15]
    node _T_19 = mux(_T_18, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_20 = bits(_T_6, 0, 0) @[Bitwise.scala 72:15]
    node _T_21 = mux(_T_20, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_22 = bits(_T_7, 0, 0) @[Bitwise.scala 72:15]
    node _T_23 = mux(_T_22, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_24 = cat(_T_11, _T_9) @[Cat.scala 29:58]
    node _T_25 = cat(_T_15, _T_13) @[Cat.scala 29:58]
    node _T_26 = cat(_T_25, _T_24) @[Cat.scala 29:58]
    node _T_27 = cat(_T_19, _T_17) @[Cat.scala 29:58]
    node _T_28 = cat(_T_23, _T_21) @[Cat.scala 29:58]
    node _T_29 = cat(_T_28, _T_27) @[Cat.scala 29:58]
    node fullMask = cat(_T_29, _T_26) @[Cat.scala 29:58]
    wire raddr : UInt @[AXI4Slave.scala 37:19]
    wire ren : UInt<1> @[AXI4Slave.scala 38:17]
    raddr <= io.in.ar.bits.addr @[AXI4Slave.scala 66:13]
    node _T_30 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    node _T_31 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    node _T_32 = and(_T_31, UInt<1>("h01")) @[AXI4Slave.scala 70:56]
    reg r_busy : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[StopWatch.scala 24:20]
    when _T_32 : @[StopWatch.scala 26:19]
      r_busy <= UInt<1>("h00") @[StopWatch.scala 26:23]
      skip @[StopWatch.scala 26:19]
    when _T_30 : @[StopWatch.scala 27:20]
      r_busy <= UInt<1>("h01") @[StopWatch.scala 27:24]
      skip @[StopWatch.scala 27:20]
    node _T_33 = eq(r_busy, UInt<1>("h00")) @[AXI4Slave.scala 71:32]
    node _T_34 = or(io.in.r.ready, _T_33) @[AXI4Slave.scala 71:29]
    io.in.ar.ready <= _T_34 @[AXI4Slave.scala 71:15]
    io.in.r.bits.resp <= UInt<2>("h00") @[AXI4Slave.scala 72:18]
    node _T_35 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    reg _T_36 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[AXI4Slave.scala 73:17]
    _T_36 <= _T_35 @[AXI4Slave.scala 73:17]
    node _T_37 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    node _T_38 = eq(UInt<1>("h01"), UInt<1>("h00")) @[AXI4Slave.scala 73:65]
    node _T_39 = and(_T_37, _T_38) @[AXI4Slave.scala 73:62]
    node _T_40 = or(_T_36, _T_39) @[AXI4Slave.scala 73:46]
    ren <= _T_40 @[AXI4Slave.scala 73:7]
    node _T_41 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    node _T_42 = or(_T_41, r_busy) @[AXI4Slave.scala 74:52]
    node _T_43 = and(ren, _T_42) @[AXI4Slave.scala 74:35]
    node _T_44 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    reg _T_45 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[StopWatch.scala 24:20]
    when _T_44 : @[StopWatch.scala 26:19]
      _T_45 <= UInt<1>("h00") @[StopWatch.scala 26:23]
      skip @[StopWatch.scala 26:19]
    when _T_43 : @[StopWatch.scala 27:20]
      _T_45 <= UInt<1>("h01") @[StopWatch.scala 27:24]
      skip @[StopWatch.scala 27:20]
    io.in.r.valid <= _T_45 @[AXI4Slave.scala 74:14]
    wire waddr : UInt @[AXI4Slave.scala 77:19]
    waddr <= io.in.aw.bits.addr @[AXI4Slave.scala 89:13]
    node _T_46 = and(io.in.aw.ready, io.in.aw.valid) @[Decoupled.scala 40:37]
    node _T_47 = and(io.in.b.ready, io.in.b.valid) @[Decoupled.scala 40:37]
    reg w_busy : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[StopWatch.scala 24:20]
    when _T_47 : @[StopWatch.scala 26:19]
      w_busy <= UInt<1>("h00") @[StopWatch.scala 26:23]
      skip @[StopWatch.scala 26:19]
    when _T_46 : @[StopWatch.scala 27:20]
      w_busy <= UInt<1>("h01") @[StopWatch.scala 27:24]
      skip @[StopWatch.scala 27:20]
    node _T_48 = eq(w_busy, UInt<1>("h00")) @[AXI4Slave.scala 94:18]
    io.in.aw.ready <= _T_48 @[AXI4Slave.scala 94:15]
    node _T_49 = or(io.in.aw.valid, w_busy) @[AXI4Slave.scala 95:30]
    io.in.w.ready <= _T_49 @[AXI4Slave.scala 95:15]
    io.in.b.bits.resp <= UInt<2>("h00") @[AXI4Slave.scala 96:18]
    node _T_50 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 40:37]
    node _T_51 = and(_T_50, UInt<1>("h01")) @[AXI4Slave.scala 97:43]
    node _T_52 = and(io.in.b.ready, io.in.b.valid) @[Decoupled.scala 40:37]
    reg _T_53 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[StopWatch.scala 24:20]
    when _T_52 : @[StopWatch.scala 26:19]
      _T_53 <= UInt<1>("h00") @[StopWatch.scala 26:23]
      skip @[StopWatch.scala 26:19]
    when _T_51 : @[StopWatch.scala 27:20]
      _T_53 <= UInt<1>("h01") @[StopWatch.scala 27:24]
      skip @[StopWatch.scala 27:20]
    io.in.b.valid <= _T_53 @[AXI4Slave.scala 97:14]
    reg mtime : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[AXI4CLINT.scala 32:22]
    reg mtimecmp : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[AXI4CLINT.scala 33:25]
    reg msip : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[AXI4CLINT.scala 34:21]
    reg freq : UInt<16>, clock with : (reset => (reset, UInt<16>("h028"))) @[AXI4CLINT.scala 37:21]
    reg inc : UInt<16>, clock with : (reset => (reset, UInt<16>("h01"))) @[AXI4CLINT.scala 38:20]
    reg cnt : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[AXI4CLINT.scala 40:20]
    node _T_54 = add(cnt, UInt<1>("h01")) @[AXI4CLINT.scala 41:21]
    node nextCnt = tail(_T_54, 1) @[AXI4CLINT.scala 41:21]
    node _T_55 = lt(nextCnt, freq) @[AXI4CLINT.scala 42:22]
    node _T_56 = mux(_T_55, nextCnt, UInt<1>("h00")) @[AXI4CLINT.scala 42:13]
    cnt <= _T_56 @[AXI4CLINT.scala 42:7]
    node tick = eq(nextCnt, freq) @[AXI4CLINT.scala 43:23]
    when tick : @[AXI4CLINT.scala 44:15]
      node _T_57 = add(mtime, inc) @[AXI4CLINT.scala 44:32]
      node _T_58 = tail(_T_57, 1) @[AXI4CLINT.scala 44:32]
      mtime <= _T_58 @[AXI4CLINT.scala 44:23]
      skip @[AXI4CLINT.scala 44:15]
    node _T_59 = bits(raddr, 15, 0) @[AXI4CLINT.scala 59:35]
    node _T_60 = bits(waddr, 15, 0) @[AXI4CLINT.scala 59:35]
    node _T_61 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 40:37]
    node _T_62 = bits(io.in.w.bits.strb, 0, 0) @[BitUtils.scala 27:29]
    node _T_63 = bits(io.in.w.bits.strb, 1, 1) @[BitUtils.scala 27:29]
    node _T_64 = bits(io.in.w.bits.strb, 2, 2) @[BitUtils.scala 27:29]
    node _T_65 = bits(io.in.w.bits.strb, 3, 3) @[BitUtils.scala 27:29]
    node _T_66 = bits(io.in.w.bits.strb, 4, 4) @[BitUtils.scala 27:29]
    node _T_67 = bits(io.in.w.bits.strb, 5, 5) @[BitUtils.scala 27:29]
    node _T_68 = bits(io.in.w.bits.strb, 6, 6) @[BitUtils.scala 27:29]
    node _T_69 = bits(io.in.w.bits.strb, 7, 7) @[BitUtils.scala 27:29]
    node _T_70 = bits(_T_62, 0, 0) @[Bitwise.scala 72:15]
    node _T_71 = mux(_T_70, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_72 = bits(_T_63, 0, 0) @[Bitwise.scala 72:15]
    node _T_73 = mux(_T_72, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_74 = bits(_T_64, 0, 0) @[Bitwise.scala 72:15]
    node _T_75 = mux(_T_74, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_76 = bits(_T_65, 0, 0) @[Bitwise.scala 72:15]
    node _T_77 = mux(_T_76, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_78 = bits(_T_66, 0, 0) @[Bitwise.scala 72:15]
    node _T_79 = mux(_T_78, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_80 = bits(_T_67, 0, 0) @[Bitwise.scala 72:15]
    node _T_81 = mux(_T_80, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_82 = bits(_T_68, 0, 0) @[Bitwise.scala 72:15]
    node _T_83 = mux(_T_82, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_84 = bits(_T_69, 0, 0) @[Bitwise.scala 72:15]
    node _T_85 = mux(_T_84, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_86 = cat(_T_73, _T_71) @[Cat.scala 29:58]
    node _T_87 = cat(_T_77, _T_75) @[Cat.scala 29:58]
    node _T_88 = cat(_T_87, _T_86) @[Cat.scala 29:58]
    node _T_89 = cat(_T_81, _T_79) @[Cat.scala 29:58]
    node _T_90 = cat(_T_85, _T_83) @[Cat.scala 29:58]
    node _T_91 = cat(_T_90, _T_89) @[Cat.scala 29:58]
    node _T_92 = cat(_T_91, _T_88) @[Cat.scala 29:58]
    node _T_93 = eq(UInt<1>("h00"), _T_59) @[LookupTree.scala 24:34]
    node _T_94 = eq(UInt<16>("h08000"), _T_59) @[LookupTree.scala 24:34]
    node _T_95 = eq(UInt<16>("h0bff8"), _T_59) @[LookupTree.scala 24:34]
    node _T_96 = eq(UInt<16>("h08008"), _T_59) @[LookupTree.scala 24:34]
    node _T_97 = eq(UInt<15>("h04000"), _T_59) @[LookupTree.scala 24:34]
    node _T_98 = mux(_T_93, msip, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_99 = mux(_T_94, freq, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_100 = mux(_T_95, mtime, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_101 = mux(_T_96, inc, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_102 = mux(_T_97, mtimecmp, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_103 = or(_T_98, _T_99) @[Mux.scala 27:72]
    node _T_104 = or(_T_103, _T_100) @[Mux.scala 27:72]
    node _T_105 = or(_T_104, _T_101) @[Mux.scala 27:72]
    node _T_106 = or(_T_105, _T_102) @[Mux.scala 27:72]
    wire _T_107 : UInt<64> @[Mux.scala 27:72]
    _T_107 <= _T_106 @[Mux.scala 27:72]
    io.in.r.bits.data <= _T_107 @[RegMap.scala 30:11]
    node _T_108 = eq(_T_60, UInt<1>("h00")) @[RegMap.scala 32:41]
    node _T_109 = and(_T_61, _T_108) @[RegMap.scala 32:32]
    when _T_109 : @[RegMap.scala 32:48]
      node _T_110 = and(io.in.w.bits.data, _T_92) @[BitUtils.scala 32:13]
      node _T_111 = not(_T_92) @[BitUtils.scala 32:38]
      node _T_112 = and(msip, _T_111) @[BitUtils.scala 32:36]
      node _T_113 = or(_T_110, _T_112) @[BitUtils.scala 32:25]
      msip <= _T_113 @[RegMap.scala 32:52]
      skip @[RegMap.scala 32:48]
    node _T_114 = eq(_T_60, UInt<16>("h08000")) @[RegMap.scala 32:41]
    node _T_115 = and(_T_61, _T_114) @[RegMap.scala 32:32]
    when _T_115 : @[RegMap.scala 32:48]
      node _T_116 = and(io.in.w.bits.data, _T_92) @[BitUtils.scala 32:13]
      node _T_117 = not(_T_92) @[BitUtils.scala 32:38]
      node _T_118 = and(freq, _T_117) @[BitUtils.scala 32:36]
      node _T_119 = or(_T_116, _T_118) @[BitUtils.scala 32:25]
      freq <= _T_119 @[RegMap.scala 32:52]
      skip @[RegMap.scala 32:48]
    node _T_120 = eq(_T_60, UInt<16>("h0bff8")) @[RegMap.scala 32:41]
    node _T_121 = and(_T_61, _T_120) @[RegMap.scala 32:32]
    when _T_121 : @[RegMap.scala 32:48]
      node _T_122 = and(io.in.w.bits.data, _T_92) @[BitUtils.scala 32:13]
      node _T_123 = not(_T_92) @[BitUtils.scala 32:38]
      node _T_124 = and(mtime, _T_123) @[BitUtils.scala 32:36]
      node _T_125 = or(_T_122, _T_124) @[BitUtils.scala 32:25]
      mtime <= _T_125 @[RegMap.scala 32:52]
      skip @[RegMap.scala 32:48]
    node _T_126 = eq(_T_60, UInt<16>("h08008")) @[RegMap.scala 32:41]
    node _T_127 = and(_T_61, _T_126) @[RegMap.scala 32:32]
    when _T_127 : @[RegMap.scala 32:48]
      node _T_128 = and(io.in.w.bits.data, _T_92) @[BitUtils.scala 32:13]
      node _T_129 = not(_T_92) @[BitUtils.scala 32:38]
      node _T_130 = and(inc, _T_129) @[BitUtils.scala 32:36]
      node _T_131 = or(_T_128, _T_130) @[BitUtils.scala 32:25]
      inc <= _T_131 @[RegMap.scala 32:52]
      skip @[RegMap.scala 32:48]
    node _T_132 = eq(_T_60, UInt<15>("h04000")) @[RegMap.scala 32:41]
    node _T_133 = and(_T_61, _T_132) @[RegMap.scala 32:32]
    when _T_133 : @[RegMap.scala 32:48]
      node _T_134 = and(io.in.w.bits.data, _T_92) @[BitUtils.scala 32:13]
      node _T_135 = not(_T_92) @[BitUtils.scala 32:38]
      node _T_136 = and(mtimecmp, _T_135) @[BitUtils.scala 32:36]
      node _T_137 = or(_T_134, _T_136) @[BitUtils.scala 32:25]
      mtimecmp <= _T_137 @[RegMap.scala 32:52]
      skip @[RegMap.scala 32:48]
    node _T_138 = geq(mtime, mtimecmp) @[AXI4CLINT.scala 64:38]
    reg _T_139 : UInt<1>, clock @[AXI4CLINT.scala 64:31]
    _T_139 <= _T_138 @[AXI4CLINT.scala 64:31]
    io.extra.mtip <= _T_139 @[AXI4CLINT.scala 64:21]
    node _T_140 = neq(msip, UInt<1>("h00")) @[AXI4CLINT.scala 65:37]
    reg _T_141 : UInt<1>, clock @[AXI4CLINT.scala 65:31]
    _T_141 <= _T_140 @[AXI4CLINT.scala 65:31]
    io.extra.msip <= _T_141 @[AXI4CLINT.scala 65:21]
    
  module SimpleBus2AXI4Converter_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}, out : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, prot : UInt<3>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, strb : UInt<8>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, prot : UInt<3>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>}}}}
    
    node _T = bits(io.in.req.bits.cmd, 1, 1) @[SimpleBus.scala 75:22]
    node _T_1 = and(io.in.req.valid, _T) @[ToAXI4.scala 151:38]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[ToAXI4.scala 151:20]
    node toAXI4Lite = and(_T_2, UInt<1>("h01")) @[ToAXI4.scala 151:67]
    node _T_3 = or(toAXI4Lite, UInt<1>("h00")) @[ToAXI4.scala 153:21]
    node _T_4 = asUInt(reset) @[ToAXI4.scala 153:9]
    node _T_5 = or(_T_3, _T_4) @[ToAXI4.scala 153:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[ToAXI4.scala 153:9]
    when _T_6 : @[ToAXI4.scala 153:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at ToAXI4.scala:153 assert(toAXI4Lite || toAXI4)\n") @[ToAXI4.scala 153:9]
      stop(clock, UInt<1>(1), 1) @[ToAXI4.scala 153:9]
      skip @[ToAXI4.scala 153:9]
    io.out.ar.bits.addr <= io.in.req.bits.addr @[ToAXI4.scala 158:12]
    io.out.ar.bits.prot <= UInt<3>("h01") @[ToAXI4.scala 159:12]
    io.out.w.bits.data <= io.in.req.bits.wdata @[ToAXI4.scala 160:10]
    io.out.w.bits.strb <= io.in.req.bits.wmask @[ToAXI4.scala 161:10]
    wire wlast : UInt<1>
    wlast <= UInt<1>("h01")
    wire rlast : UInt<1>
    rlast <= UInt<1>("h01")
    io.out.aw.bits.prot <= io.out.ar.bits.prot @[ToAXI4.scala 182:6]
    io.out.aw.bits.addr <= io.out.ar.bits.addr @[ToAXI4.scala 182:6]
    io.in.resp.bits.rdata <= io.out.r.bits.data @[ToAXI4.scala 183:23]
    node _T_7 = mux(rlast, UInt<3>("h06"), UInt<1>("h00")) @[ToAXI4.scala 184:28]
    io.in.resp.bits.cmd <= _T_7 @[ToAXI4.scala 184:22]
    wire wSend : UInt<1> @[ToAXI4.scala 186:19]
    node _T_8 = and(io.out.aw.ready, io.out.aw.valid) @[Decoupled.scala 40:37]
    reg awAck : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[StopWatch.scala 24:20]
    when _T_8 : @[StopWatch.scala 30:20]
      awAck <= UInt<1>("h01") @[StopWatch.scala 30:24]
      skip @[StopWatch.scala 30:20]
    when wSend : @[StopWatch.scala 31:19]
      awAck <= UInt<1>("h00") @[StopWatch.scala 31:23]
      skip @[StopWatch.scala 31:19]
    node _T_9 = and(io.out.w.ready, io.out.w.valid) @[Decoupled.scala 40:37]
    node _T_10 = and(_T_9, wlast) @[ToAXI4.scala 188:41]
    reg wAck : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[StopWatch.scala 24:20]
    when _T_10 : @[StopWatch.scala 30:20]
      wAck <= UInt<1>("h01") @[StopWatch.scala 30:24]
      skip @[StopWatch.scala 30:20]
    when wSend : @[StopWatch.scala 31:19]
      wAck <= UInt<1>("h00") @[StopWatch.scala 31:23]
      skip @[StopWatch.scala 31:19]
    node _T_11 = and(io.out.aw.ready, io.out.aw.valid) @[Decoupled.scala 40:37]
    node _T_12 = and(io.out.w.ready, io.out.w.valid) @[Decoupled.scala 40:37]
    node _T_13 = and(_T_11, _T_12) @[ToAXI4.scala 189:27]
    node _T_14 = and(_T_13, wlast) @[ToAXI4.scala 189:43]
    node _T_15 = and(awAck, wAck) @[ToAXI4.scala 189:63]
    node _T_16 = or(_T_14, _T_15) @[ToAXI4.scala 189:53]
    wSend <= _T_16 @[ToAXI4.scala 189:9]
    node _T_17 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_18 = and(io.in.req.ready, io.in.req.valid) @[Decoupled.scala 40:37]
    reg wen : UInt<1>, clock @[Reg.scala 15:16]
    when _T_18 : @[Reg.scala 16:19]
      wen <= _T_17 @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _T_19 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_20 = eq(_T_19, UInt<1>("h00")) @[SimpleBus.scala 73:18]
    node _T_21 = bits(io.in.req.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_22 = eq(_T_21, UInt<1>("h00")) @[SimpleBus.scala 73:29]
    node _T_23 = and(_T_20, _T_22) @[SimpleBus.scala 73:26]
    node _T_24 = and(io.in.req.valid, _T_23) @[SimpleBus.scala 104:29]
    io.out.ar.valid <= _T_24 @[ToAXI4.scala 192:16]
    node _T_25 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_26 = and(io.in.req.valid, _T_25) @[SimpleBus.scala 103:29]
    node _T_27 = eq(awAck, UInt<1>("h00")) @[ToAXI4.scala 193:36]
    node _T_28 = and(_T_26, _T_27) @[ToAXI4.scala 193:33]
    io.out.aw.valid <= _T_28 @[ToAXI4.scala 193:16]
    node _T_29 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_30 = and(io.in.req.valid, _T_29) @[SimpleBus.scala 103:29]
    node _T_31 = eq(wAck, UInt<1>("h00")) @[ToAXI4.scala 194:36]
    node _T_32 = and(_T_30, _T_31) @[ToAXI4.scala 194:33]
    io.out.w.valid <= _T_32 @[ToAXI4.scala 194:16]
    node _T_33 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_34 = eq(wAck, UInt<1>("h00")) @[ToAXI4.scala 195:49]
    node _T_35 = and(_T_34, io.out.w.ready) @[ToAXI4.scala 195:55]
    node _T_36 = mux(_T_33, _T_35, io.out.ar.ready) @[ToAXI4.scala 195:24]
    io.in.req.ready <= _T_36 @[ToAXI4.scala 195:18]
    io.out.r.ready <= io.in.resp.ready @[ToAXI4.scala 197:16]
    io.out.b.ready <= io.in.resp.ready @[ToAXI4.scala 198:16]
    node _T_37 = mux(wen, io.out.b.valid, io.out.r.valid) @[ToAXI4.scala 199:25]
    io.in.resp.valid <= _T_37 @[ToAXI4.scala 199:19]
    
  module AXI4PLIC : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, prot : UInt<3>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, strb : UInt<8>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, prot : UInt<3>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>}}}, extra : {flip intrVec : UInt<3>, meip : UInt<1>[1]}}
    
    node _T = bits(io.in.w.bits.strb, 0, 0) @[BitUtils.scala 27:29]
    node _T_1 = bits(io.in.w.bits.strb, 1, 1) @[BitUtils.scala 27:29]
    node _T_2 = bits(io.in.w.bits.strb, 2, 2) @[BitUtils.scala 27:29]
    node _T_3 = bits(io.in.w.bits.strb, 3, 3) @[BitUtils.scala 27:29]
    node _T_4 = bits(io.in.w.bits.strb, 4, 4) @[BitUtils.scala 27:29]
    node _T_5 = bits(io.in.w.bits.strb, 5, 5) @[BitUtils.scala 27:29]
    node _T_6 = bits(io.in.w.bits.strb, 6, 6) @[BitUtils.scala 27:29]
    node _T_7 = bits(io.in.w.bits.strb, 7, 7) @[BitUtils.scala 27:29]
    node _T_8 = bits(_T, 0, 0) @[Bitwise.scala 72:15]
    node _T_9 = mux(_T_8, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_10 = bits(_T_1, 0, 0) @[Bitwise.scala 72:15]
    node _T_11 = mux(_T_10, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_12 = bits(_T_2, 0, 0) @[Bitwise.scala 72:15]
    node _T_13 = mux(_T_12, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_14 = bits(_T_3, 0, 0) @[Bitwise.scala 72:15]
    node _T_15 = mux(_T_14, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_16 = bits(_T_4, 0, 0) @[Bitwise.scala 72:15]
    node _T_17 = mux(_T_16, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_18 = bits(_T_5, 0, 0) @[Bitwise.scala 72:15]
    node _T_19 = mux(_T_18, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_20 = bits(_T_6, 0, 0) @[Bitwise.scala 72:15]
    node _T_21 = mux(_T_20, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_22 = bits(_T_7, 0, 0) @[Bitwise.scala 72:15]
    node _T_23 = mux(_T_22, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_24 = cat(_T_11, _T_9) @[Cat.scala 29:58]
    node _T_25 = cat(_T_15, _T_13) @[Cat.scala 29:58]
    node _T_26 = cat(_T_25, _T_24) @[Cat.scala 29:58]
    node _T_27 = cat(_T_19, _T_17) @[Cat.scala 29:58]
    node _T_28 = cat(_T_23, _T_21) @[Cat.scala 29:58]
    node _T_29 = cat(_T_28, _T_27) @[Cat.scala 29:58]
    node fullMask = cat(_T_29, _T_26) @[Cat.scala 29:58]
    wire raddr : UInt @[AXI4Slave.scala 37:19]
    wire ren : UInt<1> @[AXI4Slave.scala 38:17]
    raddr <= io.in.ar.bits.addr @[AXI4Slave.scala 66:13]
    node _T_30 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    node _T_31 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    node _T_32 = and(_T_31, UInt<1>("h01")) @[AXI4Slave.scala 70:56]
    reg r_busy : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[StopWatch.scala 24:20]
    when _T_32 : @[StopWatch.scala 26:19]
      r_busy <= UInt<1>("h00") @[StopWatch.scala 26:23]
      skip @[StopWatch.scala 26:19]
    when _T_30 : @[StopWatch.scala 27:20]
      r_busy <= UInt<1>("h01") @[StopWatch.scala 27:24]
      skip @[StopWatch.scala 27:20]
    node _T_33 = eq(r_busy, UInt<1>("h00")) @[AXI4Slave.scala 71:32]
    node _T_34 = or(io.in.r.ready, _T_33) @[AXI4Slave.scala 71:29]
    io.in.ar.ready <= _T_34 @[AXI4Slave.scala 71:15]
    io.in.r.bits.resp <= UInt<2>("h00") @[AXI4Slave.scala 72:18]
    node _T_35 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    reg _T_36 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[AXI4Slave.scala 73:17]
    _T_36 <= _T_35 @[AXI4Slave.scala 73:17]
    node _T_37 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    node _T_38 = eq(UInt<1>("h01"), UInt<1>("h00")) @[AXI4Slave.scala 73:65]
    node _T_39 = and(_T_37, _T_38) @[AXI4Slave.scala 73:62]
    node _T_40 = or(_T_36, _T_39) @[AXI4Slave.scala 73:46]
    ren <= _T_40 @[AXI4Slave.scala 73:7]
    node _T_41 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    node _T_42 = or(_T_41, r_busy) @[AXI4Slave.scala 74:52]
    node _T_43 = and(ren, _T_42) @[AXI4Slave.scala 74:35]
    node _T_44 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    reg _T_45 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[StopWatch.scala 24:20]
    when _T_44 : @[StopWatch.scala 26:19]
      _T_45 <= UInt<1>("h00") @[StopWatch.scala 26:23]
      skip @[StopWatch.scala 26:19]
    when _T_43 : @[StopWatch.scala 27:20]
      _T_45 <= UInt<1>("h01") @[StopWatch.scala 27:24]
      skip @[StopWatch.scala 27:20]
    io.in.r.valid <= _T_45 @[AXI4Slave.scala 74:14]
    wire waddr : UInt @[AXI4Slave.scala 77:19]
    waddr <= io.in.aw.bits.addr @[AXI4Slave.scala 89:13]
    node _T_46 = and(io.in.aw.ready, io.in.aw.valid) @[Decoupled.scala 40:37]
    node _T_47 = and(io.in.b.ready, io.in.b.valid) @[Decoupled.scala 40:37]
    reg w_busy : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[StopWatch.scala 24:20]
    when _T_47 : @[StopWatch.scala 26:19]
      w_busy <= UInt<1>("h00") @[StopWatch.scala 26:23]
      skip @[StopWatch.scala 26:19]
    when _T_46 : @[StopWatch.scala 27:20]
      w_busy <= UInt<1>("h01") @[StopWatch.scala 27:24]
      skip @[StopWatch.scala 27:20]
    node _T_48 = eq(w_busy, UInt<1>("h00")) @[AXI4Slave.scala 94:18]
    io.in.aw.ready <= _T_48 @[AXI4Slave.scala 94:15]
    node _T_49 = or(io.in.aw.valid, w_busy) @[AXI4Slave.scala 95:30]
    io.in.w.ready <= _T_49 @[AXI4Slave.scala 95:15]
    io.in.b.bits.resp <= UInt<2>("h00") @[AXI4Slave.scala 96:18]
    node _T_50 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 40:37]
    node _T_51 = and(_T_50, UInt<1>("h01")) @[AXI4Slave.scala 97:43]
    node _T_52 = and(io.in.b.ready, io.in.b.valid) @[Decoupled.scala 40:37]
    reg _T_53 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[StopWatch.scala 24:20]
    when _T_52 : @[StopWatch.scala 26:19]
      _T_53 <= UInt<1>("h00") @[StopWatch.scala 26:23]
      skip @[StopWatch.scala 26:19]
    when _T_51 : @[StopWatch.scala 27:20]
      _T_53 <= UInt<1>("h01") @[StopWatch.scala 27:24]
      skip @[StopWatch.scala 27:20]
    io.in.b.valid <= _T_53 @[AXI4Slave.scala 97:14]
    reg priority_0 : UInt<32>, clock @[AXI4PLIC.scala 37:39]
    reg priority_1 : UInt<32>, clock @[AXI4PLIC.scala 37:39]
    reg priority_2 : UInt<32>, clock @[AXI4PLIC.scala 37:39]
    wire _T_54 : UInt<1>[32] @[AXI4PLIC.scala 43:59]
    _T_54[0] <= UInt<1>("h00") @[AXI4PLIC.scala 43:59]
    _T_54[1] <= UInt<1>("h00") @[AXI4PLIC.scala 43:59]
    _T_54[2] <= UInt<1>("h00") @[AXI4PLIC.scala 43:59]
    _T_54[3] <= UInt<1>("h00") @[AXI4PLIC.scala 43:59]
    _T_54[4] <= UInt<1>("h00") @[AXI4PLIC.scala 43:59]
    _T_54[5] <= UInt<1>("h00") @[AXI4PLIC.scala 43:59]
    _T_54[6] <= UInt<1>("h00") @[AXI4PLIC.scala 43:59]
    _T_54[7] <= UInt<1>("h00") @[AXI4PLIC.scala 43:59]
    _T_54[8] <= UInt<1>("h00") @[AXI4PLIC.scala 43:59]
    _T_54[9] <= UInt<1>("h00") @[AXI4PLIC.scala 43:59]
    _T_54[10] <= UInt<1>("h00") @[AXI4PLIC.scala 43:59]
    _T_54[11] <= UInt<1>("h00") @[AXI4PLIC.scala 43:59]
    _T_54[12] <= UInt<1>("h00") @[AXI4PLIC.scala 43:59]
    _T_54[13] <= UInt<1>("h00") @[AXI4PLIC.scala 43:59]
    _T_54[14] <= UInt<1>("h00") @[AXI4PLIC.scala 43:59]
    _T_54[15] <= UInt<1>("h00") @[AXI4PLIC.scala 43:59]
    _T_54[16] <= UInt<1>("h00") @[AXI4PLIC.scala 43:59]
    _T_54[17] <= UInt<1>("h00") @[AXI4PLIC.scala 43:59]
    _T_54[18] <= UInt<1>("h00") @[AXI4PLIC.scala 43:59]
    _T_54[19] <= UInt<1>("h00") @[AXI4PLIC.scala 43:59]
    _T_54[20] <= UInt<1>("h00") @[AXI4PLIC.scala 43:59]
    _T_54[21] <= UInt<1>("h00") @[AXI4PLIC.scala 43:59]
    _T_54[22] <= UInt<1>("h00") @[AXI4PLIC.scala 43:59]
    _T_54[23] <= UInt<1>("h00") @[AXI4PLIC.scala 43:59]
    _T_54[24] <= UInt<1>("h00") @[AXI4PLIC.scala 43:59]
    _T_54[25] <= UInt<1>("h00") @[AXI4PLIC.scala 43:59]
    _T_54[26] <= UInt<1>("h00") @[AXI4PLIC.scala 43:59]
    _T_54[27] <= UInt<1>("h00") @[AXI4PLIC.scala 43:59]
    _T_54[28] <= UInt<1>("h00") @[AXI4PLIC.scala 43:59]
    _T_54[29] <= UInt<1>("h00") @[AXI4PLIC.scala 43:59]
    _T_54[30] <= UInt<1>("h00") @[AXI4PLIC.scala 43:59]
    _T_54[31] <= UInt<1>("h00") @[AXI4PLIC.scala 43:59]
    reg pending_0 : UInt<1>[32], clock with : (reset => (reset, _T_54)) @[AXI4PLIC.scala 43:46]
    node _T_55 = cat(pending_0[1], pending_0[0]) @[Cat.scala 29:58]
    node _T_56 = cat(pending_0[3], pending_0[2]) @[Cat.scala 29:58]
    node _T_57 = cat(_T_56, _T_55) @[Cat.scala 29:58]
    node _T_58 = cat(pending_0[5], pending_0[4]) @[Cat.scala 29:58]
    node _T_59 = cat(pending_0[7], pending_0[6]) @[Cat.scala 29:58]
    node _T_60 = cat(_T_59, _T_58) @[Cat.scala 29:58]
    node _T_61 = cat(_T_60, _T_57) @[Cat.scala 29:58]
    node _T_62 = cat(pending_0[9], pending_0[8]) @[Cat.scala 29:58]
    node _T_63 = cat(pending_0[11], pending_0[10]) @[Cat.scala 29:58]
    node _T_64 = cat(_T_63, _T_62) @[Cat.scala 29:58]
    node _T_65 = cat(pending_0[13], pending_0[12]) @[Cat.scala 29:58]
    node _T_66 = cat(pending_0[15], pending_0[14]) @[Cat.scala 29:58]
    node _T_67 = cat(_T_66, _T_65) @[Cat.scala 29:58]
    node _T_68 = cat(_T_67, _T_64) @[Cat.scala 29:58]
    node _T_69 = cat(_T_68, _T_61) @[Cat.scala 29:58]
    node _T_70 = cat(pending_0[17], pending_0[16]) @[Cat.scala 29:58]
    node _T_71 = cat(pending_0[19], pending_0[18]) @[Cat.scala 29:58]
    node _T_72 = cat(_T_71, _T_70) @[Cat.scala 29:58]
    node _T_73 = cat(pending_0[21], pending_0[20]) @[Cat.scala 29:58]
    node _T_74 = cat(pending_0[23], pending_0[22]) @[Cat.scala 29:58]
    node _T_75 = cat(_T_74, _T_73) @[Cat.scala 29:58]
    node _T_76 = cat(_T_75, _T_72) @[Cat.scala 29:58]
    node _T_77 = cat(pending_0[25], pending_0[24]) @[Cat.scala 29:58]
    node _T_78 = cat(pending_0[27], pending_0[26]) @[Cat.scala 29:58]
    node _T_79 = cat(_T_78, _T_77) @[Cat.scala 29:58]
    node _T_80 = cat(pending_0[29], pending_0[28]) @[Cat.scala 29:58]
    node _T_81 = cat(pending_0[31], pending_0[30]) @[Cat.scala 29:58]
    node _T_82 = cat(_T_81, _T_80) @[Cat.scala 29:58]
    node _T_83 = cat(_T_82, _T_79) @[Cat.scala 29:58]
    node _T_84 = cat(_T_83, _T_76) @[Cat.scala 29:58]
    node _T_85 = cat(_T_84, _T_69) @[Cat.scala 29:58]
    reg enable_0_0 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[AXI4PLIC.scala 48:64]
    reg threshold_0 : UInt<32>, clock @[AXI4PLIC.scala 53:40]
    wire _T_86 : UInt<1>[4] @[AXI4PLIC.scala 58:38]
    _T_86[0] <= UInt<1>("h00") @[AXI4PLIC.scala 58:38]
    _T_86[1] <= UInt<1>("h00") @[AXI4PLIC.scala 58:38]
    _T_86[2] <= UInt<1>("h00") @[AXI4PLIC.scala 58:38]
    _T_86[3] <= UInt<1>("h00") @[AXI4PLIC.scala 58:38]
    reg inHandle : UInt<1>[4], clock with : (reset => (reset, _T_86)) @[AXI4PLIC.scala 58:25]
    reg claimCompletion_0 : UInt<32>, clock @[AXI4PLIC.scala 64:46]
    node _T_87 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    node _T_88 = bits(raddr, 25, 0) @[AXI4PLIC.scala 35:35]
    node _T_89 = eq(_T_88, UInt<22>("h0200004")) @[AXI4PLIC.scala 68:46]
    node _T_90 = and(_T_87, _T_89) @[AXI4PLIC.scala 68:25]
    when _T_90 : @[AXI4PLIC.scala 68:59]
      node _T_91 = bits(claimCompletion_0, 1, 0)
      inHandle[_T_91] <= UInt<1>("h01") @[AXI4PLIC.scala 68:73]
      skip @[AXI4PLIC.scala 68:59]
    node _T_92 = bits(io.extra.intrVec, 0, 0) @[AXI4PLIC.scala 73:24]
    node _T_93 = bits(io.extra.intrVec, 1, 1) @[AXI4PLIC.scala 73:24]
    node _T_94 = bits(io.extra.intrVec, 2, 2) @[AXI4PLIC.scala 73:24]
    when _T_92 : @[AXI4PLIC.scala 75:17]
      pending_0[1] <= UInt<1>("h01") @[AXI4PLIC.scala 75:45]
      skip @[AXI4PLIC.scala 75:17]
    when inHandle[1] : @[AXI4PLIC.scala 76:25]
      pending_0[1] <= UInt<1>("h00") @[AXI4PLIC.scala 76:53]
      skip @[AXI4PLIC.scala 76:25]
    when _T_93 : @[AXI4PLIC.scala 75:17]
      pending_0[2] <= UInt<1>("h01") @[AXI4PLIC.scala 75:45]
      skip @[AXI4PLIC.scala 75:17]
    when inHandle[2] : @[AXI4PLIC.scala 76:25]
      pending_0[2] <= UInt<1>("h00") @[AXI4PLIC.scala 76:53]
      skip @[AXI4PLIC.scala 76:25]
    when _T_94 : @[AXI4PLIC.scala 75:17]
      pending_0[3] <= UInt<1>("h01") @[AXI4PLIC.scala 75:45]
      skip @[AXI4PLIC.scala 75:17]
    when inHandle[3] : @[AXI4PLIC.scala 76:25]
      pending_0[3] <= UInt<1>("h00") @[AXI4PLIC.scala 76:53]
      skip @[AXI4PLIC.scala 76:25]
    node _T_95 = cat(pending_0[1], pending_0[0]) @[Cat.scala 29:58]
    node _T_96 = cat(pending_0[3], pending_0[2]) @[Cat.scala 29:58]
    node _T_97 = cat(_T_96, _T_95) @[Cat.scala 29:58]
    node _T_98 = cat(pending_0[5], pending_0[4]) @[Cat.scala 29:58]
    node _T_99 = cat(pending_0[7], pending_0[6]) @[Cat.scala 29:58]
    node _T_100 = cat(_T_99, _T_98) @[Cat.scala 29:58]
    node _T_101 = cat(_T_100, _T_97) @[Cat.scala 29:58]
    node _T_102 = cat(pending_0[9], pending_0[8]) @[Cat.scala 29:58]
    node _T_103 = cat(pending_0[11], pending_0[10]) @[Cat.scala 29:58]
    node _T_104 = cat(_T_103, _T_102) @[Cat.scala 29:58]
    node _T_105 = cat(pending_0[13], pending_0[12]) @[Cat.scala 29:58]
    node _T_106 = cat(pending_0[15], pending_0[14]) @[Cat.scala 29:58]
    node _T_107 = cat(_T_106, _T_105) @[Cat.scala 29:58]
    node _T_108 = cat(_T_107, _T_104) @[Cat.scala 29:58]
    node _T_109 = cat(_T_108, _T_101) @[Cat.scala 29:58]
    node _T_110 = cat(pending_0[17], pending_0[16]) @[Cat.scala 29:58]
    node _T_111 = cat(pending_0[19], pending_0[18]) @[Cat.scala 29:58]
    node _T_112 = cat(_T_111, _T_110) @[Cat.scala 29:58]
    node _T_113 = cat(pending_0[21], pending_0[20]) @[Cat.scala 29:58]
    node _T_114 = cat(pending_0[23], pending_0[22]) @[Cat.scala 29:58]
    node _T_115 = cat(_T_114, _T_113) @[Cat.scala 29:58]
    node _T_116 = cat(_T_115, _T_112) @[Cat.scala 29:58]
    node _T_117 = cat(pending_0[25], pending_0[24]) @[Cat.scala 29:58]
    node _T_118 = cat(pending_0[27], pending_0[26]) @[Cat.scala 29:58]
    node _T_119 = cat(_T_118, _T_117) @[Cat.scala 29:58]
    node _T_120 = cat(pending_0[29], pending_0[28]) @[Cat.scala 29:58]
    node _T_121 = cat(pending_0[31], pending_0[30]) @[Cat.scala 29:58]
    node _T_122 = cat(_T_121, _T_120) @[Cat.scala 29:58]
    node _T_123 = cat(_T_122, _T_119) @[Cat.scala 29:58]
    node _T_124 = cat(_T_123, _T_116) @[Cat.scala 29:58]
    node pendingVec = cat(_T_124, _T_109) @[Cat.scala 29:58]
    node _T_125 = and(pendingVec, enable_0_0) @[AXI4PLIC.scala 81:31]
    node _T_126 = eq(_T_125, UInt<1>("h00")) @[AXI4PLIC.scala 82:23]
    node _T_127 = bits(_T_125, 0, 0) @[OneHot.scala 47:40]
    node _T_128 = bits(_T_125, 1, 1) @[OneHot.scala 47:40]
    node _T_129 = bits(_T_125, 2, 2) @[OneHot.scala 47:40]
    node _T_130 = bits(_T_125, 3, 3) @[OneHot.scala 47:40]
    node _T_131 = bits(_T_125, 4, 4) @[OneHot.scala 47:40]
    node _T_132 = bits(_T_125, 5, 5) @[OneHot.scala 47:40]
    node _T_133 = bits(_T_125, 6, 6) @[OneHot.scala 47:40]
    node _T_134 = bits(_T_125, 7, 7) @[OneHot.scala 47:40]
    node _T_135 = bits(_T_125, 8, 8) @[OneHot.scala 47:40]
    node _T_136 = bits(_T_125, 9, 9) @[OneHot.scala 47:40]
    node _T_137 = bits(_T_125, 10, 10) @[OneHot.scala 47:40]
    node _T_138 = bits(_T_125, 11, 11) @[OneHot.scala 47:40]
    node _T_139 = bits(_T_125, 12, 12) @[OneHot.scala 47:40]
    node _T_140 = bits(_T_125, 13, 13) @[OneHot.scala 47:40]
    node _T_141 = bits(_T_125, 14, 14) @[OneHot.scala 47:40]
    node _T_142 = bits(_T_125, 15, 15) @[OneHot.scala 47:40]
    node _T_143 = bits(_T_125, 16, 16) @[OneHot.scala 47:40]
    node _T_144 = bits(_T_125, 17, 17) @[OneHot.scala 47:40]
    node _T_145 = bits(_T_125, 18, 18) @[OneHot.scala 47:40]
    node _T_146 = bits(_T_125, 19, 19) @[OneHot.scala 47:40]
    node _T_147 = bits(_T_125, 20, 20) @[OneHot.scala 47:40]
    node _T_148 = bits(_T_125, 21, 21) @[OneHot.scala 47:40]
    node _T_149 = bits(_T_125, 22, 22) @[OneHot.scala 47:40]
    node _T_150 = bits(_T_125, 23, 23) @[OneHot.scala 47:40]
    node _T_151 = bits(_T_125, 24, 24) @[OneHot.scala 47:40]
    node _T_152 = bits(_T_125, 25, 25) @[OneHot.scala 47:40]
    node _T_153 = bits(_T_125, 26, 26) @[OneHot.scala 47:40]
    node _T_154 = bits(_T_125, 27, 27) @[OneHot.scala 47:40]
    node _T_155 = bits(_T_125, 28, 28) @[OneHot.scala 47:40]
    node _T_156 = bits(_T_125, 29, 29) @[OneHot.scala 47:40]
    node _T_157 = bits(_T_125, 30, 30) @[OneHot.scala 47:40]
    node _T_158 = bits(_T_125, 31, 31) @[OneHot.scala 47:40]
    node _T_159 = mux(_T_157, UInt<5>("h01e"), UInt<5>("h01f")) @[Mux.scala 47:69]
    node _T_160 = mux(_T_156, UInt<5>("h01d"), _T_159) @[Mux.scala 47:69]
    node _T_161 = mux(_T_155, UInt<5>("h01c"), _T_160) @[Mux.scala 47:69]
    node _T_162 = mux(_T_154, UInt<5>("h01b"), _T_161) @[Mux.scala 47:69]
    node _T_163 = mux(_T_153, UInt<5>("h01a"), _T_162) @[Mux.scala 47:69]
    node _T_164 = mux(_T_152, UInt<5>("h019"), _T_163) @[Mux.scala 47:69]
    node _T_165 = mux(_T_151, UInt<5>("h018"), _T_164) @[Mux.scala 47:69]
    node _T_166 = mux(_T_150, UInt<5>("h017"), _T_165) @[Mux.scala 47:69]
    node _T_167 = mux(_T_149, UInt<5>("h016"), _T_166) @[Mux.scala 47:69]
    node _T_168 = mux(_T_148, UInt<5>("h015"), _T_167) @[Mux.scala 47:69]
    node _T_169 = mux(_T_147, UInt<5>("h014"), _T_168) @[Mux.scala 47:69]
    node _T_170 = mux(_T_146, UInt<5>("h013"), _T_169) @[Mux.scala 47:69]
    node _T_171 = mux(_T_145, UInt<5>("h012"), _T_170) @[Mux.scala 47:69]
    node _T_172 = mux(_T_144, UInt<5>("h011"), _T_171) @[Mux.scala 47:69]
    node _T_173 = mux(_T_143, UInt<5>("h010"), _T_172) @[Mux.scala 47:69]
    node _T_174 = mux(_T_142, UInt<4>("h0f"), _T_173) @[Mux.scala 47:69]
    node _T_175 = mux(_T_141, UInt<4>("h0e"), _T_174) @[Mux.scala 47:69]
    node _T_176 = mux(_T_140, UInt<4>("h0d"), _T_175) @[Mux.scala 47:69]
    node _T_177 = mux(_T_139, UInt<4>("h0c"), _T_176) @[Mux.scala 47:69]
    node _T_178 = mux(_T_138, UInt<4>("h0b"), _T_177) @[Mux.scala 47:69]
    node _T_179 = mux(_T_137, UInt<4>("h0a"), _T_178) @[Mux.scala 47:69]
    node _T_180 = mux(_T_136, UInt<4>("h09"), _T_179) @[Mux.scala 47:69]
    node _T_181 = mux(_T_135, UInt<4>("h08"), _T_180) @[Mux.scala 47:69]
    node _T_182 = mux(_T_134, UInt<3>("h07"), _T_181) @[Mux.scala 47:69]
    node _T_183 = mux(_T_133, UInt<3>("h06"), _T_182) @[Mux.scala 47:69]
    node _T_184 = mux(_T_132, UInt<3>("h05"), _T_183) @[Mux.scala 47:69]
    node _T_185 = mux(_T_131, UInt<3>("h04"), _T_184) @[Mux.scala 47:69]
    node _T_186 = mux(_T_130, UInt<2>("h03"), _T_185) @[Mux.scala 47:69]
    node _T_187 = mux(_T_129, UInt<2>("h02"), _T_186) @[Mux.scala 47:69]
    node _T_188 = mux(_T_128, UInt<1>("h01"), _T_187) @[Mux.scala 47:69]
    node _T_189 = mux(_T_127, UInt<1>("h00"), _T_188) @[Mux.scala 47:69]
    node _T_190 = mux(_T_126, UInt<1>("h00"), _T_189) @[AXI4PLIC.scala 82:13]
    claimCompletion_0 <= _T_190 @[AXI4PLIC.scala 82:7]
    wire rdata : UInt<32> @[AXI4PLIC.scala 87:19]
    node _T_191 = bits(raddr, 25, 0) @[AXI4PLIC.scala 35:35]
    node _T_192 = bits(waddr, 25, 0) @[AXI4PLIC.scala 35:35]
    node _T_193 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 40:37]
    node _T_194 = bits(waddr, 2, 0) @[AXI4PLIC.scala 89:86]
    node _T_195 = dshr(io.in.w.bits.strb, _T_194) @[AXI4PLIC.scala 89:78]
    node _T_196 = bits(_T_195, 0, 0) @[BitUtils.scala 27:29]
    node _T_197 = bits(_T_195, 1, 1) @[BitUtils.scala 27:29]
    node _T_198 = bits(_T_195, 2, 2) @[BitUtils.scala 27:29]
    node _T_199 = bits(_T_195, 3, 3) @[BitUtils.scala 27:29]
    node _T_200 = bits(_T_195, 4, 4) @[BitUtils.scala 27:29]
    node _T_201 = bits(_T_195, 5, 5) @[BitUtils.scala 27:29]
    node _T_202 = bits(_T_195, 6, 6) @[BitUtils.scala 27:29]
    node _T_203 = bits(_T_195, 7, 7) @[BitUtils.scala 27:29]
    node _T_204 = bits(_T_196, 0, 0) @[Bitwise.scala 72:15]
    node _T_205 = mux(_T_204, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_206 = bits(_T_197, 0, 0) @[Bitwise.scala 72:15]
    node _T_207 = mux(_T_206, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_208 = bits(_T_198, 0, 0) @[Bitwise.scala 72:15]
    node _T_209 = mux(_T_208, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_210 = bits(_T_199, 0, 0) @[Bitwise.scala 72:15]
    node _T_211 = mux(_T_210, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_212 = bits(_T_200, 0, 0) @[Bitwise.scala 72:15]
    node _T_213 = mux(_T_212, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_214 = bits(_T_201, 0, 0) @[Bitwise.scala 72:15]
    node _T_215 = mux(_T_214, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_216 = bits(_T_202, 0, 0) @[Bitwise.scala 72:15]
    node _T_217 = mux(_T_216, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_218 = bits(_T_203, 0, 0) @[Bitwise.scala 72:15]
    node _T_219 = mux(_T_218, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_220 = cat(_T_207, _T_205) @[Cat.scala 29:58]
    node _T_221 = cat(_T_211, _T_209) @[Cat.scala 29:58]
    node _T_222 = cat(_T_221, _T_220) @[Cat.scala 29:58]
    node _T_223 = cat(_T_215, _T_213) @[Cat.scala 29:58]
    node _T_224 = cat(_T_219, _T_217) @[Cat.scala 29:58]
    node _T_225 = cat(_T_224, _T_223) @[Cat.scala 29:58]
    node _T_226 = cat(_T_225, _T_222) @[Cat.scala 29:58]
    node _T_227 = eq(UInt<4>("h0c"), _T_191) @[LookupTree.scala 24:34]
    node _T_228 = eq(UInt<13>("h01000"), _T_191) @[LookupTree.scala 24:34]
    node _T_229 = eq(UInt<14>("h02000"), _T_191) @[LookupTree.scala 24:34]
    node _T_230 = eq(UInt<4>("h08"), _T_191) @[LookupTree.scala 24:34]
    node _T_231 = eq(UInt<22>("h0200004"), _T_191) @[LookupTree.scala 24:34]
    node _T_232 = eq(UInt<3>("h04"), _T_191) @[LookupTree.scala 24:34]
    node _T_233 = eq(UInt<22>("h0200000"), _T_191) @[LookupTree.scala 24:34]
    node _T_234 = mux(_T_227, priority_2, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_235 = mux(_T_228, _T_85, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_236 = mux(_T_229, enable_0_0, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_237 = mux(_T_230, priority_1, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_238 = mux(_T_231, claimCompletion_0, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_239 = mux(_T_232, priority_0, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_240 = mux(_T_233, threshold_0, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_241 = or(_T_234, _T_235) @[Mux.scala 27:72]
    node _T_242 = or(_T_241, _T_236) @[Mux.scala 27:72]
    node _T_243 = or(_T_242, _T_237) @[Mux.scala 27:72]
    node _T_244 = or(_T_243, _T_238) @[Mux.scala 27:72]
    node _T_245 = or(_T_244, _T_239) @[Mux.scala 27:72]
    node _T_246 = or(_T_245, _T_240) @[Mux.scala 27:72]
    wire _T_247 : UInt<32> @[Mux.scala 27:72]
    _T_247 <= _T_246 @[Mux.scala 27:72]
    rdata <= _T_247 @[RegMap.scala 30:11]
    node _T_248 = eq(_T_192, UInt<4>("h0c")) @[RegMap.scala 32:41]
    node _T_249 = and(_T_193, _T_248) @[RegMap.scala 32:32]
    when _T_249 : @[RegMap.scala 32:48]
      node _T_250 = and(io.in.w.bits.data, _T_226) @[BitUtils.scala 32:13]
      node _T_251 = not(_T_226) @[BitUtils.scala 32:38]
      node _T_252 = and(priority_2, _T_251) @[BitUtils.scala 32:36]
      node _T_253 = or(_T_250, _T_252) @[BitUtils.scala 32:25]
      priority_2 <= _T_253 @[RegMap.scala 32:52]
      skip @[RegMap.scala 32:48]
    node _T_254 = eq(_T_192, UInt<14>("h02000")) @[RegMap.scala 32:41]
    node _T_255 = and(_T_193, _T_254) @[RegMap.scala 32:32]
    when _T_255 : @[RegMap.scala 32:48]
      node _T_256 = and(io.in.w.bits.data, _T_226) @[BitUtils.scala 32:13]
      node _T_257 = not(_T_226) @[BitUtils.scala 32:38]
      node _T_258 = and(enable_0_0, _T_257) @[BitUtils.scala 32:36]
      node _T_259 = or(_T_256, _T_258) @[BitUtils.scala 32:25]
      enable_0_0 <= _T_259 @[RegMap.scala 32:52]
      skip @[RegMap.scala 32:48]
    node _T_260 = eq(_T_192, UInt<4>("h08")) @[RegMap.scala 32:41]
    node _T_261 = and(_T_193, _T_260) @[RegMap.scala 32:32]
    when _T_261 : @[RegMap.scala 32:48]
      node _T_262 = and(io.in.w.bits.data, _T_226) @[BitUtils.scala 32:13]
      node _T_263 = not(_T_226) @[BitUtils.scala 32:38]
      node _T_264 = and(priority_1, _T_263) @[BitUtils.scala 32:36]
      node _T_265 = or(_T_262, _T_264) @[BitUtils.scala 32:25]
      priority_1 <= _T_265 @[RegMap.scala 32:52]
      skip @[RegMap.scala 32:48]
    node _T_266 = eq(_T_192, UInt<22>("h0200004")) @[RegMap.scala 32:41]
    node _T_267 = and(_T_193, _T_266) @[RegMap.scala 32:32]
    when _T_267 : @[RegMap.scala 32:48]
      node _T_268 = and(io.in.w.bits.data, _T_226) @[BitUtils.scala 32:13]
      node _T_269 = not(_T_226) @[BitUtils.scala 32:38]
      node _T_270 = and(claimCompletion_0, _T_269) @[BitUtils.scala 32:36]
      node _T_271 = or(_T_268, _T_270) @[BitUtils.scala 32:25]
      node _T_272 = bits(_T_271, 31, 0) @[AXI4PLIC.scala 60:19]
      node _T_273 = bits(_T_272, 1, 0)
      inHandle[_T_273] <= UInt<1>("h00") @[AXI4PLIC.scala 60:27]
      claimCompletion_0 <= UInt<1>("h00") @[RegMap.scala 32:52]
      skip @[RegMap.scala 32:48]
    node _T_274 = eq(_T_192, UInt<3>("h04")) @[RegMap.scala 32:41]
    node _T_275 = and(_T_193, _T_274) @[RegMap.scala 32:32]
    when _T_275 : @[RegMap.scala 32:48]
      node _T_276 = and(io.in.w.bits.data, _T_226) @[BitUtils.scala 32:13]
      node _T_277 = not(_T_226) @[BitUtils.scala 32:38]
      node _T_278 = and(priority_0, _T_277) @[BitUtils.scala 32:36]
      node _T_279 = or(_T_276, _T_278) @[BitUtils.scala 32:25]
      priority_0 <= _T_279 @[RegMap.scala 32:52]
      skip @[RegMap.scala 32:48]
    node _T_280 = eq(_T_192, UInt<22>("h0200000")) @[RegMap.scala 32:41]
    node _T_281 = and(_T_193, _T_280) @[RegMap.scala 32:32]
    when _T_281 : @[RegMap.scala 32:48]
      node _T_282 = and(io.in.w.bits.data, _T_226) @[BitUtils.scala 32:13]
      node _T_283 = not(_T_226) @[BitUtils.scala 32:38]
      node _T_284 = and(threshold_0, _T_283) @[BitUtils.scala 32:36]
      node _T_285 = or(_T_282, _T_284) @[BitUtils.scala 32:25]
      threshold_0 <= _T_285 @[RegMap.scala 32:52]
      skip @[RegMap.scala 32:48]
    node _T_286 = cat(rdata, rdata) @[Cat.scala 29:58]
    io.in.r.bits.data <= _T_286 @[AXI4PLIC.scala 91:18]
    node _T_287 = neq(claimCompletion_0, UInt<1>("h00")) @[AXI4PLIC.scala 93:87]
    io.extra.meip[0] <= _T_287 @[AXI4PLIC.scala 93:62]
    
  module SimpleBus2AXI4Converter_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}, out : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, prot : UInt<3>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, strb : UInt<8>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, prot : UInt<3>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>}}}}
    
    node _T = bits(io.in.req.bits.cmd, 1, 1) @[SimpleBus.scala 75:22]
    node _T_1 = and(io.in.req.valid, _T) @[ToAXI4.scala 151:38]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[ToAXI4.scala 151:20]
    node toAXI4Lite = and(_T_2, UInt<1>("h01")) @[ToAXI4.scala 151:67]
    node _T_3 = or(toAXI4Lite, UInt<1>("h00")) @[ToAXI4.scala 153:21]
    node _T_4 = asUInt(reset) @[ToAXI4.scala 153:9]
    node _T_5 = or(_T_3, _T_4) @[ToAXI4.scala 153:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[ToAXI4.scala 153:9]
    when _T_6 : @[ToAXI4.scala 153:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at ToAXI4.scala:153 assert(toAXI4Lite || toAXI4)\n") @[ToAXI4.scala 153:9]
      stop(clock, UInt<1>(1), 1) @[ToAXI4.scala 153:9]
      skip @[ToAXI4.scala 153:9]
    io.out.ar.bits.addr <= io.in.req.bits.addr @[ToAXI4.scala 158:12]
    io.out.ar.bits.prot <= UInt<3>("h01") @[ToAXI4.scala 159:12]
    io.out.w.bits.data <= io.in.req.bits.wdata @[ToAXI4.scala 160:10]
    io.out.w.bits.strb <= io.in.req.bits.wmask @[ToAXI4.scala 161:10]
    wire wlast : UInt<1>
    wlast <= UInt<1>("h01")
    wire rlast : UInt<1>
    rlast <= UInt<1>("h01")
    io.out.aw.bits.prot <= io.out.ar.bits.prot @[ToAXI4.scala 182:6]
    io.out.aw.bits.addr <= io.out.ar.bits.addr @[ToAXI4.scala 182:6]
    io.in.resp.bits.rdata <= io.out.r.bits.data @[ToAXI4.scala 183:23]
    node _T_7 = mux(rlast, UInt<3>("h06"), UInt<1>("h00")) @[ToAXI4.scala 184:28]
    io.in.resp.bits.cmd <= _T_7 @[ToAXI4.scala 184:22]
    wire wSend : UInt<1> @[ToAXI4.scala 186:19]
    node _T_8 = and(io.out.aw.ready, io.out.aw.valid) @[Decoupled.scala 40:37]
    reg awAck : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[StopWatch.scala 24:20]
    when _T_8 : @[StopWatch.scala 30:20]
      awAck <= UInt<1>("h01") @[StopWatch.scala 30:24]
      skip @[StopWatch.scala 30:20]
    when wSend : @[StopWatch.scala 31:19]
      awAck <= UInt<1>("h00") @[StopWatch.scala 31:23]
      skip @[StopWatch.scala 31:19]
    node _T_9 = and(io.out.w.ready, io.out.w.valid) @[Decoupled.scala 40:37]
    node _T_10 = and(_T_9, wlast) @[ToAXI4.scala 188:41]
    reg wAck : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[StopWatch.scala 24:20]
    when _T_10 : @[StopWatch.scala 30:20]
      wAck <= UInt<1>("h01") @[StopWatch.scala 30:24]
      skip @[StopWatch.scala 30:20]
    when wSend : @[StopWatch.scala 31:19]
      wAck <= UInt<1>("h00") @[StopWatch.scala 31:23]
      skip @[StopWatch.scala 31:19]
    node _T_11 = and(io.out.aw.ready, io.out.aw.valid) @[Decoupled.scala 40:37]
    node _T_12 = and(io.out.w.ready, io.out.w.valid) @[Decoupled.scala 40:37]
    node _T_13 = and(_T_11, _T_12) @[ToAXI4.scala 189:27]
    node _T_14 = and(_T_13, wlast) @[ToAXI4.scala 189:43]
    node _T_15 = and(awAck, wAck) @[ToAXI4.scala 189:63]
    node _T_16 = or(_T_14, _T_15) @[ToAXI4.scala 189:53]
    wSend <= _T_16 @[ToAXI4.scala 189:9]
    node _T_17 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_18 = and(io.in.req.ready, io.in.req.valid) @[Decoupled.scala 40:37]
    reg wen : UInt<1>, clock @[Reg.scala 15:16]
    when _T_18 : @[Reg.scala 16:19]
      wen <= _T_17 @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _T_19 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_20 = eq(_T_19, UInt<1>("h00")) @[SimpleBus.scala 73:18]
    node _T_21 = bits(io.in.req.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_22 = eq(_T_21, UInt<1>("h00")) @[SimpleBus.scala 73:29]
    node _T_23 = and(_T_20, _T_22) @[SimpleBus.scala 73:26]
    node _T_24 = and(io.in.req.valid, _T_23) @[SimpleBus.scala 104:29]
    io.out.ar.valid <= _T_24 @[ToAXI4.scala 192:16]
    node _T_25 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_26 = and(io.in.req.valid, _T_25) @[SimpleBus.scala 103:29]
    node _T_27 = eq(awAck, UInt<1>("h00")) @[ToAXI4.scala 193:36]
    node _T_28 = and(_T_26, _T_27) @[ToAXI4.scala 193:33]
    io.out.aw.valid <= _T_28 @[ToAXI4.scala 193:16]
    node _T_29 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_30 = and(io.in.req.valid, _T_29) @[SimpleBus.scala 103:29]
    node _T_31 = eq(wAck, UInt<1>("h00")) @[ToAXI4.scala 194:36]
    node _T_32 = and(_T_30, _T_31) @[ToAXI4.scala 194:33]
    io.out.w.valid <= _T_32 @[ToAXI4.scala 194:16]
    node _T_33 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_34 = eq(wAck, UInt<1>("h00")) @[ToAXI4.scala 195:49]
    node _T_35 = and(_T_34, io.out.w.ready) @[ToAXI4.scala 195:55]
    node _T_36 = mux(_T_33, _T_35, io.out.ar.ready) @[ToAXI4.scala 195:24]
    io.in.req.ready <= _T_36 @[ToAXI4.scala 195:18]
    io.out.r.ready <= io.in.resp.ready @[ToAXI4.scala 197:16]
    io.out.b.ready <= io.in.resp.ready @[ToAXI4.scala 198:16]
    node _T_37 = mux(wen, io.out.b.valid, io.out.r.valid) @[ToAXI4.scala 199:25]
    io.in.resp.valid <= _T_37 @[ToAXI4.scala 199:19]
    
  module NutShell : 
    input clock : Clock
    input reset : Reset
    output io : {mem : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, prot : UInt<3>, id : UInt<1>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, strb : UInt<8>, last : UInt<1>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<1>, user : UInt<1>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, prot : UInt<3>, id : UInt<1>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<1>, user : UInt<1>}}}, mmio : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, prot : UInt<3>, id : UInt<1>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, strb : UInt<8>, last : UInt<1>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<1>, user : UInt<1>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, prot : UInt<3>, id : UInt<1>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<1>, user : UInt<1>}}}, flip frontend : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, prot : UInt<3>, id : UInt<1>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, strb : UInt<8>, last : UInt<1>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<1>, user : UInt<1>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, prot : UInt<3>, id : UInt<1>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<1>, user : UInt<1>}}}, flip meip : UInt<3>, ila : {WBUpc : UInt<39>, WBUvalid : UInt<1>, WBUrfWen : UInt<1>, WBUrfDest : UInt<5>, WBUrfData : UInt<64>, InstrCnt : UInt<64>}}
    
    inst nutcore of NutCore @[NutShell.scala 53:23]
    nutcore.clock <= clock
    nutcore.reset <= reset
    inst cohMg of CoherenceManager @[NutShell.scala 54:21]
    cohMg.clock <= clock
    cohMg.reset <= reset
    inst xbar of SimpleBusCrossbarNto1_2 @[NutShell.scala 55:20]
    xbar.clock <= clock
    xbar.reset <= reset
    nutcore.io.imem.mem.resp.bits.rdata <= cohMg.io.in.resp.bits.rdata @[NutShell.scala 56:15]
    nutcore.io.imem.mem.resp.bits.cmd <= cohMg.io.in.resp.bits.cmd @[NutShell.scala 56:15]
    nutcore.io.imem.mem.resp.valid <= cohMg.io.in.resp.valid @[NutShell.scala 56:15]
    cohMg.io.in.resp.ready <= nutcore.io.imem.mem.resp.ready @[NutShell.scala 56:15]
    cohMg.io.in.req.bits.wdata <= nutcore.io.imem.mem.req.bits.wdata @[NutShell.scala 56:15]
    cohMg.io.in.req.bits.wmask <= nutcore.io.imem.mem.req.bits.wmask @[NutShell.scala 56:15]
    cohMg.io.in.req.bits.cmd <= nutcore.io.imem.mem.req.bits.cmd @[NutShell.scala 56:15]
    cohMg.io.in.req.bits.size <= nutcore.io.imem.mem.req.bits.size @[NutShell.scala 56:15]
    cohMg.io.in.req.bits.addr <= nutcore.io.imem.mem.req.bits.addr @[NutShell.scala 56:15]
    cohMg.io.in.req.valid <= nutcore.io.imem.mem.req.valid @[NutShell.scala 56:15]
    nutcore.io.imem.mem.req.ready <= cohMg.io.in.req.ready @[NutShell.scala 56:15]
    cohMg.io.out.coh.resp.bits.rdata <= nutcore.io.dmem.coh.resp.bits.rdata @[NutShell.scala 57:23]
    cohMg.io.out.coh.resp.bits.cmd <= nutcore.io.dmem.coh.resp.bits.cmd @[NutShell.scala 57:23]
    cohMg.io.out.coh.resp.valid <= nutcore.io.dmem.coh.resp.valid @[NutShell.scala 57:23]
    nutcore.io.dmem.coh.resp.ready <= cohMg.io.out.coh.resp.ready @[NutShell.scala 57:23]
    nutcore.io.dmem.coh.req.bits.wdata <= cohMg.io.out.coh.req.bits.wdata @[NutShell.scala 57:23]
    nutcore.io.dmem.coh.req.bits.wmask <= cohMg.io.out.coh.req.bits.wmask @[NutShell.scala 57:23]
    nutcore.io.dmem.coh.req.bits.cmd <= cohMg.io.out.coh.req.bits.cmd @[NutShell.scala 57:23]
    nutcore.io.dmem.coh.req.bits.size <= cohMg.io.out.coh.req.bits.size @[NutShell.scala 57:23]
    nutcore.io.dmem.coh.req.bits.addr <= cohMg.io.out.coh.req.bits.addr @[NutShell.scala 57:23]
    nutcore.io.dmem.coh.req.valid <= cohMg.io.out.coh.req.valid @[NutShell.scala 57:23]
    cohMg.io.out.coh.req.ready <= nutcore.io.dmem.coh.req.ready @[NutShell.scala 57:23]
    cohMg.io.out.mem.resp.bits.rdata <= xbar.io.in[0].resp.bits.rdata @[NutShell.scala 58:17]
    cohMg.io.out.mem.resp.bits.cmd <= xbar.io.in[0].resp.bits.cmd @[NutShell.scala 58:17]
    cohMg.io.out.mem.resp.valid <= xbar.io.in[0].resp.valid @[NutShell.scala 58:17]
    xbar.io.in[0].resp.ready <= cohMg.io.out.mem.resp.ready @[NutShell.scala 58:17]
    xbar.io.in[0].req.bits.wdata <= cohMg.io.out.mem.req.bits.wdata @[NutShell.scala 58:17]
    xbar.io.in[0].req.bits.wmask <= cohMg.io.out.mem.req.bits.wmask @[NutShell.scala 58:17]
    xbar.io.in[0].req.bits.cmd <= cohMg.io.out.mem.req.bits.cmd @[NutShell.scala 58:17]
    xbar.io.in[0].req.bits.size <= cohMg.io.out.mem.req.bits.size @[NutShell.scala 58:17]
    xbar.io.in[0].req.bits.addr <= cohMg.io.out.mem.req.bits.addr @[NutShell.scala 58:17]
    xbar.io.in[0].req.valid <= cohMg.io.out.mem.req.valid @[NutShell.scala 58:17]
    cohMg.io.out.mem.req.ready <= xbar.io.in[0].req.ready @[NutShell.scala 58:17]
    nutcore.io.dmem.mem.resp.bits.rdata <= xbar.io.in[1].resp.bits.rdata @[NutShell.scala 59:17]
    nutcore.io.dmem.mem.resp.bits.cmd <= xbar.io.in[1].resp.bits.cmd @[NutShell.scala 59:17]
    nutcore.io.dmem.mem.resp.valid <= xbar.io.in[1].resp.valid @[NutShell.scala 59:17]
    xbar.io.in[1].resp.ready <= nutcore.io.dmem.mem.resp.ready @[NutShell.scala 59:17]
    xbar.io.in[1].req.bits.wdata <= nutcore.io.dmem.mem.req.bits.wdata @[NutShell.scala 59:17]
    xbar.io.in[1].req.bits.wmask <= nutcore.io.dmem.mem.req.bits.wmask @[NutShell.scala 59:17]
    xbar.io.in[1].req.bits.cmd <= nutcore.io.dmem.mem.req.bits.cmd @[NutShell.scala 59:17]
    xbar.io.in[1].req.bits.size <= nutcore.io.dmem.mem.req.bits.size @[NutShell.scala 59:17]
    xbar.io.in[1].req.bits.addr <= nutcore.io.dmem.mem.req.bits.addr @[NutShell.scala 59:17]
    xbar.io.in[1].req.valid <= nutcore.io.dmem.mem.req.valid @[NutShell.scala 59:17]
    nutcore.io.dmem.mem.req.ready <= xbar.io.in[1].req.ready @[NutShell.scala 59:17]
    inst axi2sb of AXI42SimpleBusConverter @[NutShell.scala 61:22]
    axi2sb.clock <= clock
    axi2sb.reset <= reset
    io.frontend.r.bits.user <= axi2sb.io.in.r.bits.user @[NutShell.scala 62:16]
    io.frontend.r.bits.id <= axi2sb.io.in.r.bits.id @[NutShell.scala 62:16]
    io.frontend.r.bits.last <= axi2sb.io.in.r.bits.last @[NutShell.scala 62:16]
    io.frontend.r.bits.data <= axi2sb.io.in.r.bits.data @[NutShell.scala 62:16]
    io.frontend.r.bits.resp <= axi2sb.io.in.r.bits.resp @[NutShell.scala 62:16]
    io.frontend.r.valid <= axi2sb.io.in.r.valid @[NutShell.scala 62:16]
    axi2sb.io.in.r.ready <= io.frontend.r.ready @[NutShell.scala 62:16]
    axi2sb.io.in.ar.bits.qos <= io.frontend.ar.bits.qos @[NutShell.scala 62:16]
    axi2sb.io.in.ar.bits.cache <= io.frontend.ar.bits.cache @[NutShell.scala 62:16]
    axi2sb.io.in.ar.bits.lock <= io.frontend.ar.bits.lock @[NutShell.scala 62:16]
    axi2sb.io.in.ar.bits.burst <= io.frontend.ar.bits.burst @[NutShell.scala 62:16]
    axi2sb.io.in.ar.bits.size <= io.frontend.ar.bits.size @[NutShell.scala 62:16]
    axi2sb.io.in.ar.bits.len <= io.frontend.ar.bits.len @[NutShell.scala 62:16]
    axi2sb.io.in.ar.bits.user <= io.frontend.ar.bits.user @[NutShell.scala 62:16]
    axi2sb.io.in.ar.bits.id <= io.frontend.ar.bits.id @[NutShell.scala 62:16]
    axi2sb.io.in.ar.bits.prot <= io.frontend.ar.bits.prot @[NutShell.scala 62:16]
    axi2sb.io.in.ar.bits.addr <= io.frontend.ar.bits.addr @[NutShell.scala 62:16]
    axi2sb.io.in.ar.valid <= io.frontend.ar.valid @[NutShell.scala 62:16]
    io.frontend.ar.ready <= axi2sb.io.in.ar.ready @[NutShell.scala 62:16]
    io.frontend.b.bits.user <= axi2sb.io.in.b.bits.user @[NutShell.scala 62:16]
    io.frontend.b.bits.id <= axi2sb.io.in.b.bits.id @[NutShell.scala 62:16]
    io.frontend.b.bits.resp <= axi2sb.io.in.b.bits.resp @[NutShell.scala 62:16]
    io.frontend.b.valid <= axi2sb.io.in.b.valid @[NutShell.scala 62:16]
    axi2sb.io.in.b.ready <= io.frontend.b.ready @[NutShell.scala 62:16]
    axi2sb.io.in.w.bits.last <= io.frontend.w.bits.last @[NutShell.scala 62:16]
    axi2sb.io.in.w.bits.strb <= io.frontend.w.bits.strb @[NutShell.scala 62:16]
    axi2sb.io.in.w.bits.data <= io.frontend.w.bits.data @[NutShell.scala 62:16]
    axi2sb.io.in.w.valid <= io.frontend.w.valid @[NutShell.scala 62:16]
    io.frontend.w.ready <= axi2sb.io.in.w.ready @[NutShell.scala 62:16]
    axi2sb.io.in.aw.bits.qos <= io.frontend.aw.bits.qos @[NutShell.scala 62:16]
    axi2sb.io.in.aw.bits.cache <= io.frontend.aw.bits.cache @[NutShell.scala 62:16]
    axi2sb.io.in.aw.bits.lock <= io.frontend.aw.bits.lock @[NutShell.scala 62:16]
    axi2sb.io.in.aw.bits.burst <= io.frontend.aw.bits.burst @[NutShell.scala 62:16]
    axi2sb.io.in.aw.bits.size <= io.frontend.aw.bits.size @[NutShell.scala 62:16]
    axi2sb.io.in.aw.bits.len <= io.frontend.aw.bits.len @[NutShell.scala 62:16]
    axi2sb.io.in.aw.bits.user <= io.frontend.aw.bits.user @[NutShell.scala 62:16]
    axi2sb.io.in.aw.bits.id <= io.frontend.aw.bits.id @[NutShell.scala 62:16]
    axi2sb.io.in.aw.bits.prot <= io.frontend.aw.bits.prot @[NutShell.scala 62:16]
    axi2sb.io.in.aw.bits.addr <= io.frontend.aw.bits.addr @[NutShell.scala 62:16]
    axi2sb.io.in.aw.valid <= io.frontend.aw.valid @[NutShell.scala 62:16]
    io.frontend.aw.ready <= axi2sb.io.in.aw.ready @[NutShell.scala 62:16]
    axi2sb.io.out.resp.bits.rdata <= nutcore.io.frontend.resp.bits.rdata @[NutShell.scala 63:23]
    axi2sb.io.out.resp.bits.cmd <= nutcore.io.frontend.resp.bits.cmd @[NutShell.scala 63:23]
    axi2sb.io.out.resp.valid <= nutcore.io.frontend.resp.valid @[NutShell.scala 63:23]
    nutcore.io.frontend.resp.ready <= axi2sb.io.out.resp.ready @[NutShell.scala 63:23]
    nutcore.io.frontend.req.bits.wdata <= axi2sb.io.out.req.bits.wdata @[NutShell.scala 63:23]
    nutcore.io.frontend.req.bits.wmask <= axi2sb.io.out.req.bits.wmask @[NutShell.scala 63:23]
    nutcore.io.frontend.req.bits.cmd <= axi2sb.io.out.req.bits.cmd @[NutShell.scala 63:23]
    nutcore.io.frontend.req.bits.size <= axi2sb.io.out.req.bits.size @[NutShell.scala 63:23]
    nutcore.io.frontend.req.bits.addr <= axi2sb.io.out.req.bits.addr @[NutShell.scala 63:23]
    nutcore.io.frontend.req.valid <= axi2sb.io.out.req.valid @[NutShell.scala 63:23]
    axi2sb.io.out.req.ready <= nutcore.io.frontend.req.ready @[NutShell.scala 63:23]
    inst SimpleBus2MemPortConverter of SimpleBus2MemPortConverter @[ToMemPort.scala 50:24]
    SimpleBus2MemPortConverter.clock <= clock
    SimpleBus2MemPortConverter.reset <= reset
    xbar.io.out.resp.bits.rdata <= SimpleBus2MemPortConverter.io.in.resp.bits.rdata @[ToMemPort.scala 51:18]
    xbar.io.out.resp.bits.cmd <= SimpleBus2MemPortConverter.io.in.resp.bits.cmd @[ToMemPort.scala 51:18]
    xbar.io.out.resp.valid <= SimpleBus2MemPortConverter.io.in.resp.valid @[ToMemPort.scala 51:18]
    SimpleBus2MemPortConverter.io.in.resp.ready <= xbar.io.out.resp.ready @[ToMemPort.scala 51:18]
    SimpleBus2MemPortConverter.io.in.req.bits.wdata <= xbar.io.out.req.bits.wdata @[ToMemPort.scala 51:18]
    SimpleBus2MemPortConverter.io.in.req.bits.wmask <= xbar.io.out.req.bits.wmask @[ToMemPort.scala 51:18]
    SimpleBus2MemPortConverter.io.in.req.bits.cmd <= xbar.io.out.req.bits.cmd @[ToMemPort.scala 51:18]
    SimpleBus2MemPortConverter.io.in.req.bits.size <= xbar.io.out.req.bits.size @[ToMemPort.scala 51:18]
    SimpleBus2MemPortConverter.io.in.req.bits.addr <= xbar.io.out.req.bits.addr @[ToMemPort.scala 51:18]
    SimpleBus2MemPortConverter.io.in.req.valid <= xbar.io.out.req.valid @[ToMemPort.scala 51:18]
    xbar.io.out.req.ready <= SimpleBus2MemPortConverter.io.in.req.ready @[ToMemPort.scala 51:18]
    SimpleBus2MemPortConverter.io.out.resp.bits.data is invalid @[NutShell.scala 66:26]
    SimpleBus2MemPortConverter.io.out.resp.valid is invalid @[NutShell.scala 67:22]
    SimpleBus2MemPortConverter.io.out.req.ready is invalid @[NutShell.scala 68:21]
    wire _T : {mem : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}, flip coh : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}}} @[NutShell.scala 71:26]
    inst Prefetcher of Prefetcher @[NutShell.scala 73:30]
    Prefetcher.clock <= clock
    Prefetcher.reset <= reset
    wire _T_1 : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}} @[NutShell.scala 74:27]
    Prefetcher.io.in.bits.wdata <= xbar.io.out.req.bits.wdata @[NutShell.scala 75:24]
    Prefetcher.io.in.bits.wmask <= xbar.io.out.req.bits.wmask @[NutShell.scala 75:24]
    Prefetcher.io.in.bits.cmd <= xbar.io.out.req.bits.cmd @[NutShell.scala 75:24]
    Prefetcher.io.in.bits.size <= xbar.io.out.req.bits.size @[NutShell.scala 75:24]
    Prefetcher.io.in.bits.addr <= xbar.io.out.req.bits.addr @[NutShell.scala 75:24]
    Prefetcher.io.in.valid <= xbar.io.out.req.valid @[NutShell.scala 75:24]
    xbar.io.out.req.ready <= Prefetcher.io.in.ready @[NutShell.scala 75:24]
    _T_1.req.bits.wdata <= Prefetcher.io.out.bits.wdata @[NutShell.scala 76:21]
    _T_1.req.bits.wmask <= Prefetcher.io.out.bits.wmask @[NutShell.scala 76:21]
    _T_1.req.bits.cmd <= Prefetcher.io.out.bits.cmd @[NutShell.scala 76:21]
    _T_1.req.bits.size <= Prefetcher.io.out.bits.size @[NutShell.scala 76:21]
    _T_1.req.bits.addr <= Prefetcher.io.out.bits.addr @[NutShell.scala 76:21]
    _T_1.req.valid <= Prefetcher.io.out.valid @[NutShell.scala 76:21]
    Prefetcher.io.out.ready <= _T_1.req.ready @[NutShell.scala 76:21]
    xbar.io.out.resp.bits.rdata <= _T_1.resp.bits.rdata @[NutShell.scala 77:24]
    xbar.io.out.resp.bits.cmd <= _T_1.resp.bits.cmd @[NutShell.scala 77:24]
    xbar.io.out.resp.valid <= _T_1.resp.valid @[NutShell.scala 77:24]
    _T_1.resp.ready <= xbar.io.out.resp.ready @[NutShell.scala 77:24]
    wire _T_2 : UInt<1> @[NutShell.scala 80:23]
    wire _T_3 : {req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {cmd : UInt<4>, rdata : UInt<64>}}} @[NutShell.scala 81:60]
    _T_3.resp.bits.rdata <= UInt<64>("h00") @[NutShell.scala 81:60]
    _T_3.resp.bits.cmd <= UInt<4>("h00") @[NutShell.scala 81:60]
    _T_3.resp.valid <= UInt<1>("h00") @[NutShell.scala 81:60]
    _T_3.resp.ready <= UInt<1>("h00") @[NutShell.scala 81:60]
    _T_3.req.bits.wdata <= UInt<64>("h00") @[NutShell.scala 81:60]
    _T_3.req.bits.wmask <= UInt<8>("h00") @[NutShell.scala 81:60]
    _T_3.req.bits.cmd <= UInt<4>("h00") @[NutShell.scala 81:60]
    _T_3.req.bits.size <= UInt<3>("h00") @[NutShell.scala 81:60]
    _T_3.req.bits.addr <= UInt<32>("h00") @[NutShell.scala 81:60]
    _T_3.req.valid <= UInt<1>("h00") @[NutShell.scala 81:60]
    _T_3.req.ready <= UInt<1>("h00") @[NutShell.scala 81:60]
    inst Cache of Cache_2 @[Cache.scala 678:35]
    Cache.clock <= clock
    Cache.reset <= reset
    Cache.io.flush <= UInt<1>("h00") @[Cache.scala 683:20]
    _T_1.resp.bits.rdata <= Cache.io.in.resp.bits.rdata @[Cache.scala 684:17]
    _T_1.resp.bits.cmd <= Cache.io.in.resp.bits.cmd @[Cache.scala 684:17]
    _T_1.resp.valid <= Cache.io.in.resp.valid @[Cache.scala 684:17]
    Cache.io.in.resp.ready <= _T_1.resp.ready @[Cache.scala 684:17]
    Cache.io.in.req.bits.wdata <= _T_1.req.bits.wdata @[Cache.scala 684:17]
    Cache.io.in.req.bits.wmask <= _T_1.req.bits.wmask @[Cache.scala 684:17]
    Cache.io.in.req.bits.cmd <= _T_1.req.bits.cmd @[Cache.scala 684:17]
    Cache.io.in.req.bits.size <= _T_1.req.bits.size @[Cache.scala 684:17]
    Cache.io.in.req.bits.addr <= _T_1.req.bits.addr @[Cache.scala 684:17]
    Cache.io.in.req.valid <= _T_1.req.valid @[Cache.scala 684:17]
    _T_1.req.ready <= Cache.io.in.req.ready @[Cache.scala 684:17]
    Cache.io.mmio.resp.bits.rdata <= _T_3.resp.bits.rdata @[Cache.scala 685:13]
    Cache.io.mmio.resp.bits.cmd <= _T_3.resp.bits.cmd @[Cache.scala 685:13]
    Cache.io.mmio.resp.valid <= _T_3.resp.valid @[Cache.scala 685:13]
    _T_3.resp.ready <= Cache.io.mmio.resp.ready @[Cache.scala 685:13]
    _T_3.req.bits.wdata <= Cache.io.mmio.req.bits.wdata @[Cache.scala 685:13]
    _T_3.req.bits.wmask <= Cache.io.mmio.req.bits.wmask @[Cache.scala 685:13]
    _T_3.req.bits.cmd <= Cache.io.mmio.req.bits.cmd @[Cache.scala 685:13]
    _T_3.req.bits.size <= Cache.io.mmio.req.bits.size @[Cache.scala 685:13]
    _T_3.req.bits.addr <= Cache.io.mmio.req.bits.addr @[Cache.scala 685:13]
    _T_3.req.valid <= Cache.io.mmio.req.valid @[Cache.scala 685:13]
    Cache.io.mmio.req.ready <= _T_3.req.ready @[Cache.scala 685:13]
    _T_2 <= Cache.io.empty @[Cache.scala 686:11]
    _T.coh.resp.bits.rdata <= Cache.io.out.coh.resp.bits.rdata @[NutShell.scala 81:16]
    _T.coh.resp.bits.cmd <= Cache.io.out.coh.resp.bits.cmd @[NutShell.scala 81:16]
    _T.coh.resp.valid <= Cache.io.out.coh.resp.valid @[NutShell.scala 81:16]
    Cache.io.out.coh.resp.ready <= _T.coh.resp.ready @[NutShell.scala 81:16]
    Cache.io.out.coh.req.bits.wdata <= _T.coh.req.bits.wdata @[NutShell.scala 81:16]
    Cache.io.out.coh.req.bits.wmask <= _T.coh.req.bits.wmask @[NutShell.scala 81:16]
    Cache.io.out.coh.req.bits.cmd <= _T.coh.req.bits.cmd @[NutShell.scala 81:16]
    Cache.io.out.coh.req.bits.size <= _T.coh.req.bits.size @[NutShell.scala 81:16]
    Cache.io.out.coh.req.bits.addr <= _T.coh.req.bits.addr @[NutShell.scala 81:16]
    Cache.io.out.coh.req.valid <= _T.coh.req.valid @[NutShell.scala 81:16]
    _T.coh.req.ready <= Cache.io.out.coh.req.ready @[NutShell.scala 81:16]
    Cache.io.out.mem.resp.bits.rdata <= _T.mem.resp.bits.rdata @[NutShell.scala 81:16]
    Cache.io.out.mem.resp.bits.cmd <= _T.mem.resp.bits.cmd @[NutShell.scala 81:16]
    Cache.io.out.mem.resp.valid <= _T.mem.resp.valid @[NutShell.scala 81:16]
    _T.mem.resp.ready <= Cache.io.out.mem.resp.ready @[NutShell.scala 81:16]
    _T.mem.req.bits.wdata <= Cache.io.out.mem.req.bits.wdata @[NutShell.scala 81:16]
    _T.mem.req.bits.wmask <= Cache.io.out.mem.req.bits.wmask @[NutShell.scala 81:16]
    _T.mem.req.bits.cmd <= Cache.io.out.mem.req.bits.cmd @[NutShell.scala 81:16]
    _T.mem.req.bits.size <= Cache.io.out.mem.req.bits.size @[NutShell.scala 81:16]
    _T.mem.req.bits.addr <= Cache.io.out.mem.req.bits.addr @[NutShell.scala 81:16]
    _T.mem.req.valid <= Cache.io.out.mem.req.valid @[NutShell.scala 81:16]
    Cache.io.out.mem.req.ready <= _T.mem.req.ready @[NutShell.scala 81:16]
    _T.coh.resp.ready <= UInt<1>("h01") @[NutShell.scala 83:31]
    _T.coh.req.valid <= UInt<1>("h00") @[NutShell.scala 84:30]
    _T.coh.req.bits.wdata is invalid @[NutShell.scala 85:29]
    _T.coh.req.bits.wmask is invalid @[NutShell.scala 85:29]
    _T.coh.req.bits.cmd is invalid @[NutShell.scala 85:29]
    _T.coh.req.bits.size is invalid @[NutShell.scala 85:29]
    _T.coh.req.bits.addr is invalid @[NutShell.scala 85:29]
    inst memAddrMap of SimpleBusAddressMapper @[NutShell.scala 93:26]
    memAddrMap.clock <= clock
    memAddrMap.reset <= reset
    _T.mem.resp.bits.rdata <= memAddrMap.io.in.resp.bits.rdata @[NutShell.scala 94:20]
    _T.mem.resp.bits.cmd <= memAddrMap.io.in.resp.bits.cmd @[NutShell.scala 94:20]
    _T.mem.resp.valid <= memAddrMap.io.in.resp.valid @[NutShell.scala 94:20]
    memAddrMap.io.in.resp.ready <= _T.mem.resp.ready @[NutShell.scala 94:20]
    memAddrMap.io.in.req.bits.wdata <= _T.mem.req.bits.wdata @[NutShell.scala 94:20]
    memAddrMap.io.in.req.bits.wmask <= _T.mem.req.bits.wmask @[NutShell.scala 94:20]
    memAddrMap.io.in.req.bits.cmd <= _T.mem.req.bits.cmd @[NutShell.scala 94:20]
    memAddrMap.io.in.req.bits.size <= _T.mem.req.bits.size @[NutShell.scala 94:20]
    memAddrMap.io.in.req.bits.addr <= _T.mem.req.bits.addr @[NutShell.scala 94:20]
    memAddrMap.io.in.req.valid <= _T.mem.req.valid @[NutShell.scala 94:20]
    _T.mem.req.ready <= memAddrMap.io.in.req.ready @[NutShell.scala 94:20]
    inst SimpleBus2AXI4Converter of SimpleBus2AXI4Converter @[ToAXI4.scala 204:24]
    SimpleBus2AXI4Converter.clock <= clock
    SimpleBus2AXI4Converter.reset <= reset
    memAddrMap.io.out.resp.bits.rdata <= SimpleBus2AXI4Converter.io.in.resp.bits.rdata @[ToAXI4.scala 205:18]
    memAddrMap.io.out.resp.bits.cmd <= SimpleBus2AXI4Converter.io.in.resp.bits.cmd @[ToAXI4.scala 205:18]
    memAddrMap.io.out.resp.valid <= SimpleBus2AXI4Converter.io.in.resp.valid @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter.io.in.resp.ready <= memAddrMap.io.out.resp.ready @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter.io.in.req.bits.wdata <= memAddrMap.io.out.req.bits.wdata @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter.io.in.req.bits.wmask <= memAddrMap.io.out.req.bits.wmask @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter.io.in.req.bits.cmd <= memAddrMap.io.out.req.bits.cmd @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter.io.in.req.bits.size <= memAddrMap.io.out.req.bits.size @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter.io.in.req.bits.addr <= memAddrMap.io.out.req.bits.addr @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter.io.in.req.valid <= memAddrMap.io.out.req.valid @[ToAXI4.scala 205:18]
    memAddrMap.io.out.req.ready <= SimpleBus2AXI4Converter.io.in.req.ready @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter.io.out.r.bits.user <= io.mem.r.bits.user @[NutShell.scala 95:10]
    SimpleBus2AXI4Converter.io.out.r.bits.id <= io.mem.r.bits.id @[NutShell.scala 95:10]
    SimpleBus2AXI4Converter.io.out.r.bits.last <= io.mem.r.bits.last @[NutShell.scala 95:10]
    SimpleBus2AXI4Converter.io.out.r.bits.data <= io.mem.r.bits.data @[NutShell.scala 95:10]
    SimpleBus2AXI4Converter.io.out.r.bits.resp <= io.mem.r.bits.resp @[NutShell.scala 95:10]
    SimpleBus2AXI4Converter.io.out.r.valid <= io.mem.r.valid @[NutShell.scala 95:10]
    io.mem.r.ready <= SimpleBus2AXI4Converter.io.out.r.ready @[NutShell.scala 95:10]
    io.mem.ar.bits.qos <= SimpleBus2AXI4Converter.io.out.ar.bits.qos @[NutShell.scala 95:10]
    io.mem.ar.bits.cache <= SimpleBus2AXI4Converter.io.out.ar.bits.cache @[NutShell.scala 95:10]
    io.mem.ar.bits.lock <= SimpleBus2AXI4Converter.io.out.ar.bits.lock @[NutShell.scala 95:10]
    io.mem.ar.bits.burst <= SimpleBus2AXI4Converter.io.out.ar.bits.burst @[NutShell.scala 95:10]
    io.mem.ar.bits.size <= SimpleBus2AXI4Converter.io.out.ar.bits.size @[NutShell.scala 95:10]
    io.mem.ar.bits.len <= SimpleBus2AXI4Converter.io.out.ar.bits.len @[NutShell.scala 95:10]
    io.mem.ar.bits.user <= SimpleBus2AXI4Converter.io.out.ar.bits.user @[NutShell.scala 95:10]
    io.mem.ar.bits.id <= SimpleBus2AXI4Converter.io.out.ar.bits.id @[NutShell.scala 95:10]
    io.mem.ar.bits.prot <= SimpleBus2AXI4Converter.io.out.ar.bits.prot @[NutShell.scala 95:10]
    io.mem.ar.bits.addr <= SimpleBus2AXI4Converter.io.out.ar.bits.addr @[NutShell.scala 95:10]
    io.mem.ar.valid <= SimpleBus2AXI4Converter.io.out.ar.valid @[NutShell.scala 95:10]
    SimpleBus2AXI4Converter.io.out.ar.ready <= io.mem.ar.ready @[NutShell.scala 95:10]
    SimpleBus2AXI4Converter.io.out.b.bits.user <= io.mem.b.bits.user @[NutShell.scala 95:10]
    SimpleBus2AXI4Converter.io.out.b.bits.id <= io.mem.b.bits.id @[NutShell.scala 95:10]
    SimpleBus2AXI4Converter.io.out.b.bits.resp <= io.mem.b.bits.resp @[NutShell.scala 95:10]
    SimpleBus2AXI4Converter.io.out.b.valid <= io.mem.b.valid @[NutShell.scala 95:10]
    io.mem.b.ready <= SimpleBus2AXI4Converter.io.out.b.ready @[NutShell.scala 95:10]
    io.mem.w.bits.last <= SimpleBus2AXI4Converter.io.out.w.bits.last @[NutShell.scala 95:10]
    io.mem.w.bits.strb <= SimpleBus2AXI4Converter.io.out.w.bits.strb @[NutShell.scala 95:10]
    io.mem.w.bits.data <= SimpleBus2AXI4Converter.io.out.w.bits.data @[NutShell.scala 95:10]
    io.mem.w.valid <= SimpleBus2AXI4Converter.io.out.w.valid @[NutShell.scala 95:10]
    SimpleBus2AXI4Converter.io.out.w.ready <= io.mem.w.ready @[NutShell.scala 95:10]
    io.mem.aw.bits.qos <= SimpleBus2AXI4Converter.io.out.aw.bits.qos @[NutShell.scala 95:10]
    io.mem.aw.bits.cache <= SimpleBus2AXI4Converter.io.out.aw.bits.cache @[NutShell.scala 95:10]
    io.mem.aw.bits.lock <= SimpleBus2AXI4Converter.io.out.aw.bits.lock @[NutShell.scala 95:10]
    io.mem.aw.bits.burst <= SimpleBus2AXI4Converter.io.out.aw.bits.burst @[NutShell.scala 95:10]
    io.mem.aw.bits.size <= SimpleBus2AXI4Converter.io.out.aw.bits.size @[NutShell.scala 95:10]
    io.mem.aw.bits.len <= SimpleBus2AXI4Converter.io.out.aw.bits.len @[NutShell.scala 95:10]
    io.mem.aw.bits.user <= SimpleBus2AXI4Converter.io.out.aw.bits.user @[NutShell.scala 95:10]
    io.mem.aw.bits.id <= SimpleBus2AXI4Converter.io.out.aw.bits.id @[NutShell.scala 95:10]
    io.mem.aw.bits.prot <= SimpleBus2AXI4Converter.io.out.aw.bits.prot @[NutShell.scala 95:10]
    io.mem.aw.bits.addr <= SimpleBus2AXI4Converter.io.out.aw.bits.addr @[NutShell.scala 95:10]
    io.mem.aw.valid <= SimpleBus2AXI4Converter.io.out.aw.valid @[NutShell.scala 95:10]
    SimpleBus2AXI4Converter.io.out.aw.ready <= io.mem.aw.ready @[NutShell.scala 95:10]
    nutcore.io.imem.coh.resp.ready <= UInt<1>("h01") @[NutShell.scala 97:34]
    nutcore.io.imem.coh.req.valid <= UInt<1>("h00") @[NutShell.scala 98:33]
    nutcore.io.imem.coh.req.bits.wdata is invalid @[NutShell.scala 99:32]
    nutcore.io.imem.coh.req.bits.wmask is invalid @[NutShell.scala 99:32]
    nutcore.io.imem.coh.req.bits.cmd is invalid @[NutShell.scala 99:32]
    nutcore.io.imem.coh.req.bits.size is invalid @[NutShell.scala 99:32]
    nutcore.io.imem.coh.req.bits.addr is invalid @[NutShell.scala 99:32]
    inst mmioXbar of SimpleBusCrossbar1toN @[NutShell.scala 106:24]
    mmioXbar.clock <= clock
    mmioXbar.reset <= reset
    nutcore.io.mmio.resp.bits.rdata <= mmioXbar.io.in.resp.bits.rdata @[NutShell.scala 107:18]
    nutcore.io.mmio.resp.bits.cmd <= mmioXbar.io.in.resp.bits.cmd @[NutShell.scala 107:18]
    nutcore.io.mmio.resp.valid <= mmioXbar.io.in.resp.valid @[NutShell.scala 107:18]
    mmioXbar.io.in.resp.ready <= nutcore.io.mmio.resp.ready @[NutShell.scala 107:18]
    mmioXbar.io.in.req.bits.wdata <= nutcore.io.mmio.req.bits.wdata @[NutShell.scala 107:18]
    mmioXbar.io.in.req.bits.wmask <= nutcore.io.mmio.req.bits.wmask @[NutShell.scala 107:18]
    mmioXbar.io.in.req.bits.cmd <= nutcore.io.mmio.req.bits.cmd @[NutShell.scala 107:18]
    mmioXbar.io.in.req.bits.size <= nutcore.io.mmio.req.bits.size @[NutShell.scala 107:18]
    mmioXbar.io.in.req.bits.addr <= nutcore.io.mmio.req.bits.addr @[NutShell.scala 107:18]
    mmioXbar.io.in.req.valid <= nutcore.io.mmio.req.valid @[NutShell.scala 107:18]
    nutcore.io.mmio.req.ready <= mmioXbar.io.in.req.ready @[NutShell.scala 107:18]
    inst SimpleBus2AXI4Converter_1 of SimpleBus2AXI4Converter_1 @[ToAXI4.scala 204:24]
    SimpleBus2AXI4Converter_1.clock <= clock
    SimpleBus2AXI4Converter_1.reset <= reset
    mmioXbar.io.out[0].resp.bits.rdata <= SimpleBus2AXI4Converter_1.io.in.resp.bits.rdata @[ToAXI4.scala 205:18]
    mmioXbar.io.out[0].resp.bits.cmd <= SimpleBus2AXI4Converter_1.io.in.resp.bits.cmd @[ToAXI4.scala 205:18]
    mmioXbar.io.out[0].resp.valid <= SimpleBus2AXI4Converter_1.io.in.resp.valid @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_1.io.in.resp.ready <= mmioXbar.io.out[0].resp.ready @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_1.io.in.req.bits.wdata <= mmioXbar.io.out[0].req.bits.wdata @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_1.io.in.req.bits.wmask <= mmioXbar.io.out[0].req.bits.wmask @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_1.io.in.req.bits.cmd <= mmioXbar.io.out[0].req.bits.cmd @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_1.io.in.req.bits.size <= mmioXbar.io.out[0].req.bits.size @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_1.io.in.req.bits.addr <= mmioXbar.io.out[0].req.bits.addr @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_1.io.in.req.valid <= mmioXbar.io.out[0].req.valid @[ToAXI4.scala 205:18]
    mmioXbar.io.out[0].req.ready <= SimpleBus2AXI4Converter_1.io.in.req.ready @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_1.io.out.r.bits.user <= io.mmio.r.bits.user @[NutShell.scala 110:33]
    SimpleBus2AXI4Converter_1.io.out.r.bits.id <= io.mmio.r.bits.id @[NutShell.scala 110:33]
    SimpleBus2AXI4Converter_1.io.out.r.bits.last <= io.mmio.r.bits.last @[NutShell.scala 110:33]
    SimpleBus2AXI4Converter_1.io.out.r.bits.data <= io.mmio.r.bits.data @[NutShell.scala 110:33]
    SimpleBus2AXI4Converter_1.io.out.r.bits.resp <= io.mmio.r.bits.resp @[NutShell.scala 110:33]
    SimpleBus2AXI4Converter_1.io.out.r.valid <= io.mmio.r.valid @[NutShell.scala 110:33]
    io.mmio.r.ready <= SimpleBus2AXI4Converter_1.io.out.r.ready @[NutShell.scala 110:33]
    io.mmio.ar.bits.qos <= SimpleBus2AXI4Converter_1.io.out.ar.bits.qos @[NutShell.scala 110:33]
    io.mmio.ar.bits.cache <= SimpleBus2AXI4Converter_1.io.out.ar.bits.cache @[NutShell.scala 110:33]
    io.mmio.ar.bits.lock <= SimpleBus2AXI4Converter_1.io.out.ar.bits.lock @[NutShell.scala 110:33]
    io.mmio.ar.bits.burst <= SimpleBus2AXI4Converter_1.io.out.ar.bits.burst @[NutShell.scala 110:33]
    io.mmio.ar.bits.size <= SimpleBus2AXI4Converter_1.io.out.ar.bits.size @[NutShell.scala 110:33]
    io.mmio.ar.bits.len <= SimpleBus2AXI4Converter_1.io.out.ar.bits.len @[NutShell.scala 110:33]
    io.mmio.ar.bits.user <= SimpleBus2AXI4Converter_1.io.out.ar.bits.user @[NutShell.scala 110:33]
    io.mmio.ar.bits.id <= SimpleBus2AXI4Converter_1.io.out.ar.bits.id @[NutShell.scala 110:33]
    io.mmio.ar.bits.prot <= SimpleBus2AXI4Converter_1.io.out.ar.bits.prot @[NutShell.scala 110:33]
    io.mmio.ar.bits.addr <= SimpleBus2AXI4Converter_1.io.out.ar.bits.addr @[NutShell.scala 110:33]
    io.mmio.ar.valid <= SimpleBus2AXI4Converter_1.io.out.ar.valid @[NutShell.scala 110:33]
    SimpleBus2AXI4Converter_1.io.out.ar.ready <= io.mmio.ar.ready @[NutShell.scala 110:33]
    SimpleBus2AXI4Converter_1.io.out.b.bits.user <= io.mmio.b.bits.user @[NutShell.scala 110:33]
    SimpleBus2AXI4Converter_1.io.out.b.bits.id <= io.mmio.b.bits.id @[NutShell.scala 110:33]
    SimpleBus2AXI4Converter_1.io.out.b.bits.resp <= io.mmio.b.bits.resp @[NutShell.scala 110:33]
    SimpleBus2AXI4Converter_1.io.out.b.valid <= io.mmio.b.valid @[NutShell.scala 110:33]
    io.mmio.b.ready <= SimpleBus2AXI4Converter_1.io.out.b.ready @[NutShell.scala 110:33]
    io.mmio.w.bits.last <= SimpleBus2AXI4Converter_1.io.out.w.bits.last @[NutShell.scala 110:33]
    io.mmio.w.bits.strb <= SimpleBus2AXI4Converter_1.io.out.w.bits.strb @[NutShell.scala 110:33]
    io.mmio.w.bits.data <= SimpleBus2AXI4Converter_1.io.out.w.bits.data @[NutShell.scala 110:33]
    io.mmio.w.valid <= SimpleBus2AXI4Converter_1.io.out.w.valid @[NutShell.scala 110:33]
    SimpleBus2AXI4Converter_1.io.out.w.ready <= io.mmio.w.ready @[NutShell.scala 110:33]
    io.mmio.aw.bits.qos <= SimpleBus2AXI4Converter_1.io.out.aw.bits.qos @[NutShell.scala 110:33]
    io.mmio.aw.bits.cache <= SimpleBus2AXI4Converter_1.io.out.aw.bits.cache @[NutShell.scala 110:33]
    io.mmio.aw.bits.lock <= SimpleBus2AXI4Converter_1.io.out.aw.bits.lock @[NutShell.scala 110:33]
    io.mmio.aw.bits.burst <= SimpleBus2AXI4Converter_1.io.out.aw.bits.burst @[NutShell.scala 110:33]
    io.mmio.aw.bits.size <= SimpleBus2AXI4Converter_1.io.out.aw.bits.size @[NutShell.scala 110:33]
    io.mmio.aw.bits.len <= SimpleBus2AXI4Converter_1.io.out.aw.bits.len @[NutShell.scala 110:33]
    io.mmio.aw.bits.user <= SimpleBus2AXI4Converter_1.io.out.aw.bits.user @[NutShell.scala 110:33]
    io.mmio.aw.bits.id <= SimpleBus2AXI4Converter_1.io.out.aw.bits.id @[NutShell.scala 110:33]
    io.mmio.aw.bits.prot <= SimpleBus2AXI4Converter_1.io.out.aw.bits.prot @[NutShell.scala 110:33]
    io.mmio.aw.bits.addr <= SimpleBus2AXI4Converter_1.io.out.aw.bits.addr @[NutShell.scala 110:33]
    io.mmio.aw.valid <= SimpleBus2AXI4Converter_1.io.out.aw.valid @[NutShell.scala 110:33]
    SimpleBus2AXI4Converter_1.io.out.aw.ready <= io.mmio.aw.ready @[NutShell.scala 110:33]
    inst clint of AXI4CLINT @[NutShell.scala 113:21]
    clint.clock <= clock
    clint.reset <= reset
    inst SimpleBus2AXI4Converter_2 of SimpleBus2AXI4Converter_2 @[ToAXI4.scala 204:24]
    SimpleBus2AXI4Converter_2.clock <= clock
    SimpleBus2AXI4Converter_2.reset <= reset
    mmioXbar.io.out[1].resp.bits.rdata <= SimpleBus2AXI4Converter_2.io.in.resp.bits.rdata @[ToAXI4.scala 205:18]
    mmioXbar.io.out[1].resp.bits.cmd <= SimpleBus2AXI4Converter_2.io.in.resp.bits.cmd @[ToAXI4.scala 205:18]
    mmioXbar.io.out[1].resp.valid <= SimpleBus2AXI4Converter_2.io.in.resp.valid @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_2.io.in.resp.ready <= mmioXbar.io.out[1].resp.ready @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_2.io.in.req.bits.wdata <= mmioXbar.io.out[1].req.bits.wdata @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_2.io.in.req.bits.wmask <= mmioXbar.io.out[1].req.bits.wmask @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_2.io.in.req.bits.cmd <= mmioXbar.io.out[1].req.bits.cmd @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_2.io.in.req.bits.size <= mmioXbar.io.out[1].req.bits.size @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_2.io.in.req.bits.addr <= mmioXbar.io.out[1].req.bits.addr @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_2.io.in.req.valid <= mmioXbar.io.out[1].req.valid @[ToAXI4.scala 205:18]
    mmioXbar.io.out[1].req.ready <= SimpleBus2AXI4Converter_2.io.in.req.ready @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_2.io.out.r.bits.data <= clint.io.in.r.bits.data @[NutShell.scala 114:15]
    SimpleBus2AXI4Converter_2.io.out.r.bits.resp <= clint.io.in.r.bits.resp @[NutShell.scala 114:15]
    SimpleBus2AXI4Converter_2.io.out.r.valid <= clint.io.in.r.valid @[NutShell.scala 114:15]
    clint.io.in.r.ready <= SimpleBus2AXI4Converter_2.io.out.r.ready @[NutShell.scala 114:15]
    clint.io.in.ar.bits.prot <= SimpleBus2AXI4Converter_2.io.out.ar.bits.prot @[NutShell.scala 114:15]
    clint.io.in.ar.bits.addr <= SimpleBus2AXI4Converter_2.io.out.ar.bits.addr @[NutShell.scala 114:15]
    clint.io.in.ar.valid <= SimpleBus2AXI4Converter_2.io.out.ar.valid @[NutShell.scala 114:15]
    SimpleBus2AXI4Converter_2.io.out.ar.ready <= clint.io.in.ar.ready @[NutShell.scala 114:15]
    SimpleBus2AXI4Converter_2.io.out.b.bits.resp <= clint.io.in.b.bits.resp @[NutShell.scala 114:15]
    SimpleBus2AXI4Converter_2.io.out.b.valid <= clint.io.in.b.valid @[NutShell.scala 114:15]
    clint.io.in.b.ready <= SimpleBus2AXI4Converter_2.io.out.b.ready @[NutShell.scala 114:15]
    clint.io.in.w.bits.strb <= SimpleBus2AXI4Converter_2.io.out.w.bits.strb @[NutShell.scala 114:15]
    clint.io.in.w.bits.data <= SimpleBus2AXI4Converter_2.io.out.w.bits.data @[NutShell.scala 114:15]
    clint.io.in.w.valid <= SimpleBus2AXI4Converter_2.io.out.w.valid @[NutShell.scala 114:15]
    SimpleBus2AXI4Converter_2.io.out.w.ready <= clint.io.in.w.ready @[NutShell.scala 114:15]
    clint.io.in.aw.bits.prot <= SimpleBus2AXI4Converter_2.io.out.aw.bits.prot @[NutShell.scala 114:15]
    clint.io.in.aw.bits.addr <= SimpleBus2AXI4Converter_2.io.out.aw.bits.addr @[NutShell.scala 114:15]
    clint.io.in.aw.valid <= SimpleBus2AXI4Converter_2.io.out.aw.valid @[NutShell.scala 114:15]
    SimpleBus2AXI4Converter_2.io.out.aw.ready <= clint.io.in.aw.ready @[NutShell.scala 114:15]
    inst plic of AXI4PLIC @[NutShell.scala 120:20]
    plic.clock <= clock
    plic.reset <= reset
    inst SimpleBus2AXI4Converter_3 of SimpleBus2AXI4Converter_3 @[ToAXI4.scala 204:24]
    SimpleBus2AXI4Converter_3.clock <= clock
    SimpleBus2AXI4Converter_3.reset <= reset
    mmioXbar.io.out[2].resp.bits.rdata <= SimpleBus2AXI4Converter_3.io.in.resp.bits.rdata @[ToAXI4.scala 205:18]
    mmioXbar.io.out[2].resp.bits.cmd <= SimpleBus2AXI4Converter_3.io.in.resp.bits.cmd @[ToAXI4.scala 205:18]
    mmioXbar.io.out[2].resp.valid <= SimpleBus2AXI4Converter_3.io.in.resp.valid @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_3.io.in.resp.ready <= mmioXbar.io.out[2].resp.ready @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_3.io.in.req.bits.wdata <= mmioXbar.io.out[2].req.bits.wdata @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_3.io.in.req.bits.wmask <= mmioXbar.io.out[2].req.bits.wmask @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_3.io.in.req.bits.cmd <= mmioXbar.io.out[2].req.bits.cmd @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_3.io.in.req.bits.size <= mmioXbar.io.out[2].req.bits.size @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_3.io.in.req.bits.addr <= mmioXbar.io.out[2].req.bits.addr @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_3.io.in.req.valid <= mmioXbar.io.out[2].req.valid @[ToAXI4.scala 205:18]
    mmioXbar.io.out[2].req.ready <= SimpleBus2AXI4Converter_3.io.in.req.ready @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_3.io.out.r.bits.data <= plic.io.in.r.bits.data @[NutShell.scala 121:14]
    SimpleBus2AXI4Converter_3.io.out.r.bits.resp <= plic.io.in.r.bits.resp @[NutShell.scala 121:14]
    SimpleBus2AXI4Converter_3.io.out.r.valid <= plic.io.in.r.valid @[NutShell.scala 121:14]
    plic.io.in.r.ready <= SimpleBus2AXI4Converter_3.io.out.r.ready @[NutShell.scala 121:14]
    plic.io.in.ar.bits.prot <= SimpleBus2AXI4Converter_3.io.out.ar.bits.prot @[NutShell.scala 121:14]
    plic.io.in.ar.bits.addr <= SimpleBus2AXI4Converter_3.io.out.ar.bits.addr @[NutShell.scala 121:14]
    plic.io.in.ar.valid <= SimpleBus2AXI4Converter_3.io.out.ar.valid @[NutShell.scala 121:14]
    SimpleBus2AXI4Converter_3.io.out.ar.ready <= plic.io.in.ar.ready @[NutShell.scala 121:14]
    SimpleBus2AXI4Converter_3.io.out.b.bits.resp <= plic.io.in.b.bits.resp @[NutShell.scala 121:14]
    SimpleBus2AXI4Converter_3.io.out.b.valid <= plic.io.in.b.valid @[NutShell.scala 121:14]
    plic.io.in.b.ready <= SimpleBus2AXI4Converter_3.io.out.b.ready @[NutShell.scala 121:14]
    plic.io.in.w.bits.strb <= SimpleBus2AXI4Converter_3.io.out.w.bits.strb @[NutShell.scala 121:14]
    plic.io.in.w.bits.data <= SimpleBus2AXI4Converter_3.io.out.w.bits.data @[NutShell.scala 121:14]
    plic.io.in.w.valid <= SimpleBus2AXI4Converter_3.io.out.w.valid @[NutShell.scala 121:14]
    SimpleBus2AXI4Converter_3.io.out.w.ready <= plic.io.in.w.ready @[NutShell.scala 121:14]
    plic.io.in.aw.bits.prot <= SimpleBus2AXI4Converter_3.io.out.aw.bits.prot @[NutShell.scala 121:14]
    plic.io.in.aw.bits.addr <= SimpleBus2AXI4Converter_3.io.out.aw.bits.addr @[NutShell.scala 121:14]
    plic.io.in.aw.valid <= SimpleBus2AXI4Converter_3.io.out.aw.valid @[NutShell.scala 121:14]
    SimpleBus2AXI4Converter_3.io.out.aw.ready <= plic.io.in.aw.ready @[NutShell.scala 121:14]
    reg _T_4 : UInt, clock @[NutShell.scala 122:47]
    _T_4 <= io.meip @[NutShell.scala 122:47]
    reg _T_5 : UInt, clock @[NutShell.scala 122:39]
    _T_5 <= _T_4 @[NutShell.scala 122:39]
    plic.io.extra.intrVec <= _T_5 @[NutShell.scala 122:29]
    wire _T_6 : {WBUpc : UInt<39>, WBUvalid : UInt<1>, WBUrfWen : UInt<1>, WBUrfDest : UInt<5>, WBUrfData : UInt<64>, InstrCnt : UInt<64>} @[NutShell.scala 135:38]
    _T_6.InstrCnt <= UInt<64>("h00") @[NutShell.scala 135:38]
    _T_6.WBUrfData <= UInt<64>("h00") @[NutShell.scala 135:38]
    _T_6.WBUrfDest <= UInt<5>("h00") @[NutShell.scala 135:38]
    _T_6.WBUrfWen <= UInt<1>("h00") @[NutShell.scala 135:38]
    _T_6.WBUvalid <= UInt<1>("h00") @[NutShell.scala 135:38]
    _T_6.WBUpc <= UInt<39>("h00") @[NutShell.scala 135:38]
    wire _T_7 : {WBUpc : UInt<39>, WBUvalid : UInt<1>, WBUrfWen : UInt<1>, WBUrfDest : UInt<5>, WBUrfData : UInt<64>, InstrCnt : UInt<64>}
    _T_7.InstrCnt <= _T_6.InstrCnt
    _T_7.WBUrfData <= _T_6.WBUrfData
    _T_7.WBUrfDest <= _T_6.WBUrfDest
    _T_7.WBUrfWen <= _T_6.WBUrfWen
    _T_7.WBUvalid <= _T_6.WBUvalid
    _T_7.WBUpc <= _T_6.WBUpc
    wire _T_8 : UInt<64>
    _T_8 <= UInt<64>("h00")
    io.ila.WBUpc <= _T_8 @[NutShell.scala 132:12]
    wire _T_9 : UInt<64>
    _T_9 <= UInt<64>("h00")
    io.ila.WBUvalid <= _T_9 @[NutShell.scala 132:12]
    wire _T_10 : UInt<64>
    _T_10 <= UInt<64>("h00")
    io.ila.WBUrfWen <= _T_10 @[NutShell.scala 132:12]
    wire _T_11 : UInt<64>
    _T_11 <= UInt<64>("h00")
    io.ila.WBUrfDest <= _T_11 @[NutShell.scala 132:12]
    wire _T_12 : UInt<64>
    _T_12 <= UInt<64>("h00")
    io.ila.WBUrfData <= _T_12 @[NutShell.scala 132:12]
    wire _T_13 : UInt<64>
    _T_13 <= UInt<64>("h00")
    io.ila.InstrCnt <= _T_13 @[NutShell.scala 132:12]
    
  module VGACtrl : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, prot : UInt<3>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, strb : UInt<8>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, prot : UInt<3>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>}}}, extra : {sync : UInt<1>}}
    
    node _T = bits(io.in.w.bits.strb, 0, 0) @[BitUtils.scala 27:29]
    node _T_1 = bits(io.in.w.bits.strb, 1, 1) @[BitUtils.scala 27:29]
    node _T_2 = bits(io.in.w.bits.strb, 2, 2) @[BitUtils.scala 27:29]
    node _T_3 = bits(io.in.w.bits.strb, 3, 3) @[BitUtils.scala 27:29]
    node _T_4 = bits(io.in.w.bits.strb, 4, 4) @[BitUtils.scala 27:29]
    node _T_5 = bits(io.in.w.bits.strb, 5, 5) @[BitUtils.scala 27:29]
    node _T_6 = bits(io.in.w.bits.strb, 6, 6) @[BitUtils.scala 27:29]
    node _T_7 = bits(io.in.w.bits.strb, 7, 7) @[BitUtils.scala 27:29]
    node _T_8 = bits(_T, 0, 0) @[Bitwise.scala 72:15]
    node _T_9 = mux(_T_8, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_10 = bits(_T_1, 0, 0) @[Bitwise.scala 72:15]
    node _T_11 = mux(_T_10, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_12 = bits(_T_2, 0, 0) @[Bitwise.scala 72:15]
    node _T_13 = mux(_T_12, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_14 = bits(_T_3, 0, 0) @[Bitwise.scala 72:15]
    node _T_15 = mux(_T_14, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_16 = bits(_T_4, 0, 0) @[Bitwise.scala 72:15]
    node _T_17 = mux(_T_16, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_18 = bits(_T_5, 0, 0) @[Bitwise.scala 72:15]
    node _T_19 = mux(_T_18, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_20 = bits(_T_6, 0, 0) @[Bitwise.scala 72:15]
    node _T_21 = mux(_T_20, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_22 = bits(_T_7, 0, 0) @[Bitwise.scala 72:15]
    node _T_23 = mux(_T_22, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_24 = cat(_T_11, _T_9) @[Cat.scala 29:58]
    node _T_25 = cat(_T_15, _T_13) @[Cat.scala 29:58]
    node _T_26 = cat(_T_25, _T_24) @[Cat.scala 29:58]
    node _T_27 = cat(_T_19, _T_17) @[Cat.scala 29:58]
    node _T_28 = cat(_T_23, _T_21) @[Cat.scala 29:58]
    node _T_29 = cat(_T_28, _T_27) @[Cat.scala 29:58]
    node fullMask = cat(_T_29, _T_26) @[Cat.scala 29:58]
    wire raddr : UInt @[AXI4Slave.scala 37:19]
    wire ren : UInt<1> @[AXI4Slave.scala 38:17]
    raddr <= io.in.ar.bits.addr @[AXI4Slave.scala 66:13]
    node _T_30 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    node _T_31 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    node _T_32 = and(_T_31, UInt<1>("h01")) @[AXI4Slave.scala 70:56]
    reg r_busy : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[StopWatch.scala 24:20]
    when _T_32 : @[StopWatch.scala 26:19]
      r_busy <= UInt<1>("h00") @[StopWatch.scala 26:23]
      skip @[StopWatch.scala 26:19]
    when _T_30 : @[StopWatch.scala 27:20]
      r_busy <= UInt<1>("h01") @[StopWatch.scala 27:24]
      skip @[StopWatch.scala 27:20]
    node _T_33 = eq(r_busy, UInt<1>("h00")) @[AXI4Slave.scala 71:32]
    node _T_34 = or(io.in.r.ready, _T_33) @[AXI4Slave.scala 71:29]
    io.in.ar.ready <= _T_34 @[AXI4Slave.scala 71:15]
    io.in.r.bits.resp <= UInt<2>("h00") @[AXI4Slave.scala 72:18]
    node _T_35 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    reg _T_36 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[AXI4Slave.scala 73:17]
    _T_36 <= _T_35 @[AXI4Slave.scala 73:17]
    node _T_37 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    node _T_38 = eq(UInt<1>("h01"), UInt<1>("h00")) @[AXI4Slave.scala 73:65]
    node _T_39 = and(_T_37, _T_38) @[AXI4Slave.scala 73:62]
    node _T_40 = or(_T_36, _T_39) @[AXI4Slave.scala 73:46]
    ren <= _T_40 @[AXI4Slave.scala 73:7]
    node _T_41 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    node _T_42 = or(_T_41, r_busy) @[AXI4Slave.scala 74:52]
    node _T_43 = and(ren, _T_42) @[AXI4Slave.scala 74:35]
    node _T_44 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    reg _T_45 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[StopWatch.scala 24:20]
    when _T_44 : @[StopWatch.scala 26:19]
      _T_45 <= UInt<1>("h00") @[StopWatch.scala 26:23]
      skip @[StopWatch.scala 26:19]
    when _T_43 : @[StopWatch.scala 27:20]
      _T_45 <= UInt<1>("h01") @[StopWatch.scala 27:24]
      skip @[StopWatch.scala 27:20]
    io.in.r.valid <= _T_45 @[AXI4Slave.scala 74:14]
    wire waddr : UInt @[AXI4Slave.scala 77:19]
    waddr <= io.in.aw.bits.addr @[AXI4Slave.scala 89:13]
    node _T_46 = and(io.in.aw.ready, io.in.aw.valid) @[Decoupled.scala 40:37]
    node _T_47 = and(io.in.b.ready, io.in.b.valid) @[Decoupled.scala 40:37]
    reg w_busy : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[StopWatch.scala 24:20]
    when _T_47 : @[StopWatch.scala 26:19]
      w_busy <= UInt<1>("h00") @[StopWatch.scala 26:23]
      skip @[StopWatch.scala 26:19]
    when _T_46 : @[StopWatch.scala 27:20]
      w_busy <= UInt<1>("h01") @[StopWatch.scala 27:24]
      skip @[StopWatch.scala 27:20]
    node _T_48 = eq(w_busy, UInt<1>("h00")) @[AXI4Slave.scala 94:18]
    io.in.aw.ready <= _T_48 @[AXI4Slave.scala 94:15]
    node _T_49 = or(io.in.aw.valid, w_busy) @[AXI4Slave.scala 95:30]
    io.in.w.ready <= _T_49 @[AXI4Slave.scala 95:15]
    io.in.b.bits.resp <= UInt<2>("h00") @[AXI4Slave.scala 96:18]
    node _T_50 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 40:37]
    node _T_51 = and(_T_50, UInt<1>("h01")) @[AXI4Slave.scala 97:43]
    node _T_52 = and(io.in.b.ready, io.in.b.valid) @[Decoupled.scala 40:37]
    reg _T_53 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[StopWatch.scala 24:20]
    when _T_52 : @[StopWatch.scala 26:19]
      _T_53 <= UInt<1>("h00") @[StopWatch.scala 26:23]
      skip @[StopWatch.scala 26:19]
    when _T_51 : @[StopWatch.scala 27:20]
      _T_53 <= UInt<1>("h01") @[StopWatch.scala 27:24]
      skip @[StopWatch.scala 27:20]
    io.in.b.valid <= _T_53 @[AXI4Slave.scala 97:14]
    node fbSizeReg = cat(UInt<16>("h0190"), UInt<16>("h012c")) @[Cat.scala 29:58]
    node sync = and(io.in.aw.ready, io.in.aw.valid) @[Decoupled.scala 40:37]
    node _T_54 = bits(raddr, 3, 0) @[AXI4VGA.scala 80:33]
    node _T_55 = bits(waddr, 3, 0) @[AXI4VGA.scala 81:10]
    node _T_56 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 40:37]
    node _T_57 = bits(io.in.w.bits.strb, 0, 0) @[BitUtils.scala 27:29]
    node _T_58 = bits(io.in.w.bits.strb, 1, 1) @[BitUtils.scala 27:29]
    node _T_59 = bits(io.in.w.bits.strb, 2, 2) @[BitUtils.scala 27:29]
    node _T_60 = bits(io.in.w.bits.strb, 3, 3) @[BitUtils.scala 27:29]
    node _T_61 = bits(io.in.w.bits.strb, 4, 4) @[BitUtils.scala 27:29]
    node _T_62 = bits(io.in.w.bits.strb, 5, 5) @[BitUtils.scala 27:29]
    node _T_63 = bits(io.in.w.bits.strb, 6, 6) @[BitUtils.scala 27:29]
    node _T_64 = bits(io.in.w.bits.strb, 7, 7) @[BitUtils.scala 27:29]
    node _T_65 = bits(_T_57, 0, 0) @[Bitwise.scala 72:15]
    node _T_66 = mux(_T_65, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_67 = bits(_T_58, 0, 0) @[Bitwise.scala 72:15]
    node _T_68 = mux(_T_67, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_69 = bits(_T_59, 0, 0) @[Bitwise.scala 72:15]
    node _T_70 = mux(_T_69, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_71 = bits(_T_60, 0, 0) @[Bitwise.scala 72:15]
    node _T_72 = mux(_T_71, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_73 = bits(_T_61, 0, 0) @[Bitwise.scala 72:15]
    node _T_74 = mux(_T_73, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_75 = bits(_T_62, 0, 0) @[Bitwise.scala 72:15]
    node _T_76 = mux(_T_75, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_77 = bits(_T_63, 0, 0) @[Bitwise.scala 72:15]
    node _T_78 = mux(_T_77, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_79 = bits(_T_64, 0, 0) @[Bitwise.scala 72:15]
    node _T_80 = mux(_T_79, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_81 = cat(_T_68, _T_66) @[Cat.scala 29:58]
    node _T_82 = cat(_T_72, _T_70) @[Cat.scala 29:58]
    node _T_83 = cat(_T_82, _T_81) @[Cat.scala 29:58]
    node _T_84 = cat(_T_76, _T_74) @[Cat.scala 29:58]
    node _T_85 = cat(_T_80, _T_78) @[Cat.scala 29:58]
    node _T_86 = cat(_T_85, _T_84) @[Cat.scala 29:58]
    node _T_87 = cat(_T_86, _T_83) @[Cat.scala 29:58]
    node _T_88 = eq(UInt<1>("h00"), _T_54) @[LookupTree.scala 24:34]
    node _T_89 = eq(UInt<3>("h04"), _T_54) @[LookupTree.scala 24:34]
    node _T_90 = mux(_T_88, fbSizeReg, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_91 = mux(_T_89, sync, UInt<1>("h00")) @[Mux.scala 27:72]
    node _T_92 = or(_T_90, _T_91) @[Mux.scala 27:72]
    wire _T_93 : UInt<32> @[Mux.scala 27:72]
    _T_93 <= _T_92 @[Mux.scala 27:72]
    io.in.r.bits.data <= _T_93 @[RegMap.scala 30:11]
    io.extra.sync <= sync @[AXI4VGA.scala 83:21]
    
  module AXI4RAM : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, prot : UInt<3>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, strb : UInt<8>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, prot : UInt<3>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>}}}}
    
    node _T = bits(io.in.w.bits.strb, 0, 0) @[BitUtils.scala 27:29]
    node _T_1 = bits(io.in.w.bits.strb, 1, 1) @[BitUtils.scala 27:29]
    node _T_2 = bits(io.in.w.bits.strb, 2, 2) @[BitUtils.scala 27:29]
    node _T_3 = bits(io.in.w.bits.strb, 3, 3) @[BitUtils.scala 27:29]
    node _T_4 = bits(io.in.w.bits.strb, 4, 4) @[BitUtils.scala 27:29]
    node _T_5 = bits(io.in.w.bits.strb, 5, 5) @[BitUtils.scala 27:29]
    node _T_6 = bits(io.in.w.bits.strb, 6, 6) @[BitUtils.scala 27:29]
    node _T_7 = bits(io.in.w.bits.strb, 7, 7) @[BitUtils.scala 27:29]
    node _T_8 = bits(_T, 0, 0) @[Bitwise.scala 72:15]
    node _T_9 = mux(_T_8, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_10 = bits(_T_1, 0, 0) @[Bitwise.scala 72:15]
    node _T_11 = mux(_T_10, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_12 = bits(_T_2, 0, 0) @[Bitwise.scala 72:15]
    node _T_13 = mux(_T_12, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_14 = bits(_T_3, 0, 0) @[Bitwise.scala 72:15]
    node _T_15 = mux(_T_14, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_16 = bits(_T_4, 0, 0) @[Bitwise.scala 72:15]
    node _T_17 = mux(_T_16, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_18 = bits(_T_5, 0, 0) @[Bitwise.scala 72:15]
    node _T_19 = mux(_T_18, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_20 = bits(_T_6, 0, 0) @[Bitwise.scala 72:15]
    node _T_21 = mux(_T_20, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_22 = bits(_T_7, 0, 0) @[Bitwise.scala 72:15]
    node _T_23 = mux(_T_22, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_24 = cat(_T_11, _T_9) @[Cat.scala 29:58]
    node _T_25 = cat(_T_15, _T_13) @[Cat.scala 29:58]
    node _T_26 = cat(_T_25, _T_24) @[Cat.scala 29:58]
    node _T_27 = cat(_T_19, _T_17) @[Cat.scala 29:58]
    node _T_28 = cat(_T_23, _T_21) @[Cat.scala 29:58]
    node _T_29 = cat(_T_28, _T_27) @[Cat.scala 29:58]
    node fullMask = cat(_T_29, _T_26) @[Cat.scala 29:58]
    wire raddr : UInt @[AXI4Slave.scala 37:19]
    wire ren : UInt<1> @[AXI4Slave.scala 38:17]
    raddr <= io.in.ar.bits.addr @[AXI4Slave.scala 66:13]
    node _T_30 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    node _T_31 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    node _T_32 = and(_T_31, UInt<1>("h01")) @[AXI4Slave.scala 70:56]
    reg r_busy : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[StopWatch.scala 24:20]
    when _T_32 : @[StopWatch.scala 26:19]
      r_busy <= UInt<1>("h00") @[StopWatch.scala 26:23]
      skip @[StopWatch.scala 26:19]
    when _T_30 : @[StopWatch.scala 27:20]
      r_busy <= UInt<1>("h01") @[StopWatch.scala 27:24]
      skip @[StopWatch.scala 27:20]
    node _T_33 = eq(r_busy, UInt<1>("h00")) @[AXI4Slave.scala 71:32]
    node _T_34 = or(io.in.r.ready, _T_33) @[AXI4Slave.scala 71:29]
    io.in.ar.ready <= _T_34 @[AXI4Slave.scala 71:15]
    io.in.r.bits.resp <= UInt<2>("h00") @[AXI4Slave.scala 72:18]
    node _T_35 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    reg _T_36 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[AXI4Slave.scala 73:17]
    _T_36 <= _T_35 @[AXI4Slave.scala 73:17]
    node _T_37 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    node _T_38 = eq(UInt<1>("h01"), UInt<1>("h00")) @[AXI4Slave.scala 73:65]
    node _T_39 = and(_T_37, _T_38) @[AXI4Slave.scala 73:62]
    node _T_40 = or(_T_36, _T_39) @[AXI4Slave.scala 73:46]
    ren <= _T_40 @[AXI4Slave.scala 73:7]
    node _T_41 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    node _T_42 = or(_T_41, r_busy) @[AXI4Slave.scala 74:52]
    node _T_43 = and(ren, _T_42) @[AXI4Slave.scala 74:35]
    node _T_44 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    reg _T_45 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[StopWatch.scala 24:20]
    when _T_44 : @[StopWatch.scala 26:19]
      _T_45 <= UInt<1>("h00") @[StopWatch.scala 26:23]
      skip @[StopWatch.scala 26:19]
    when _T_43 : @[StopWatch.scala 27:20]
      _T_45 <= UInt<1>("h01") @[StopWatch.scala 27:24]
      skip @[StopWatch.scala 27:20]
    io.in.r.valid <= _T_45 @[AXI4Slave.scala 74:14]
    wire waddr : UInt @[AXI4Slave.scala 77:19]
    waddr <= io.in.aw.bits.addr @[AXI4Slave.scala 89:13]
    node _T_46 = and(io.in.aw.ready, io.in.aw.valid) @[Decoupled.scala 40:37]
    node _T_47 = and(io.in.b.ready, io.in.b.valid) @[Decoupled.scala 40:37]
    reg w_busy : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[StopWatch.scala 24:20]
    when _T_47 : @[StopWatch.scala 26:19]
      w_busy <= UInt<1>("h00") @[StopWatch.scala 26:23]
      skip @[StopWatch.scala 26:19]
    when _T_46 : @[StopWatch.scala 27:20]
      w_busy <= UInt<1>("h01") @[StopWatch.scala 27:24]
      skip @[StopWatch.scala 27:20]
    node _T_48 = eq(w_busy, UInt<1>("h00")) @[AXI4Slave.scala 94:18]
    io.in.aw.ready <= _T_48 @[AXI4Slave.scala 94:15]
    node _T_49 = or(io.in.aw.valid, w_busy) @[AXI4Slave.scala 95:30]
    io.in.w.ready <= _T_49 @[AXI4Slave.scala 95:15]
    io.in.b.bits.resp <= UInt<2>("h00") @[AXI4Slave.scala 96:18]
    node _T_50 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 40:37]
    node _T_51 = and(_T_50, UInt<1>("h01")) @[AXI4Slave.scala 97:43]
    node _T_52 = and(io.in.b.ready, io.in.b.valid) @[Decoupled.scala 40:37]
    reg _T_53 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[StopWatch.scala 24:20]
    when _T_52 : @[StopWatch.scala 26:19]
      _T_53 <= UInt<1>("h00") @[StopWatch.scala 26:23]
      skip @[StopWatch.scala 26:19]
    when _T_51 : @[StopWatch.scala 27:20]
      _T_53 <= UInt<1>("h01") @[StopWatch.scala 27:24]
      skip @[StopWatch.scala 27:20]
    io.in.b.valid <= _T_53 @[AXI4Slave.scala 97:14]
    node _T_54 = and(waddr, UInt<19>("h07ffff")) @[AXI4RAM.scala 44:33]
    node _T_55 = shr(_T_54, 3) @[AXI4RAM.scala 44:49]
    node _T_56 = add(_T_55, UInt<1>("h00")) @[AXI4RAM.scala 47:27]
    node wIdx = tail(_T_56, 1) @[AXI4RAM.scala 47:27]
    node _T_57 = and(raddr, UInt<19>("h07ffff")) @[AXI4RAM.scala 44:33]
    node _T_58 = shr(_T_57, 3) @[AXI4RAM.scala 44:49]
    node _T_59 = add(_T_58, UInt<1>("h00")) @[AXI4RAM.scala 48:27]
    node rIdx = tail(_T_59, 1) @[AXI4RAM.scala 48:27]
    node _T_60 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 40:37]
    node _T_61 = lt(wIdx, UInt<16>("h0ea60")) @[AXI4RAM.scala 45:32]
    node wen = and(_T_60, _T_61) @[AXI4RAM.scala 49:25]
    cmem _T_62 : UInt<8>[8][60000] @[AXI4RAM.scala 61:18]
    node _T_63 = bits(io.in.w.bits.data, 7, 0) @[AXI4RAM.scala 63:66]
    node _T_64 = bits(io.in.w.bits.data, 15, 8) @[AXI4RAM.scala 63:66]
    node _T_65 = bits(io.in.w.bits.data, 23, 16) @[AXI4RAM.scala 63:66]
    node _T_66 = bits(io.in.w.bits.data, 31, 24) @[AXI4RAM.scala 63:66]
    node _T_67 = bits(io.in.w.bits.data, 39, 32) @[AXI4RAM.scala 63:66]
    node _T_68 = bits(io.in.w.bits.data, 47, 40) @[AXI4RAM.scala 63:66]
    node _T_69 = bits(io.in.w.bits.data, 55, 48) @[AXI4RAM.scala 63:66]
    node _T_70 = bits(io.in.w.bits.data, 63, 56) @[AXI4RAM.scala 63:66]
    wire _T_71 : UInt<8>[8] @[AXI4RAM.scala 63:45]
    _T_71[0] <= _T_63 @[AXI4RAM.scala 63:45]
    _T_71[1] <= _T_64 @[AXI4RAM.scala 63:45]
    _T_71[2] <= _T_65 @[AXI4RAM.scala 63:45]
    _T_71[3] <= _T_66 @[AXI4RAM.scala 63:45]
    _T_71[4] <= _T_67 @[AXI4RAM.scala 63:45]
    _T_71[5] <= _T_68 @[AXI4RAM.scala 63:45]
    _T_71[6] <= _T_69 @[AXI4RAM.scala 63:45]
    _T_71[7] <= _T_70 @[AXI4RAM.scala 63:45]
    when wen : @[AXI4RAM.scala 64:16]
      node _T_72 = bits(io.in.w.bits.strb, 0, 0) @[AXI4RAM.scala 64:56]
      node _T_73 = bits(io.in.w.bits.strb, 1, 1) @[AXI4RAM.scala 64:56]
      node _T_74 = bits(io.in.w.bits.strb, 2, 2) @[AXI4RAM.scala 64:56]
      node _T_75 = bits(io.in.w.bits.strb, 3, 3) @[AXI4RAM.scala 64:56]
      node _T_76 = bits(io.in.w.bits.strb, 4, 4) @[AXI4RAM.scala 64:56]
      node _T_77 = bits(io.in.w.bits.strb, 5, 5) @[AXI4RAM.scala 64:56]
      node _T_78 = bits(io.in.w.bits.strb, 6, 6) @[AXI4RAM.scala 64:56]
      node _T_79 = bits(io.in.w.bits.strb, 7, 7) @[AXI4RAM.scala 64:56]
      node _T_80 = or(wIdx, UInt<16>("h00"))
      node _T_81 = bits(_T_80, 15, 0)
      write mport _T_82 = _T_62[_T_81], clock
      when _T_72 :
        _T_82[0] <= _T_71[0]
        skip
      when _T_73 :
        _T_82[1] <= _T_71[1]
        skip
      when _T_74 :
        _T_82[2] <= _T_71[2]
        skip
      when _T_75 :
        _T_82[3] <= _T_71[3]
        skip
      when _T_76 :
        _T_82[4] <= _T_71[4]
        skip
      when _T_77 :
        _T_82[5] <= _T_71[5]
        skip
      when _T_78 :
        _T_82[6] <= _T_71[6]
        skip
      when _T_79 :
        _T_82[7] <= _T_71[7]
        skip
      skip @[AXI4RAM.scala 64:16]
    node _T_83 = or(rIdx, UInt<16>("h00")) @[AXI4RAM.scala 66:17]
    node _T_84 = bits(_T_83, 15, 0) @[AXI4RAM.scala 66:17]
    read mport _T_85 = _T_62[_T_84], clock @[AXI4RAM.scala 66:17]
    node _T_86 = cat(_T_85[1], _T_85[0]) @[Cat.scala 29:58]
    node _T_87 = cat(_T_85[3], _T_85[2]) @[Cat.scala 29:58]
    node _T_88 = cat(_T_87, _T_86) @[Cat.scala 29:58]
    node _T_89 = cat(_T_85[5], _T_85[4]) @[Cat.scala 29:58]
    node _T_90 = cat(_T_85[7], _T_85[6]) @[Cat.scala 29:58]
    node _T_91 = cat(_T_90, _T_89) @[Cat.scala 29:58]
    node rdata = cat(_T_91, _T_88) @[Cat.scala 29:58]
    reg _T_92 : UInt<64>, clock @[Reg.scala 15:16]
    when ren : @[Reg.scala 16:19]
      _T_92 <= rdata @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    io.in.r.bits.data <= _T_92 @[AXI4RAM.scala 69:18]
    
  module AXI4VGA : 
    input clock : Clock
    input reset : Reset
    output io : {in : {flip fb : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, prot : UInt<3>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, strb : UInt<8>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, prot : UInt<3>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>}}}, flip ctrl : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, prot : UInt<3>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, strb : UInt<8>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, prot : UInt<3>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>}}}}, vga : {rgb : UInt<24>, hsync : UInt<1>, vsync : UInt<1>, valid : UInt<1>}}
    
    inst ctrl of VGACtrl @[AXI4VGA.scala 125:20]
    ctrl.clock <= clock
    ctrl.reset <= reset
    io.in.ctrl.r.bits.data <= ctrl.io.in.r.bits.data @[AXI4VGA.scala 126:14]
    io.in.ctrl.r.bits.resp <= ctrl.io.in.r.bits.resp @[AXI4VGA.scala 126:14]
    io.in.ctrl.r.valid <= ctrl.io.in.r.valid @[AXI4VGA.scala 126:14]
    ctrl.io.in.r.ready <= io.in.ctrl.r.ready @[AXI4VGA.scala 126:14]
    ctrl.io.in.ar.bits.prot <= io.in.ctrl.ar.bits.prot @[AXI4VGA.scala 126:14]
    ctrl.io.in.ar.bits.addr <= io.in.ctrl.ar.bits.addr @[AXI4VGA.scala 126:14]
    ctrl.io.in.ar.valid <= io.in.ctrl.ar.valid @[AXI4VGA.scala 126:14]
    io.in.ctrl.ar.ready <= ctrl.io.in.ar.ready @[AXI4VGA.scala 126:14]
    io.in.ctrl.b.bits.resp <= ctrl.io.in.b.bits.resp @[AXI4VGA.scala 126:14]
    io.in.ctrl.b.valid <= ctrl.io.in.b.valid @[AXI4VGA.scala 126:14]
    ctrl.io.in.b.ready <= io.in.ctrl.b.ready @[AXI4VGA.scala 126:14]
    ctrl.io.in.w.bits.strb <= io.in.ctrl.w.bits.strb @[AXI4VGA.scala 126:14]
    ctrl.io.in.w.bits.data <= io.in.ctrl.w.bits.data @[AXI4VGA.scala 126:14]
    ctrl.io.in.w.valid <= io.in.ctrl.w.valid @[AXI4VGA.scala 126:14]
    io.in.ctrl.w.ready <= ctrl.io.in.w.ready @[AXI4VGA.scala 126:14]
    ctrl.io.in.aw.bits.prot <= io.in.ctrl.aw.bits.prot @[AXI4VGA.scala 126:14]
    ctrl.io.in.aw.bits.addr <= io.in.ctrl.aw.bits.addr @[AXI4VGA.scala 126:14]
    ctrl.io.in.aw.valid <= io.in.ctrl.aw.valid @[AXI4VGA.scala 126:14]
    io.in.ctrl.aw.ready <= ctrl.io.in.aw.ready @[AXI4VGA.scala 126:14]
    inst fb of AXI4RAM @[AXI4VGA.scala 127:18]
    fb.clock <= clock
    fb.reset <= reset
    fb.io.in.aw.bits.prot <= io.in.fb.aw.bits.prot @[AXI4VGA.scala 130:15]
    fb.io.in.aw.bits.addr <= io.in.fb.aw.bits.addr @[AXI4VGA.scala 130:15]
    fb.io.in.aw.valid <= io.in.fb.aw.valid @[AXI4VGA.scala 130:15]
    io.in.fb.aw.ready <= fb.io.in.aw.ready @[AXI4VGA.scala 130:15]
    fb.io.in.w.bits.strb <= io.in.fb.w.bits.strb @[AXI4VGA.scala 131:14]
    fb.io.in.w.bits.data <= io.in.fb.w.bits.data @[AXI4VGA.scala 131:14]
    fb.io.in.w.valid <= io.in.fb.w.valid @[AXI4VGA.scala 131:14]
    io.in.fb.w.ready <= fb.io.in.w.ready @[AXI4VGA.scala 131:14]
    io.in.fb.b.bits.resp <= fb.io.in.b.bits.resp @[AXI4VGA.scala 132:14]
    io.in.fb.b.valid <= fb.io.in.b.valid @[AXI4VGA.scala 132:14]
    fb.io.in.b.ready <= io.in.fb.b.ready @[AXI4VGA.scala 132:14]
    io.in.fb.ar.ready <= UInt<1>("h01") @[AXI4VGA.scala 133:21]
    io.in.fb.r.bits.data <= UInt<1>("h00") @[AXI4VGA.scala 134:24]
    io.in.fb.r.bits.resp <= UInt<2>("h00") @[AXI4VGA.scala 135:24]
    node _T = and(io.in.fb.ar.ready, io.in.fb.ar.valid) @[Decoupled.scala 40:37]
    node _T_1 = and(io.in.fb.r.ready, io.in.fb.r.valid) @[Decoupled.scala 40:37]
    reg _T_2 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[StopWatch.scala 24:20]
    when _T_1 : @[StopWatch.scala 26:19]
      _T_2 <= UInt<1>("h00") @[StopWatch.scala 26:23]
      skip @[StopWatch.scala 26:19]
    when _T : @[StopWatch.scala 27:20]
      _T_2 <= UInt<1>("h01") @[StopWatch.scala 27:24]
      skip @[StopWatch.scala 27:20]
    io.in.fb.r.valid <= _T_2 @[AXI4VGA.scala 136:20]
    reg hCounter : UInt<11>, clock with : (reset => (reset, UInt<11>("h00"))) @[Counter.scala 29:33]
    wire hFinish : UInt<1>
    hFinish <= UInt<1>("h00")
    when UInt<1>("h01") : @[Counter.scala 67:17]
      node _T_3 = eq(hCounter, UInt<11>("h041f")) @[Counter.scala 38:24]
      node _T_4 = add(hCounter, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_5 = tail(_T_4, 1) @[Counter.scala 39:22]
      hCounter <= _T_5 @[Counter.scala 39:13]
      when _T_3 : @[Counter.scala 41:21]
        hCounter <= UInt<1>("h00") @[Counter.scala 41:29]
        skip @[Counter.scala 41:21]
      hFinish <= _T_3 @[Counter.scala 67:24]
      skip @[Counter.scala 67:17]
    reg vCounter : UInt<10>, clock with : (reset => (reset, UInt<10>("h00"))) @[Counter.scala 29:33]
    wire vFinish : UInt<1>
    vFinish <= UInt<1>("h00")
    when hFinish : @[Counter.scala 67:17]
      node _T_6 = eq(vCounter, UInt<10>("h0273")) @[Counter.scala 38:24]
      node _T_7 = add(vCounter, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_8 = tail(_T_7, 1) @[Counter.scala 39:22]
      vCounter <= _T_8 @[Counter.scala 39:13]
      when _T_6 : @[Counter.scala 41:21]
        vCounter <= UInt<1>("h00") @[Counter.scala 41:29]
        skip @[Counter.scala 41:21]
      vFinish <= _T_6 @[Counter.scala 67:24]
      skip @[Counter.scala 67:17]
    node _T_9 = geq(hCounter, UInt<6>("h028")) @[AXI4VGA.scala 143:28]
    io.vga.hsync <= _T_9 @[AXI4VGA.scala 143:16]
    node _T_10 = geq(vCounter, UInt<1>("h01")) @[AXI4VGA.scala 144:28]
    io.vga.vsync <= _T_10 @[AXI4VGA.scala 144:16]
    node _T_11 = geq(hCounter, UInt<8>("h0a8")) @[AXI4VGA.scala 138:51]
    node _T_12 = lt(hCounter, UInt<10>("h03c8")) @[AXI4VGA.scala 138:69]
    node hInRange = and(_T_11, _T_12) @[AXI4VGA.scala 138:63]
    node _T_13 = geq(vCounter, UInt<3>("h05")) @[AXI4VGA.scala 138:51]
    node _T_14 = lt(vCounter, UInt<10>("h025d")) @[AXI4VGA.scala 138:69]
    node vInRange = and(_T_13, _T_14) @[AXI4VGA.scala 138:63]
    node _T_15 = and(hInRange, vInRange) @[AXI4VGA.scala 148:28]
    io.vga.valid <= _T_15 @[AXI4VGA.scala 148:16]
    node hCounterIsOdd = bits(hCounter, 0, 0) @[AXI4VGA.scala 150:31]
    node _T_16 = bits(hCounter, 1, 0) @[AXI4VGA.scala 151:29]
    node hCounterIs2 = eq(_T_16, UInt<2>("h02")) @[AXI4VGA.scala 151:35]
    node vCounterIsOdd = bits(vCounter, 0, 0) @[AXI4VGA.scala 152:31]
    node _T_17 = geq(hCounter, UInt<8>("h0a7")) @[AXI4VGA.scala 138:51]
    node _T_18 = lt(hCounter, UInt<10>("h03c7")) @[AXI4VGA.scala 138:69]
    node _T_19 = and(_T_17, _T_18) @[AXI4VGA.scala 138:63]
    node _T_20 = and(_T_19, vInRange) @[AXI4VGA.scala 155:66]
    node nextPixel = and(_T_20, hCounterIsOdd) @[AXI4VGA.scala 155:78]
    node _T_21 = eq(vCounterIsOdd, UInt<1>("h00")) @[AXI4VGA.scala 156:44]
    node _T_22 = and(nextPixel, _T_21) @[AXI4VGA.scala 156:41]
    reg fbPixelAddrV0 : UInt<17>, clock with : (reset => (reset, UInt<17>("h00"))) @[Counter.scala 29:33]
    wire _T_23 : UInt<1>
    _T_23 <= UInt<1>("h00")
    when _T_22 : @[Counter.scala 67:17]
      node _T_24 = eq(fbPixelAddrV0, UInt<17>("h01d4bf")) @[Counter.scala 38:24]
      node _T_25 = add(fbPixelAddrV0, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_26 = tail(_T_25, 1) @[Counter.scala 39:22]
      fbPixelAddrV0 <= _T_26 @[Counter.scala 39:13]
      when _T_24 : @[Counter.scala 41:21]
        fbPixelAddrV0 <= UInt<1>("h00") @[Counter.scala 41:29]
        skip @[Counter.scala 41:21]
      _T_23 <= _T_24 @[Counter.scala 67:24]
      skip @[Counter.scala 67:17]
    node _T_27 = and(nextPixel, vCounterIsOdd) @[AXI4VGA.scala 157:41]
    reg fbPixelAddrV1 : UInt<17>, clock with : (reset => (reset, UInt<17>("h00"))) @[Counter.scala 29:33]
    wire _T_28 : UInt<1>
    _T_28 <= UInt<1>("h00")
    when _T_27 : @[Counter.scala 67:17]
      node _T_29 = eq(fbPixelAddrV1, UInt<17>("h01d4bf")) @[Counter.scala 38:24]
      node _T_30 = add(fbPixelAddrV1, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_31 = tail(_T_30, 1) @[Counter.scala 39:22]
      fbPixelAddrV1 <= _T_31 @[Counter.scala 39:13]
      when _T_29 : @[Counter.scala 41:21]
        fbPixelAddrV1 <= UInt<1>("h00") @[Counter.scala 41:29]
        skip @[Counter.scala 41:21]
      _T_28 <= _T_29 @[Counter.scala 67:24]
      skip @[Counter.scala 67:17]
    fb.io.in.ar.bits.prot <= UInt<1>("h00") @[AXI4VGA.scala 160:25]
    node _T_32 = mux(vCounterIsOdd, fbPixelAddrV1, fbPixelAddrV0) @[AXI4VGA.scala 161:35]
    node _T_33 = cat(_T_32, UInt<2>("h00")) @[Cat.scala 29:58]
    fb.io.in.ar.bits.addr <= _T_33 @[AXI4VGA.scala 161:25]
    reg _T_34 : UInt<1>, clock @[AXI4VGA.scala 162:31]
    _T_34 <= nextPixel @[AXI4VGA.scala 162:31]
    node _T_35 = and(_T_34, hCounterIs2) @[AXI4VGA.scala 162:43]
    fb.io.in.ar.valid <= _T_35 @[AXI4VGA.scala 162:21]
    fb.io.in.r.ready <= UInt<1>("h01") @[AXI4VGA.scala 164:20]
    node _T_36 = and(fb.io.in.r.ready, fb.io.in.r.valid) @[Decoupled.scala 40:37]
    wire _T_37 : UInt<64> @[Hold.scala 23:81]
    _T_37 <= UInt<1>("h00") @[Hold.scala 23:81]
    reg _T_38 : UInt, clock with : (reset => (reset, _T_37)) @[Reg.scala 27:20]
    when _T_36 : @[Reg.scala 28:19]
      _T_38 <= fb.io.in.r.bits.data @[Reg.scala 28:23]
      skip @[Reg.scala 28:19]
    node data = mux(_T_36, fb.io.in.r.bits.data, _T_38) @[Hold.scala 23:48]
    node _T_39 = bits(hCounter, 1, 1) @[AXI4VGA.scala 167:32]
    node _T_40 = bits(data, 63, 32) @[AXI4VGA.scala 167:41]
    node _T_41 = bits(data, 31, 0) @[AXI4VGA.scala 167:55]
    node color = mux(_T_39, _T_40, _T_41) @[AXI4VGA.scala 167:23]
    node _T_42 = bits(color, 23, 0) @[AXI4VGA.scala 168:40]
    node _T_43 = mux(io.vga.valid, _T_42, UInt<1>("h00")) @[AXI4VGA.scala 168:20]
    io.vga.rgb <= _T_43 @[AXI4VGA.scala 168:14]
    
  module Top : 
    input clock : Clock
    input reset : UInt<1>
    output io : {}
    
    inst nutshell of NutShell @[TopMain.scala 28:24]
    nutshell.clock <= clock
    nutshell.reset <= reset
    inst vga of AXI4VGA @[TopMain.scala 29:19]
    vga.clock <= clock
    vga.reset <= reset
    nutshell.io.ila.InstrCnt is invalid @[TopMain.scala 31:15]
    nutshell.io.ila.WBUrfData is invalid @[TopMain.scala 31:15]
    nutshell.io.ila.WBUrfDest is invalid @[TopMain.scala 31:15]
    nutshell.io.ila.WBUrfWen is invalid @[TopMain.scala 31:15]
    nutshell.io.ila.WBUvalid is invalid @[TopMain.scala 31:15]
    nutshell.io.ila.WBUpc is invalid @[TopMain.scala 31:15]
    nutshell.io.meip is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.r.bits.user is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.r.bits.id is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.r.bits.last is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.r.bits.data is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.r.bits.resp is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.r.valid is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.r.ready is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.ar.bits.qos is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.ar.bits.cache is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.ar.bits.lock is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.ar.bits.burst is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.ar.bits.size is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.ar.bits.len is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.ar.bits.user is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.ar.bits.id is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.ar.bits.prot is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.ar.bits.addr is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.ar.valid is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.ar.ready is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.b.bits.user is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.b.bits.id is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.b.bits.resp is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.b.valid is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.b.ready is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.w.bits.last is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.w.bits.strb is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.w.bits.data is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.w.valid is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.w.ready is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.aw.bits.qos is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.aw.bits.cache is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.aw.bits.lock is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.aw.bits.burst is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.aw.bits.size is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.aw.bits.len is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.aw.bits.user is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.aw.bits.id is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.aw.bits.prot is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.aw.bits.addr is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.aw.valid is invalid @[TopMain.scala 31:15]
    nutshell.io.frontend.aw.ready is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.r.bits.user is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.r.bits.id is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.r.bits.last is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.r.bits.data is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.r.bits.resp is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.r.valid is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.r.ready is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.ar.bits.qos is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.ar.bits.cache is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.ar.bits.lock is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.ar.bits.burst is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.ar.bits.size is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.ar.bits.len is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.ar.bits.user is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.ar.bits.id is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.ar.bits.prot is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.ar.bits.addr is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.ar.valid is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.ar.ready is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.b.bits.user is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.b.bits.id is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.b.bits.resp is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.b.valid is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.b.ready is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.w.bits.last is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.w.bits.strb is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.w.bits.data is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.w.valid is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.w.ready is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.aw.bits.qos is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.aw.bits.cache is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.aw.bits.lock is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.aw.bits.burst is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.aw.bits.size is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.aw.bits.len is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.aw.bits.user is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.aw.bits.id is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.aw.bits.prot is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.aw.bits.addr is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.aw.valid is invalid @[TopMain.scala 31:15]
    nutshell.io.mmio.aw.ready is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.r.bits.user is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.r.bits.id is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.r.bits.last is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.r.bits.data is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.r.bits.resp is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.r.valid is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.r.ready is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.ar.bits.qos is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.ar.bits.cache is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.ar.bits.lock is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.ar.bits.burst is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.ar.bits.size is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.ar.bits.len is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.ar.bits.user is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.ar.bits.id is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.ar.bits.prot is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.ar.bits.addr is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.ar.valid is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.ar.ready is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.b.bits.user is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.b.bits.id is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.b.bits.resp is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.b.valid is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.b.ready is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.w.bits.last is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.w.bits.strb is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.w.bits.data is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.w.valid is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.w.ready is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.aw.bits.qos is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.aw.bits.cache is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.aw.bits.lock is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.aw.bits.burst is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.aw.bits.size is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.aw.bits.len is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.aw.bits.user is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.aw.bits.id is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.aw.bits.prot is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.aw.bits.addr is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.aw.valid is invalid @[TopMain.scala 31:15]
    nutshell.io.mem.aw.ready is invalid @[TopMain.scala 31:15]
    vga.io.vga.valid is invalid @[TopMain.scala 32:10]
    vga.io.vga.vsync is invalid @[TopMain.scala 32:10]
    vga.io.vga.hsync is invalid @[TopMain.scala 32:10]
    vga.io.vga.rgb is invalid @[TopMain.scala 32:10]
    vga.io.in.ctrl.r.bits.data is invalid @[TopMain.scala 32:10]
    vga.io.in.ctrl.r.bits.resp is invalid @[TopMain.scala 32:10]
    vga.io.in.ctrl.r.valid is invalid @[TopMain.scala 32:10]
    vga.io.in.ctrl.r.ready is invalid @[TopMain.scala 32:10]
    vga.io.in.ctrl.ar.bits.prot is invalid @[TopMain.scala 32:10]
    vga.io.in.ctrl.ar.bits.addr is invalid @[TopMain.scala 32:10]
    vga.io.in.ctrl.ar.valid is invalid @[TopMain.scala 32:10]
    vga.io.in.ctrl.ar.ready is invalid @[TopMain.scala 32:10]
    vga.io.in.ctrl.b.bits.resp is invalid @[TopMain.scala 32:10]
    vga.io.in.ctrl.b.valid is invalid @[TopMain.scala 32:10]
    vga.io.in.ctrl.b.ready is invalid @[TopMain.scala 32:10]
    vga.io.in.ctrl.w.bits.strb is invalid @[TopMain.scala 32:10]
    vga.io.in.ctrl.w.bits.data is invalid @[TopMain.scala 32:10]
    vga.io.in.ctrl.w.valid is invalid @[TopMain.scala 32:10]
    vga.io.in.ctrl.w.ready is invalid @[TopMain.scala 32:10]
    vga.io.in.ctrl.aw.bits.prot is invalid @[TopMain.scala 32:10]
    vga.io.in.ctrl.aw.bits.addr is invalid @[TopMain.scala 32:10]
    vga.io.in.ctrl.aw.valid is invalid @[TopMain.scala 32:10]
    vga.io.in.ctrl.aw.ready is invalid @[TopMain.scala 32:10]
    vga.io.in.fb.r.bits.data is invalid @[TopMain.scala 32:10]
    vga.io.in.fb.r.bits.resp is invalid @[TopMain.scala 32:10]
    vga.io.in.fb.r.valid is invalid @[TopMain.scala 32:10]
    vga.io.in.fb.r.ready is invalid @[TopMain.scala 32:10]
    vga.io.in.fb.ar.bits.prot is invalid @[TopMain.scala 32:10]
    vga.io.in.fb.ar.bits.addr is invalid @[TopMain.scala 32:10]
    vga.io.in.fb.ar.valid is invalid @[TopMain.scala 32:10]
    vga.io.in.fb.ar.ready is invalid @[TopMain.scala 32:10]
    vga.io.in.fb.b.bits.resp is invalid @[TopMain.scala 32:10]
    vga.io.in.fb.b.valid is invalid @[TopMain.scala 32:10]
    vga.io.in.fb.b.ready is invalid @[TopMain.scala 32:10]
    vga.io.in.fb.w.bits.strb is invalid @[TopMain.scala 32:10]
    vga.io.in.fb.w.bits.data is invalid @[TopMain.scala 32:10]
    vga.io.in.fb.w.valid is invalid @[TopMain.scala 32:10]
    vga.io.in.fb.w.ready is invalid @[TopMain.scala 32:10]
    vga.io.in.fb.aw.bits.prot is invalid @[TopMain.scala 32:10]
    vga.io.in.fb.aw.bits.addr is invalid @[TopMain.scala 32:10]
    vga.io.in.fb.aw.valid is invalid @[TopMain.scala 32:10]
    vga.io.in.fb.aw.ready is invalid @[TopMain.scala 32:10]
    
